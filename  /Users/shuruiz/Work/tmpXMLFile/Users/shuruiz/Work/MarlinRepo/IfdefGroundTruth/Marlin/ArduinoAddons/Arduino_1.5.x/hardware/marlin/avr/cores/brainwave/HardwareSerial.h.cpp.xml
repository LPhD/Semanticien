<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/cores/brainwave/HardwareSerial.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  HardwareSerial.h - Hardware serial library for Wiring
  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Modified 28 September 2010 by Mark Sproul
*/</comment>

<cpp:ifndef PREFIX:line="22" PREFIX:column="1">#<cpp:directive PREFIX:line="22" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="22" PREFIX:column="9">HardwareSerial_h</name></cpp:ifndef>
<cpp:define PREFIX:line="23" PREFIX:column="1">#<cpp:directive PREFIX:line="23" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="23" PREFIX:column="9">HardwareSerial_h</name></cpp:macro></cpp:define>

<cpp:include PREFIX:line="25" PREFIX:column="1">#<cpp:directive PREFIX:line="25" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="25" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="10">"Stream.h"</cpp:file></cpp:include>

<struct_decl PREFIX:line="29" PREFIX:column="1">struct <name PREFIX:line="29" PREFIX:column="8">ring_buffer</name>;</struct_decl>

<class PREFIX:line="31" PREFIX:column="1">class <name PREFIX:line="31" PREFIX:column="7">HardwareSerial</name> <super PREFIX:line="31" PREFIX:column="22">: <specifier PREFIX:line="31" PREFIX:column="24">public</specifier> <name PREFIX:line="31" PREFIX:column="31">Stream</name></super>
<block PREFIX:line="32" PREFIX:column="1">{<private type="default" PREFIX:line="32" PREFIX:column="2">
  </private><private PREFIX:line="33" PREFIX:column="3">private:
    <decl_stmt><decl><type><name PREFIX:line="34" PREFIX:column="5">ring_buffer</name> *</type><name PREFIX:line="34" PREFIX:column="18">_rx_buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="35" PREFIX:column="5">ring_buffer</name> *</type><name PREFIX:line="35" PREFIX:column="18">_tx_buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="36" PREFIX:column="5">volatile</specifier> <name PREFIX:line="36" PREFIX:column="14">uint8_t</name> *</type><name PREFIX:line="36" PREFIX:column="23">_ubrrh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="37" PREFIX:column="5">volatile</specifier> <name PREFIX:line="37" PREFIX:column="14">uint8_t</name> *</type><name PREFIX:line="37" PREFIX:column="23">_ubrrl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="38" PREFIX:column="5">volatile</specifier> <name PREFIX:line="38" PREFIX:column="14">uint8_t</name> *</type><name PREFIX:line="38" PREFIX:column="23">_ucsra</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="39" PREFIX:column="5">volatile</specifier> <name PREFIX:line="39" PREFIX:column="14">uint8_t</name> *</type><name PREFIX:line="39" PREFIX:column="23">_ucsrb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="40" PREFIX:column="5">volatile</specifier> <name PREFIX:line="40" PREFIX:column="14">uint8_t</name> *</type><name PREFIX:line="40" PREFIX:column="23">_udr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="41" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="41" PREFIX:column="13">_rxen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="42" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="42" PREFIX:column="13">_txen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="43" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="43" PREFIX:column="13">_rxcie</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="44" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="44" PREFIX:column="13">_udrie</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="45" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="45" PREFIX:column="13">_u2x</name></decl>;</decl_stmt>
  </private><public PREFIX:line="46" PREFIX:column="3">public:
    <constructor_decl><name PREFIX:line="47" PREFIX:column="5">HardwareSerial</name><parameter_list PREFIX:line="47" PREFIX:column="19">(<param><decl><type><name PREFIX:line="47" PREFIX:column="20">ring_buffer</name> *</type><name PREFIX:line="47" PREFIX:column="33">rx_buffer</name></decl></param>, <param><decl><type><name PREFIX:line="47" PREFIX:column="44">ring_buffer</name> *</type><name PREFIX:line="47" PREFIX:column="57">tx_buffer</name></decl></param>,
      <param><decl><type><specifier PREFIX:line="48" PREFIX:column="7">volatile</specifier> <name PREFIX:line="48" PREFIX:column="16">uint8_t</name> *</type><name PREFIX:line="48" PREFIX:column="25">ubrrh</name></decl></param>, <param><decl><type><specifier PREFIX:line="48" PREFIX:column="32">volatile</specifier> <name PREFIX:line="48" PREFIX:column="41">uint8_t</name> *</type><name PREFIX:line="48" PREFIX:column="50">ubrrl</name></decl></param>,
      <param><decl><type><specifier PREFIX:line="49" PREFIX:column="7">volatile</specifier> <name PREFIX:line="49" PREFIX:column="16">uint8_t</name> *</type><name PREFIX:line="49" PREFIX:column="25">ucsra</name></decl></param>, <param><decl><type><specifier PREFIX:line="49" PREFIX:column="32">volatile</specifier> <name PREFIX:line="49" PREFIX:column="41">uint8_t</name> *</type><name PREFIX:line="49" PREFIX:column="50">ucsrb</name></decl></param>,
      <param><decl><type><specifier PREFIX:line="50" PREFIX:column="7">volatile</specifier> <name PREFIX:line="50" PREFIX:column="16">uint8_t</name> *</type><name PREFIX:line="50" PREFIX:column="25">udr</name></decl></param>,
      <param><decl><type><name PREFIX:line="51" PREFIX:column="7">uint8_t</name></type> <name PREFIX:line="51" PREFIX:column="15">rxen</name></decl></param>, <param><decl><type><name PREFIX:line="51" PREFIX:column="21">uint8_t</name></type> <name PREFIX:line="51" PREFIX:column="29">txen</name></decl></param>, <param><decl><type><name PREFIX:line="51" PREFIX:column="35">uint8_t</name></type> <name PREFIX:line="51" PREFIX:column="43">rxcie</name></decl></param>, <param><decl><type><name PREFIX:line="51" PREFIX:column="50">uint8_t</name></type> <name PREFIX:line="51" PREFIX:column="58">udrie</name></decl></param>, <param><decl><type><name PREFIX:line="51" PREFIX:column="65">uint8_t</name></type> <name PREFIX:line="51" PREFIX:column="73">u2x</name></decl></param>)</parameter_list>;</constructor_decl>
    <function_decl><type><name PREFIX:line="52" PREFIX:column="5">void</name></type> <name PREFIX:line="52" PREFIX:column="10">begin</name><parameter_list PREFIX:line="52" PREFIX:column="15">(<param><decl><type><name PREFIX:line="52" PREFIX:column="16">unknowntype</name></type> <name PREFIX:line="52" PREFIX:column="28">long</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="53" PREFIX:column="5">void</name></type> <name PREFIX:line="53" PREFIX:column="10">end</name><parameter_list PREFIX:line="53" PREFIX:column="13">()</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="54" PREFIX:column="5">virtual</specifier> <name PREFIX:line="54" PREFIX:column="13">int</name></type> <name PREFIX:line="54" PREFIX:column="17">available</name><parameter_list PREFIX:line="54" PREFIX:column="26">(<param><decl><type><name PREFIX:line="54" PREFIX:column="27">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="55" PREFIX:column="5">virtual</specifier> <name PREFIX:line="55" PREFIX:column="13">int</name></type> <name PREFIX:line="55" PREFIX:column="17">peek</name><parameter_list PREFIX:line="55" PREFIX:column="21">(<param><decl><type><name PREFIX:line="55" PREFIX:column="22">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="56" PREFIX:column="5">virtual</specifier> <name PREFIX:line="56" PREFIX:column="13">int</name></type> <name PREFIX:line="56" PREFIX:column="17">read</name><parameter_list PREFIX:line="56" PREFIX:column="21">(<param><decl><type><name PREFIX:line="56" PREFIX:column="22">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="57" PREFIX:column="5">virtual</specifier> <name PREFIX:line="57" PREFIX:column="13">void</name></type> <name PREFIX:line="57" PREFIX:column="18">flush</name><parameter_list PREFIX:line="57" PREFIX:column="23">(<param><decl><type><name PREFIX:line="57" PREFIX:column="24">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="58" PREFIX:column="5">virtual</specifier> <name PREFIX:line="58" PREFIX:column="13">size_t</name></type> <name PREFIX:line="58" PREFIX:column="20">write</name><parameter_list PREFIX:line="58" PREFIX:column="25">(<param><decl><type><name PREFIX:line="58" PREFIX:column="26">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
    <using PREFIX:line="59" PREFIX:column="5">using <name><name PREFIX:line="59" PREFIX:column="11">Print</name>::<name PREFIX:line="59" PREFIX:column="18">write</name></name>;</using> <comment type="line" PREFIX:line="59" PREFIX:column="25">// pull in write(str) and write(buf, size) from Print</comment>
    <function_decl><name PREFIX:line="60" PREFIX:column="5">operator bool</name><parameter_list PREFIX:line="60" PREFIX:column="18">()</parameter_list>;</function_decl>
</public>}</block>;</class>

<cpp:if PREFIX:line="63" PREFIX:column="1">#<cpp:directive PREFIX:line="63" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="63" PREFIX:column="5">defined</name><argument_list PREFIX:line="63" PREFIX:column="12">(<argument><expr><name PREFIX:line="63" PREFIX:column="13">UBRRH</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="63" PREFIX:column="23">defined</name><argument_list PREFIX:line="63" PREFIX:column="30">(<argument><expr><name PREFIX:line="63" PREFIX:column="31">UBRR0H</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <decl_stmt><decl><type><name PREFIX:line="64" PREFIX:column="4">HardwareSerial</name></type> <name PREFIX:line="64" PREFIX:column="19">Serial</name></decl>;</decl_stmt>
<cpp:elif PREFIX:line="65" PREFIX:column="1">#<cpp:directive PREFIX:line="65" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="65" PREFIX:column="7">defined</name><argument_list PREFIX:line="65" PREFIX:column="14">(<argument><expr><name PREFIX:line="65" PREFIX:column="15">USBCON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <cpp:include PREFIX:line="66" PREFIX:column="3">#<cpp:directive PREFIX:line="66" PREFIX:column="4">include</cpp:directive> <cpp:file PREFIX:line="66" PREFIX:column="12">"USBAPI.h"</cpp:file></cpp:include>
<comment type="line" PREFIX:line="67" PREFIX:column="1">//   HardwareSerial Serial_;  </comment>
<cpp:endif PREFIX:line="68" PREFIX:column="1">#<cpp:directive PREFIX:line="68" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="69" PREFIX:column="5">defined</name><argument_list PREFIX:line="69" PREFIX:column="12">(<argument><expr><name PREFIX:line="69" PREFIX:column="13">UBRR1H</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <decl_stmt><decl><type><name PREFIX:line="70" PREFIX:column="4">HardwareSerial</name></type> <name PREFIX:line="70" PREFIX:column="19">Serial1</name></decl>;</decl_stmt>
<cpp:endif PREFIX:line="71" PREFIX:column="1">#<cpp:directive PREFIX:line="71" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="72" PREFIX:column="1">#<cpp:directive PREFIX:line="72" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="72" PREFIX:column="5">defined</name><argument_list PREFIX:line="72" PREFIX:column="12">(<argument><expr><name PREFIX:line="72" PREFIX:column="13">UBRR2H</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <decl_stmt><decl><type><name PREFIX:line="73" PREFIX:column="4">HardwareSerial</name></type> <name PREFIX:line="73" PREFIX:column="19">Serial2</name></decl>;</decl_stmt>
<cpp:endif PREFIX:line="74" PREFIX:column="1">#<cpp:directive PREFIX:line="74" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="75" PREFIX:column="1">#<cpp:directive PREFIX:line="75" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="75" PREFIX:column="5">defined</name><argument_list PREFIX:line="75" PREFIX:column="12">(<argument><expr><name PREFIX:line="75" PREFIX:column="13">UBRR3H</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <decl_stmt><decl><type><name PREFIX:line="76" PREFIX:column="4">HardwareSerial</name></type> <name PREFIX:line="76" PREFIX:column="19">Serial3</name></decl>;</decl_stmt>
<cpp:endif PREFIX:line="77" PREFIX:column="1">#<cpp:directive PREFIX:line="77" PREFIX:column="2">endif</cpp:directive></cpp:endif>

 <decl_stmt><decl><type><name PREFIX:line="79" PREFIX:column="2">void</name></type> <name PREFIX:line="79" PREFIX:column="7">serialEventRun</name><argument_list PREFIX:line="79" PREFIX:column="21">(<argument><expr><name PREFIX:line="79" PREFIX:column="22">void</name></expr></argument>)</argument_list> <name PREFIX:line="79" PREFIX:column="28">__attribute__</name><argument_list PREFIX:line="79" PREFIX:column="41">(<argument><expr PREFIX:line="79" PREFIX:column="42">(<name PREFIX:line="79" PREFIX:column="43">weak</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif PREFIX:line="81" PREFIX:column="1">#<cpp:directive PREFIX:line="81" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
