<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/arduino/HardwareSerial_private.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  HardwareSerial_private.h - Hardware serial library for Wiring
  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Modified 23 November 2006 by David A. Mellis
  Modified 28 September 2010 by Mark Sproul
  Modified 14 August 2012 by Alarus
*/</comment>

<cpp:include PREFIX:line="24" PREFIX:column="1">#<cpp:directive PREFIX:line="24" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="24" PREFIX:column="10">"wiring_private.h"</cpp:file></cpp:include>

<comment type="line" PREFIX:line="26" PREFIX:column="1">// this next line disables the entire HardwareSerial.cpp, </comment>
<comment type="line" PREFIX:line="27" PREFIX:column="1">// this is so I can support Attiny series and any other chip without a uart</comment>
<cpp:if PREFIX:line="28" PREFIX:column="1">#<cpp:directive PREFIX:line="28" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="28" PREFIX:column="5">defined</name><argument_list PREFIX:line="28" PREFIX:column="12">(<argument><expr><name PREFIX:line="28" PREFIX:column="13">HAVE_HWSERIAL0</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="28" PREFIX:column="32">defined</name><argument_list PREFIX:line="28" PREFIX:column="39">(<argument><expr><name PREFIX:line="28" PREFIX:column="40">HAVE_HWSERIAL1</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="28" PREFIX:column="59">defined</name><argument_list PREFIX:line="28" PREFIX:column="66">(<argument><expr><name PREFIX:line="28" PREFIX:column="67">HAVE_HWSERIAL2</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="28" PREFIX:column="86">defined</name><argument_list PREFIX:line="28" PREFIX:column="93">(<argument><expr><name PREFIX:line="28" PREFIX:column="94">HAVE_HWSERIAL3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="line" PREFIX:line="30" PREFIX:column="1">// Ensure that the various bit positions we use are available with a 0</comment>
<comment type="line" PREFIX:line="31" PREFIX:column="1">// postfix, so we can always use the values for UART0 for all UARTs. The</comment>
<comment type="line" PREFIX:line="32" PREFIX:column="1">// alternative, passing the various values for each UART to the</comment>
<comment type="line" PREFIX:line="33" PREFIX:column="1">// HardwareSerial ructor also works, but makes the code bigger and</comment>
<comment type="line" PREFIX:line="34" PREFIX:column="1">// slower.</comment>
<cpp:if PREFIX:line="35" PREFIX:column="1">#<cpp:directive PREFIX:line="35" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="35" PREFIX:column="5">!<call><name PREFIX:line="35" PREFIX:column="6">defined</name><argument_list PREFIX:line="35" PREFIX:column="13">(<argument><expr><name PREFIX:line="35" PREFIX:column="14">TXC0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if PREFIX:line="36" PREFIX:column="1">#<cpp:directive PREFIX:line="36" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="36" PREFIX:column="5">defined</name><argument_list PREFIX:line="36" PREFIX:column="12">(<argument><expr><name PREFIX:line="36" PREFIX:column="13">TXC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line" PREFIX:line="37" PREFIX:column="1">// Some chips like ATmega8 don't have UPE, only PE. The other bits are</comment>
<comment type="line" PREFIX:line="38" PREFIX:column="1">// named as expected.</comment>
<cpp:if PREFIX:line="39" PREFIX:column="1">#<cpp:directive PREFIX:line="39" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="39" PREFIX:column="5">!<call><name PREFIX:line="39" PREFIX:column="6">defined</name><argument_list PREFIX:line="39" PREFIX:column="13">(<argument><expr><name PREFIX:line="39" PREFIX:column="14">UPE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="39" PREFIX:column="22">defined</name><argument_list PREFIX:line="39" PREFIX:column="29">(<argument><expr><name PREFIX:line="39" PREFIX:column="30">PE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="40" PREFIX:column="1">#<cpp:directive PREFIX:line="40" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="40" PREFIX:column="9">UPE</name></cpp:macro> <cpp:value PREFIX:line="40" PREFIX:column="13">PE</cpp:value></cpp:define>
<cpp:endif PREFIX:line="41" PREFIX:column="1">#<cpp:directive PREFIX:line="41" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<comment type="line" PREFIX:line="42" PREFIX:column="1">// On ATmega8, the uart and its bits are not numbered, so there is no TXC0 etc.</comment>
<cpp:define PREFIX:line="43" PREFIX:column="1">#<cpp:directive PREFIX:line="43" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="43" PREFIX:column="9">TXC0</name></cpp:macro> <cpp:value PREFIX:line="43" PREFIX:column="14">TXC</cpp:value></cpp:define>
<cpp:define PREFIX:line="44" PREFIX:column="1">#<cpp:directive PREFIX:line="44" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="44" PREFIX:column="9">RXEN0</name></cpp:macro> <cpp:value PREFIX:line="44" PREFIX:column="15">RXEN</cpp:value></cpp:define>
<cpp:define PREFIX:line="45" PREFIX:column="1">#<cpp:directive PREFIX:line="45" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="45" PREFIX:column="9">TXEN0</name></cpp:macro> <cpp:value PREFIX:line="45" PREFIX:column="15">TXEN</cpp:value></cpp:define>
<cpp:define PREFIX:line="46" PREFIX:column="1">#<cpp:directive PREFIX:line="46" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="46" PREFIX:column="9">RXCIE0</name></cpp:macro> <cpp:value PREFIX:line="46" PREFIX:column="16">RXCIE</cpp:value></cpp:define>
<cpp:define PREFIX:line="47" PREFIX:column="1">#<cpp:directive PREFIX:line="47" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="47" PREFIX:column="9">UDRIE0</name></cpp:macro> <cpp:value PREFIX:line="47" PREFIX:column="16">UDRIE</cpp:value></cpp:define>
<cpp:define PREFIX:line="48" PREFIX:column="1">#<cpp:directive PREFIX:line="48" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="48" PREFIX:column="9">U2X0</name></cpp:macro> <cpp:value PREFIX:line="48" PREFIX:column="14">U2X</cpp:value></cpp:define>
<cpp:define PREFIX:line="49" PREFIX:column="1">#<cpp:directive PREFIX:line="49" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="49" PREFIX:column="9">UPE0</name></cpp:macro> <cpp:value PREFIX:line="49" PREFIX:column="14">UPE</cpp:value></cpp:define>
<cpp:define PREFIX:line="50" PREFIX:column="1">#<cpp:directive PREFIX:line="50" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="50" PREFIX:column="9">UDRE0</name></cpp:macro> <cpp:value PREFIX:line="50" PREFIX:column="15">UDRE</cpp:value></cpp:define>
<cpp:elif PREFIX:line="51" PREFIX:column="1">#<cpp:directive PREFIX:line="51" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="51" PREFIX:column="7">defined</name><argument_list PREFIX:line="51" PREFIX:column="14">(<argument><expr><name PREFIX:line="51" PREFIX:column="15">TXC1</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<comment type="line" PREFIX:line="52" PREFIX:column="1">// Some devices have uart1 but no uart0</comment>
<cpp:define PREFIX:line="53" PREFIX:column="1">#<cpp:directive PREFIX:line="53" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="53" PREFIX:column="9">TXC0</name></cpp:macro> <cpp:value PREFIX:line="53" PREFIX:column="14">TXC1</cpp:value></cpp:define>
<cpp:define PREFIX:line="54" PREFIX:column="1">#<cpp:directive PREFIX:line="54" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="54" PREFIX:column="9">RXEN0</name></cpp:macro> <cpp:value PREFIX:line="54" PREFIX:column="15">RXEN1</cpp:value></cpp:define>
<cpp:define PREFIX:line="55" PREFIX:column="1">#<cpp:directive PREFIX:line="55" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="55" PREFIX:column="9">TXEN0</name></cpp:macro> <cpp:value PREFIX:line="55" PREFIX:column="15">TXEN1</cpp:value></cpp:define>
<cpp:define PREFIX:line="56" PREFIX:column="1">#<cpp:directive PREFIX:line="56" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="56" PREFIX:column="9">RXCIE0</name></cpp:macro> <cpp:value PREFIX:line="56" PREFIX:column="16">RXCIE1</cpp:value></cpp:define>
<cpp:define PREFIX:line="57" PREFIX:column="1">#<cpp:directive PREFIX:line="57" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="57" PREFIX:column="9">UDRIE0</name></cpp:macro> <cpp:value PREFIX:line="57" PREFIX:column="16">UDRIE1</cpp:value></cpp:define>
<cpp:define PREFIX:line="58" PREFIX:column="1">#<cpp:directive PREFIX:line="58" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="58" PREFIX:column="9">U2X0</name></cpp:macro> <cpp:value PREFIX:line="58" PREFIX:column="14">U2X1</cpp:value></cpp:define>
<cpp:define PREFIX:line="59" PREFIX:column="1">#<cpp:directive PREFIX:line="59" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="59" PREFIX:column="9">UPE0</name></cpp:macro> <cpp:value PREFIX:line="59" PREFIX:column="14">UPE1</cpp:value></cpp:define>
<cpp:define PREFIX:line="60" PREFIX:column="1">#<cpp:directive PREFIX:line="60" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="60" PREFIX:column="9">UDRE0</name></cpp:macro> <cpp:value PREFIX:line="60" PREFIX:column="15">UDRE1</cpp:value></cpp:define>
<cpp:else PREFIX:line="61" PREFIX:column="1">#<cpp:directive PREFIX:line="61" PREFIX:column="2">else</cpp:directive></cpp:else>
<cpp:error PREFIX:line="62" PREFIX:column="1">#<cpp:directive PREFIX:line="62" PREFIX:column="2">error</cpp:directive> No UART found in HardwareSerial.cpp</cpp:error>
<cpp:endif PREFIX:line="63" PREFIX:column="1">#<cpp:directive PREFIX:line="63" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif PREFIX:line="64" PREFIX:column="1">#<cpp:directive PREFIX:line="64" PREFIX:column="2">endif</cpp:directive></cpp:endif> <comment type="line" PREFIX:line="64" PREFIX:column="8">// !defined TXC0</comment>

<comment type="line" PREFIX:line="66" PREFIX:column="1">// Check at compiletime that it is really ok to use the bit positions of</comment>
<comment type="line" PREFIX:line="67" PREFIX:column="1">// UART0 for the other UARTs as well, in case these values ever get</comment>
<comment type="line" PREFIX:line="68" PREFIX:column="1">// changed for future hardware.</comment>
<cpp:if PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="69" PREFIX:column="5">defined</name><argument_list PREFIX:line="69" PREFIX:column="12">(<argument><expr><name PREFIX:line="69" PREFIX:column="13">TXC1</name></expr></argument>)</argument_list></call> &amp;&amp; (<name PREFIX:line="69" PREFIX:column="23">TXC1</name> != <name PREFIX:line="69" PREFIX:column="31">TXC0</name> || <name PREFIX:line="69" PREFIX:column="39">RXEN1</name> != <name PREFIX:line="69" PREFIX:column="48">RXEN0</name> || <name PREFIX:line="69" PREFIX:column="57">RXCIE1</name> != <name PREFIX:line="69" PREFIX:column="67">RXCIE0</name> || \
		      <name PREFIX:line="70" PREFIX:column="23">UDRIE1</name> != <name PREFIX:line="70" PREFIX:column="33">UDRIE0</name> || <name PREFIX:line="70" PREFIX:column="43">U2X1</name> != <name PREFIX:line="70" PREFIX:column="51">U2X0</name> || <name PREFIX:line="70" PREFIX:column="59">UPE1</name> != <name PREFIX:line="70" PREFIX:column="67">UPE0</name> || \
		      <name PREFIX:line="71" PREFIX:column="23">UDRE1</name> != <name PREFIX:line="71" PREFIX:column="32">UDRE0</name>)</expr></cpp:if>
<cpp:error PREFIX:line="72" PREFIX:column="1">#<cpp:directive PREFIX:line="72" PREFIX:column="2">error</cpp:directive> "Not all bit positions for UART1 are the same as for UART0"</cpp:error>
<cpp:endif PREFIX:line="73" PREFIX:column="1">#<cpp:directive PREFIX:line="73" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="74" PREFIX:column="1">#<cpp:directive PREFIX:line="74" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="74" PREFIX:column="5">defined</name><argument_list PREFIX:line="74" PREFIX:column="12">(<argument><expr><name PREFIX:line="74" PREFIX:column="13">TXC2</name></expr></argument>)</argument_list></call> &amp;&amp; (<name PREFIX:line="74" PREFIX:column="23">TXC2</name> != <name PREFIX:line="74" PREFIX:column="31">TXC0</name> || <name PREFIX:line="74" PREFIX:column="39">RXEN2</name> != <name PREFIX:line="74" PREFIX:column="48">RXEN0</name> || <name PREFIX:line="74" PREFIX:column="57">RXCIE2</name> != <name PREFIX:line="74" PREFIX:column="67">RXCIE0</name> || \
		      <name PREFIX:line="75" PREFIX:column="23">UDRIE2</name> != <name PREFIX:line="75" PREFIX:column="33">UDRIE0</name> || <name PREFIX:line="75" PREFIX:column="43">U2X2</name> != <name PREFIX:line="75" PREFIX:column="51">U2X0</name> || <name PREFIX:line="75" PREFIX:column="59">UPE2</name> != <name PREFIX:line="75" PREFIX:column="67">UPE0</name> || \
		      <name PREFIX:line="76" PREFIX:column="23">UDRE2</name> != <name PREFIX:line="76" PREFIX:column="32">UDRE0</name>)</expr></cpp:if>
<cpp:error PREFIX:line="77" PREFIX:column="1">#<cpp:directive PREFIX:line="77" PREFIX:column="2">error</cpp:directive> "Not all bit positions for UART2 are the same as for UART0"</cpp:error>
<cpp:endif PREFIX:line="78" PREFIX:column="1">#<cpp:directive PREFIX:line="78" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="79" PREFIX:column="1">#<cpp:directive PREFIX:line="79" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="79" PREFIX:column="5">defined</name><argument_list PREFIX:line="79" PREFIX:column="12">(<argument><expr><name PREFIX:line="79" PREFIX:column="13">TXC3</name></expr></argument>)</argument_list></call> &amp;&amp; (<name PREFIX:line="79" PREFIX:column="23">TXC3</name> != <name PREFIX:line="79" PREFIX:column="31">TXC0</name> || <name PREFIX:line="79" PREFIX:column="39">RXEN3</name> != <name PREFIX:line="79" PREFIX:column="48">RXEN0</name> || <name PREFIX:line="79" PREFIX:column="57">RXCIE3</name> != <name PREFIX:line="79" PREFIX:column="67">RXCIE0</name> || \
		      <name PREFIX:line="80" PREFIX:column="23">UDRIE3</name> != <name PREFIX:line="80" PREFIX:column="33">UDRIE0</name> || <name PREFIX:line="80" PREFIX:column="43">U3X3</name> != <name PREFIX:line="80" PREFIX:column="51">U3X0</name> || <name PREFIX:line="80" PREFIX:column="59">UPE3</name> != <name PREFIX:line="80" PREFIX:column="67">UPE0</name> || \
		      <name PREFIX:line="81" PREFIX:column="23">UDRE3</name> != <name PREFIX:line="81" PREFIX:column="32">UDRE0</name>)</expr></cpp:if>
<cpp:error PREFIX:line="82" PREFIX:column="1">#<cpp:directive PREFIX:line="82" PREFIX:column="2">error</cpp:directive> "Not all bit positions for UART3 are the same as for UART0"</cpp:error>
<cpp:endif PREFIX:line="83" PREFIX:column="1">#<cpp:directive PREFIX:line="83" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" PREFIX:line="85" PREFIX:column="1">// Constructors ////////////////////////////////////////////////////////////////</comment>

<constructor><name><name PREFIX:line="87" PREFIX:column="1">HardwareSerial</name>::<name PREFIX:line="87" PREFIX:column="17">HardwareSerial</name></name><parameter_list PREFIX:line="87" PREFIX:column="31">(
  <param><decl><type><specifier PREFIX:line="88" PREFIX:column="3">volatile</specifier> <name PREFIX:line="88" PREFIX:column="12">uint8_t</name> *</type><name PREFIX:line="88" PREFIX:column="21">ubrrh</name></decl></param>, <param><decl><type><specifier PREFIX:line="88" PREFIX:column="28">volatile</specifier> <name PREFIX:line="88" PREFIX:column="37">uint8_t</name> *</type><name PREFIX:line="88" PREFIX:column="46">ubrrl</name></decl></param>,
  <param><decl><type><specifier PREFIX:line="89" PREFIX:column="3">volatile</specifier> <name PREFIX:line="89" PREFIX:column="12">uint8_t</name> *</type><name PREFIX:line="89" PREFIX:column="21">ucsra</name></decl></param>, <param><decl><type><specifier PREFIX:line="89" PREFIX:column="28">volatile</specifier> <name PREFIX:line="89" PREFIX:column="37">uint8_t</name> *</type><name PREFIX:line="89" PREFIX:column="46">ucsrb</name></decl></param>,
  <param><decl><type><specifier PREFIX:line="90" PREFIX:column="3">volatile</specifier> <name PREFIX:line="90" PREFIX:column="12">uint8_t</name> *</type><name PREFIX:line="90" PREFIX:column="21">ucsrc</name></decl></param>, <param><decl><type><specifier PREFIX:line="90" PREFIX:column="28">volatile</specifier> <name PREFIX:line="90" PREFIX:column="37">uint8_t</name> *</type><name PREFIX:line="90" PREFIX:column="46">udr</name></decl></param>)</parameter_list> <member_list PREFIX:line="90" PREFIX:column="51">:
    <call><name PREFIX:line="91" PREFIX:column="5">_ubrrh</name><argument_list PREFIX:line="91" PREFIX:column="11">(<argument><expr><name PREFIX:line="91" PREFIX:column="12">ubrrh</name></expr></argument>)</argument_list></call>, <call><name PREFIX:line="91" PREFIX:column="20">_ubrrl</name><argument_list PREFIX:line="91" PREFIX:column="26">(<argument><expr><name PREFIX:line="91" PREFIX:column="27">ubrrl</name></expr></argument>)</argument_list></call>,
    <call><name PREFIX:line="92" PREFIX:column="5">_ucsra</name><argument_list PREFIX:line="92" PREFIX:column="11">(<argument><expr><name PREFIX:line="92" PREFIX:column="12">ucsra</name></expr></argument>)</argument_list></call>, <call><name PREFIX:line="92" PREFIX:column="20">_ucsrb</name><argument_list PREFIX:line="92" PREFIX:column="26">(<argument><expr><name PREFIX:line="92" PREFIX:column="27">ucsrb</name></expr></argument>)</argument_list></call>, <call><name PREFIX:line="92" PREFIX:column="35">_ucsrc</name><argument_list PREFIX:line="92" PREFIX:column="41">(<argument><expr><name PREFIX:line="92" PREFIX:column="42">ucsrc</name></expr></argument>)</argument_list></call>,
    <call><name PREFIX:line="93" PREFIX:column="5">_udr</name><argument_list PREFIX:line="93" PREFIX:column="9">(<argument><expr><name PREFIX:line="93" PREFIX:column="10">udr</name></expr></argument>)</argument_list></call>,
    <call><name PREFIX:line="94" PREFIX:column="5">_rx_buffer_head</name><argument_list PREFIX:line="94" PREFIX:column="20">(<argument><expr PREFIX:line="94" PREFIX:column="21">0</expr></argument>)</argument_list></call>, <call><name PREFIX:line="94" PREFIX:column="25">_rx_buffer_tail</name><argument_list PREFIX:line="94" PREFIX:column="40">(<argument><expr PREFIX:line="94" PREFIX:column="41">0</expr></argument>)</argument_list></call>,
    <call><name PREFIX:line="95" PREFIX:column="5">_tx_buffer_head</name><argument_list PREFIX:line="95" PREFIX:column="20">(<argument><expr PREFIX:line="95" PREFIX:column="21">0</expr></argument>)</argument_list></call>, <call><name PREFIX:line="95" PREFIX:column="25">_tx_buffer_tail</name><argument_list PREFIX:line="95" PREFIX:column="40">(<argument><expr PREFIX:line="95" PREFIX:column="41">0</expr></argument>)</argument_list></call>
</member_list><block PREFIX:line="96" PREFIX:column="1">{
}</block></constructor>

<comment type="line" PREFIX:line="99" PREFIX:column="1">// Actual interrupt handlers //////////////////////////////////////////////////////////////</comment>

<function><type><name PREFIX:line="101" PREFIX:column="1">void</name></type> <name><name PREFIX:line="101" PREFIX:column="6">HardwareSerial</name>::<name PREFIX:line="101" PREFIX:column="22">_rx_complete_irq</name></name><parameter_list PREFIX:line="101" PREFIX:column="38">(<param><decl><type><name PREFIX:line="101" PREFIX:column="39">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="102" PREFIX:column="1">{
  <if PREFIX:line="103" PREFIX:column="3">if <condition PREFIX:line="103" PREFIX:column="6">(<expr><call><name PREFIX:line="103" PREFIX:column="7">bit_is_clear</name><argument_list PREFIX:line="103" PREFIX:column="19">(<argument><expr PREFIX:line="103" PREFIX:column="20">*<name PREFIX:line="103" PREFIX:column="21">_ucsra</name></expr></argument>, <argument><expr><name PREFIX:line="103" PREFIX:column="29">UPE0</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="103" PREFIX:column="35"> <block PREFIX:line="103" PREFIX:column="36">{
    <comment type="line" PREFIX:line="104" PREFIX:column="5">// No Parity error, read byte and store it in the buffer if there is</comment>
    <comment type="line" PREFIX:line="105" PREFIX:column="5">// room</comment>
    <decl_stmt><decl><type><name PREFIX:line="106" PREFIX:column="5">unknowntype</name> <name PREFIX:line="106" PREFIX:column="17">char</name></type> <name PREFIX:line="106" PREFIX:column="22">c</name> <init PREFIX:line="106" PREFIX:column="24">= <expr PREFIX:line="106" PREFIX:column="26">*<name PREFIX:line="106" PREFIX:column="27">_udr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="107" PREFIX:column="5">rx_buffer_index_t</name></type> <name PREFIX:line="107" PREFIX:column="23">i</name> <init PREFIX:line="107" PREFIX:column="25">= <expr><call PREFIX:line="107" PREFIX:column="27">(<name PREFIX:line="107" PREFIX:column="28">unknowntype</name> <name PREFIX:line="107" PREFIX:column="40">int</name>)<argument_list PREFIX:line="107" PREFIX:column="44">(<argument><expr><name PREFIX:line="107" PREFIX:column="45">_rx_buffer_head</name> + 1</expr></argument>)</argument_list></call> % <name PREFIX:line="107" PREFIX:column="68">SERIAL_RX_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>

    <comment type="line" PREFIX:line="109" PREFIX:column="5">// if we should be storing the received character into the location</comment>
    <comment type="line" PREFIX:line="110" PREFIX:column="5">// just before the tail (meaning that the head would advance to the</comment>
    <comment type="line" PREFIX:line="111" PREFIX:column="5">// current location of the tail), we're about to overflow the buffer</comment>
    <comment type="line" PREFIX:line="112" PREFIX:column="5">// and so we don't write the character or advance the head.</comment>
    <if PREFIX:line="113" PREFIX:column="5">if <condition PREFIX:line="113" PREFIX:column="8">(<expr><name PREFIX:line="113" PREFIX:column="9">i</name> != <name PREFIX:line="113" PREFIX:column="14">_rx_buffer_tail</name></expr>)</condition><then PREFIX:line="113" PREFIX:column="30"> <block PREFIX:line="113" PREFIX:column="31">{
      <expr_stmt><expr><name><name PREFIX:line="114" PREFIX:column="7">_rx_buffer</name><index PREFIX:line="114" PREFIX:column="17">[<expr><name PREFIX:line="114" PREFIX:column="18">_rx_buffer_head</name></expr>]</index></name> = <name PREFIX:line="114" PREFIX:column="37">c</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="115" PREFIX:column="7">_rx_buffer_head</name> = <name PREFIX:line="115" PREFIX:column="25">i</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then> <else PREFIX:line="117" PREFIX:column="5">else <block PREFIX:line="117" PREFIX:column="10">{
    <comment type="line" PREFIX:line="118" PREFIX:column="5">// Parity error, read byte but discard it</comment>
    <expr_stmt><expr PREFIX:line="119" PREFIX:column="5">*<name PREFIX:line="119" PREFIX:column="6">_udr</name></expr>;</expr_stmt>
  }</block></else></if><empty_stmt PREFIX:line="120" PREFIX:column="4">;</empty_stmt>
}</block></function>

<cpp:endif PREFIX:line="123" PREFIX:column="1">#<cpp:directive PREFIX:line="123" PREFIX:column="2">endif</cpp:directive></cpp:endif> <comment type="line" PREFIX:line="123" PREFIX:column="8">// whole file</comment>
</unit>
