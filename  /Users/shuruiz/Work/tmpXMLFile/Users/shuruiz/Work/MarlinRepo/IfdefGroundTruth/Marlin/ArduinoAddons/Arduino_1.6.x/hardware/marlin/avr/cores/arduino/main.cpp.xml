<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/arduino/main.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  main.cpp - Main loop for Arduino sketches
  Copyright (c) 2005-2013 Arduino Team.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/</comment>

<cpp:include PREFIX:line="20" PREFIX:column="1">#<cpp:directive PREFIX:line="20" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="20" PREFIX:column="10">&lt;Arduino.h&gt;</cpp:file></cpp:include>

<comment type="line" PREFIX:line="22" PREFIX:column="1">//Declared weak in Arduino.h to allow user redefinitions.</comment>
<function><type><name PREFIX:line="23" PREFIX:column="1">int</name></type> <name PREFIX:line="23" PREFIX:column="5">atexit</name><parameter_list PREFIX:line="23" PREFIX:column="11">(<param><function_decl><type><name PREFIX:line="23" PREFIX:column="12">void</name></type> (*<name PREFIX:line="23" PREFIX:column="19">func</name>)<parameter_list PREFIX:line="23" PREFIX:column="24">()</parameter_list></function_decl></param>)</parameter_list> <block PREFIX:line="23" PREFIX:column="28">{ <return PREFIX:line="23" PREFIX:column="30">return <expr PREFIX:line="23" PREFIX:column="37">0</expr>;</return> }</block></function>

<comment type="line" PREFIX:line="25" PREFIX:column="1">// Weak empty variant initialization function.</comment>
<comment type="line" PREFIX:line="26" PREFIX:column="1">// May be redefined by variant files.</comment>
<decl_stmt><decl><type><name PREFIX:line="27" PREFIX:column="1">void</name></type> <name PREFIX:line="27" PREFIX:column="6">initVariant</name><argument_list PREFIX:line="27" PREFIX:column="17">()</argument_list> <name PREFIX:line="27" PREFIX:column="20">__attribute__</name><argument_list PREFIX:line="27" PREFIX:column="33">(<argument><expr PREFIX:line="27" PREFIX:column="34">(<name PREFIX:line="27" PREFIX:column="35">weak</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name PREFIX:line="28" PREFIX:column="1">void</name></type> <name PREFIX:line="28" PREFIX:column="6">initVariant</name><parameter_list PREFIX:line="28" PREFIX:column="17">()</parameter_list> <block PREFIX:line="28" PREFIX:column="20">{ }</block></function>

<function><type><name PREFIX:line="30" PREFIX:column="1">int</name></type> <name PREFIX:line="30" PREFIX:column="5">main</name><parameter_list PREFIX:line="30" PREFIX:column="9">(<param><decl><type><name PREFIX:line="30" PREFIX:column="10">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="31" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="32" PREFIX:column="9">init</name><argument_list PREFIX:line="32" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name PREFIX:line="34" PREFIX:column="9">initVariant</name><argument_list PREFIX:line="34" PREFIX:column="20">()</argument_list></call></expr>;</expr_stmt>

<cpp:if PREFIX:line="36" PREFIX:column="1">#<cpp:directive PREFIX:line="36" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="36" PREFIX:column="5">defined</name><argument_list PREFIX:line="36" PREFIX:column="12">(<argument><expr><name PREFIX:line="36" PREFIX:column="13">USBCON</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name><name PREFIX:line="37" PREFIX:column="9">USBDevice</name>.<name PREFIX:line="37" PREFIX:column="19">attach</name></name><argument_list PREFIX:line="37" PREFIX:column="25">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="38" PREFIX:column="1">#<cpp:directive PREFIX:line="38" PREFIX:column="2">endif</cpp:directive></cpp:endif>
	
	<expr_stmt><expr><call><name PREFIX:line="40" PREFIX:column="9">setup</name><argument_list PREFIX:line="40" PREFIX:column="14">()</argument_list></call></expr>;</expr_stmt>
    
	<for PREFIX:line="42" PREFIX:column="9">for (<init PREFIX:line="42" PREFIX:column="14">;</init><condition PREFIX:line="42" PREFIX:column="15">;</condition><incr/>) <block PREFIX:line="42" PREFIX:column="18">{
		<expr_stmt><expr><call><name PREFIX:line="43" PREFIX:column="17">loop</name><argument_list PREFIX:line="43" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
		<if PREFIX:line="44" PREFIX:column="17">if <condition PREFIX:line="44" PREFIX:column="20">(<expr><name PREFIX:line="44" PREFIX:column="21">serialEventRun</name></expr>)</condition><then PREFIX:line="44" PREFIX:column="36"> <expr_stmt><expr><call><name PREFIX:line="44" PREFIX:column="37">serialEventRun</name><argument_list PREFIX:line="44" PREFIX:column="51">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>
        
	<return PREFIX:line="47" PREFIX:column="9">return <expr PREFIX:line="47" PREFIX:column="16">0</expr>;</return>
}</block></function>

</unit>
