<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_font.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*

  u8g_font.c
  
  U8G Font High Level Interface

  Universal 8bit Graphics Library
  
  Copyright (c) 2011, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  
*/</comment>

<cpp:include PREFIX:line="38" PREFIX:column="1">#<cpp:directive PREFIX:line="38" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="38" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>

<comment type="block" PREFIX:line="40" PREFIX:column="1">/* font api */</comment>

<comment type="block" PREFIX:line="42" PREFIX:column="1">/* pointer to the start adress of the glyph, points to progmem area */</comment>
<typedef PREFIX:line="43" PREFIX:column="1">typedef <type><name PREFIX:line="43" PREFIX:column="9">void</name> *</type> <name PREFIX:line="43" PREFIX:column="16">u8g_glyph_t</name>;</typedef>

<comment type="block" PREFIX:line="45" PREFIX:column="1">/* size of the font data structure, there is no struct or class... */</comment>
<cpp:define PREFIX:line="46" PREFIX:column="1">#<cpp:directive PREFIX:line="46" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="46" PREFIX:column="9">U8G_FONT_DATA_STRUCT_SIZE</name></cpp:macro> <cpp:value PREFIX:line="46" PREFIX:column="35">17</cpp:value></cpp:define>

<comment type="block" PREFIX:line="48" PREFIX:column="1">/*
  ... instead the fields of the font data structure are accessed directly by offset 
  font information 
  offset
  0             font format
  1             FONTBOUNDINGBOX width           unknowntype
  2             FONTBOUNDINGBOX height          unknowntype
  3             FONTBOUNDINGBOX x-offset         signed
  4             FONTBOUNDINGBOX y-offset        signed
  5             capital A height                                unknowntype
  6             start 'A'
  8             start 'a'
  10            encoding start
  11            encoding end
  12            descent 'g'                     negative: below baseline
  13            font max ascent
  14            font min decent             negative: below baseline 
  15            font xascent
  16            font xdecent             negative: below baseline 
  
*/</comment>

<comment type="block" PREFIX:line="70" PREFIX:column="1">/* use case: What is the width and the height of the minimal box into which string s fints? */</comment>
<function_decl><type><name PREFIX:line="71" PREFIX:column="1">void</name></type> <name PREFIX:line="71" PREFIX:column="6">u8g_font_GetStrSize</name><parameter_list PREFIX:line="71" PREFIX:column="25">( <param><decl><type><name PREFIX:line="71" PREFIX:column="27">void</name> *</type><name PREFIX:line="71" PREFIX:column="33">font</name></decl></param>,  <param><decl><type><name PREFIX:line="71" PREFIX:column="40">char</name> *</type><name PREFIX:line="71" PREFIX:column="46">s</name></decl></param>, <param><decl><type><name PREFIX:line="71" PREFIX:column="49">u8g_uint_t</name> *</type><name PREFIX:line="71" PREFIX:column="61">width</name></decl></param>, <param><decl><type><name PREFIX:line="71" PREFIX:column="68">u8g_uint_t</name> *</type><name PREFIX:line="71" PREFIX:column="80">height</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="72" PREFIX:column="1">void</name></type> <name PREFIX:line="72" PREFIX:column="6">u8g_font_GetStrSizeP</name><parameter_list PREFIX:line="72" PREFIX:column="26">( <param><decl><type><name PREFIX:line="72" PREFIX:column="28">void</name> *</type><name PREFIX:line="72" PREFIX:column="34">font</name></decl></param>,  <param><decl><type><name PREFIX:line="72" PREFIX:column="41">char</name> *</type><name PREFIX:line="72" PREFIX:column="47">s</name></decl></param>, <param><decl><type><name PREFIX:line="72" PREFIX:column="50">u8g_uint_t</name> *</type><name PREFIX:line="72" PREFIX:column="62">width</name></decl></param>, <param><decl><type><name PREFIX:line="72" PREFIX:column="69">u8g_uint_t</name> *</type><name PREFIX:line="72" PREFIX:column="81">height</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block" PREFIX:line="74" PREFIX:column="1">/* use case: lower left edge of a minimal box is known, what is the correct x, y position for the string draw procedure */</comment>
<function_decl><type><name PREFIX:line="75" PREFIX:column="1">void</name></type> <name PREFIX:line="75" PREFIX:column="6">u8g_font_AdjustXYToDraw</name><parameter_list PREFIX:line="75" PREFIX:column="29">( <param><decl><type><name PREFIX:line="75" PREFIX:column="31">void</name> *</type><name PREFIX:line="75" PREFIX:column="37">font</name></decl></param>,  <param><decl><type><name PREFIX:line="75" PREFIX:column="44">char</name> *</type><name PREFIX:line="75" PREFIX:column="50">s</name></decl></param>, <param><decl><type><name PREFIX:line="75" PREFIX:column="53">u8g_uint_t</name> *</type><name PREFIX:line="75" PREFIX:column="65">x</name></decl></param>, <param><decl><type><name PREFIX:line="75" PREFIX:column="68">u8g_uint_t</name> *</type><name PREFIX:line="75" PREFIX:column="80">y</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="76" PREFIX:column="1">void</name></type> <name PREFIX:line="76" PREFIX:column="6">u8g_font_AdjustXYToDrawP</name><parameter_list PREFIX:line="76" PREFIX:column="30">( <param><decl><type><name PREFIX:line="76" PREFIX:column="32">void</name> *</type><name PREFIX:line="76" PREFIX:column="38">font</name></decl></param>,  <param><decl><type><name PREFIX:line="76" PREFIX:column="45">char</name> *</type><name PREFIX:line="76" PREFIX:column="51">s</name></decl></param>, <param><decl><type><name PREFIX:line="76" PREFIX:column="54">u8g_uint_t</name> *</type><name PREFIX:line="76" PREFIX:column="66">x</name></decl></param>, <param><decl><type><name PREFIX:line="76" PREFIX:column="69">u8g_uint_t</name> *</type><name PREFIX:line="76" PREFIX:column="81">y</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block" PREFIX:line="78" PREFIX:column="1">/* use case: Baseline origin known, return minimal box */</comment>
<function_decl><type><name PREFIX:line="79" PREFIX:column="1">void</name></type> <name PREFIX:line="79" PREFIX:column="6">u8g_font_GetStrMinBox</name><parameter_list PREFIX:line="79" PREFIX:column="27">(<param><decl><type><name PREFIX:line="79" PREFIX:column="28">u8g_t</name> *</type><name PREFIX:line="79" PREFIX:column="35">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="79" PREFIX:column="41">void</name> *</type><name PREFIX:line="79" PREFIX:column="47">font</name></decl></param>,  <param><decl><type><name PREFIX:line="79" PREFIX:column="54">char</name> *</type><name PREFIX:line="79" PREFIX:column="60">s</name></decl></param>, <param><decl><type><name PREFIX:line="79" PREFIX:column="63">u8g_uint_t</name> *</type><name PREFIX:line="79" PREFIX:column="75">x</name></decl></param>, <param><decl><type><name PREFIX:line="79" PREFIX:column="78">u8g_uint_t</name> *</type><name PREFIX:line="79" PREFIX:column="90">y</name></decl></param>, <param><decl><type><name PREFIX:line="79" PREFIX:column="93">u8g_uint_t</name> *</type><name PREFIX:line="79" PREFIX:column="105">width</name></decl></param>, <param><decl><type><name PREFIX:line="79" PREFIX:column="112">u8g_uint_t</name> *</type><name PREFIX:line="79" PREFIX:column="124">height</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block" PREFIX:line="81" PREFIX:column="1">/* procedures */</comment>

<comment type="block" PREFIX:line="83" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="84" PREFIX:column="1">/* low level byte and word access */</comment>

<comment type="block" PREFIX:line="86" PREFIX:column="1">/* removed NOINLINE, because it leads to smaller code, might also be faster */</comment>
<comment type="line" PREFIX:line="87" PREFIX:column="1">//static uint8_t u8g_font_get_byte( u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;</comment>
<function><type><specifier PREFIX:line="88" PREFIX:column="1">static</specifier> <name PREFIX:line="88" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="88" PREFIX:column="16">u8g_font_get_byte</name><parameter_list PREFIX:line="88" PREFIX:column="33">( <param><decl><type><name PREFIX:line="88" PREFIX:column="35">u8g_fntpgm_uint8_t</name> *</type><name PREFIX:line="88" PREFIX:column="55">font</name></decl></param>, <param><decl><type><name PREFIX:line="88" PREFIX:column="61">uint8_t</name></type> <name PREFIX:line="88" PREFIX:column="69">offset</name></decl></param>)</parameter_list>
<block PREFIX:line="89" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="90" PREFIX:column="3">font</name> += <name PREFIX:line="90" PREFIX:column="11">offset</name></expr>;</expr_stmt>
  <return PREFIX:line="91" PREFIX:column="3">return <expr><call><name PREFIX:line="91" PREFIX:column="10">u8g_pgm_read</name><argument_list PREFIX:line="91" PREFIX:column="22">( <argument><expr PREFIX:line="91" PREFIX:column="24">(<name PREFIX:line="91" PREFIX:column="25">u8g_pgm_uint8_t</name> *)<name PREFIX:line="91" PREFIX:column="43">font</name></expr></argument> )</argument_list></call></expr>;</return>  
}</block></function>

<decl_stmt><decl><type><specifier PREFIX:line="94" PREFIX:column="1">static</specifier> <name PREFIX:line="94" PREFIX:column="8">uint16_t</name></type> <name PREFIX:line="94" PREFIX:column="17">u8g_font_get_word</name><argument_list PREFIX:line="94" PREFIX:column="34">( <argument><expr><name PREFIX:line="94" PREFIX:column="36">u8g_fntpgm_uint8_t</name> *<name PREFIX:line="94" PREFIX:column="56">font</name></expr></argument>, <argument><expr><name PREFIX:line="94" PREFIX:column="62">uint8_t</name> <name PREFIX:line="94" PREFIX:column="70">offset</name></expr></argument>)</argument_list> <name PREFIX:line="94" PREFIX:column="78">U8G_NOINLINE</name></decl>;</decl_stmt> 
<function><type><specifier PREFIX:line="95" PREFIX:column="1">static</specifier> <name PREFIX:line="95" PREFIX:column="8">uint16_t</name></type> <name PREFIX:line="95" PREFIX:column="17">u8g_font_get_word</name><parameter_list PREFIX:line="95" PREFIX:column="34">( <param><decl><type><name PREFIX:line="95" PREFIX:column="36">u8g_fntpgm_uint8_t</name> *</type><name PREFIX:line="95" PREFIX:column="56">font</name></decl></param>, <param><decl><type><name PREFIX:line="95" PREFIX:column="62">uint8_t</name></type> <name PREFIX:line="95" PREFIX:column="70">offset</name></decl></param>)</parameter_list>
<block PREFIX:line="96" PREFIX:column="1">{
    <decl_stmt><decl><type><name PREFIX:line="97" PREFIX:column="5">uint16_t</name></type> <name PREFIX:line="97" PREFIX:column="14">pos</name></decl>;</decl_stmt>
    <expr_stmt><expr><name PREFIX:line="98" PREFIX:column="5">font</name> += <name PREFIX:line="98" PREFIX:column="13">offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="99" PREFIX:column="5">pos</name> = <call><name PREFIX:line="99" PREFIX:column="11">u8g_pgm_read</name><argument_list PREFIX:line="99" PREFIX:column="23">( <argument><expr PREFIX:line="99" PREFIX:column="25">(<name PREFIX:line="99" PREFIX:column="26">u8g_pgm_uint8_t</name> *)<name PREFIX:line="99" PREFIX:column="44">font</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="100" PREFIX:column="5">font</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="101" PREFIX:column="5">pos</name> &lt;&lt;= 8</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="102" PREFIX:column="5">pos</name> += <call><name PREFIX:line="102" PREFIX:column="12">u8g_pgm_read</name><argument_list PREFIX:line="102" PREFIX:column="24">( <argument><expr PREFIX:line="102" PREFIX:column="26">(<name PREFIX:line="102" PREFIX:column="27">u8g_pgm_uint8_t</name> *)<name PREFIX:line="102" PREFIX:column="45">font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return PREFIX:line="103" PREFIX:column="5">return <expr><name PREFIX:line="103" PREFIX:column="12">pos</name></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="106" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="107" PREFIX:column="1">/* direct access on the font */</comment>

<decl_stmt><decl><type><specifier PREFIX:line="109" PREFIX:column="1">static</specifier> <name PREFIX:line="109" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="109" PREFIX:column="16">u8g_font_GetFormat</name><argument_list PREFIX:line="109" PREFIX:column="34">( <argument><expr><name PREFIX:line="109" PREFIX:column="36">u8g_fntpgm_uint8_t</name> *<name PREFIX:line="109" PREFIX:column="56">font</name></expr></argument>)</argument_list> <name PREFIX:line="109" PREFIX:column="62">U8G_NOINLINE</name></decl>;</decl_stmt>
<function><type><specifier PREFIX:line="110" PREFIX:column="1">static</specifier> <name PREFIX:line="110" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="110" PREFIX:column="16">u8g_font_GetFormat</name><parameter_list PREFIX:line="110" PREFIX:column="34">( <param><decl><type><name PREFIX:line="110" PREFIX:column="36">u8g_fntpgm_uint8_t</name> *</type><name PREFIX:line="110" PREFIX:column="56">font</name></decl></param>)</parameter_list>
<block PREFIX:line="111" PREFIX:column="1">{
  <return PREFIX:line="112" PREFIX:column="3">return <expr><call><name PREFIX:line="112" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="112" PREFIX:column="27">(<argument><expr><name PREFIX:line="112" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="112" PREFIX:column="34">0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier PREFIX:line="115" PREFIX:column="1">static</specifier> <name PREFIX:line="115" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="115" PREFIX:column="16">u8g_font_GetFontGlyphStructureSize</name><argument_list PREFIX:line="115" PREFIX:column="50">( <argument><expr><name PREFIX:line="115" PREFIX:column="52">u8g_fntpgm_uint8_t</name> *<name PREFIX:line="115" PREFIX:column="72">font</name></expr></argument>)</argument_list> <name PREFIX:line="115" PREFIX:column="78">U8G_NOINLINE</name></decl>;</decl_stmt>
<function><type><specifier PREFIX:line="116" PREFIX:column="1">static</specifier> <name PREFIX:line="116" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="116" PREFIX:column="16">u8g_font_GetFontGlyphStructureSize</name><parameter_list PREFIX:line="116" PREFIX:column="50">( <param><decl><type><name PREFIX:line="116" PREFIX:column="52">u8g_fntpgm_uint8_t</name> *</type><name PREFIX:line="116" PREFIX:column="72">font</name></decl></param>)</parameter_list>
<block PREFIX:line="117" PREFIX:column="1">{
  <switch PREFIX:line="118" PREFIX:column="3">switch<condition PREFIX:line="118" PREFIX:column="9">(<expr><call><name PREFIX:line="118" PREFIX:column="10">u8g_font_GetFormat</name><argument_list PREFIX:line="118" PREFIX:column="28">(<argument><expr><name PREFIX:line="118" PREFIX:column="29">font</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block PREFIX:line="119" PREFIX:column="3">{
    <case PREFIX:line="120" PREFIX:column="5">case <expr PREFIX:line="120" PREFIX:column="10">0</expr>: <return PREFIX:line="120" PREFIX:column="13">return <expr PREFIX:line="120" PREFIX:column="20">6</expr>;</return>
    </case><case PREFIX:line="121" PREFIX:column="5">case <expr PREFIX:line="121" PREFIX:column="10">1</expr>: <return PREFIX:line="121" PREFIX:column="13">return <expr PREFIX:line="121" PREFIX:column="20">3</expr>;</return>
    </case><case PREFIX:line="122" PREFIX:column="5">case <expr PREFIX:line="122" PREFIX:column="10">2</expr>: <return PREFIX:line="122" PREFIX:column="13">return <expr PREFIX:line="122" PREFIX:column="20">6</expr>;</return>
  </case>}</block></switch>
  <return PREFIX:line="124" PREFIX:column="3">return <expr PREFIX:line="124" PREFIX:column="10">3</expr>;</return>
}</block></function>

<function><type><specifier PREFIX:line="127" PREFIX:column="1">static</specifier> <name PREFIX:line="127" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="127" PREFIX:column="16">u8g_font_GetBBXWidth</name><parameter_list PREFIX:line="127" PREFIX:column="36">( <param><decl><type><name PREFIX:line="127" PREFIX:column="38">void</name> *</type><name PREFIX:line="127" PREFIX:column="44">font</name></decl></param>)</parameter_list>
<block PREFIX:line="128" PREFIX:column="1">{
  <return PREFIX:line="129" PREFIX:column="3">return <expr><call><name PREFIX:line="129" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="129" PREFIX:column="27">(<argument><expr><name PREFIX:line="129" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="129" PREFIX:column="34">1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier PREFIX:line="132" PREFIX:column="1">static</specifier> <name PREFIX:line="132" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="132" PREFIX:column="16">u8g_font_GetBBXHeight</name><parameter_list PREFIX:line="132" PREFIX:column="37">( <param><decl><type><name PREFIX:line="132" PREFIX:column="39">void</name> *</type><name PREFIX:line="132" PREFIX:column="45">font</name></decl></param>)</parameter_list>
<block PREFIX:line="133" PREFIX:column="1">{
  <return PREFIX:line="134" PREFIX:column="3">return <expr><call><name PREFIX:line="134" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="134" PREFIX:column="27">(<argument><expr><name PREFIX:line="134" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="134" PREFIX:column="34">2</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier PREFIX:line="137" PREFIX:column="1">static</specifier> <name PREFIX:line="137" PREFIX:column="8">int8_t</name></type> <name PREFIX:line="137" PREFIX:column="15">u8g_font_GetBBXOffX</name><parameter_list PREFIX:line="137" PREFIX:column="34">( <param><decl><type><name PREFIX:line="137" PREFIX:column="36">void</name> *</type><name PREFIX:line="137" PREFIX:column="42">font</name></decl></param>)</parameter_list>
<block PREFIX:line="138" PREFIX:column="1">{
  <return PREFIX:line="139" PREFIX:column="3">return <expr><call><name PREFIX:line="139" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="139" PREFIX:column="27">(<argument><expr><name PREFIX:line="139" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="139" PREFIX:column="34">3</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier PREFIX:line="142" PREFIX:column="1">static</specifier> <name PREFIX:line="142" PREFIX:column="8">int8_t</name></type> <name PREFIX:line="142" PREFIX:column="15">u8g_font_GetBBXOffY</name><parameter_list PREFIX:line="142" PREFIX:column="34">( <param><decl><type><name PREFIX:line="142" PREFIX:column="36">void</name> *</type><name PREFIX:line="142" PREFIX:column="42">font</name></decl></param>)</parameter_list>
<block PREFIX:line="143" PREFIX:column="1">{
  <return PREFIX:line="144" PREFIX:column="3">return <expr><call><name PREFIX:line="144" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="144" PREFIX:column="27">(<argument><expr><name PREFIX:line="144" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="144" PREFIX:column="34">4</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="147" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="147" PREFIX:column="9">u8g_font_GetCapitalAHeight</name><parameter_list PREFIX:line="147" PREFIX:column="35">( <param><decl><type><name PREFIX:line="147" PREFIX:column="37">void</name> *</type><name PREFIX:line="147" PREFIX:column="43">font</name></decl></param>)</parameter_list>
<block PREFIX:line="148" PREFIX:column="1">{
  <return PREFIX:line="149" PREFIX:column="3">return <expr><call><name PREFIX:line="149" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="149" PREFIX:column="27">(<argument><expr><name PREFIX:line="149" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="149" PREFIX:column="34">5</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name PREFIX:line="152" PREFIX:column="1">uint16_t</name></type> <name PREFIX:line="152" PREFIX:column="10">u8g_font_GetEncoding65Pos</name><argument_list PREFIX:line="152" PREFIX:column="35">( <argument><expr><name PREFIX:line="152" PREFIX:column="37">void</name> *<name PREFIX:line="152" PREFIX:column="43">font</name></expr></argument>)</argument_list> <name PREFIX:line="152" PREFIX:column="49">U8G_NOINLINE</name></decl>;</decl_stmt>
<function><type><name PREFIX:line="153" PREFIX:column="1">uint16_t</name></type> <name PREFIX:line="153" PREFIX:column="10">u8g_font_GetEncoding65Pos</name><parameter_list PREFIX:line="153" PREFIX:column="35">( <param><decl><type><name PREFIX:line="153" PREFIX:column="37">void</name> *</type><name PREFIX:line="153" PREFIX:column="43">font</name></decl></param>)</parameter_list>
<block PREFIX:line="154" PREFIX:column="1">{
    <return PREFIX:line="155" PREFIX:column="5">return <expr><call><name PREFIX:line="155" PREFIX:column="12">u8g_font_get_word</name><argument_list PREFIX:line="155" PREFIX:column="29">(<argument><expr><name PREFIX:line="155" PREFIX:column="30">font</name></expr></argument>, <argument><expr PREFIX:line="155" PREFIX:column="36">6</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name PREFIX:line="158" PREFIX:column="1">uint16_t</name></type> <name PREFIX:line="158" PREFIX:column="10">u8g_font_GetEncoding97Pos</name><argument_list PREFIX:line="158" PREFIX:column="35">( <argument><expr><name PREFIX:line="158" PREFIX:column="37">void</name> *<name PREFIX:line="158" PREFIX:column="43">font</name></expr></argument>)</argument_list> <name PREFIX:line="158" PREFIX:column="49">U8G_NOINLINE</name></decl>;</decl_stmt>
<function><type><name PREFIX:line="159" PREFIX:column="1">uint16_t</name></type> <name PREFIX:line="159" PREFIX:column="10">u8g_font_GetEncoding97Pos</name><parameter_list PREFIX:line="159" PREFIX:column="35">( <param><decl><type><name PREFIX:line="159" PREFIX:column="37">void</name> *</type><name PREFIX:line="159" PREFIX:column="43">font</name></decl></param>)</parameter_list>
<block PREFIX:line="160" PREFIX:column="1">{
    <return PREFIX:line="161" PREFIX:column="5">return <expr><call><name PREFIX:line="161" PREFIX:column="12">u8g_font_get_word</name><argument_list PREFIX:line="161" PREFIX:column="29">(<argument><expr><name PREFIX:line="161" PREFIX:column="30">font</name></expr></argument>, <argument><expr PREFIX:line="161" PREFIX:column="36">8</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="164" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="164" PREFIX:column="9">u8g_font_GetFontStartEncoding</name><parameter_list PREFIX:line="164" PREFIX:column="38">( <param><decl><type><name PREFIX:line="164" PREFIX:column="40">void</name> *</type><name PREFIX:line="164" PREFIX:column="46">font</name></decl></param>)</parameter_list>
<block PREFIX:line="165" PREFIX:column="1">{
  <return PREFIX:line="166" PREFIX:column="3">return <expr><call><name PREFIX:line="166" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="166" PREFIX:column="27">(<argument><expr><name PREFIX:line="166" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="166" PREFIX:column="34">10</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="169" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="169" PREFIX:column="9">u8g_font_GetFontEndEncoding</name><parameter_list PREFIX:line="169" PREFIX:column="36">( <param><decl><type><name PREFIX:line="169" PREFIX:column="38">void</name> *</type><name PREFIX:line="169" PREFIX:column="44">font</name></decl></param>)</parameter_list>
<block PREFIX:line="170" PREFIX:column="1">{
  <return PREFIX:line="171" PREFIX:column="3">return <expr><call><name PREFIX:line="171" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="171" PREFIX:column="27">(<argument><expr><name PREFIX:line="171" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="171" PREFIX:column="34">11</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="174" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="174" PREFIX:column="8">u8g_font_GetLowerGDescent</name><parameter_list PREFIX:line="174" PREFIX:column="33">( <param><decl><type><name PREFIX:line="174" PREFIX:column="35">void</name> *</type><name PREFIX:line="174" PREFIX:column="41">font</name></decl></param>)</parameter_list>
<block PREFIX:line="175" PREFIX:column="1">{
  <return PREFIX:line="176" PREFIX:column="3">return <expr><call><name PREFIX:line="176" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="176" PREFIX:column="27">(<argument><expr><name PREFIX:line="176" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="176" PREFIX:column="34">12</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="179" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="179" PREFIX:column="8">u8g_font_GetFontAscent</name><parameter_list PREFIX:line="179" PREFIX:column="30">( <param><decl><type><name PREFIX:line="179" PREFIX:column="32">void</name> *</type><name PREFIX:line="179" PREFIX:column="38">font</name></decl></param>)</parameter_list>
<block PREFIX:line="180" PREFIX:column="1">{
  <return PREFIX:line="181" PREFIX:column="3">return <expr><call><name PREFIX:line="181" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="181" PREFIX:column="27">(<argument><expr><name PREFIX:line="181" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="181" PREFIX:column="34">13</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="184" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="184" PREFIX:column="8">u8g_font_GetFontDescent</name><parameter_list PREFIX:line="184" PREFIX:column="31">( <param><decl><type><name PREFIX:line="184" PREFIX:column="33">void</name> *</type><name PREFIX:line="184" PREFIX:column="39">font</name></decl></param>)</parameter_list>
<block PREFIX:line="185" PREFIX:column="1">{
  <return PREFIX:line="186" PREFIX:column="3">return <expr><call><name PREFIX:line="186" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="186" PREFIX:column="27">(<argument><expr><name PREFIX:line="186" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="186" PREFIX:column="34">14</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="189" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="189" PREFIX:column="8">u8g_font_GetFontXAscent</name><parameter_list PREFIX:line="189" PREFIX:column="31">( <param><decl><type><name PREFIX:line="189" PREFIX:column="33">void</name> *</type><name PREFIX:line="189" PREFIX:column="39">font</name></decl></param>)</parameter_list>
<block PREFIX:line="190" PREFIX:column="1">{
  <return PREFIX:line="191" PREFIX:column="3">return <expr><call><name PREFIX:line="191" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="191" PREFIX:column="27">(<argument><expr><name PREFIX:line="191" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="191" PREFIX:column="34">15</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="194" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="194" PREFIX:column="8">u8g_font_GetFontXDescent</name><parameter_list PREFIX:line="194" PREFIX:column="32">( <param><decl><type><name PREFIX:line="194" PREFIX:column="34">void</name> *</type><name PREFIX:line="194" PREFIX:column="40">font</name></decl></param>)</parameter_list>
<block PREFIX:line="195" PREFIX:column="1">{
  <return PREFIX:line="196" PREFIX:column="3">return <expr><call><name PREFIX:line="196" PREFIX:column="10">u8g_font_get_byte</name><argument_list PREFIX:line="196" PREFIX:column="27">(<argument><expr><name PREFIX:line="196" PREFIX:column="28">font</name></expr></argument>, <argument><expr PREFIX:line="196" PREFIX:column="34">16</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block" PREFIX:line="200" PREFIX:column="1">/* return the data start for a font and the glyph pointer */</comment>
<function><type><specifier PREFIX:line="201" PREFIX:column="1">static</specifier> <name PREFIX:line="201" PREFIX:column="8">uint8_t</name> *</type><name PREFIX:line="201" PREFIX:column="17">u8g_font_GetGlyphDataStart</name><parameter_list PREFIX:line="201" PREFIX:column="43">( <param><decl><type><name PREFIX:line="201" PREFIX:column="45">void</name> *</type><name PREFIX:line="201" PREFIX:column="51">font</name></decl></param>, <param><decl><type><name PREFIX:line="201" PREFIX:column="57">u8g_glyph_t</name></type> <name PREFIX:line="201" PREFIX:column="69">g</name></decl></param>)</parameter_list>
<block PREFIX:line="202" PREFIX:column="1">{
  <return PREFIX:line="203" PREFIX:column="3">return <expr PREFIX:line="203" PREFIX:column="10">((<name PREFIX:line="203" PREFIX:column="12">u8g_fntpgm_uint8_t</name> *)<name PREFIX:line="203" PREFIX:column="33">g</name>) + <call><name PREFIX:line="203" PREFIX:column="38">u8g_font_GetFontGlyphStructureSize</name><argument_list PREFIX:line="203" PREFIX:column="72">(<argument><expr><name PREFIX:line="203" PREFIX:column="73">font</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="206" PREFIX:column="1">/* calculate the overall length of the font, only used to create the picture for the google wiki */</comment>
<function><type><name PREFIX:line="207" PREFIX:column="1">size_t</name></type> <name PREFIX:line="207" PREFIX:column="8">u8g_font_GetSize</name><parameter_list PREFIX:line="207" PREFIX:column="24">( <param><decl><type><name PREFIX:line="207" PREFIX:column="26">void</name> *</type><name PREFIX:line="207" PREFIX:column="32">font</name></decl></param>)</parameter_list>
<block PREFIX:line="208" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="209" PREFIX:column="3">uint8_t</name> *</type><name PREFIX:line="209" PREFIX:column="12">p</name> <init PREFIX:line="209" PREFIX:column="14">= <expr><call PREFIX:line="209" PREFIX:column="16">(<name PREFIX:line="209" PREFIX:column="17">uint8_t</name> *)<argument_list PREFIX:line="209" PREFIX:column="27">(<argument><expr><name PREFIX:line="209" PREFIX:column="28">font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="210" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="210" PREFIX:column="11">font_format</name> <init PREFIX:line="210" PREFIX:column="23">= <expr><call><name PREFIX:line="210" PREFIX:column="25">u8g_font_GetFormat</name><argument_list PREFIX:line="210" PREFIX:column="43">(<argument><expr><name PREFIX:line="210" PREFIX:column="44">font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="211" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="211" PREFIX:column="11">data_structure_size</name> <init PREFIX:line="211" PREFIX:column="31">= <expr><call><name PREFIX:line="211" PREFIX:column="33">u8g_font_GetFontGlyphStructureSize</name><argument_list PREFIX:line="211" PREFIX:column="67">(<argument><expr><name PREFIX:line="211" PREFIX:column="68">font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="212" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="212" PREFIX:column="11">start</name></decl>, <decl><type ref="prev"/><name PREFIX:line="212" PREFIX:column="18">end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="213" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="213" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="214" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="214" PREFIX:column="11">mask</name> <init PREFIX:line="214" PREFIX:column="16">= <expr PREFIX:line="214" PREFIX:column="18">255</expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name PREFIX:line="216" PREFIX:column="3">start</name> = <call><name PREFIX:line="216" PREFIX:column="11">u8g_font_GetFontStartEncoding</name><argument_list PREFIX:line="216" PREFIX:column="40">(<argument><expr><name PREFIX:line="216" PREFIX:column="41">font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="217" PREFIX:column="3">end</name> = <call><name PREFIX:line="217" PREFIX:column="9">u8g_font_GetFontEndEncoding</name><argument_list PREFIX:line="217" PREFIX:column="36">(<argument><expr><name PREFIX:line="217" PREFIX:column="37">font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if PREFIX:line="219" PREFIX:column="3">if <condition PREFIX:line="219" PREFIX:column="6">( <expr><name PREFIX:line="219" PREFIX:column="8">font_format</name> == 1</expr> )</condition><then PREFIX:line="219" PREFIX:column="26">
    <expr_stmt><expr><name PREFIX:line="220" PREFIX:column="5">mask</name> = 15</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name PREFIX:line="222" PREFIX:column="3">p</name> += <name PREFIX:line="222" PREFIX:column="8">U8G_FONT_DATA_STRUCT_SIZE</name></expr>;</expr_stmt>       <comment type="block" PREFIX:line="222" PREFIX:column="41">/* skip font general information */</comment>  

  <expr_stmt><expr><name PREFIX:line="224" PREFIX:column="3">i</name> = <name PREFIX:line="224" PREFIX:column="7">start</name></expr>;</expr_stmt>  
  <for PREFIX:line="225" PREFIX:column="3">for(<init PREFIX:line="225" PREFIX:column="7">;</init><condition PREFIX:line="225" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="226" PREFIX:column="3">{
    <if PREFIX:line="227" PREFIX:column="5">if <condition PREFIX:line="227" PREFIX:column="8">( <expr><call><name PREFIX:line="227" PREFIX:column="10">u8g_pgm_read</name><argument_list PREFIX:line="227" PREFIX:column="22">(<argument><expr><call PREFIX:line="227" PREFIX:column="23">(<name PREFIX:line="227" PREFIX:column="24">u8g_pgm_uint8_t</name> *)<argument_list PREFIX:line="227" PREFIX:column="42">(<argument><expr><name PREFIX:line="227" PREFIX:column="43">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 255</expr> )</condition><then PREFIX:line="227" PREFIX:column="55">
    <block PREFIX:line="228" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="229" PREFIX:column="7">p</name> += 1</expr>;</expr_stmt>
    }</block></then>
    <else PREFIX:line="231" PREFIX:column="5">else
    <block PREFIX:line="232" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="233" PREFIX:column="7">p</name> += <call><name PREFIX:line="233" PREFIX:column="12">u8g_pgm_read</name><argument_list PREFIX:line="233" PREFIX:column="24">( <argument><expr PREFIX:line="233" PREFIX:column="26">(<call PREFIX:line="233" PREFIX:column="27">(<name PREFIX:line="233" PREFIX:column="28">u8g_pgm_uint8_t</name> *)<argument_list PREFIX:line="233" PREFIX:column="46">(<argument><expr><name PREFIX:line="233" PREFIX:column="47">p</name></expr></argument>)</argument_list></call>) + 2</expr></argument> )</argument_list></call> &amp; <name PREFIX:line="233" PREFIX:column="59">mask</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="234" PREFIX:column="7">p</name> += <name PREFIX:line="234" PREFIX:column="12">data_structure_size</name></expr>;</expr_stmt>
    }</block></else></if>
    <if PREFIX:line="236" PREFIX:column="5">if <condition PREFIX:line="236" PREFIX:column="8">( <expr><name PREFIX:line="236" PREFIX:column="10">i</name> == <name PREFIX:line="236" PREFIX:column="15">end</name></expr> )</condition><then PREFIX:line="236" PREFIX:column="20">
      <break PREFIX:line="237" PREFIX:column="7">break;</break></then></if>
    <expr_stmt><expr><name PREFIX:line="238" PREFIX:column="5">i</name>++</expr>;</expr_stmt>
  }</block></for>
    
  <return PREFIX:line="241" PREFIX:column="3">return <expr><name PREFIX:line="241" PREFIX:column="10">p</name> - (<name PREFIX:line="241" PREFIX:column="15">uint8_t</name> *)<name PREFIX:line="241" PREFIX:column="25">font</name></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="244" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="245" PREFIX:column="1">/* u8g interface, font access */</comment>

<function><type><name PREFIX:line="247" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="247" PREFIX:column="9">u8g_GetFontBBXWidth</name><parameter_list PREFIX:line="247" PREFIX:column="28">(<param><decl><type><name PREFIX:line="247" PREFIX:column="29">u8g_t</name> *</type><name PREFIX:line="247" PREFIX:column="36">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="248" PREFIX:column="1">{
  <return PREFIX:line="249" PREFIX:column="3">return <expr><call><name PREFIX:line="249" PREFIX:column="10">u8g_font_GetBBXWidth</name><argument_list PREFIX:line="249" PREFIX:column="30">(<argument><expr><name><name PREFIX:line="249" PREFIX:column="31">u8g</name>-&gt;<name PREFIX:line="249" PREFIX:column="36">font</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="252" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="252" PREFIX:column="9">u8g_GetFontBBXHeight</name><parameter_list PREFIX:line="252" PREFIX:column="29">(<param><decl><type><name PREFIX:line="252" PREFIX:column="30">u8g_t</name> *</type><name PREFIX:line="252" PREFIX:column="37">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="253" PREFIX:column="1">{
  <return PREFIX:line="254" PREFIX:column="3">return <expr><call><name PREFIX:line="254" PREFIX:column="10">u8g_font_GetBBXHeight</name><argument_list PREFIX:line="254" PREFIX:column="31">(<argument><expr><name><name PREFIX:line="254" PREFIX:column="32">u8g</name>-&gt;<name PREFIX:line="254" PREFIX:column="37">font</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name PREFIX:line="257" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="257" PREFIX:column="8">u8g_GetFontBBXOffX</name><argument_list PREFIX:line="257" PREFIX:column="26">(<argument><expr><name PREFIX:line="257" PREFIX:column="27">u8g_t</name> *<name PREFIX:line="257" PREFIX:column="34">u8g</name></expr></argument>)</argument_list> <name PREFIX:line="257" PREFIX:column="39">U8G_NOINLINE</name></decl>;</decl_stmt>
<function><type><name PREFIX:line="258" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="258" PREFIX:column="8">u8g_GetFontBBXOffX</name><parameter_list PREFIX:line="258" PREFIX:column="26">(<param><decl><type><name PREFIX:line="258" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="258" PREFIX:column="34">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="259" PREFIX:column="1">{
  <return PREFIX:line="260" PREFIX:column="3">return <expr><call><name PREFIX:line="260" PREFIX:column="10">u8g_font_GetBBXOffX</name><argument_list PREFIX:line="260" PREFIX:column="29">(<argument><expr><name><name PREFIX:line="260" PREFIX:column="30">u8g</name>-&gt;<name PREFIX:line="260" PREFIX:column="35">font</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name PREFIX:line="263" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="263" PREFIX:column="8">u8g_GetFontBBXOffY</name><argument_list PREFIX:line="263" PREFIX:column="26">(<argument><expr><name PREFIX:line="263" PREFIX:column="27">u8g_t</name> *<name PREFIX:line="263" PREFIX:column="34">u8g</name></expr></argument>)</argument_list> <name PREFIX:line="263" PREFIX:column="39">U8G_NOINLINE</name></decl>;</decl_stmt>
<function><type><name PREFIX:line="264" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="264" PREFIX:column="8">u8g_GetFontBBXOffY</name><parameter_list PREFIX:line="264" PREFIX:column="26">(<param><decl><type><name PREFIX:line="264" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="264" PREFIX:column="34">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="265" PREFIX:column="1">{
  <return PREFIX:line="266" PREFIX:column="3">return <expr><call><name PREFIX:line="266" PREFIX:column="10">u8g_font_GetBBXOffY</name><argument_list PREFIX:line="266" PREFIX:column="29">(<argument><expr><name><name PREFIX:line="266" PREFIX:column="30">u8g</name>-&gt;<name PREFIX:line="266" PREFIX:column="35">font</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name PREFIX:line="269" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="269" PREFIX:column="9">u8g_GetFontCapitalAHeight</name><argument_list PREFIX:line="269" PREFIX:column="34">(<argument><expr><name PREFIX:line="269" PREFIX:column="35">u8g_t</name> *<name PREFIX:line="269" PREFIX:column="42">u8g</name></expr></argument>)</argument_list> <name PREFIX:line="269" PREFIX:column="47">U8G_NOINLINE</name></decl>;</decl_stmt> 
<function><type><name PREFIX:line="270" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="270" PREFIX:column="9">u8g_GetFontCapitalAHeight</name><parameter_list PREFIX:line="270" PREFIX:column="34">(<param><decl><type><name PREFIX:line="270" PREFIX:column="35">u8g_t</name> *</type><name PREFIX:line="270" PREFIX:column="42">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="271" PREFIX:column="1">{
  <return PREFIX:line="272" PREFIX:column="3">return <expr><call><name PREFIX:line="272" PREFIX:column="10">u8g_font_GetCapitalAHeight</name><argument_list PREFIX:line="272" PREFIX:column="36">(<argument><expr><name><name PREFIX:line="272" PREFIX:column="37">u8g</name>-&gt;<name PREFIX:line="272" PREFIX:column="42">font</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="275" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="276" PREFIX:column="1">/* glyph handling */</comment>

<function><type><specifier PREFIX:line="278" PREFIX:column="1">static</specifier> <name PREFIX:line="278" PREFIX:column="8">void</name></type> <name PREFIX:line="278" PREFIX:column="13">u8g_CopyGlyphDataToCache</name><parameter_list PREFIX:line="278" PREFIX:column="37">(<param><decl><type><name PREFIX:line="278" PREFIX:column="38">u8g_t</name> *</type><name PREFIX:line="278" PREFIX:column="45">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="278" PREFIX:column="50">u8g_glyph_t</name></type> <name PREFIX:line="278" PREFIX:column="62">g</name></decl></param>)</parameter_list>
<block PREFIX:line="279" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="280" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="280" PREFIX:column="11">tmp</name></decl>;</decl_stmt>
  <switch PREFIX:line="281" PREFIX:column="3">switch<condition PREFIX:line="281" PREFIX:column="9">( <expr><call><name PREFIX:line="281" PREFIX:column="11">u8g_font_GetFormat</name><argument_list PREFIX:line="281" PREFIX:column="29">(<argument><expr><name><name PREFIX:line="281" PREFIX:column="30">u8g</name>-&gt;<name PREFIX:line="281" PREFIX:column="35">font</name></name></expr></argument>)</argument_list></call></expr> )</condition>
  <block PREFIX:line="282" PREFIX:column="3">{
    <case PREFIX:line="283" PREFIX:column="5">case <expr PREFIX:line="283" PREFIX:column="10">0</expr>:
    </case><case PREFIX:line="284" PREFIX:column="5">case <expr PREFIX:line="284" PREFIX:column="10">2</expr>:
  <comment type="block" PREFIX:line="285" PREFIX:column="3">/*
    format 0
    glyph information 
    offset
    0             BBX width                                       unknowntype
    1             BBX height                                      unknowntype
    2             data size                                          unknowntype    (BBX width + 7)/8 * BBX height
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */</comment>
      <expr_stmt><expr><name><name PREFIX:line="297" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="297" PREFIX:column="12">glyph_width</name></name> =  <call><name PREFIX:line="297" PREFIX:column="27">u8g_pgm_read</name><argument_list PREFIX:line="297" PREFIX:column="39">( <argument><expr PREFIX:line="297" PREFIX:column="41">((<name PREFIX:line="297" PREFIX:column="43">u8g_pgm_uint8_t</name> *)<name PREFIX:line="297" PREFIX:column="61">g</name>) + 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="298" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="298" PREFIX:column="12">glyph_height</name></name> =  <call><name PREFIX:line="298" PREFIX:column="28">u8g_pgm_read</name><argument_list PREFIX:line="298" PREFIX:column="40">( <argument><expr PREFIX:line="298" PREFIX:column="42">((<name PREFIX:line="298" PREFIX:column="44">u8g_pgm_uint8_t</name> *)<name PREFIX:line="298" PREFIX:column="62">g</name>) + 1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="299" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="299" PREFIX:column="12">glyph_dx</name></name> =  <call><name PREFIX:line="299" PREFIX:column="24">u8g_pgm_read</name><argument_list PREFIX:line="299" PREFIX:column="36">( <argument><expr PREFIX:line="299" PREFIX:column="38">((<name PREFIX:line="299" PREFIX:column="40">u8g_pgm_uint8_t</name> *)<name PREFIX:line="299" PREFIX:column="58">g</name>) + 3</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="300" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="300" PREFIX:column="12">glyph_x</name></name> =  <call><name PREFIX:line="300" PREFIX:column="23">u8g_pgm_read</name><argument_list PREFIX:line="300" PREFIX:column="35">( <argument><expr PREFIX:line="300" PREFIX:column="37">((<name PREFIX:line="300" PREFIX:column="39">u8g_pgm_uint8_t</name> *)<name PREFIX:line="300" PREFIX:column="57">g</name>) + 4</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="301" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="301" PREFIX:column="12">glyph_y</name></name> =  <call><name PREFIX:line="301" PREFIX:column="23">u8g_pgm_read</name><argument_list PREFIX:line="301" PREFIX:column="35">( <argument><expr PREFIX:line="301" PREFIX:column="37">((<name PREFIX:line="301" PREFIX:column="39">u8g_pgm_uint8_t</name> *)<name PREFIX:line="301" PREFIX:column="57">g</name>) + 5</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="302" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="303" PREFIX:column="5">case <expr PREFIX:line="303" PREFIX:column="10">1</expr>:
    </case><default PREFIX:line="304" PREFIX:column="5">default:
      <comment type="block" PREFIX:line="305" PREFIX:column="7">/*
format 1
  0             BBX xoffset                                    signed   --&gt; upper 4 Bit
  0             BBX yoffset                                    signed --&gt; lower 4 Bit
  1             BBX width                                       unknowntype --&gt; upper 4 Bit
  1             BBX height                                      unknowntype --&gt; lower 4 Bit
  2             data size                                           unknowntype -(BBX width + 7)/8 * BBX height  --&gt; lower 4 Bit
  2             DWIDTH                                          signed --&gt; upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */</comment>
    
      <expr_stmt><expr><name PREFIX:line="316" PREFIX:column="7">tmp</name> = <call><name PREFIX:line="316" PREFIX:column="13">u8g_pgm_read</name><argument_list PREFIX:line="316" PREFIX:column="25">( <argument><expr PREFIX:line="316" PREFIX:column="27">((<name PREFIX:line="316" PREFIX:column="29">u8g_pgm_uint8_t</name> *)<name PREFIX:line="316" PREFIX:column="47">g</name>) + 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="317" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="317" PREFIX:column="12">glyph_y</name></name> =  <name PREFIX:line="317" PREFIX:column="23">tmp</name> &amp; 15</expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="318" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="318" PREFIX:column="12">glyph_y</name></name>-=2</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="319" PREFIX:column="7">tmp</name> &gt;&gt;= 4</expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="320" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="320" PREFIX:column="12">glyph_x</name></name> =  <name PREFIX:line="320" PREFIX:column="23">tmp</name></expr>;</expr_stmt>
    
      <expr_stmt><expr><name PREFIX:line="322" PREFIX:column="7">tmp</name> = <call><name PREFIX:line="322" PREFIX:column="13">u8g_pgm_read</name><argument_list PREFIX:line="322" PREFIX:column="25">( <argument><expr PREFIX:line="322" PREFIX:column="27">((<name PREFIX:line="322" PREFIX:column="29">u8g_pgm_uint8_t</name> *)<name PREFIX:line="322" PREFIX:column="47">g</name>) + 1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="323" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="323" PREFIX:column="12">glyph_height</name></name> =  <name PREFIX:line="323" PREFIX:column="28">tmp</name> &amp; 15</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="324" PREFIX:column="7">tmp</name> &gt;&gt;= 4</expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="325" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="325" PREFIX:column="12">glyph_width</name></name> =  <name PREFIX:line="325" PREFIX:column="27">tmp</name></expr>;</expr_stmt>
      
      <expr_stmt><expr><name PREFIX:line="327" PREFIX:column="7">tmp</name> = <call><name PREFIX:line="327" PREFIX:column="13">u8g_pgm_read</name><argument_list PREFIX:line="327" PREFIX:column="25">( <argument><expr PREFIX:line="327" PREFIX:column="27">((<name PREFIX:line="327" PREFIX:column="29">u8g_pgm_uint8_t</name> *)<name PREFIX:line="327" PREFIX:column="47">g</name>) + 2</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="328" PREFIX:column="7">tmp</name> &gt;&gt;= 4</expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="329" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="329" PREFIX:column="12">glyph_dx</name></name> = <name PREFIX:line="329" PREFIX:column="23">tmp</name></expr>;</expr_stmt>
    
      
      <break PREFIX:line="332" PREFIX:column="7">break;</break>
  </default>}</block></switch>
}</block></function>

<comment type="line" PREFIX:line="336" PREFIX:column="1">//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;</comment>
<function><type><specifier PREFIX:line="337" PREFIX:column="1">static</specifier> <name PREFIX:line="337" PREFIX:column="8">void</name></type> <name PREFIX:line="337" PREFIX:column="13">u8g_FillEmptyGlyphCache</name><parameter_list PREFIX:line="337" PREFIX:column="36">(<param><decl><type><name PREFIX:line="337" PREFIX:column="37">u8g_t</name> *</type><name PREFIX:line="337" PREFIX:column="44">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="338" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="339" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="339" PREFIX:column="8">glyph_dx</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="340" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="340" PREFIX:column="8">glyph_width</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="341" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="341" PREFIX:column="8">glyph_height</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="342" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="342" PREFIX:column="8">glyph_x</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="343" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="343" PREFIX:column="8">glyph_y</name></name> = 0</expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="346" PREFIX:column="1">/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/</comment>
<function><type><name PREFIX:line="350" PREFIX:column="1">u8g_glyph_t</name></type> <name PREFIX:line="350" PREFIX:column="13">u8g_GetGlyph</name><parameter_list PREFIX:line="350" PREFIX:column="25">(<param><decl><type><name PREFIX:line="350" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="350" PREFIX:column="33">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="350" PREFIX:column="38">uint8_t</name></type> <name PREFIX:line="350" PREFIX:column="46">requested_encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="351" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="352" PREFIX:column="3">uint8_t</name> *</type><name PREFIX:line="352" PREFIX:column="12">p</name> <init PREFIX:line="352" PREFIX:column="14">= <expr><call PREFIX:line="352" PREFIX:column="16">(<name PREFIX:line="352" PREFIX:column="17">uint8_t</name> *)<argument_list PREFIX:line="352" PREFIX:column="27">(<argument><expr><name><name PREFIX:line="352" PREFIX:column="28">u8g</name>-&gt;<name PREFIX:line="352" PREFIX:column="33">font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="353" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="353" PREFIX:column="11">font_format</name> <init PREFIX:line="353" PREFIX:column="23">= <expr><call><name PREFIX:line="353" PREFIX:column="25">u8g_font_GetFormat</name><argument_list PREFIX:line="353" PREFIX:column="43">(<argument><expr><name><name PREFIX:line="353" PREFIX:column="44">u8g</name>-&gt;<name PREFIX:line="353" PREFIX:column="49">font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="354" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="354" PREFIX:column="11">data_structure_size</name> <init PREFIX:line="354" PREFIX:column="31">= <expr><call><name PREFIX:line="354" PREFIX:column="33">u8g_font_GetFontGlyphStructureSize</name><argument_list PREFIX:line="354" PREFIX:column="67">(<argument><expr><name><name PREFIX:line="354" PREFIX:column="68">u8g</name>-&gt;<name PREFIX:line="354" PREFIX:column="73">font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="355" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="355" PREFIX:column="11">start</name></decl>, <decl><type ref="prev"/><name PREFIX:line="355" PREFIX:column="18">end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="356" PREFIX:column="3">uint16_t</name></type> <name PREFIX:line="356" PREFIX:column="12">pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="357" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="357" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="358" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="358" PREFIX:column="11">mask</name> <init PREFIX:line="358" PREFIX:column="16">= <expr PREFIX:line="358" PREFIX:column="18">255</expr></init></decl>;</decl_stmt>

  <if PREFIX:line="360" PREFIX:column="3">if <condition PREFIX:line="360" PREFIX:column="6">( <expr><name PREFIX:line="360" PREFIX:column="8">font_format</name> == 1</expr> )</condition><then PREFIX:line="360" PREFIX:column="26">
    <expr_stmt><expr><name PREFIX:line="361" PREFIX:column="5">mask</name> = 15</expr>;</expr_stmt></then></if>
  
  <expr_stmt><expr><name PREFIX:line="363" PREFIX:column="3">start</name> = <call><name PREFIX:line="363" PREFIX:column="11">u8g_font_GetFontStartEncoding</name><argument_list PREFIX:line="363" PREFIX:column="40">(<argument><expr><name><name PREFIX:line="363" PREFIX:column="41">u8g</name>-&gt;<name PREFIX:line="363" PREFIX:column="46">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="364" PREFIX:column="3">end</name> = <call><name PREFIX:line="364" PREFIX:column="9">u8g_font_GetFontEndEncoding</name><argument_list PREFIX:line="364" PREFIX:column="36">(<argument><expr><name><name PREFIX:line="364" PREFIX:column="37">u8g</name>-&gt;<name PREFIX:line="364" PREFIX:column="42">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name PREFIX:line="366" PREFIX:column="3">pos</name> = <call><name PREFIX:line="366" PREFIX:column="9">u8g_font_GetEncoding97Pos</name><argument_list PREFIX:line="366" PREFIX:column="34">(<argument><expr><name><name PREFIX:line="366" PREFIX:column="35">u8g</name>-&gt;<name PREFIX:line="366" PREFIX:column="40">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if PREFIX:line="367" PREFIX:column="3">if <condition PREFIX:line="367" PREFIX:column="6">( <expr><name PREFIX:line="367" PREFIX:column="8">requested_encoding</name> &gt;= 97 &amp;&amp; <name PREFIX:line="367" PREFIX:column="36">pos</name> &gt; 0</expr> )</condition><then PREFIX:line="367" PREFIX:column="45">
  <block PREFIX:line="368" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="369" PREFIX:column="5">p</name>+= <name PREFIX:line="369" PREFIX:column="9">pos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="370" PREFIX:column="5">start</name> = 97</expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="372" PREFIX:column="3">else 
  <block PREFIX:line="373" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="374" PREFIX:column="5">pos</name> = <call><name PREFIX:line="374" PREFIX:column="11">u8g_font_GetEncoding65Pos</name><argument_list PREFIX:line="374" PREFIX:column="36">(<argument><expr><name><name PREFIX:line="374" PREFIX:column="37">u8g</name>-&gt;<name PREFIX:line="374" PREFIX:column="42">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if PREFIX:line="375" PREFIX:column="5">if <condition PREFIX:line="375" PREFIX:column="8">( <expr><name PREFIX:line="375" PREFIX:column="10">requested_encoding</name> &gt;= 65 &amp;&amp; <name PREFIX:line="375" PREFIX:column="38">pos</name> &gt; 0</expr> )</condition><then PREFIX:line="375" PREFIX:column="47">
    <block PREFIX:line="376" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="377" PREFIX:column="7">p</name>+= <name PREFIX:line="377" PREFIX:column="11">pos</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="378" PREFIX:column="7">start</name> = 65</expr>;</expr_stmt>
    }</block></then>
    <else PREFIX:line="380" PREFIX:column="5">else
      <expr_stmt><expr><name PREFIX:line="381" PREFIX:column="7">p</name> += <name PREFIX:line="381" PREFIX:column="12">U8G_FONT_DATA_STRUCT_SIZE</name></expr>;</expr_stmt></else></if>       <comment type="block" PREFIX:line="381" PREFIX:column="45">/* skip font general information */</comment>  
  }</block></else></if>
  
  <if PREFIX:line="384" PREFIX:column="3">if <condition PREFIX:line="384" PREFIX:column="6">( <expr><name PREFIX:line="384" PREFIX:column="8">requested_encoding</name> &gt; <name PREFIX:line="384" PREFIX:column="29">end</name></expr> )</condition><then PREFIX:line="384" PREFIX:column="34">
  <block PREFIX:line="385" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="386" PREFIX:column="5">u8g_FillEmptyGlyphCache</name><argument_list PREFIX:line="386" PREFIX:column="28">(<argument><expr><name PREFIX:line="386" PREFIX:column="29">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return PREFIX:line="387" PREFIX:column="5">return <expr><name PREFIX:line="387" PREFIX:column="12">NULL</name></expr>;</return>                      <comment type="block" PREFIX:line="387" PREFIX:column="39">/* not found */</comment>
  }</block></then></if>
  
  <expr_stmt><expr><name PREFIX:line="390" PREFIX:column="3">i</name> = <name PREFIX:line="390" PREFIX:column="7">start</name></expr>;</expr_stmt>
  <if PREFIX:line="391" PREFIX:column="3">if <condition PREFIX:line="391" PREFIX:column="6">( <expr><name PREFIX:line="391" PREFIX:column="8">i</name> &lt;= <name PREFIX:line="391" PREFIX:column="13">end</name></expr> )</condition><then PREFIX:line="391" PREFIX:column="18">
  <block PREFIX:line="392" PREFIX:column="3">{
    <for PREFIX:line="393" PREFIX:column="5">for(<init PREFIX:line="393" PREFIX:column="9">;</init><condition PREFIX:line="393" PREFIX:column="10">;</condition><incr/>)
    <block PREFIX:line="394" PREFIX:column="5">{
      <if PREFIX:line="395" PREFIX:column="7">if <condition PREFIX:line="395" PREFIX:column="10">( <expr><call><name PREFIX:line="395" PREFIX:column="12">u8g_pgm_read</name><argument_list PREFIX:line="395" PREFIX:column="24">(<argument><expr><call PREFIX:line="395" PREFIX:column="25">(<name PREFIX:line="395" PREFIX:column="26">u8g_pgm_uint8_t</name> *)<argument_list PREFIX:line="395" PREFIX:column="44">(<argument><expr><name PREFIX:line="395" PREFIX:column="45">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 255</expr> )</condition><then PREFIX:line="395" PREFIX:column="57">
      <block PREFIX:line="396" PREFIX:column="7">{
        <expr_stmt><expr><name PREFIX:line="397" PREFIX:column="9">p</name> += 1</expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="399" PREFIX:column="7">else
      <block PREFIX:line="400" PREFIX:column="7">{
        <if PREFIX:line="401" PREFIX:column="9">if <condition PREFIX:line="401" PREFIX:column="12">( <expr><name PREFIX:line="401" PREFIX:column="14">i</name> == <name PREFIX:line="401" PREFIX:column="19">requested_encoding</name></expr> )</condition><then PREFIX:line="401" PREFIX:column="39">
        <block PREFIX:line="402" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="403" PREFIX:column="11">u8g_CopyGlyphDataToCache</name><argument_list PREFIX:line="403" PREFIX:column="35">(<argument><expr><name PREFIX:line="403" PREFIX:column="36">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="403" PREFIX:column="41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return PREFIX:line="404" PREFIX:column="11">return <expr><name PREFIX:line="404" PREFIX:column="18">p</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name PREFIX:line="406" PREFIX:column="9">p</name> += <call><name PREFIX:line="406" PREFIX:column="14">u8g_pgm_read</name><argument_list PREFIX:line="406" PREFIX:column="26">( <argument><expr PREFIX:line="406" PREFIX:column="28">(<call PREFIX:line="406" PREFIX:column="29">(<name PREFIX:line="406" PREFIX:column="30">u8g_pgm_uint8_t</name> *)<argument_list PREFIX:line="406" PREFIX:column="48">(<argument><expr><name PREFIX:line="406" PREFIX:column="49">p</name></expr></argument>)</argument_list></call>) + 2</expr></argument> )</argument_list></call> &amp; <name PREFIX:line="406" PREFIX:column="61">mask</name></expr>;</expr_stmt>
        <expr_stmt><expr><name PREFIX:line="407" PREFIX:column="9">p</name> += <name PREFIX:line="407" PREFIX:column="14">data_structure_size</name></expr>;</expr_stmt>
      }</block></else></if>
      <if PREFIX:line="409" PREFIX:column="7">if <condition PREFIX:line="409" PREFIX:column="10">( <expr><name PREFIX:line="409" PREFIX:column="12">i</name> == <name PREFIX:line="409" PREFIX:column="17">end</name></expr> )</condition><then PREFIX:line="409" PREFIX:column="22">
        <break PREFIX:line="410" PREFIX:column="9">break;</break></then></if>
      <expr_stmt><expr><name PREFIX:line="411" PREFIX:column="7">i</name>++</expr>;</expr_stmt>
    }</block></for>
  }</block></then></if>
  
  <expr_stmt><expr><call><name PREFIX:line="415" PREFIX:column="3">u8g_FillEmptyGlyphCache</name><argument_list PREFIX:line="415" PREFIX:column="26">(<argument><expr><name PREFIX:line="415" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <return PREFIX:line="417" PREFIX:column="3">return <expr><name PREFIX:line="417" PREFIX:column="10">NULL</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="420" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="420" PREFIX:column="9">u8g_IsGlyph</name><parameter_list PREFIX:line="420" PREFIX:column="20">(<param><decl><type><name PREFIX:line="420" PREFIX:column="21">u8g_t</name> *</type><name PREFIX:line="420" PREFIX:column="28">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="420" PREFIX:column="33">uint8_t</name></type> <name PREFIX:line="420" PREFIX:column="41">requested_encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="421" PREFIX:column="1">{
  <if PREFIX:line="422" PREFIX:column="3">if <condition PREFIX:line="422" PREFIX:column="6">( <expr><call><name PREFIX:line="422" PREFIX:column="8">u8g_GetGlyph</name><argument_list PREFIX:line="422" PREFIX:column="20">(<argument><expr><name PREFIX:line="422" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="422" PREFIX:column="26">requested_encoding</name></expr></argument>)</argument_list></call> != <name PREFIX:line="422" PREFIX:column="49">NULL</name></expr> )</condition><then PREFIX:line="422" PREFIX:column="55">
    <return PREFIX:line="423" PREFIX:column="5">return <expr PREFIX:line="423" PREFIX:column="12">1</expr>;</return></then></if>
  <return PREFIX:line="424" PREFIX:column="3">return <expr PREFIX:line="424" PREFIX:column="10">0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="427" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="427" PREFIX:column="8">u8g_GetGlyphDeltaX</name><parameter_list PREFIX:line="427" PREFIX:column="26">(<param><decl><type><name PREFIX:line="427" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="427" PREFIX:column="34">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="427" PREFIX:column="39">uint8_t</name></type> <name PREFIX:line="427" PREFIX:column="47">requested_encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="428" PREFIX:column="1">{
  <if PREFIX:line="429" PREFIX:column="3">if <condition PREFIX:line="429" PREFIX:column="6">( <expr><call><name PREFIX:line="429" PREFIX:column="8">u8g_GetGlyph</name><argument_list PREFIX:line="429" PREFIX:column="20">(<argument><expr><name PREFIX:line="429" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="429" PREFIX:column="26">requested_encoding</name></expr></argument>)</argument_list></call> == <name PREFIX:line="429" PREFIX:column="49">NULL</name></expr> )</condition><then PREFIX:line="429" PREFIX:column="55">
    <return PREFIX:line="430" PREFIX:column="5">return <expr PREFIX:line="430" PREFIX:column="12">0</expr>;</return></then></if>  <comment type="block" PREFIX:line="430" PREFIX:column="16">/* should never happen, so return something */</comment>
  <return PREFIX:line="431" PREFIX:column="3">return <expr><name><name PREFIX:line="431" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="431" PREFIX:column="15">glyph_dx</name></name></expr>;</return>
}</block></function>


<comment type="block" PREFIX:line="435" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="436" PREFIX:column="1">/* glyph drawing procedures */</comment>

<cpp:ifdef PREFIX:line="438" PREFIX:column="1">#<cpp:directive PREFIX:line="438" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="438" PREFIX:column="8">OBSOLETE</name></cpp:ifdef>
<comment type="block" PREFIX:line="439" PREFIX:column="1">/*
  Draw a glyph
  x,y: left baseline position of the glyph
*/</comment>
<function><type><name PREFIX:line="443" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="443" PREFIX:column="8">u8g_DrawGlyphDir</name><parameter_list PREFIX:line="443" PREFIX:column="24">(<param><decl><type><name PREFIX:line="443" PREFIX:column="25">u8g_t</name> *</type><name PREFIX:line="443" PREFIX:column="32">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="443" PREFIX:column="37">u8g_uint_t</name></type> <name PREFIX:line="443" PREFIX:column="48">x</name></decl></param>, <param><decl><type><name PREFIX:line="443" PREFIX:column="51">u8g_uint_t</name></type> <name PREFIX:line="443" PREFIX:column="62">y</name></decl></param>, <param><decl><type><name PREFIX:line="443" PREFIX:column="65">uint8_t</name></type> <name PREFIX:line="443" PREFIX:column="73">dir</name></decl></param>, <param><decl><type><name PREFIX:line="443" PREFIX:column="78">uint8_t</name></type> <name PREFIX:line="443" PREFIX:column="86">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="444" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="445" PREFIX:column="3">u8g_glyph_t</name></type> <name PREFIX:line="445" PREFIX:column="15">g</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="446" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="446" PREFIX:column="11">w</name></decl>, <decl><type ref="prev"/><name PREFIX:line="446" PREFIX:column="14">h</name></decl>, <decl><type ref="prev"/><name PREFIX:line="446" PREFIX:column="17">i</name></decl>, <decl><type ref="prev"/><name PREFIX:line="446" PREFIX:column="20">j</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name PREFIX:line="447" PREFIX:column="4">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="447" PREFIX:column="21">data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="448" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="448" PREFIX:column="11">bytes_per_line</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="449" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="449" PREFIX:column="14">ix</name></decl>, <decl><type ref="prev"/><name PREFIX:line="449" PREFIX:column="18">iy</name></decl>;</decl_stmt>

  <expr_stmt><expr><name PREFIX:line="451" PREFIX:column="3">g</name> = <call><name PREFIX:line="451" PREFIX:column="7">u8g_GetGlyph</name><argument_list PREFIX:line="451" PREFIX:column="19">(<argument><expr><name PREFIX:line="451" PREFIX:column="20">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="451" PREFIX:column="25">encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if PREFIX:line="452" PREFIX:column="3">if <condition PREFIX:line="452" PREFIX:column="6">( <expr><name PREFIX:line="452" PREFIX:column="8">g</name> == <name PREFIX:line="452" PREFIX:column="13">NULL</name></expr>  )</condition><then PREFIX:line="452" PREFIX:column="20">
    <return PREFIX:line="453" PREFIX:column="5">return <expr PREFIX:line="453" PREFIX:column="12">0</expr>;</return></then></if>
  <expr_stmt><expr><name PREFIX:line="454" PREFIX:column="3">w</name> = <name><name PREFIX:line="454" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="454" PREFIX:column="12">glyph_width</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="455" PREFIX:column="3">h</name> = <name><name PREFIX:line="455" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="455" PREFIX:column="12">glyph_height</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name PREFIX:line="457" PREFIX:column="3">bytes_per_line</name> = <name PREFIX:line="457" PREFIX:column="20">w</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="458" PREFIX:column="3">bytes_per_line</name> += 7</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="459" PREFIX:column="3">bytes_per_line</name> /= 8</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="461" PREFIX:column="3">data</name> = <call><name PREFIX:line="461" PREFIX:column="10">u8g_font_GetGlyphDataStart</name><argument_list PREFIX:line="461" PREFIX:column="36">(<argument><expr><name><name PREFIX:line="461" PREFIX:column="37">u8g</name>-&gt;<name PREFIX:line="461" PREFIX:column="42">font</name></name></expr></argument>, <argument><expr><name PREFIX:line="461" PREFIX:column="48">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch PREFIX:line="463" PREFIX:column="3">switch<condition PREFIX:line="463" PREFIX:column="9">(<expr><name PREFIX:line="463" PREFIX:column="10">dir</name></expr>)</condition>
  <block PREFIX:line="464" PREFIX:column="3">{
    <case PREFIX:line="465" PREFIX:column="5">case <expr PREFIX:line="465" PREFIX:column="10">0</expr>:
      <expr_stmt><expr><name PREFIX:line="466" PREFIX:column="7">x</name> += <name><name PREFIX:line="466" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="466" PREFIX:column="17">glyph_x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="467" PREFIX:column="7">y</name> -= <name><name PREFIX:line="467" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="467" PREFIX:column="17">glyph_y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="468" PREFIX:column="7">y</name>--</expr>;</expr_stmt>
      <comment type="line" PREFIX:line="469" PREFIX:column="7">//u8g_DrawFrame(u8g, x, y-h+1, w, h);</comment>
      <if PREFIX:line="470" PREFIX:column="7">if <condition PREFIX:line="470" PREFIX:column="10">( <expr><call><name PREFIX:line="470" PREFIX:column="12">u8g_IsBBXIntersection</name><argument_list PREFIX:line="470" PREFIX:column="33">(<argument><expr><name PREFIX:line="470" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="470" PREFIX:column="39">x</name></expr></argument>, <argument><expr><name PREFIX:line="470" PREFIX:column="42">y</name>-<name PREFIX:line="470" PREFIX:column="44">h</name>+1</expr></argument>, <argument><expr><name PREFIX:line="470" PREFIX:column="49">w</name></expr></argument>, <argument><expr><name PREFIX:line="470" PREFIX:column="52">h</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="470" PREFIX:column="61">
        <return PREFIX:line="471" PREFIX:column="9">return <expr><name><name PREFIX:line="471" PREFIX:column="16">u8g</name>-&gt;<name PREFIX:line="471" PREFIX:column="21">glyph_dx</name></name></expr>;</return></then></if>
      
      <expr_stmt><expr><name PREFIX:line="473" PREFIX:column="7">iy</name> = <name PREFIX:line="473" PREFIX:column="12">y</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="474" PREFIX:column="7">iy</name> -= <name PREFIX:line="474" PREFIX:column="13">h</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="475" PREFIX:column="7">iy</name>++</expr>;</expr_stmt>
      
      <for PREFIX:line="477" PREFIX:column="7">for( <init><expr><name PREFIX:line="477" PREFIX:column="12">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="477" PREFIX:column="19">j</name> &lt; <name PREFIX:line="477" PREFIX:column="23">h</name></expr>;</condition> <incr><expr><name PREFIX:line="477" PREFIX:column="26">j</name>++</expr></incr> )
      <block PREFIX:line="478" PREFIX:column="7">{
        <expr_stmt><expr><name PREFIX:line="479" PREFIX:column="9">ix</name> = <name PREFIX:line="479" PREFIX:column="14">x</name></expr>;</expr_stmt>
        <for PREFIX:line="480" PREFIX:column="9">for( <init><expr><name PREFIX:line="480" PREFIX:column="14">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="480" PREFIX:column="21">i</name> &lt; <name PREFIX:line="480" PREFIX:column="25">bytes_per_line</name></expr>;</condition> <incr><expr><name PREFIX:line="480" PREFIX:column="41">i</name>++</expr></incr> )
        <block PREFIX:line="481" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="482" PREFIX:column="11">u8g_Draw8Pixel</name><argument_list PREFIX:line="482" PREFIX:column="25">(<argument><expr><name PREFIX:line="482" PREFIX:column="26">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="482" PREFIX:column="31">ix</name></expr></argument>, <argument><expr><name PREFIX:line="482" PREFIX:column="35">iy</name></expr></argument>, <argument><expr><name PREFIX:line="482" PREFIX:column="39">dir</name></expr></argument>, <argument><expr><call><name PREFIX:line="482" PREFIX:column="44">u8g_pgm_read</name><argument_list PREFIX:line="482" PREFIX:column="56">(<argument><expr><name PREFIX:line="482" PREFIX:column="57">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="483" PREFIX:column="11">data</name>++</expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="484" PREFIX:column="11">ix</name>+=8</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name PREFIX:line="486" PREFIX:column="9">iy</name>++</expr>;</expr_stmt>
      }</block></for>
      <break PREFIX:line="488" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="489" PREFIX:column="5">case <expr PREFIX:line="489" PREFIX:column="10">1</expr>:
      <expr_stmt><expr><name PREFIX:line="490" PREFIX:column="7">x</name> += <name><name PREFIX:line="490" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="490" PREFIX:column="17">glyph_y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="491" PREFIX:column="7">x</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="492" PREFIX:column="7">y</name> += <name><name PREFIX:line="492" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="492" PREFIX:column="17">glyph_x</name></name></expr>;</expr_stmt>
      <comment type="line" PREFIX:line="493" PREFIX:column="7">//printf("enc %d, dir %d, x %d, y %d, w %d, h %d\n", encoding, dir, x, y, w, h);</comment>
      <comment type="line" PREFIX:line="494" PREFIX:column="7">//u8g_DrawFrame(u8g, x, y, h, w);</comment>
      <if PREFIX:line="495" PREFIX:column="7">if <condition PREFIX:line="495" PREFIX:column="10">( <expr><call><name PREFIX:line="495" PREFIX:column="12">u8g_IsBBXIntersection</name><argument_list PREFIX:line="495" PREFIX:column="33">(<argument><expr><name PREFIX:line="495" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="495" PREFIX:column="39">x</name></expr></argument>, <argument><expr><name PREFIX:line="495" PREFIX:column="42">y</name></expr></argument>, <argument><expr><name PREFIX:line="495" PREFIX:column="45">h</name></expr></argument>, <argument><expr><name PREFIX:line="495" PREFIX:column="48">w</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="495" PREFIX:column="57">
        <return PREFIX:line="496" PREFIX:column="9">return <expr><name><name PREFIX:line="496" PREFIX:column="16">u8g</name>-&gt;<name PREFIX:line="496" PREFIX:column="21">glyph_dx</name></name></expr>;</return></then></if>
      
      <expr_stmt><expr><name PREFIX:line="498" PREFIX:column="7">ix</name> = <name PREFIX:line="498" PREFIX:column="12">x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="499" PREFIX:column="7">ix</name> += <name PREFIX:line="499" PREFIX:column="13">h</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="500" PREFIX:column="7">ix</name>--</expr>;</expr_stmt>
      <for PREFIX:line="501" PREFIX:column="7">for( <init><expr><name PREFIX:line="501" PREFIX:column="12">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="501" PREFIX:column="19">j</name> &lt; <name PREFIX:line="501" PREFIX:column="23">h</name></expr>;</condition> <incr><expr><name PREFIX:line="501" PREFIX:column="26">j</name>++</expr></incr> )
      <block PREFIX:line="502" PREFIX:column="7">{
        <expr_stmt><expr><name PREFIX:line="503" PREFIX:column="9">iy</name> = <name PREFIX:line="503" PREFIX:column="14">y</name></expr>;</expr_stmt>
        <for PREFIX:line="504" PREFIX:column="9">for( <init><expr><name PREFIX:line="504" PREFIX:column="14">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="504" PREFIX:column="21">i</name> &lt; <name PREFIX:line="504" PREFIX:column="25">bytes_per_line</name></expr>;</condition> <incr><expr><name PREFIX:line="504" PREFIX:column="41">i</name>++</expr></incr> )
        <block PREFIX:line="505" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="506" PREFIX:column="11">u8g_Draw8Pixel</name><argument_list PREFIX:line="506" PREFIX:column="25">(<argument><expr><name PREFIX:line="506" PREFIX:column="26">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="506" PREFIX:column="31">ix</name></expr></argument>, <argument><expr><name PREFIX:line="506" PREFIX:column="35">iy</name></expr></argument>, <argument><expr><name PREFIX:line="506" PREFIX:column="39">dir</name></expr></argument>, <argument><expr><call><name PREFIX:line="506" PREFIX:column="44">u8g_pgm_read</name><argument_list PREFIX:line="506" PREFIX:column="56">(<argument><expr><name PREFIX:line="506" PREFIX:column="57">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="507" PREFIX:column="11">data</name>++</expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="508" PREFIX:column="11">iy</name>+=8</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name PREFIX:line="510" PREFIX:column="9">ix</name>--</expr>;</expr_stmt>
      }</block></for>
      <break PREFIX:line="512" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="513" PREFIX:column="5">case <expr PREFIX:line="513" PREFIX:column="10">2</expr>:
      <expr_stmt><expr><name PREFIX:line="514" PREFIX:column="7">x</name> -= <name><name PREFIX:line="514" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="514" PREFIX:column="17">glyph_x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="515" PREFIX:column="7">y</name> += <name><name PREFIX:line="515" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="515" PREFIX:column="17">glyph_y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="516" PREFIX:column="7">y</name>++</expr>;</expr_stmt>
      <if PREFIX:line="517" PREFIX:column="7">if <condition PREFIX:line="517" PREFIX:column="10">( <expr><call><name PREFIX:line="517" PREFIX:column="12">u8g_IsBBXIntersection</name><argument_list PREFIX:line="517" PREFIX:column="33">(<argument><expr><name PREFIX:line="517" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="517" PREFIX:column="39">x</name>-<name PREFIX:line="517" PREFIX:column="41">w</name>-1</expr></argument>, <argument><expr><name PREFIX:line="517" PREFIX:column="46">y</name></expr></argument>, <argument><expr><name PREFIX:line="517" PREFIX:column="49">w</name></expr></argument>, <argument><expr><name PREFIX:line="517" PREFIX:column="52">h</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="517" PREFIX:column="61">
        <return PREFIX:line="518" PREFIX:column="9">return <expr><name><name PREFIX:line="518" PREFIX:column="16">u8g</name>-&gt;<name PREFIX:line="518" PREFIX:column="21">glyph_dx</name></name></expr>;</return></then></if>
      
      <expr_stmt><expr><name PREFIX:line="520" PREFIX:column="7">iy</name> = <name PREFIX:line="520" PREFIX:column="12">y</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="521" PREFIX:column="7">iy</name> += <name PREFIX:line="521" PREFIX:column="13">h</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="522" PREFIX:column="7">iy</name>--</expr>;</expr_stmt>
      <for PREFIX:line="523" PREFIX:column="7">for( <init><expr><name PREFIX:line="523" PREFIX:column="12">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="523" PREFIX:column="19">j</name> &lt; <name PREFIX:line="523" PREFIX:column="23">h</name></expr>;</condition> <incr><expr><name PREFIX:line="523" PREFIX:column="26">j</name>++</expr></incr> )
      <block PREFIX:line="524" PREFIX:column="7">{
        <expr_stmt><expr><name PREFIX:line="525" PREFIX:column="9">ix</name> = <name PREFIX:line="525" PREFIX:column="14">x</name></expr>;</expr_stmt>
        <for PREFIX:line="526" PREFIX:column="9">for( <init><expr><name PREFIX:line="526" PREFIX:column="14">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="526" PREFIX:column="21">i</name> &lt; <name PREFIX:line="526" PREFIX:column="25">bytes_per_line</name></expr>;</condition> <incr><expr><name PREFIX:line="526" PREFIX:column="41">i</name>++</expr></incr> )
        <block PREFIX:line="527" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="528" PREFIX:column="11">u8g_Draw8Pixel</name><argument_list PREFIX:line="528" PREFIX:column="25">(<argument><expr><name PREFIX:line="528" PREFIX:column="26">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="528" PREFIX:column="31">ix</name></expr></argument>, <argument><expr><name PREFIX:line="528" PREFIX:column="35">iy</name></expr></argument>, <argument><expr><name PREFIX:line="528" PREFIX:column="39">dir</name></expr></argument>, <argument><expr><call><name PREFIX:line="528" PREFIX:column="44">u8g_pgm_read</name><argument_list PREFIX:line="528" PREFIX:column="56">(<argument><expr><name PREFIX:line="528" PREFIX:column="57">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="529" PREFIX:column="11">data</name>++</expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="530" PREFIX:column="11">ix</name>-=8</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name PREFIX:line="532" PREFIX:column="9">iy</name>--</expr>;</expr_stmt>
      }</block></for>
      <break PREFIX:line="534" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="535" PREFIX:column="5">case <expr PREFIX:line="535" PREFIX:column="10">3</expr>:
      <expr_stmt><expr><name PREFIX:line="536" PREFIX:column="7">x</name> -= <name><name PREFIX:line="536" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="536" PREFIX:column="17">glyph_y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="537" PREFIX:column="7">x</name>--</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="538" PREFIX:column="7">y</name> -= <name><name PREFIX:line="538" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="538" PREFIX:column="17">glyph_x</name></name></expr>;</expr_stmt>
      
      <if PREFIX:line="540" PREFIX:column="7">if <condition PREFIX:line="540" PREFIX:column="10">( <expr><call><name PREFIX:line="540" PREFIX:column="12">u8g_IsBBXIntersection</name><argument_list PREFIX:line="540" PREFIX:column="33">(<argument><expr><name PREFIX:line="540" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="540" PREFIX:column="39">x</name>-<name PREFIX:line="540" PREFIX:column="41">h</name>-1</expr></argument>, <argument><expr><name PREFIX:line="540" PREFIX:column="46">y</name>-<name PREFIX:line="540" PREFIX:column="48">w</name>-1</expr></argument>, <argument><expr><name PREFIX:line="540" PREFIX:column="53">h</name></expr></argument>, <argument><expr><name PREFIX:line="540" PREFIX:column="56">w</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="540" PREFIX:column="65">
        <return PREFIX:line="541" PREFIX:column="9">return <expr><name><name PREFIX:line="541" PREFIX:column="16">u8g</name>-&gt;<name PREFIX:line="541" PREFIX:column="21">glyph_dx</name></name></expr>;</return></then></if>
      
      <expr_stmt><expr><name PREFIX:line="543" PREFIX:column="7">ix</name> = <name PREFIX:line="543" PREFIX:column="12">x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="544" PREFIX:column="7">ix</name> -= <name PREFIX:line="544" PREFIX:column="13">h</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="545" PREFIX:column="7">ix</name>++</expr>;</expr_stmt>
      
      <for PREFIX:line="547" PREFIX:column="7">for( <init><expr><name PREFIX:line="547" PREFIX:column="12">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="547" PREFIX:column="19">j</name> &lt; <name PREFIX:line="547" PREFIX:column="23">h</name></expr>;</condition> <incr><expr><name PREFIX:line="547" PREFIX:column="26">j</name>++</expr></incr> )
      <block PREFIX:line="548" PREFIX:column="7">{
        <expr_stmt><expr><name PREFIX:line="549" PREFIX:column="9">iy</name> = <name PREFIX:line="549" PREFIX:column="14">y</name></expr>;</expr_stmt>
        <for PREFIX:line="550" PREFIX:column="9">for( <init><expr><name PREFIX:line="550" PREFIX:column="14">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="550" PREFIX:column="21">i</name> &lt; <name PREFIX:line="550" PREFIX:column="25">bytes_per_line</name></expr>;</condition> <incr><expr><name PREFIX:line="550" PREFIX:column="41">i</name>++</expr></incr> )
        <block PREFIX:line="551" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="552" PREFIX:column="11">u8g_Draw8Pixel</name><argument_list PREFIX:line="552" PREFIX:column="25">(<argument><expr><name PREFIX:line="552" PREFIX:column="26">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="552" PREFIX:column="31">ix</name></expr></argument>, <argument><expr><name PREFIX:line="552" PREFIX:column="35">iy</name></expr></argument>, <argument><expr><name PREFIX:line="552" PREFIX:column="39">dir</name></expr></argument>, <argument><expr><call><name PREFIX:line="552" PREFIX:column="44">u8g_pgm_read</name><argument_list PREFIX:line="552" PREFIX:column="56">(<argument><expr><name PREFIX:line="552" PREFIX:column="57">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="553" PREFIX:column="11">data</name>++</expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="554" PREFIX:column="11">iy</name>-=8</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name PREFIX:line="556" PREFIX:column="9">ix</name>++</expr>;</expr_stmt>
      }</block></for>
      <break PREFIX:line="558" PREFIX:column="7">break;</break>    
  </case>}</block></switch>
  <return PREFIX:line="560" PREFIX:column="3">return <expr><name><name PREFIX:line="560" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="560" PREFIX:column="15">glyph_dx</name></name></expr>;</return>
}</block></function>
<cpp:endif PREFIX:line="562" PREFIX:column="1">#<cpp:directive PREFIX:line="562" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<function><type><name PREFIX:line="564" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="564" PREFIX:column="8">u8g_draw_glyph</name><parameter_list PREFIX:line="564" PREFIX:column="22">(<param><decl><type><name PREFIX:line="564" PREFIX:column="23">u8g_t</name> *</type><name PREFIX:line="564" PREFIX:column="30">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="564" PREFIX:column="35">u8g_uint_t</name></type> <name PREFIX:line="564" PREFIX:column="46">x</name></decl></param>, <param><decl><type><name PREFIX:line="564" PREFIX:column="49">u8g_uint_t</name></type> <name PREFIX:line="564" PREFIX:column="60">y</name></decl></param>, <param><decl><type><name PREFIX:line="564" PREFIX:column="63">uint8_t</name></type> <name PREFIX:line="564" PREFIX:column="71">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="565" PREFIX:column="1">{
   <decl_stmt><decl><type><name PREFIX:line="566" PREFIX:column="4">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="566" PREFIX:column="21">data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="567" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="567" PREFIX:column="11">w</name></decl>, <decl><type ref="prev"/><name PREFIX:line="567" PREFIX:column="14">h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="568" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="568" PREFIX:column="11">i</name></decl>, <decl><type ref="prev"/><name PREFIX:line="568" PREFIX:column="14">j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="569" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="569" PREFIX:column="14">ix</name></decl>, <decl><type ref="prev"/><name PREFIX:line="569" PREFIX:column="18">iy</name></decl>;</decl_stmt>

  <block PREFIX:line="571" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="572" PREFIX:column="5">u8g_glyph_t</name></type> <name PREFIX:line="572" PREFIX:column="17">g</name> <init PREFIX:line="572" PREFIX:column="19">= <expr><call><name PREFIX:line="572" PREFIX:column="21">u8g_GetGlyph</name><argument_list PREFIX:line="572" PREFIX:column="33">(<argument><expr><name PREFIX:line="572" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="572" PREFIX:column="39">encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if PREFIX:line="573" PREFIX:column="5">if <condition PREFIX:line="573" PREFIX:column="8">( <expr><name PREFIX:line="573" PREFIX:column="10">g</name> == <name PREFIX:line="573" PREFIX:column="15">NULL</name></expr>  )</condition><then PREFIX:line="573" PREFIX:column="22">
      <return PREFIX:line="574" PREFIX:column="7">return <expr PREFIX:line="574" PREFIX:column="14">0</expr>;</return></then></if>
    <expr_stmt><expr><name PREFIX:line="575" PREFIX:column="5">data</name> = <call><name PREFIX:line="575" PREFIX:column="12">u8g_font_GetGlyphDataStart</name><argument_list PREFIX:line="575" PREFIX:column="38">(<argument><expr><name><name PREFIX:line="575" PREFIX:column="39">u8g</name>-&gt;<name PREFIX:line="575" PREFIX:column="44">font</name></name></expr></argument>, <argument><expr><name PREFIX:line="575" PREFIX:column="50">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  
  <expr_stmt><expr><name PREFIX:line="578" PREFIX:column="3">w</name> = <name><name PREFIX:line="578" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="578" PREFIX:column="12">glyph_width</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="579" PREFIX:column="3">h</name> = <name><name PREFIX:line="579" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="579" PREFIX:column="12">glyph_height</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="581" PREFIX:column="3">x</name> += <name><name PREFIX:line="581" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="581" PREFIX:column="13">glyph_x</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="582" PREFIX:column="3">y</name> -= <name><name PREFIX:line="582" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="582" PREFIX:column="13">glyph_y</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="583" PREFIX:column="3">y</name>--</expr>;</expr_stmt>
  
  <if PREFIX:line="585" PREFIX:column="3">if <condition PREFIX:line="585" PREFIX:column="6">( <expr><call><name PREFIX:line="585" PREFIX:column="8">u8g_IsBBXIntersection</name><argument_list PREFIX:line="585" PREFIX:column="29">(<argument><expr><name PREFIX:line="585" PREFIX:column="30">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="585" PREFIX:column="35">x</name></expr></argument>, <argument><expr><name PREFIX:line="585" PREFIX:column="38">y</name>-<name PREFIX:line="585" PREFIX:column="40">h</name>+1</expr></argument>, <argument><expr><name PREFIX:line="585" PREFIX:column="45">w</name></expr></argument>, <argument><expr><name PREFIX:line="585" PREFIX:column="48">h</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="585" PREFIX:column="57">
    <return PREFIX:line="586" PREFIX:column="5">return <expr><name><name PREFIX:line="586" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="586" PREFIX:column="17">glyph_dx</name></name></expr>;</return></then></if>

  <comment type="block" PREFIX:line="588" PREFIX:column="3">/* now, w is reused as bytes per line */</comment>
  <expr_stmt><expr><name PREFIX:line="589" PREFIX:column="3">w</name> += 7</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="590" PREFIX:column="3">w</name> /= 8</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="592" PREFIX:column="3">iy</name> = <name PREFIX:line="592" PREFIX:column="8">y</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="593" PREFIX:column="3">iy</name> -= <name PREFIX:line="593" PREFIX:column="9">h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="594" PREFIX:column="3">iy</name>++</expr>;</expr_stmt>

  <for PREFIX:line="596" PREFIX:column="3">for( <init><expr><name PREFIX:line="596" PREFIX:column="8">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="596" PREFIX:column="15">j</name> &lt; <name PREFIX:line="596" PREFIX:column="19">h</name></expr>;</condition> <incr><expr><name PREFIX:line="596" PREFIX:column="22">j</name>++</expr></incr> )
  <block PREFIX:line="597" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="598" PREFIX:column="5">ix</name> = <name PREFIX:line="598" PREFIX:column="10">x</name></expr>;</expr_stmt>
    <for PREFIX:line="599" PREFIX:column="5">for( <init><expr><name PREFIX:line="599" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="599" PREFIX:column="17">i</name> &lt; <name PREFIX:line="599" PREFIX:column="21">w</name></expr>;</condition> <incr><expr><name PREFIX:line="599" PREFIX:column="24">i</name>++</expr></incr> )
    <block PREFIX:line="600" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="601" PREFIX:column="7">u8g_Draw8Pixel</name><argument_list PREFIX:line="601" PREFIX:column="21">(<argument><expr><name PREFIX:line="601" PREFIX:column="22">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="601" PREFIX:column="27">ix</name></expr></argument>, <argument><expr><name PREFIX:line="601" PREFIX:column="31">iy</name></expr></argument>, <argument><expr PREFIX:line="601" PREFIX:column="35">0</expr></argument>, <argument><expr><call><name PREFIX:line="601" PREFIX:column="38">u8g_pgm_read</name><argument_list PREFIX:line="601" PREFIX:column="50">(<argument><expr><name PREFIX:line="601" PREFIX:column="51">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="602" PREFIX:column="7">data</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="603" PREFIX:column="7">ix</name>+=8</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name PREFIX:line="605" PREFIX:column="5">iy</name>++</expr>;</expr_stmt>
  }</block></for>
  <return PREFIX:line="607" PREFIX:column="3">return <expr><name><name PREFIX:line="607" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="607" PREFIX:column="15">glyph_dx</name></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="610" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="610" PREFIX:column="8">u8g_DrawGlyph</name><parameter_list PREFIX:line="610" PREFIX:column="21">(<param><decl><type><name PREFIX:line="610" PREFIX:column="22">u8g_t</name> *</type><name PREFIX:line="610" PREFIX:column="29">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="610" PREFIX:column="34">u8g_uint_t</name></type> <name PREFIX:line="610" PREFIX:column="45">x</name></decl></param>, <param><decl><type><name PREFIX:line="610" PREFIX:column="48">u8g_uint_t</name></type> <name PREFIX:line="610" PREFIX:column="59">y</name></decl></param>, <param><decl><type><name PREFIX:line="610" PREFIX:column="62">uint8_t</name></type> <name PREFIX:line="610" PREFIX:column="70">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="611" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="612" PREFIX:column="3">y</name> += <call><name><name PREFIX:line="612" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="612" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="612" PREFIX:column="27">(<argument><expr><name PREFIX:line="612" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="613" PREFIX:column="3">return <expr><call><name PREFIX:line="613" PREFIX:column="10">u8g_draw_glyph</name><argument_list PREFIX:line="613" PREFIX:column="24">(<argument><expr><name PREFIX:line="613" PREFIX:column="25">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="613" PREFIX:column="30">x</name></expr></argument>, <argument><expr><name PREFIX:line="613" PREFIX:column="33">y</name></expr></argument>, <argument><expr><name PREFIX:line="613" PREFIX:column="36">encoding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="616" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="616" PREFIX:column="8">u8g_draw_glyph90</name><parameter_list PREFIX:line="616" PREFIX:column="24">(<param><decl><type><name PREFIX:line="616" PREFIX:column="25">u8g_t</name> *</type><name PREFIX:line="616" PREFIX:column="32">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="616" PREFIX:column="37">u8g_uint_t</name></type> <name PREFIX:line="616" PREFIX:column="48">x</name></decl></param>, <param><decl><type><name PREFIX:line="616" PREFIX:column="51">u8g_uint_t</name></type> <name PREFIX:line="616" PREFIX:column="62">y</name></decl></param>, <param><decl><type><name PREFIX:line="616" PREFIX:column="65">uint8_t</name></type> <name PREFIX:line="616" PREFIX:column="73">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="617" PREFIX:column="1">{
   <decl_stmt><decl><type><name PREFIX:line="618" PREFIX:column="4">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="618" PREFIX:column="21">data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="619" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="619" PREFIX:column="11">w</name></decl>, <decl><type ref="prev"/><name PREFIX:line="619" PREFIX:column="14">h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="620" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="620" PREFIX:column="11">i</name></decl>, <decl><type ref="prev"/><name PREFIX:line="620" PREFIX:column="14">j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="621" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="621" PREFIX:column="14">ix</name></decl>, <decl><type ref="prev"/><name PREFIX:line="621" PREFIX:column="18">iy</name></decl>;</decl_stmt>

  <block PREFIX:line="623" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="624" PREFIX:column="5">u8g_glyph_t</name></type> <name PREFIX:line="624" PREFIX:column="17">g</name> <init PREFIX:line="624" PREFIX:column="19">= <expr><call><name PREFIX:line="624" PREFIX:column="21">u8g_GetGlyph</name><argument_list PREFIX:line="624" PREFIX:column="33">(<argument><expr><name PREFIX:line="624" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="624" PREFIX:column="39">encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if PREFIX:line="625" PREFIX:column="5">if <condition PREFIX:line="625" PREFIX:column="8">( <expr><name PREFIX:line="625" PREFIX:column="10">g</name> == <name PREFIX:line="625" PREFIX:column="15">NULL</name></expr>  )</condition><then PREFIX:line="625" PREFIX:column="22">
      <return PREFIX:line="626" PREFIX:column="7">return <expr PREFIX:line="626" PREFIX:column="14">0</expr>;</return></then></if>
    <expr_stmt><expr><name PREFIX:line="627" PREFIX:column="5">data</name> = <call><name PREFIX:line="627" PREFIX:column="12">u8g_font_GetGlyphDataStart</name><argument_list PREFIX:line="627" PREFIX:column="38">(<argument><expr><name><name PREFIX:line="627" PREFIX:column="39">u8g</name>-&gt;<name PREFIX:line="627" PREFIX:column="44">font</name></name></expr></argument>, <argument><expr><name PREFIX:line="627" PREFIX:column="50">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  
  <expr_stmt><expr><name PREFIX:line="630" PREFIX:column="3">w</name> = <name><name PREFIX:line="630" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="630" PREFIX:column="12">glyph_width</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="631" PREFIX:column="3">h</name> = <name><name PREFIX:line="631" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="631" PREFIX:column="12">glyph_height</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="633" PREFIX:column="3">x</name> += <name><name PREFIX:line="633" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="633" PREFIX:column="13">glyph_y</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="634" PREFIX:column="3">x</name>++</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="635" PREFIX:column="3">y</name> += <name><name PREFIX:line="635" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="635" PREFIX:column="13">glyph_x</name></name></expr>;</expr_stmt>
  
  <if PREFIX:line="637" PREFIX:column="3">if <condition PREFIX:line="637" PREFIX:column="6">( <expr><call><name PREFIX:line="637" PREFIX:column="8">u8g_IsBBXIntersection</name><argument_list PREFIX:line="637" PREFIX:column="29">(<argument><expr><name PREFIX:line="637" PREFIX:column="30">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="637" PREFIX:column="35">x</name></expr></argument>, <argument><expr><name PREFIX:line="637" PREFIX:column="38">y</name></expr></argument>, <argument><expr><name PREFIX:line="637" PREFIX:column="41">h</name></expr></argument>, <argument><expr><name PREFIX:line="637" PREFIX:column="44">w</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="637" PREFIX:column="53">
    <return PREFIX:line="638" PREFIX:column="5">return <expr><name><name PREFIX:line="638" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="638" PREFIX:column="17">glyph_dx</name></name></expr>;</return></then></if>

  <comment type="block" PREFIX:line="640" PREFIX:column="3">/* now, w is reused as bytes per line */</comment>
  <expr_stmt><expr><name PREFIX:line="641" PREFIX:column="3">w</name> += 7</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="642" PREFIX:column="3">w</name> /= 8</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="644" PREFIX:column="3">ix</name> = <name PREFIX:line="644" PREFIX:column="8">x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="645" PREFIX:column="3">ix</name> += <name PREFIX:line="645" PREFIX:column="9">h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="646" PREFIX:column="3">ix</name>--</expr>;</expr_stmt>
  <for PREFIX:line="647" PREFIX:column="3">for( <init><expr><name PREFIX:line="647" PREFIX:column="8">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="647" PREFIX:column="15">j</name> &lt; <name PREFIX:line="647" PREFIX:column="19">h</name></expr>;</condition> <incr><expr><name PREFIX:line="647" PREFIX:column="22">j</name>++</expr></incr> )
  <block PREFIX:line="648" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="649" PREFIX:column="5">iy</name> = <name PREFIX:line="649" PREFIX:column="10">y</name></expr>;</expr_stmt>
    <for PREFIX:line="650" PREFIX:column="5">for( <init><expr><name PREFIX:line="650" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="650" PREFIX:column="17">i</name> &lt; <name PREFIX:line="650" PREFIX:column="21">w</name></expr>;</condition> <incr><expr><name PREFIX:line="650" PREFIX:column="24">i</name>++</expr></incr> )
    <block PREFIX:line="651" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="652" PREFIX:column="7">u8g_Draw8Pixel</name><argument_list PREFIX:line="652" PREFIX:column="21">(<argument><expr><name PREFIX:line="652" PREFIX:column="22">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="652" PREFIX:column="27">ix</name></expr></argument>, <argument><expr><name PREFIX:line="652" PREFIX:column="31">iy</name></expr></argument>, <argument><expr PREFIX:line="652" PREFIX:column="35">1</expr></argument>, <argument><expr><call><name PREFIX:line="652" PREFIX:column="38">u8g_pgm_read</name><argument_list PREFIX:line="652" PREFIX:column="50">(<argument><expr><name PREFIX:line="652" PREFIX:column="51">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="653" PREFIX:column="7">data</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="654" PREFIX:column="7">iy</name>+=8</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name PREFIX:line="656" PREFIX:column="5">ix</name>--</expr>;</expr_stmt>
  }</block></for>
  <return PREFIX:line="658" PREFIX:column="3">return <expr><name><name PREFIX:line="658" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="658" PREFIX:column="15">glyph_dx</name></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="661" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="661" PREFIX:column="8">u8g_DrawGlyph90</name><parameter_list PREFIX:line="661" PREFIX:column="23">(<param><decl><type><name PREFIX:line="661" PREFIX:column="24">u8g_t</name> *</type><name PREFIX:line="661" PREFIX:column="31">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="661" PREFIX:column="36">u8g_uint_t</name></type> <name PREFIX:line="661" PREFIX:column="47">x</name></decl></param>, <param><decl><type><name PREFIX:line="661" PREFIX:column="50">u8g_uint_t</name></type> <name PREFIX:line="661" PREFIX:column="61">y</name></decl></param>, <param><decl><type><name PREFIX:line="661" PREFIX:column="64">uint8_t</name></type> <name PREFIX:line="661" PREFIX:column="72">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="662" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="663" PREFIX:column="3">x</name> -= <call><name><name PREFIX:line="663" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="663" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="663" PREFIX:column="27">(<argument><expr><name PREFIX:line="663" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="664" PREFIX:column="3">return <expr><call><name PREFIX:line="664" PREFIX:column="10">u8g_draw_glyph90</name><argument_list PREFIX:line="664" PREFIX:column="26">(<argument><expr><name PREFIX:line="664" PREFIX:column="27">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="664" PREFIX:column="32">x</name></expr></argument>, <argument><expr><name PREFIX:line="664" PREFIX:column="35">y</name></expr></argument>, <argument><expr><name PREFIX:line="664" PREFIX:column="38">encoding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name PREFIX:line="668" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="668" PREFIX:column="8">u8g_draw_glyph180</name><parameter_list PREFIX:line="668" PREFIX:column="25">(<param><decl><type><name PREFIX:line="668" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="668" PREFIX:column="33">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="668" PREFIX:column="38">u8g_uint_t</name></type> <name PREFIX:line="668" PREFIX:column="49">x</name></decl></param>, <param><decl><type><name PREFIX:line="668" PREFIX:column="52">u8g_uint_t</name></type> <name PREFIX:line="668" PREFIX:column="63">y</name></decl></param>, <param><decl><type><name PREFIX:line="668" PREFIX:column="66">uint8_t</name></type> <name PREFIX:line="668" PREFIX:column="74">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="669" PREFIX:column="1">{
   <decl_stmt><decl><type><name PREFIX:line="670" PREFIX:column="4">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="670" PREFIX:column="21">data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="671" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="671" PREFIX:column="11">w</name></decl>, <decl><type ref="prev"/><name PREFIX:line="671" PREFIX:column="14">h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="672" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="672" PREFIX:column="11">i</name></decl>, <decl><type ref="prev"/><name PREFIX:line="672" PREFIX:column="14">j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="673" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="673" PREFIX:column="14">ix</name></decl>, <decl><type ref="prev"/><name PREFIX:line="673" PREFIX:column="18">iy</name></decl>;</decl_stmt>

  <block PREFIX:line="675" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="676" PREFIX:column="5">u8g_glyph_t</name></type> <name PREFIX:line="676" PREFIX:column="17">g</name> <init PREFIX:line="676" PREFIX:column="19">= <expr><call><name PREFIX:line="676" PREFIX:column="21">u8g_GetGlyph</name><argument_list PREFIX:line="676" PREFIX:column="33">(<argument><expr><name PREFIX:line="676" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="676" PREFIX:column="39">encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if PREFIX:line="677" PREFIX:column="5">if <condition PREFIX:line="677" PREFIX:column="8">( <expr><name PREFIX:line="677" PREFIX:column="10">g</name> == <name PREFIX:line="677" PREFIX:column="15">NULL</name></expr>  )</condition><then PREFIX:line="677" PREFIX:column="22">
      <return PREFIX:line="678" PREFIX:column="7">return <expr PREFIX:line="678" PREFIX:column="14">0</expr>;</return></then></if>
    <expr_stmt><expr><name PREFIX:line="679" PREFIX:column="5">data</name> = <call><name PREFIX:line="679" PREFIX:column="12">u8g_font_GetGlyphDataStart</name><argument_list PREFIX:line="679" PREFIX:column="38">(<argument><expr><name><name PREFIX:line="679" PREFIX:column="39">u8g</name>-&gt;<name PREFIX:line="679" PREFIX:column="44">font</name></name></expr></argument>, <argument><expr><name PREFIX:line="679" PREFIX:column="50">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  
  <expr_stmt><expr><name PREFIX:line="682" PREFIX:column="3">w</name> = <name><name PREFIX:line="682" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="682" PREFIX:column="12">glyph_width</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="683" PREFIX:column="3">h</name> = <name><name PREFIX:line="683" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="683" PREFIX:column="12">glyph_height</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="685" PREFIX:column="3">x</name> -= <name><name PREFIX:line="685" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="685" PREFIX:column="13">glyph_x</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="686" PREFIX:column="3">y</name> += <name><name PREFIX:line="686" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="686" PREFIX:column="13">glyph_y</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="687" PREFIX:column="3">y</name>++</expr>;</expr_stmt>
  
  <if PREFIX:line="689" PREFIX:column="3">if <condition PREFIX:line="689" PREFIX:column="6">( <expr><call><name PREFIX:line="689" PREFIX:column="8">u8g_IsBBXIntersection</name><argument_list PREFIX:line="689" PREFIX:column="29">(<argument><expr><name PREFIX:line="689" PREFIX:column="30">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="689" PREFIX:column="35">x</name>-(<name PREFIX:line="689" PREFIX:column="38">w</name>-1)</expr></argument>, <argument><expr><name PREFIX:line="689" PREFIX:column="44">y</name></expr></argument>, <argument><expr><name PREFIX:line="689" PREFIX:column="47">w</name></expr></argument>, <argument><expr><name PREFIX:line="689" PREFIX:column="50">h</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="689" PREFIX:column="59">
    <return PREFIX:line="690" PREFIX:column="5">return <expr><name><name PREFIX:line="690" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="690" PREFIX:column="17">glyph_dx</name></name></expr>;</return></then></if>

  <comment type="block" PREFIX:line="692" PREFIX:column="3">/* now, w is reused as bytes per line */</comment>
  <expr_stmt><expr><name PREFIX:line="693" PREFIX:column="3">w</name> += 7</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="694" PREFIX:column="3">w</name> /= 8</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="696" PREFIX:column="3">iy</name> = <name PREFIX:line="696" PREFIX:column="8">y</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="697" PREFIX:column="3">iy</name> += <name PREFIX:line="697" PREFIX:column="9">h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="698" PREFIX:column="3">iy</name>--</expr>;</expr_stmt>
  <for PREFIX:line="699" PREFIX:column="3">for( <init><expr><name PREFIX:line="699" PREFIX:column="8">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="699" PREFIX:column="15">j</name> &lt; <name PREFIX:line="699" PREFIX:column="19">h</name></expr>;</condition> <incr><expr><name PREFIX:line="699" PREFIX:column="22">j</name>++</expr></incr> )
  <block PREFIX:line="700" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="701" PREFIX:column="5">ix</name> = <name PREFIX:line="701" PREFIX:column="10">x</name></expr>;</expr_stmt>
    <for PREFIX:line="702" PREFIX:column="5">for( <init><expr><name PREFIX:line="702" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="702" PREFIX:column="17">i</name> &lt; <name PREFIX:line="702" PREFIX:column="21">w</name></expr>;</condition> <incr><expr><name PREFIX:line="702" PREFIX:column="24">i</name>++</expr></incr> )
    <block PREFIX:line="703" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="704" PREFIX:column="7">u8g_Draw8Pixel</name><argument_list PREFIX:line="704" PREFIX:column="21">(<argument><expr><name PREFIX:line="704" PREFIX:column="22">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="704" PREFIX:column="27">ix</name></expr></argument>, <argument><expr><name PREFIX:line="704" PREFIX:column="31">iy</name></expr></argument>, <argument><expr PREFIX:line="704" PREFIX:column="35">2</expr></argument>, <argument><expr><call><name PREFIX:line="704" PREFIX:column="38">u8g_pgm_read</name><argument_list PREFIX:line="704" PREFIX:column="50">(<argument><expr><name PREFIX:line="704" PREFIX:column="51">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="705" PREFIX:column="7">data</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="706" PREFIX:column="7">ix</name>-=8</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name PREFIX:line="708" PREFIX:column="5">iy</name>--</expr>;</expr_stmt>
  }</block></for>
  <return PREFIX:line="710" PREFIX:column="3">return <expr><name><name PREFIX:line="710" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="710" PREFIX:column="15">glyph_dx</name></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="713" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="713" PREFIX:column="8">u8g_DrawGlyph180</name><parameter_list PREFIX:line="713" PREFIX:column="24">(<param><decl><type><name PREFIX:line="713" PREFIX:column="25">u8g_t</name> *</type><name PREFIX:line="713" PREFIX:column="32">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="713" PREFIX:column="37">u8g_uint_t</name></type> <name PREFIX:line="713" PREFIX:column="48">x</name></decl></param>, <param><decl><type><name PREFIX:line="713" PREFIX:column="51">u8g_uint_t</name></type> <name PREFIX:line="713" PREFIX:column="62">y</name></decl></param>, <param><decl><type><name PREFIX:line="713" PREFIX:column="65">uint8_t</name></type> <name PREFIX:line="713" PREFIX:column="73">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="714" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="715" PREFIX:column="3">y</name> -= <call><name><name PREFIX:line="715" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="715" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="715" PREFIX:column="27">(<argument><expr><name PREFIX:line="715" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="716" PREFIX:column="3">return <expr><call><name PREFIX:line="716" PREFIX:column="10">u8g_draw_glyph180</name><argument_list PREFIX:line="716" PREFIX:column="27">(<argument><expr><name PREFIX:line="716" PREFIX:column="28">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="716" PREFIX:column="33">x</name></expr></argument>, <argument><expr><name PREFIX:line="716" PREFIX:column="36">y</name></expr></argument>, <argument><expr><name PREFIX:line="716" PREFIX:column="39">encoding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name PREFIX:line="720" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="720" PREFIX:column="8">u8g_draw_glyph270</name><parameter_list PREFIX:line="720" PREFIX:column="25">(<param><decl><type><name PREFIX:line="720" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="720" PREFIX:column="33">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="720" PREFIX:column="38">u8g_uint_t</name></type> <name PREFIX:line="720" PREFIX:column="49">x</name></decl></param>, <param><decl><type><name PREFIX:line="720" PREFIX:column="52">u8g_uint_t</name></type> <name PREFIX:line="720" PREFIX:column="63">y</name></decl></param>, <param><decl><type><name PREFIX:line="720" PREFIX:column="66">uint8_t</name></type> <name PREFIX:line="720" PREFIX:column="74">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="721" PREFIX:column="1">{
   <decl_stmt><decl><type><name PREFIX:line="722" PREFIX:column="4">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="722" PREFIX:column="21">data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="723" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="723" PREFIX:column="11">w</name></decl>, <decl><type ref="prev"/><name PREFIX:line="723" PREFIX:column="14">h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="724" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="724" PREFIX:column="11">i</name></decl>, <decl><type ref="prev"/><name PREFIX:line="724" PREFIX:column="14">j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="725" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="725" PREFIX:column="14">ix</name></decl>, <decl><type ref="prev"/><name PREFIX:line="725" PREFIX:column="18">iy</name></decl>;</decl_stmt>

  <block PREFIX:line="727" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="728" PREFIX:column="5">u8g_glyph_t</name></type> <name PREFIX:line="728" PREFIX:column="17">g</name> <init PREFIX:line="728" PREFIX:column="19">= <expr><call><name PREFIX:line="728" PREFIX:column="21">u8g_GetGlyph</name><argument_list PREFIX:line="728" PREFIX:column="33">(<argument><expr><name PREFIX:line="728" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="728" PREFIX:column="39">encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if PREFIX:line="729" PREFIX:column="5">if <condition PREFIX:line="729" PREFIX:column="8">( <expr><name PREFIX:line="729" PREFIX:column="10">g</name> == <name PREFIX:line="729" PREFIX:column="15">NULL</name></expr>  )</condition><then PREFIX:line="729" PREFIX:column="22">
      <return PREFIX:line="730" PREFIX:column="7">return <expr PREFIX:line="730" PREFIX:column="14">0</expr>;</return></then></if>
    <expr_stmt><expr><name PREFIX:line="731" PREFIX:column="5">data</name> = <call><name PREFIX:line="731" PREFIX:column="12">u8g_font_GetGlyphDataStart</name><argument_list PREFIX:line="731" PREFIX:column="38">(<argument><expr><name><name PREFIX:line="731" PREFIX:column="39">u8g</name>-&gt;<name PREFIX:line="731" PREFIX:column="44">font</name></name></expr></argument>, <argument><expr><name PREFIX:line="731" PREFIX:column="50">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  
  <expr_stmt><expr><name PREFIX:line="734" PREFIX:column="3">w</name> = <name><name PREFIX:line="734" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="734" PREFIX:column="12">glyph_width</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="735" PREFIX:column="3">h</name> = <name><name PREFIX:line="735" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="735" PREFIX:column="12">glyph_height</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="737" PREFIX:column="3">x</name> -= <name><name PREFIX:line="737" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="737" PREFIX:column="13">glyph_y</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="738" PREFIX:column="3">x</name>--</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="739" PREFIX:column="3">y</name> -= <name><name PREFIX:line="739" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="739" PREFIX:column="13">glyph_x</name></name></expr>;</expr_stmt>
  
  <if PREFIX:line="741" PREFIX:column="3">if <condition PREFIX:line="741" PREFIX:column="6">( <expr><call><name PREFIX:line="741" PREFIX:column="8">u8g_IsBBXIntersection</name><argument_list PREFIX:line="741" PREFIX:column="29">(<argument><expr><name PREFIX:line="741" PREFIX:column="30">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="741" PREFIX:column="35">x</name>-(<name PREFIX:line="741" PREFIX:column="38">h</name>-1)</expr></argument>, <argument><expr><name PREFIX:line="741" PREFIX:column="44">y</name>-(<name PREFIX:line="741" PREFIX:column="47">w</name>-1)</expr></argument>, <argument><expr><name PREFIX:line="741" PREFIX:column="53">h</name></expr></argument>, <argument><expr><name PREFIX:line="741" PREFIX:column="56">w</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="741" PREFIX:column="65">
    <return PREFIX:line="742" PREFIX:column="5">return <expr><name><name PREFIX:line="742" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="742" PREFIX:column="17">glyph_dx</name></name></expr>;</return></then></if>
  

  <comment type="block" PREFIX:line="745" PREFIX:column="3">/* now, w is reused as bytes per line */</comment>
  <expr_stmt><expr><name PREFIX:line="746" PREFIX:column="3">w</name> += 7</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="747" PREFIX:column="3">w</name> /= 8</expr>;</expr_stmt>  
      
  <expr_stmt><expr><name PREFIX:line="749" PREFIX:column="3">ix</name> = <name PREFIX:line="749" PREFIX:column="8">x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="750" PREFIX:column="3">ix</name> -= <name PREFIX:line="750" PREFIX:column="9">h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="751" PREFIX:column="3">ix</name>++</expr>;</expr_stmt>
  
  <for PREFIX:line="753" PREFIX:column="3">for( <init><expr><name PREFIX:line="753" PREFIX:column="8">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="753" PREFIX:column="15">j</name> &lt; <name PREFIX:line="753" PREFIX:column="19">h</name></expr>;</condition> <incr><expr><name PREFIX:line="753" PREFIX:column="22">j</name>++</expr></incr> )
  <block PREFIX:line="754" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="755" PREFIX:column="5">iy</name> = <name PREFIX:line="755" PREFIX:column="10">y</name></expr>;</expr_stmt>
    <for PREFIX:line="756" PREFIX:column="5">for( <init><expr><name PREFIX:line="756" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="756" PREFIX:column="17">i</name> &lt; <name PREFIX:line="756" PREFIX:column="21">w</name></expr>;</condition> <incr><expr><name PREFIX:line="756" PREFIX:column="24">i</name>++</expr></incr> )
    <block PREFIX:line="757" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="758" PREFIX:column="7">u8g_Draw8Pixel</name><argument_list PREFIX:line="758" PREFIX:column="21">(<argument><expr><name PREFIX:line="758" PREFIX:column="22">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="758" PREFIX:column="27">ix</name></expr></argument>, <argument><expr><name PREFIX:line="758" PREFIX:column="31">iy</name></expr></argument>, <argument><expr PREFIX:line="758" PREFIX:column="35">3</expr></argument>, <argument><expr><call><name PREFIX:line="758" PREFIX:column="38">u8g_pgm_read</name><argument_list PREFIX:line="758" PREFIX:column="50">(<argument><expr><name PREFIX:line="758" PREFIX:column="51">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="759" PREFIX:column="7">data</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="760" PREFIX:column="7">iy</name>-=8</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name PREFIX:line="762" PREFIX:column="5">ix</name>++</expr>;</expr_stmt>
  }</block></for>
  <return PREFIX:line="764" PREFIX:column="3">return <expr><name><name PREFIX:line="764" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="764" PREFIX:column="15">glyph_dx</name></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="767" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="767" PREFIX:column="8">u8g_DrawGlyph270</name><parameter_list PREFIX:line="767" PREFIX:column="24">(<param><decl><type><name PREFIX:line="767" PREFIX:column="25">u8g_t</name> *</type><name PREFIX:line="767" PREFIX:column="32">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="767" PREFIX:column="37">u8g_uint_t</name></type> <name PREFIX:line="767" PREFIX:column="48">x</name></decl></param>, <param><decl><type><name PREFIX:line="767" PREFIX:column="51">u8g_uint_t</name></type> <name PREFIX:line="767" PREFIX:column="62">y</name></decl></param>, <param><decl><type><name PREFIX:line="767" PREFIX:column="65">uint8_t</name></type> <name PREFIX:line="767" PREFIX:column="73">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="768" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="769" PREFIX:column="3">x</name> += <call><name><name PREFIX:line="769" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="769" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="769" PREFIX:column="27">(<argument><expr><name PREFIX:line="769" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="770" PREFIX:column="3">return <expr><call><name PREFIX:line="770" PREFIX:column="10">u8g_draw_glyph270</name><argument_list PREFIX:line="770" PREFIX:column="27">(<argument><expr><name PREFIX:line="770" PREFIX:column="28">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="770" PREFIX:column="33">x</name></expr></argument>, <argument><expr><name PREFIX:line="770" PREFIX:column="36">y</name></expr></argument>, <argument><expr><name PREFIX:line="770" PREFIX:column="39">encoding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<cpp:ifdef PREFIX:line="775" PREFIX:column="1">#<cpp:directive PREFIX:line="775" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="775" PREFIX:column="8">OBSOLETE</name></cpp:ifdef>
<comment type="block" PREFIX:line="776" PREFIX:column="1">/*
  Draw a glyph
  x,y: lower left corner of the font bounding box
*/</comment>
<function><type><name PREFIX:line="780" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="780" PREFIX:column="8">u8g_DrawGlyphFontBBX</name><parameter_list PREFIX:line="780" PREFIX:column="28">(<param><decl><type><name PREFIX:line="780" PREFIX:column="29">u8g_t</name> *</type><name PREFIX:line="780" PREFIX:column="36">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="780" PREFIX:column="41">u8g_uint_t</name></type> <name PREFIX:line="780" PREFIX:column="52">x</name></decl></param>, <param><decl><type><name PREFIX:line="780" PREFIX:column="55">u8g_uint_t</name></type> <name PREFIX:line="780" PREFIX:column="66">y</name></decl></param>, <param><decl><type><name PREFIX:line="780" PREFIX:column="69">uint8_t</name></type> <name PREFIX:line="780" PREFIX:column="77">dir</name></decl></param>, <param><decl><type><name PREFIX:line="780" PREFIX:column="82">uint8_t</name></type> <name PREFIX:line="780" PREFIX:column="90">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="781" PREFIX:column="1">{
  <comment type="block" PREFIX:line="782" PREFIX:column="3">/* TODO: apply "dir" */</comment>
  <expr_stmt><expr><name PREFIX:line="783" PREFIX:column="3">x</name> -= <call><name PREFIX:line="783" PREFIX:column="8">u8g_GetFontBBXOffX</name><argument_list PREFIX:line="783" PREFIX:column="26">(<argument><expr><name PREFIX:line="783" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="784" PREFIX:column="3">y</name> += <call><name PREFIX:line="784" PREFIX:column="8">u8g_GetFontBBXOffY</name><argument_list PREFIX:line="784" PREFIX:column="26">(<argument><expr><name PREFIX:line="784" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="785" PREFIX:column="3">return <expr><call><name PREFIX:line="785" PREFIX:column="10">u8g_DrawGlyphDir</name><argument_list PREFIX:line="785" PREFIX:column="26">(<argument><expr><name PREFIX:line="785" PREFIX:column="27">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="785" PREFIX:column="32">x</name></expr></argument>, <argument><expr><name PREFIX:line="785" PREFIX:column="35">y</name></expr></argument>, <argument><expr><name PREFIX:line="785" PREFIX:column="38">dir</name></expr></argument>, <argument><expr><name PREFIX:line="785" PREFIX:column="43">encoding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif PREFIX:line="787" PREFIX:column="1">#<cpp:directive PREFIX:line="787" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" PREFIX:line="789" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="790" PREFIX:column="1">/* string drawing procedures */</comment>


<function><type><name PREFIX:line="793" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="793" PREFIX:column="12">u8g_DrawStr</name><parameter_list PREFIX:line="793" PREFIX:column="23">(<param><decl><type><name PREFIX:line="793" PREFIX:column="24">u8g_t</name> *</type><name PREFIX:line="793" PREFIX:column="31">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="793" PREFIX:column="36">u8g_uint_t</name></type> <name PREFIX:line="793" PREFIX:column="47">x</name></decl></param>, <param><decl><type><name PREFIX:line="793" PREFIX:column="50">u8g_uint_t</name></type> <name PREFIX:line="793" PREFIX:column="61">y</name></decl></param>,  <param><decl><type><name PREFIX:line="793" PREFIX:column="65">char</name> *</type><name PREFIX:line="793" PREFIX:column="71">s</name></decl></param>)</parameter_list>
<block PREFIX:line="794" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="795" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="795" PREFIX:column="14">t</name> <init PREFIX:line="795" PREFIX:column="16">= <expr PREFIX:line="795" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="796" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="796" PREFIX:column="10">d</name></decl>;</decl_stmt>
  
  <comment type="line" PREFIX:line="798" PREFIX:column="3">//u8g_uint_t u8g_GetStrWidth(u8g, s);</comment>
  <comment type="line" PREFIX:line="799" PREFIX:column="3">//u8g_font_GetFontAscent(u8g-&gt;font)-u8g_font_GetFontDescent(u8g-&gt;font);</comment>
  
  <expr_stmt><expr><name PREFIX:line="801" PREFIX:column="3">y</name> += <call><name><name PREFIX:line="801" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="801" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="801" PREFIX:column="27">(<argument><expr><name PREFIX:line="801" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while PREFIX:line="803" PREFIX:column="3">while<condition PREFIX:line="803" PREFIX:column="8">( <expr PREFIX:line="803" PREFIX:column="10">*<name PREFIX:line="803" PREFIX:column="11">s</name> != '\0'</expr> )</condition>
  <block PREFIX:line="804" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="805" PREFIX:column="5">d</name> = <call><name PREFIX:line="805" PREFIX:column="9">u8g_draw_glyph</name><argument_list PREFIX:line="805" PREFIX:column="23">(<argument><expr><name PREFIX:line="805" PREFIX:column="24">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="805" PREFIX:column="29">x</name></expr></argument>, <argument><expr><name PREFIX:line="805" PREFIX:column="32">y</name></expr></argument>, <argument><expr PREFIX:line="805" PREFIX:column="35">*<name PREFIX:line="805" PREFIX:column="36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="806" PREFIX:column="5">x</name> += <name PREFIX:line="806" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="807" PREFIX:column="5">t</name> += <name PREFIX:line="807" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="808" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></while>
  <return PREFIX:line="810" PREFIX:column="3">return <expr><name PREFIX:line="810" PREFIX:column="10">t</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="813" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="813" PREFIX:column="12">u8g_DrawStr90</name><parameter_list PREFIX:line="813" PREFIX:column="25">(<param><decl><type><name PREFIX:line="813" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="813" PREFIX:column="33">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="813" PREFIX:column="38">u8g_uint_t</name></type> <name PREFIX:line="813" PREFIX:column="49">x</name></decl></param>, <param><decl><type><name PREFIX:line="813" PREFIX:column="52">u8g_uint_t</name></type> <name PREFIX:line="813" PREFIX:column="63">y</name></decl></param>,  <param><decl><type><name PREFIX:line="813" PREFIX:column="67">char</name> *</type><name PREFIX:line="813" PREFIX:column="73">s</name></decl></param>)</parameter_list>
<block PREFIX:line="814" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="815" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="815" PREFIX:column="14">t</name> <init PREFIX:line="815" PREFIX:column="16">= <expr PREFIX:line="815" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="816" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="816" PREFIX:column="10">d</name></decl>;</decl_stmt>
    
  <expr_stmt><expr><name PREFIX:line="818" PREFIX:column="3">x</name> -= <call><name><name PREFIX:line="818" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="818" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="818" PREFIX:column="27">(<argument><expr><name PREFIX:line="818" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while PREFIX:line="820" PREFIX:column="3">while<condition PREFIX:line="820" PREFIX:column="8">( <expr PREFIX:line="820" PREFIX:column="10">*<name PREFIX:line="820" PREFIX:column="11">s</name> != '\0'</expr> )</condition>
  <block PREFIX:line="821" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="822" PREFIX:column="5">d</name> = <call><name PREFIX:line="822" PREFIX:column="9">u8g_draw_glyph90</name><argument_list PREFIX:line="822" PREFIX:column="25">(<argument><expr><name PREFIX:line="822" PREFIX:column="26">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="822" PREFIX:column="31">x</name></expr></argument>, <argument><expr><name PREFIX:line="822" PREFIX:column="34">y</name></expr></argument>, <argument><expr PREFIX:line="822" PREFIX:column="37">*<name PREFIX:line="822" PREFIX:column="38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="823" PREFIX:column="5">y</name> += <name PREFIX:line="823" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="824" PREFIX:column="5">t</name> += <name PREFIX:line="824" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="825" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></while>
  <return PREFIX:line="827" PREFIX:column="3">return <expr><name PREFIX:line="827" PREFIX:column="10">t</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="830" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="830" PREFIX:column="12">u8g_DrawStr180</name><parameter_list PREFIX:line="830" PREFIX:column="26">(<param><decl><type><name PREFIX:line="830" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="830" PREFIX:column="34">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="830" PREFIX:column="39">u8g_uint_t</name></type> <name PREFIX:line="830" PREFIX:column="50">x</name></decl></param>, <param><decl><type><name PREFIX:line="830" PREFIX:column="53">u8g_uint_t</name></type> <name PREFIX:line="830" PREFIX:column="64">y</name></decl></param>,  <param><decl><type><name PREFIX:line="830" PREFIX:column="68">char</name> *</type><name PREFIX:line="830" PREFIX:column="74">s</name></decl></param>)</parameter_list>
<block PREFIX:line="831" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="832" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="832" PREFIX:column="14">t</name> <init PREFIX:line="832" PREFIX:column="16">= <expr PREFIX:line="832" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="833" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="833" PREFIX:column="10">d</name></decl>;</decl_stmt>

  <expr_stmt><expr><name PREFIX:line="835" PREFIX:column="3">y</name> -= <call><name><name PREFIX:line="835" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="835" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="835" PREFIX:column="27">(<argument><expr><name PREFIX:line="835" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while PREFIX:line="837" PREFIX:column="3">while<condition PREFIX:line="837" PREFIX:column="8">( <expr PREFIX:line="837" PREFIX:column="10">*<name PREFIX:line="837" PREFIX:column="11">s</name> != '\0'</expr> )</condition>
  <block PREFIX:line="838" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="839" PREFIX:column="5">d</name> = <call><name PREFIX:line="839" PREFIX:column="9">u8g_draw_glyph180</name><argument_list PREFIX:line="839" PREFIX:column="26">(<argument><expr><name PREFIX:line="839" PREFIX:column="27">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="839" PREFIX:column="32">x</name></expr></argument>, <argument><expr><name PREFIX:line="839" PREFIX:column="35">y</name></expr></argument>, <argument><expr PREFIX:line="839" PREFIX:column="38">*<name PREFIX:line="839" PREFIX:column="39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="840" PREFIX:column="5">x</name> -= <name PREFIX:line="840" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="841" PREFIX:column="5">t</name> += <name PREFIX:line="841" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="842" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></while>
  <return PREFIX:line="844" PREFIX:column="3">return <expr><name PREFIX:line="844" PREFIX:column="10">t</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="847" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="847" PREFIX:column="12">u8g_DrawStr270</name><parameter_list PREFIX:line="847" PREFIX:column="26">(<param><decl><type><name PREFIX:line="847" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="847" PREFIX:column="34">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="847" PREFIX:column="39">u8g_uint_t</name></type> <name PREFIX:line="847" PREFIX:column="50">x</name></decl></param>, <param><decl><type><name PREFIX:line="847" PREFIX:column="53">u8g_uint_t</name></type> <name PREFIX:line="847" PREFIX:column="64">y</name></decl></param>,  <param><decl><type><name PREFIX:line="847" PREFIX:column="68">char</name> *</type><name PREFIX:line="847" PREFIX:column="74">s</name></decl></param>)</parameter_list>
<block PREFIX:line="848" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="849" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="849" PREFIX:column="14">t</name> <init PREFIX:line="849" PREFIX:column="16">= <expr PREFIX:line="849" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="850" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="850" PREFIX:column="10">d</name></decl>;</decl_stmt>

  <expr_stmt><expr><name PREFIX:line="852" PREFIX:column="3">x</name> += <call><name><name PREFIX:line="852" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="852" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="852" PREFIX:column="27">(<argument><expr><name PREFIX:line="852" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while PREFIX:line="854" PREFIX:column="3">while<condition PREFIX:line="854" PREFIX:column="8">( <expr PREFIX:line="854" PREFIX:column="10">*<name PREFIX:line="854" PREFIX:column="11">s</name> != '\0'</expr> )</condition>
  <block PREFIX:line="855" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="856" PREFIX:column="5">d</name> = <call><name PREFIX:line="856" PREFIX:column="9">u8g_draw_glyph270</name><argument_list PREFIX:line="856" PREFIX:column="26">(<argument><expr><name PREFIX:line="856" PREFIX:column="27">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="856" PREFIX:column="32">x</name></expr></argument>, <argument><expr><name PREFIX:line="856" PREFIX:column="35">y</name></expr></argument>, <argument><expr PREFIX:line="856" PREFIX:column="38">*<name PREFIX:line="856" PREFIX:column="39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="857" PREFIX:column="5">y</name> -= <name PREFIX:line="857" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="858" PREFIX:column="5">t</name> += <name PREFIX:line="858" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="859" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></while>
  <return PREFIX:line="861" PREFIX:column="3">return <expr><name PREFIX:line="861" PREFIX:column="10">t</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="864" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="864" PREFIX:column="12">u8g_DrawStrDir</name><parameter_list PREFIX:line="864" PREFIX:column="26">(<param><decl><type><name PREFIX:line="864" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="864" PREFIX:column="34">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="864" PREFIX:column="39">u8g_uint_t</name></type> <name PREFIX:line="864" PREFIX:column="50">x</name></decl></param>, <param><decl><type><name PREFIX:line="864" PREFIX:column="53">u8g_uint_t</name></type> <name PREFIX:line="864" PREFIX:column="64">y</name></decl></param>, <param><decl><type><name PREFIX:line="864" PREFIX:column="67">uint8_t</name></type> <name PREFIX:line="864" PREFIX:column="75">dir</name></decl></param>,  <param><decl><type><name PREFIX:line="864" PREFIX:column="81">char</name> *</type><name PREFIX:line="864" PREFIX:column="87">s</name></decl></param>)</parameter_list>
<block PREFIX:line="865" PREFIX:column="1">{
  <switch PREFIX:line="866" PREFIX:column="3">switch<condition PREFIX:line="866" PREFIX:column="9">(<expr><name PREFIX:line="866" PREFIX:column="10">dir</name></expr>)</condition>
  <block PREFIX:line="867" PREFIX:column="3">{
    <case PREFIX:line="868" PREFIX:column="5">case <expr PREFIX:line="868" PREFIX:column="10">0</expr>:
      <return PREFIX:line="869" PREFIX:column="7">return <expr><call><name PREFIX:line="869" PREFIX:column="14">u8g_DrawStr</name><argument_list PREFIX:line="869" PREFIX:column="25">(<argument><expr><name PREFIX:line="869" PREFIX:column="26">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="869" PREFIX:column="31">x</name></expr></argument>, <argument><expr><name PREFIX:line="869" PREFIX:column="34">y</name></expr></argument>, <argument><expr><name PREFIX:line="869" PREFIX:column="37">s</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><case PREFIX:line="870" PREFIX:column="5">case <expr PREFIX:line="870" PREFIX:column="10">1</expr>:
      <return PREFIX:line="871" PREFIX:column="7">return <expr><call><name PREFIX:line="871" PREFIX:column="14">u8g_DrawStr90</name><argument_list PREFIX:line="871" PREFIX:column="27">(<argument><expr><name PREFIX:line="871" PREFIX:column="28">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="871" PREFIX:column="33">x</name></expr></argument>, <argument><expr><name PREFIX:line="871" PREFIX:column="36">y</name></expr></argument>, <argument><expr><name PREFIX:line="871" PREFIX:column="39">s</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><case PREFIX:line="872" PREFIX:column="5">case <expr PREFIX:line="872" PREFIX:column="10">2</expr>:
      <return PREFIX:line="873" PREFIX:column="7">return <expr><call><name PREFIX:line="873" PREFIX:column="14">u8g_DrawStr180</name><argument_list PREFIX:line="873" PREFIX:column="28">(<argument><expr><name PREFIX:line="873" PREFIX:column="29">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="873" PREFIX:column="34">x</name></expr></argument>, <argument><expr><name PREFIX:line="873" PREFIX:column="37">y</name></expr></argument>, <argument><expr><name PREFIX:line="873" PREFIX:column="40">s</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><case PREFIX:line="874" PREFIX:column="5">case <expr PREFIX:line="874" PREFIX:column="10">3</expr>:
      <return PREFIX:line="875" PREFIX:column="7">return <expr><call><name PREFIX:line="875" PREFIX:column="14">u8g_DrawStr270</name><argument_list PREFIX:line="875" PREFIX:column="28">(<argument><expr><name PREFIX:line="875" PREFIX:column="29">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="875" PREFIX:column="34">x</name></expr></argument>, <argument><expr><name PREFIX:line="875" PREFIX:column="37">y</name></expr></argument>, <argument><expr><name PREFIX:line="875" PREFIX:column="40">s</name></expr></argument>)</argument_list></call></expr>;</return>
  </case>}</block></switch>
  <return PREFIX:line="877" PREFIX:column="3">return <expr PREFIX:line="877" PREFIX:column="10">0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="880" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="880" PREFIX:column="12">u8g_DrawStrP</name><parameter_list PREFIX:line="880" PREFIX:column="24">(<param><decl><type><name PREFIX:line="880" PREFIX:column="25">u8g_t</name> *</type><name PREFIX:line="880" PREFIX:column="32">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="880" PREFIX:column="37">u8g_uint_t</name></type> <name PREFIX:line="880" PREFIX:column="48">x</name></decl></param>, <param><decl><type><name PREFIX:line="880" PREFIX:column="51">u8g_uint_t</name></type> <name PREFIX:line="880" PREFIX:column="62">y</name></decl></param>,  <param><decl><type><name PREFIX:line="880" PREFIX:column="66">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="880" PREFIX:column="83">s</name></decl></param>)</parameter_list>
<block PREFIX:line="881" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="882" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="882" PREFIX:column="14">t</name> <init PREFIX:line="882" PREFIX:column="16">= <expr PREFIX:line="882" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="883" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="883" PREFIX:column="10">d</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="884" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="884" PREFIX:column="11">c</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name PREFIX:line="886" PREFIX:column="3">y</name> += <call><name><name PREFIX:line="886" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="886" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="886" PREFIX:column="27">(<argument><expr><name PREFIX:line="886" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for PREFIX:line="888" PREFIX:column="3">for(<init PREFIX:line="888" PREFIX:column="7">;</init><condition PREFIX:line="888" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="889" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="890" PREFIX:column="5">c</name> = <call><name PREFIX:line="890" PREFIX:column="9">u8g_pgm_read</name><argument_list PREFIX:line="890" PREFIX:column="21">(<argument><expr><name PREFIX:line="890" PREFIX:column="22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if PREFIX:line="891" PREFIX:column="5">if <condition PREFIX:line="891" PREFIX:column="8">( <expr><name PREFIX:line="891" PREFIX:column="10">c</name> == '\0'</expr> )</condition><then PREFIX:line="891" PREFIX:column="21">
      <break PREFIX:line="892" PREFIX:column="7">break;</break></then></if>
    <expr_stmt><expr><name PREFIX:line="893" PREFIX:column="5">d</name> = <call><name PREFIX:line="893" PREFIX:column="9">u8g_draw_glyph</name><argument_list PREFIX:line="893" PREFIX:column="23">(<argument><expr><name PREFIX:line="893" PREFIX:column="24">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="893" PREFIX:column="29">x</name></expr></argument>, <argument><expr><name PREFIX:line="893" PREFIX:column="32">y</name></expr></argument>, <argument><expr><name PREFIX:line="893" PREFIX:column="35">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="894" PREFIX:column="5">x</name> += <name PREFIX:line="894" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="895" PREFIX:column="5">t</name> += <name PREFIX:line="895" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="896" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></for>
  <return PREFIX:line="898" PREFIX:column="3">return <expr><name PREFIX:line="898" PREFIX:column="10">t</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="901" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="901" PREFIX:column="12">u8g_DrawStr90P</name><parameter_list PREFIX:line="901" PREFIX:column="26">(<param><decl><type><name PREFIX:line="901" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="901" PREFIX:column="34">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="901" PREFIX:column="39">u8g_uint_t</name></type> <name PREFIX:line="901" PREFIX:column="50">x</name></decl></param>, <param><decl><type><name PREFIX:line="901" PREFIX:column="53">u8g_uint_t</name></type> <name PREFIX:line="901" PREFIX:column="64">y</name></decl></param>,  <param><decl><type><name PREFIX:line="901" PREFIX:column="68">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="901" PREFIX:column="85">s</name></decl></param>)</parameter_list>
<block PREFIX:line="902" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="903" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="903" PREFIX:column="14">t</name> <init PREFIX:line="903" PREFIX:column="16">= <expr PREFIX:line="903" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="904" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="904" PREFIX:column="10">d</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name PREFIX:line="906" PREFIX:column="3">x</name> -= <call><name><name PREFIX:line="906" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="906" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="906" PREFIX:column="27">(<argument><expr><name PREFIX:line="906" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while PREFIX:line="908" PREFIX:column="3">while<condition PREFIX:line="908" PREFIX:column="8">( <expr PREFIX:line="908" PREFIX:column="10">*<name PREFIX:line="908" PREFIX:column="11">s</name> != '\0'</expr> )</condition>
  <block PREFIX:line="909" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="910" PREFIX:column="5">d</name> = <call><name PREFIX:line="910" PREFIX:column="9">u8g_DrawGlyph90</name><argument_list PREFIX:line="910" PREFIX:column="24">(<argument><expr><name PREFIX:line="910" PREFIX:column="25">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="910" PREFIX:column="30">x</name></expr></argument>, <argument><expr><name PREFIX:line="910" PREFIX:column="33">y</name></expr></argument>, <argument><expr><call><name PREFIX:line="910" PREFIX:column="36">u8g_pgm_read</name><argument_list PREFIX:line="910" PREFIX:column="48">(<argument><expr><name PREFIX:line="910" PREFIX:column="49">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="911" PREFIX:column="5">y</name> += <name PREFIX:line="911" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="912" PREFIX:column="5">t</name> += <name PREFIX:line="912" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="913" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></while>
  <return PREFIX:line="915" PREFIX:column="3">return <expr><name PREFIX:line="915" PREFIX:column="10">t</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="918" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="918" PREFIX:column="12">u8g_DrawStr180P</name><parameter_list PREFIX:line="918" PREFIX:column="27">(<param><decl><type><name PREFIX:line="918" PREFIX:column="28">u8g_t</name> *</type><name PREFIX:line="918" PREFIX:column="35">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="918" PREFIX:column="40">u8g_uint_t</name></type> <name PREFIX:line="918" PREFIX:column="51">x</name></decl></param>, <param><decl><type><name PREFIX:line="918" PREFIX:column="54">u8g_uint_t</name></type> <name PREFIX:line="918" PREFIX:column="65">y</name></decl></param>,  <param><decl><type><name PREFIX:line="918" PREFIX:column="69">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="918" PREFIX:column="86">s</name></decl></param>)</parameter_list>
<block PREFIX:line="919" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="920" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="920" PREFIX:column="14">t</name> <init PREFIX:line="920" PREFIX:column="16">= <expr PREFIX:line="920" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="921" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="921" PREFIX:column="10">d</name></decl>;</decl_stmt>

  <expr_stmt><expr><name PREFIX:line="923" PREFIX:column="3">y</name> -= <call><name><name PREFIX:line="923" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="923" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="923" PREFIX:column="27">(<argument><expr><name PREFIX:line="923" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while PREFIX:line="925" PREFIX:column="3">while<condition PREFIX:line="925" PREFIX:column="8">( <expr PREFIX:line="925" PREFIX:column="10">*<name PREFIX:line="925" PREFIX:column="11">s</name> != '\0'</expr> )</condition>
  <block PREFIX:line="926" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="927" PREFIX:column="5">d</name> = <call><name PREFIX:line="927" PREFIX:column="9">u8g_DrawGlyph180</name><argument_list PREFIX:line="927" PREFIX:column="25">(<argument><expr><name PREFIX:line="927" PREFIX:column="26">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="927" PREFIX:column="31">x</name></expr></argument>, <argument><expr><name PREFIX:line="927" PREFIX:column="34">y</name></expr></argument>, <argument><expr><call><name PREFIX:line="927" PREFIX:column="37">u8g_pgm_read</name><argument_list PREFIX:line="927" PREFIX:column="49">(<argument><expr><name PREFIX:line="927" PREFIX:column="50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="928" PREFIX:column="5">x</name> -= <name PREFIX:line="928" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="929" PREFIX:column="5">t</name> += <name PREFIX:line="929" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="930" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></while>
  <return PREFIX:line="932" PREFIX:column="3">return <expr><name PREFIX:line="932" PREFIX:column="10">t</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="935" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="935" PREFIX:column="12">u8g_DrawStr270P</name><parameter_list PREFIX:line="935" PREFIX:column="27">(<param><decl><type><name PREFIX:line="935" PREFIX:column="28">u8g_t</name> *</type><name PREFIX:line="935" PREFIX:column="35">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="935" PREFIX:column="40">u8g_uint_t</name></type> <name PREFIX:line="935" PREFIX:column="51">x</name></decl></param>, <param><decl><type><name PREFIX:line="935" PREFIX:column="54">u8g_uint_t</name></type> <name PREFIX:line="935" PREFIX:column="65">y</name></decl></param>,  <param><decl><type><name PREFIX:line="935" PREFIX:column="69">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="935" PREFIX:column="86">s</name></decl></param>)</parameter_list>
<block PREFIX:line="936" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="937" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="937" PREFIX:column="14">t</name> <init PREFIX:line="937" PREFIX:column="16">= <expr PREFIX:line="937" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="938" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="938" PREFIX:column="10">d</name></decl>;</decl_stmt>

  <expr_stmt><expr><name PREFIX:line="940" PREFIX:column="3">x</name> += <call><name><name PREFIX:line="940" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="940" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="940" PREFIX:column="27">(<argument><expr><name PREFIX:line="940" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while PREFIX:line="942" PREFIX:column="3">while<condition PREFIX:line="942" PREFIX:column="8">( <expr PREFIX:line="942" PREFIX:column="10">*<name PREFIX:line="942" PREFIX:column="11">s</name> != '\0'</expr> )</condition>
  <block PREFIX:line="943" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="944" PREFIX:column="5">d</name> = <call><name PREFIX:line="944" PREFIX:column="9">u8g_DrawGlyph270</name><argument_list PREFIX:line="944" PREFIX:column="25">(<argument><expr><name PREFIX:line="944" PREFIX:column="26">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="944" PREFIX:column="31">x</name></expr></argument>, <argument><expr><name PREFIX:line="944" PREFIX:column="34">y</name></expr></argument>, <argument><expr><call><name PREFIX:line="944" PREFIX:column="37">u8g_pgm_read</name><argument_list PREFIX:line="944" PREFIX:column="49">(<argument><expr><name PREFIX:line="944" PREFIX:column="50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="945" PREFIX:column="5">y</name> -= <name PREFIX:line="945" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="946" PREFIX:column="5">t</name> += <name PREFIX:line="946" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="947" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></while>
  <return PREFIX:line="949" PREFIX:column="3">return <expr><name PREFIX:line="949" PREFIX:column="10">t</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="952" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="952" PREFIX:column="12">u8g_DrawStrFontBBX</name><parameter_list PREFIX:line="952" PREFIX:column="30">(<param><decl><type><name PREFIX:line="952" PREFIX:column="31">u8g_t</name> *</type><name PREFIX:line="952" PREFIX:column="38">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="952" PREFIX:column="43">u8g_uint_t</name></type> <name PREFIX:line="952" PREFIX:column="54">x</name></decl></param>, <param><decl><type><name PREFIX:line="952" PREFIX:column="57">u8g_uint_t</name></type> <name PREFIX:line="952" PREFIX:column="68">y</name></decl></param>, <param><decl><type><name PREFIX:line="952" PREFIX:column="71">uint8_t</name></type> <name PREFIX:line="952" PREFIX:column="79">dir</name></decl></param>,  <param><decl><type><name PREFIX:line="952" PREFIX:column="85">char</name> *</type><name PREFIX:line="952" PREFIX:column="91">s</name></decl></param>)</parameter_list>
<block PREFIX:line="953" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="954" PREFIX:column="3">x</name> -= <call><name PREFIX:line="954" PREFIX:column="8">u8g_GetFontBBXOffX</name><argument_list PREFIX:line="954" PREFIX:column="26">(<argument><expr><name PREFIX:line="954" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="955" PREFIX:column="3">y</name> += <call><name PREFIX:line="955" PREFIX:column="8">u8g_GetFontBBXOffY</name><argument_list PREFIX:line="955" PREFIX:column="26">(<argument><expr><name PREFIX:line="955" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="956" PREFIX:column="3">return <expr><call><name PREFIX:line="956" PREFIX:column="10">u8g_DrawStrDir</name><argument_list PREFIX:line="956" PREFIX:column="24">(<argument><expr><name PREFIX:line="956" PREFIX:column="25">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="956" PREFIX:column="30">x</name></expr></argument>, <argument><expr><name PREFIX:line="956" PREFIX:column="33">y</name></expr></argument>, <argument><expr><name PREFIX:line="956" PREFIX:column="36">dir</name></expr></argument>, <argument><expr><name PREFIX:line="956" PREFIX:column="41">s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="959" PREFIX:column="1">/* still used by picgen.c, dir argument is ignored */</comment>
<function><type><name PREFIX:line="960" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="960" PREFIX:column="8">u8g_DrawGlyphFontBBX</name><parameter_list PREFIX:line="960" PREFIX:column="28">(<param><decl><type><name PREFIX:line="960" PREFIX:column="29">u8g_t</name> *</type><name PREFIX:line="960" PREFIX:column="36">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="960" PREFIX:column="41">u8g_uint_t</name></type> <name PREFIX:line="960" PREFIX:column="52">x</name></decl></param>, <param><decl><type><name PREFIX:line="960" PREFIX:column="55">u8g_uint_t</name></type> <name PREFIX:line="960" PREFIX:column="66">y</name></decl></param>, <param><decl><type><name PREFIX:line="960" PREFIX:column="69">uint8_t</name></type> <name PREFIX:line="960" PREFIX:column="77">dir</name></decl></param>, <param><decl><type><name PREFIX:line="960" PREFIX:column="82">uint8_t</name></type> <name PREFIX:line="960" PREFIX:column="90">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="961" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="962" PREFIX:column="3">x</name> -= <call><name PREFIX:line="962" PREFIX:column="8">u8g_GetFontBBXOffX</name><argument_list PREFIX:line="962" PREFIX:column="26">(<argument><expr><name PREFIX:line="962" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="963" PREFIX:column="3">y</name> += <call><name PREFIX:line="963" PREFIX:column="8">u8g_GetFontBBXOffY</name><argument_list PREFIX:line="963" PREFIX:column="26">(<argument><expr><name PREFIX:line="963" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="964" PREFIX:column="3">u8g_draw_glyph</name><argument_list PREFIX:line="964" PREFIX:column="17">(<argument><expr><name PREFIX:line="964" PREFIX:column="18">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="964" PREFIX:column="23">x</name></expr></argument>, <argument><expr><name PREFIX:line="964" PREFIX:column="26">y</name></expr></argument>, <argument><expr><name PREFIX:line="964" PREFIX:column="29">encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="965" PREFIX:column="3">return <expr PREFIX:line="965" PREFIX:column="10">0</expr>;</return>
}</block></function>


<comment type="block" PREFIX:line="969" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="970" PREFIX:column="1">/* set ascent/descent for reference point calculation */</comment>

<function><type><name PREFIX:line="972" PREFIX:column="1">void</name></type> <name PREFIX:line="972" PREFIX:column="6">u8g_UpdateRefHeight</name><parameter_list PREFIX:line="972" PREFIX:column="25">(<param><decl><type><name PREFIX:line="972" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="972" PREFIX:column="33">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="973" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="974" PREFIX:column="3">uint16_t</name></type> <name PREFIX:line="974" PREFIX:column="12">ls</name></decl>;</decl_stmt>
  <if PREFIX:line="975" PREFIX:column="3">if <condition PREFIX:line="975" PREFIX:column="6">( <expr><name><name PREFIX:line="975" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="975" PREFIX:column="13">font</name></name> == <name PREFIX:line="975" PREFIX:column="21">NULL</name></expr> )</condition><then PREFIX:line="975" PREFIX:column="27">
    <return PREFIX:line="976" PREFIX:column="5">return;</return></then></if>
  <if PREFIX:line="977" PREFIX:column="3">if <condition PREFIX:line="977" PREFIX:column="6">( <expr><name><name PREFIX:line="977" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="977" PREFIX:column="13">font_height_mode</name></name> == <name PREFIX:line="977" PREFIX:column="33">U8G_FONT_HEIGHT_MODE_TEXT</name></expr> )</condition><then PREFIX:line="977" PREFIX:column="60">
  <block PREFIX:line="978" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="979" PREFIX:column="5">u8g</name>-&gt;<name PREFIX:line="979" PREFIX:column="10">font_ref_ascent</name></name> = <call><name PREFIX:line="979" PREFIX:column="28">u8g_font_GetCapitalAHeight</name><argument_list PREFIX:line="979" PREFIX:column="54">(<argument><expr><name><name PREFIX:line="979" PREFIX:column="55">u8g</name>-&gt;<name PREFIX:line="979" PREFIX:column="60">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="980" PREFIX:column="5">u8g</name>-&gt;<name PREFIX:line="980" PREFIX:column="10">font_ref_descent</name></name> = <call><name PREFIX:line="980" PREFIX:column="29">u8g_font_GetLowerGDescent</name><argument_list PREFIX:line="980" PREFIX:column="54">(<argument><expr><name><name PREFIX:line="980" PREFIX:column="55">u8g</name>-&gt;<name PREFIX:line="980" PREFIX:column="60">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="982" PREFIX:column="3">else <if PREFIX:line="982" PREFIX:column="8">if <condition PREFIX:line="982" PREFIX:column="11">( <expr><name><name PREFIX:line="982" PREFIX:column="13">u8g</name>-&gt;<name PREFIX:line="982" PREFIX:column="18">font_height_mode</name></name> == <name PREFIX:line="982" PREFIX:column="38">U8G_FONT_HEIGHT_MODE_XTEXT</name></expr> )</condition><then PREFIX:line="982" PREFIX:column="66">
  <block PREFIX:line="983" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="984" PREFIX:column="5">u8g</name>-&gt;<name PREFIX:line="984" PREFIX:column="10">font_ref_ascent</name></name> = <call><name PREFIX:line="984" PREFIX:column="28">u8g_font_GetFontXAscent</name><argument_list PREFIX:line="984" PREFIX:column="51">(<argument><expr><name><name PREFIX:line="984" PREFIX:column="52">u8g</name>-&gt;<name PREFIX:line="984" PREFIX:column="57">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="985" PREFIX:column="5">u8g</name>-&gt;<name PREFIX:line="985" PREFIX:column="10">font_ref_descent</name></name> = <call><name PREFIX:line="985" PREFIX:column="29">u8g_font_GetFontXDescent</name><argument_list PREFIX:line="985" PREFIX:column="53">(<argument><expr><name><name PREFIX:line="985" PREFIX:column="54">u8g</name>-&gt;<name PREFIX:line="985" PREFIX:column="59">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="987" PREFIX:column="3">else
  <block PREFIX:line="988" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="989" PREFIX:column="5">u8g</name>-&gt;<name PREFIX:line="989" PREFIX:column="10">font_ref_ascent</name></name> = <call><name PREFIX:line="989" PREFIX:column="28">u8g_font_GetFontAscent</name><argument_list PREFIX:line="989" PREFIX:column="50">(<argument><expr><name><name PREFIX:line="989" PREFIX:column="51">u8g</name>-&gt;<name PREFIX:line="989" PREFIX:column="56">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="990" PREFIX:column="5">u8g</name>-&gt;<name PREFIX:line="990" PREFIX:column="10">font_ref_descent</name></name> = <call><name PREFIX:line="990" PREFIX:column="29">u8g_font_GetFontDescent</name><argument_list PREFIX:line="990" PREFIX:column="52">(<argument><expr><name><name PREFIX:line="990" PREFIX:column="53">u8g</name>-&gt;<name PREFIX:line="990" PREFIX:column="58">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if></else></if>
  
  <expr_stmt><expr><name PREFIX:line="993" PREFIX:column="3">ls</name> = <name><name PREFIX:line="993" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="993" PREFIX:column="13">font_ref_ascent</name></name> - <name><name PREFIX:line="993" PREFIX:column="31">u8g</name>-&gt;<name PREFIX:line="993" PREFIX:column="36">font_ref_descent</name></name></expr>;</expr_stmt>
  <if PREFIX:line="994" PREFIX:column="3">if <condition PREFIX:line="994" PREFIX:column="6">( <expr><name><name PREFIX:line="994" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="994" PREFIX:column="13">font_line_spacing_factor</name></name> != 64</expr> )</condition><then PREFIX:line="994" PREFIX:column="45">
  <block PREFIX:line="995" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="996" PREFIX:column="5">ls</name> &amp;= 255</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="997" PREFIX:column="5">ls</name> *= <name><name PREFIX:line="997" PREFIX:column="11">u8g</name>-&gt;<name PREFIX:line="997" PREFIX:column="16">font_line_spacing_factor</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="998" PREFIX:column="5">ls</name> &gt;&gt;= 6</expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name><name PREFIX:line="1000" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1000" PREFIX:column="8">line_spacing</name></name> = <name PREFIX:line="1000" PREFIX:column="23">ls</name></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1003" PREFIX:column="1">void</name></type> <name PREFIX:line="1003" PREFIX:column="6">u8g_SetFontRefHeightText</name><parameter_list PREFIX:line="1003" PREFIX:column="30">(<param><decl><type><name PREFIX:line="1003" PREFIX:column="31">u8g_t</name> *</type><name PREFIX:line="1003" PREFIX:column="38">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1004" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="1005" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1005" PREFIX:column="8">font_height_mode</name></name> = <name PREFIX:line="1005" PREFIX:column="27">U8G_FONT_HEIGHT_MODE_TEXT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1006" PREFIX:column="3">u8g_UpdateRefHeight</name><argument_list PREFIX:line="1006" PREFIX:column="22">(<argument><expr><name PREFIX:line="1006" PREFIX:column="23">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1009" PREFIX:column="1">void</name></type> <name PREFIX:line="1009" PREFIX:column="6">u8g_SetFontRefHeightExtendedText</name><parameter_list PREFIX:line="1009" PREFIX:column="38">(<param><decl><type><name PREFIX:line="1009" PREFIX:column="39">u8g_t</name> *</type><name PREFIX:line="1009" PREFIX:column="46">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1010" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="1011" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1011" PREFIX:column="8">font_height_mode</name></name> = <name PREFIX:line="1011" PREFIX:column="27">U8G_FONT_HEIGHT_MODE_XTEXT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1012" PREFIX:column="3">u8g_UpdateRefHeight</name><argument_list PREFIX:line="1012" PREFIX:column="22">(<argument><expr><name PREFIX:line="1012" PREFIX:column="23">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name PREFIX:line="1016" PREFIX:column="1">void</name></type> <name PREFIX:line="1016" PREFIX:column="6">u8g_SetFontRefHeightAll</name><parameter_list PREFIX:line="1016" PREFIX:column="29">(<param><decl><type><name PREFIX:line="1016" PREFIX:column="30">u8g_t</name> *</type><name PREFIX:line="1016" PREFIX:column="37">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1017" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="1018" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1018" PREFIX:column="8">font_height_mode</name></name> = <name PREFIX:line="1018" PREFIX:column="27">U8G_FONT_HEIGHT_MODE_ALL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1019" PREFIX:column="3">u8g_UpdateRefHeight</name><argument_list PREFIX:line="1019" PREFIX:column="22">(<argument><expr><name PREFIX:line="1019" PREFIX:column="23">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="1022" PREFIX:column="1">/* factor = 64: linespaceing == ascent and descent */</comment>
<function><type><name PREFIX:line="1023" PREFIX:column="1">void</name></type> <name PREFIX:line="1023" PREFIX:column="6">u8g_SetFontLineSpacingFactor</name><parameter_list PREFIX:line="1023" PREFIX:column="34">(<param><decl><type><name PREFIX:line="1023" PREFIX:column="35">u8g_t</name> *</type><name PREFIX:line="1023" PREFIX:column="42">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="1023" PREFIX:column="47">uint8_t</name></type>  <name PREFIX:line="1023" PREFIX:column="56">factor</name></decl></param>)</parameter_list>
<block PREFIX:line="1024" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="1025" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1025" PREFIX:column="8">font_line_spacing_factor</name></name> = <name PREFIX:line="1025" PREFIX:column="35">factor</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1026" PREFIX:column="3">u8g_UpdateRefHeight</name><argument_list PREFIX:line="1026" PREFIX:column="22">(<argument><expr><name PREFIX:line="1026" PREFIX:column="23">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



<comment type="block" PREFIX:line="1031" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="1032" PREFIX:column="1">/* callback procedures to correct the y position */</comment>

<function><type><name PREFIX:line="1034" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1034" PREFIX:column="12">u8g_font_calc_vref_font</name><parameter_list PREFIX:line="1034" PREFIX:column="35">(<param><decl><type><name PREFIX:line="1034" PREFIX:column="36">u8g_t</name> *</type><name PREFIX:line="1034" PREFIX:column="43">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1035" PREFIX:column="1">{
  <return PREFIX:line="1036" PREFIX:column="3">return <expr PREFIX:line="1036" PREFIX:column="10">0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1039" PREFIX:column="1">void</name></type> <name PREFIX:line="1039" PREFIX:column="6">u8g_SetFontPosBaseline</name><parameter_list PREFIX:line="1039" PREFIX:column="28">(<param><decl><type><name PREFIX:line="1039" PREFIX:column="29">u8g_t</name> *</type><name PREFIX:line="1039" PREFIX:column="36">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1040" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="1041" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1041" PREFIX:column="8">font_calc_vref</name></name> = <name PREFIX:line="1041" PREFIX:column="25">u8g_font_calc_vref_font</name></expr>;</expr_stmt>
}</block></function>


<function><type><name PREFIX:line="1045" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1045" PREFIX:column="12">u8g_font_calc_vref_bottom</name><parameter_list PREFIX:line="1045" PREFIX:column="37">(<param><decl><type><name PREFIX:line="1045" PREFIX:column="38">u8g_t</name> *</type><name PREFIX:line="1045" PREFIX:column="45">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1046" PREFIX:column="1">{
  <comment type="block" PREFIX:line="1047" PREFIX:column="3">/* y += (u8g_uint_t)(u8g_int_t)(u8g-&gt;font_ref_descent); */</comment>
  <return PREFIX:line="1048" PREFIX:column="3">return <expr><call><call PREFIX:line="1048" PREFIX:column="10">(<name PREFIX:line="1048" PREFIX:column="11">u8g_uint_t</name>)<argument_list PREFIX:line="1048" PREFIX:column="22">(<argument><expr><name PREFIX:line="1048" PREFIX:column="23">u8g_int_t</name></expr></argument>)</argument_list></call><argument_list PREFIX:line="1048" PREFIX:column="33">(<argument><expr><name><name PREFIX:line="1048" PREFIX:column="34">u8g</name>-&gt;<name PREFIX:line="1048" PREFIX:column="39">font_ref_descent</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1051" PREFIX:column="1">void</name></type> <name PREFIX:line="1051" PREFIX:column="6">u8g_SetFontPosBottom</name><parameter_list PREFIX:line="1051" PREFIX:column="26">(<param><decl><type><name PREFIX:line="1051" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="1051" PREFIX:column="34">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1052" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="1053" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1053" PREFIX:column="8">font_calc_vref</name></name> = <name PREFIX:line="1053" PREFIX:column="25">u8g_font_calc_vref_bottom</name></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1056" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1056" PREFIX:column="12">u8g_font_calc_vref_top</name><parameter_list PREFIX:line="1056" PREFIX:column="34">(<param><decl><type><name PREFIX:line="1056" PREFIX:column="35">u8g_t</name> *</type><name PREFIX:line="1056" PREFIX:column="42">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1057" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1058" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="1058" PREFIX:column="14">tmp</name></decl>;</decl_stmt>
  <comment type="block" PREFIX:line="1059" PREFIX:column="3">/* reference pos is one pixel above the upper edge of the reference glyph */</comment>

  <comment type="block" PREFIX:line="1061" PREFIX:column="3">/*
  y += (u8g_uint_t)(u8g_int_t)(u8g-&gt;font_ref_ascent);
  y++;
  */</comment>
  <expr_stmt><expr><name PREFIX:line="1065" PREFIX:column="3">tmp</name> = <call><call PREFIX:line="1065" PREFIX:column="9">(<name PREFIX:line="1065" PREFIX:column="10">u8g_uint_t</name>)<argument_list PREFIX:line="1065" PREFIX:column="21">(<argument><expr><name PREFIX:line="1065" PREFIX:column="22">u8g_int_t</name></expr></argument>)</argument_list></call><argument_list PREFIX:line="1065" PREFIX:column="32">(<argument><expr><name><name PREFIX:line="1065" PREFIX:column="33">u8g</name>-&gt;<name PREFIX:line="1065" PREFIX:column="38">font_ref_ascent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1066" PREFIX:column="3">tmp</name>++</expr>;</expr_stmt>
  <return PREFIX:line="1067" PREFIX:column="3">return <expr><name PREFIX:line="1067" PREFIX:column="10">tmp</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1070" PREFIX:column="1">void</name></type> <name PREFIX:line="1070" PREFIX:column="6">u8g_SetFontPosTop</name><parameter_list PREFIX:line="1070" PREFIX:column="23">(<param><decl><type><name PREFIX:line="1070" PREFIX:column="24">u8g_t</name> *</type><name PREFIX:line="1070" PREFIX:column="31">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1071" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="1072" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1072" PREFIX:column="8">font_calc_vref</name></name> = <name PREFIX:line="1072" PREFIX:column="25">u8g_font_calc_vref_top</name></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1075" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1075" PREFIX:column="12">u8g_font_calc_vref_center</name><parameter_list PREFIX:line="1075" PREFIX:column="37">(<param><decl><type><name PREFIX:line="1075" PREFIX:column="38">u8g_t</name> *</type><name PREFIX:line="1075" PREFIX:column="45">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1076" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1077" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="1077" PREFIX:column="10">tmp</name></decl>;</decl_stmt>
  <expr_stmt><expr><name PREFIX:line="1078" PREFIX:column="3">tmp</name> = <name><name PREFIX:line="1078" PREFIX:column="9">u8g</name>-&gt;<name PREFIX:line="1078" PREFIX:column="14">font_ref_ascent</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1079" PREFIX:column="3">tmp</name> -= <name><name PREFIX:line="1079" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1079" PREFIX:column="15">font_ref_descent</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1080" PREFIX:column="3">tmp</name> /= 2</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1081" PREFIX:column="3">tmp</name> += <name><name PREFIX:line="1081" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1081" PREFIX:column="15">font_ref_descent</name></name></expr>;</expr_stmt>  
  <comment type="block" PREFIX:line="1082" PREFIX:column="3">/* y += (u8g_uint_t)(u8g_int_t)(tmp); */</comment>
  <return PREFIX:line="1083" PREFIX:column="3">return <expr><name PREFIX:line="1083" PREFIX:column="10">tmp</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1086" PREFIX:column="1">void</name></type> <name PREFIX:line="1086" PREFIX:column="6">u8g_SetFontPosCenter</name><parameter_list PREFIX:line="1086" PREFIX:column="26">(<param><decl><type><name PREFIX:line="1086" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="1086" PREFIX:column="34">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="1087" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="1088" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="1088" PREFIX:column="8">font_calc_vref</name></name> = <name PREFIX:line="1088" PREFIX:column="25">u8g_font_calc_vref_center</name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="1091" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="1092" PREFIX:column="1">/* string pixel width calculation */</comment>

<function><type><name PREFIX:line="1094" PREFIX:column="1">char</name></type> <name PREFIX:line="1094" PREFIX:column="6">u8g_font_get_char</name><parameter_list PREFIX:line="1094" PREFIX:column="23">( <param><decl><type><name PREFIX:line="1094" PREFIX:column="25">void</name> *</type><name PREFIX:line="1094" PREFIX:column="31">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1095" PREFIX:column="1">{
  <return PREFIX:line="1096" PREFIX:column="3">return <expr PREFIX:line="1096" PREFIX:column="10">*<call PREFIX:line="1096" PREFIX:column="11">( <name PREFIX:line="1096" PREFIX:column="13">char</name> *)<argument_list PREFIX:line="1096" PREFIX:column="20">(<argument><expr><name PREFIX:line="1096" PREFIX:column="21">s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1099" PREFIX:column="1">char</name></type> <name PREFIX:line="1099" PREFIX:column="6">u8g_font_get_charP</name><parameter_list PREFIX:line="1099" PREFIX:column="24">( <param><decl><type><name PREFIX:line="1099" PREFIX:column="26">void</name> *</type><name PREFIX:line="1099" PREFIX:column="32">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1100" PREFIX:column="1">{
  <return PREFIX:line="1101" PREFIX:column="3">return <expr><call><name PREFIX:line="1101" PREFIX:column="10">u8g_pgm_read</name><argument_list PREFIX:line="1101" PREFIX:column="22">(<argument><expr><name PREFIX:line="1101" PREFIX:column="23">s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<typedef PREFIX:line="1104" PREFIX:column="1">typedef <function_decl><type><name PREFIX:line="1104" PREFIX:column="9">char</name></type> (*<name PREFIX:line="1104" PREFIX:column="16">u8g_font_get_char_fn</name>)<parameter_list PREFIX:line="1104" PREFIX:column="37">( <param><decl><type><name PREFIX:line="1104" PREFIX:column="39">void</name> *</type><name PREFIX:line="1104" PREFIX:column="45">s</name></decl></param>)</parameter_list>;</function_decl></typedef>


<function><type><name PREFIX:line="1107" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1107" PREFIX:column="12">u8g_font_calc_str_pixel_width</name><parameter_list PREFIX:line="1107" PREFIX:column="41">(<param><decl><type><name PREFIX:line="1107" PREFIX:column="42">u8g_t</name> *</type><name PREFIX:line="1107" PREFIX:column="49">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1107" PREFIX:column="55">char</name> *</type><name PREFIX:line="1107" PREFIX:column="61">s</name></decl></param>, <param><decl><type><name PREFIX:line="1107" PREFIX:column="64">u8g_font_get_char_fn</name></type> <name PREFIX:line="1107" PREFIX:column="85">get_char</name></decl></param> )</parameter_list>
<block PREFIX:line="1108" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1109" PREFIX:column="3">u8g_uint_t</name></type>  <name PREFIX:line="1109" PREFIX:column="15">w</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1110" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1110" PREFIX:column="11">enc</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1112" PREFIX:column="3">/* reset the total minimal width to zero, this will be expanded during calculation */</comment>
  <expr_stmt><expr><name PREFIX:line="1113" PREFIX:column="3">w</name> = 0</expr>;</expr_stmt>
    
  <expr_stmt><expr><name PREFIX:line="1115" PREFIX:column="3">enc</name> = <call><name PREFIX:line="1115" PREFIX:column="9">get_char</name><argument_list PREFIX:line="1115" PREFIX:column="17">(<argument><expr><name PREFIX:line="1115" PREFIX:column="18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1117" PREFIX:column="3">/* check for empty string, width is already 0 */</comment>
  <if PREFIX:line="1118" PREFIX:column="3">if <condition PREFIX:line="1118" PREFIX:column="6">( <expr><name PREFIX:line="1118" PREFIX:column="8">enc</name> == '\0'</expr> )</condition><then PREFIX:line="1118" PREFIX:column="21">
  <block PREFIX:line="1119" PREFIX:column="3">{
    <return PREFIX:line="1120" PREFIX:column="5">return <expr><name PREFIX:line="1120" PREFIX:column="12">w</name></expr>;</return>
  }</block></then></if>
  
  <comment type="block" PREFIX:line="1123" PREFIX:column="3">/* get the glyph information of the first char. This must be valid, because we already checked for the empty string */</comment>
  <comment type="block" PREFIX:line="1124" PREFIX:column="3">/* if *s is not inside the font, then the cached parameters of the glyph are all zero */</comment>
  <expr_stmt><expr><call><name PREFIX:line="1125" PREFIX:column="3">u8g_GetGlyph</name><argument_list PREFIX:line="1125" PREFIX:column="15">(<argument><expr><name PREFIX:line="1125" PREFIX:column="16">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1125" PREFIX:column="21">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" PREFIX:line="1127" PREFIX:column="3">/* strlen(s) == 1:       width = width(s[0]) */</comment>
  <comment type="block" PREFIX:line="1128" PREFIX:column="3">/* strlen(s) == 2:       width = - offx(s[0]) + deltax(s[0]) + offx(s[1]) + width(s[1]) */</comment>
  <comment type="block" PREFIX:line="1129" PREFIX:column="3">/* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */</comment>
  
  <comment type="block" PREFIX:line="1131" PREFIX:column="3">/* assume that the string has size 2 or more, than start with negative offset-x */</comment>
  <comment type="block" PREFIX:line="1132" PREFIX:column="3">/* for string with size 1, this will be nullified after the loop */</comment>
  <expr_stmt><expr><name PREFIX:line="1133" PREFIX:column="3">w</name> = -<name><name PREFIX:line="1133" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="1133" PREFIX:column="13">glyph_x</name></name></expr>;</expr_stmt>  
  <for PREFIX:line="1134" PREFIX:column="3">for(<init PREFIX:line="1134" PREFIX:column="7">;</init><condition PREFIX:line="1134" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="1135" PREFIX:column="3">{
    
    <comment type="block" PREFIX:line="1137" PREFIX:column="5">/* check and stop if the end of the string is reached */</comment>
    <expr_stmt><expr><name PREFIX:line="1138" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
    <if PREFIX:line="1139" PREFIX:column="5">if <condition PREFIX:line="1139" PREFIX:column="8">( <expr><call><name PREFIX:line="1139" PREFIX:column="10">get_char</name><argument_list PREFIX:line="1139" PREFIX:column="18">(<argument><expr><name PREFIX:line="1139" PREFIX:column="19">s</name></expr></argument>)</argument_list></call> == '\0'</expr> )</condition><then PREFIX:line="1139" PREFIX:column="31">
      <break PREFIX:line="1140" PREFIX:column="7">break;</break></then></if>
    
    <comment type="block" PREFIX:line="1142" PREFIX:column="5">/* if there are still more characters, add the delta to the next glyph */</comment>
    <expr_stmt><expr><name PREFIX:line="1143" PREFIX:column="5">w</name> += <name><name PREFIX:line="1143" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1143" PREFIX:column="15">glyph_dx</name></name></expr>;</expr_stmt>
    
    <comment type="block" PREFIX:line="1145" PREFIX:column="5">/* store the encoding in a local variable, used also after the for(;;) loop */</comment>
    <expr_stmt><expr><name PREFIX:line="1146" PREFIX:column="5">enc</name> = <call><name PREFIX:line="1146" PREFIX:column="11">get_char</name><argument_list PREFIX:line="1146" PREFIX:column="19">(<argument><expr><name PREFIX:line="1146" PREFIX:column="20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" PREFIX:line="1148" PREFIX:column="5">/* load the next glyph information */</comment>
    <expr_stmt><expr><call><name PREFIX:line="1149" PREFIX:column="5">u8g_GetGlyph</name><argument_list PREFIX:line="1149" PREFIX:column="17">(<argument><expr><name PREFIX:line="1149" PREFIX:column="18">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1149" PREFIX:column="23">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  
  <comment type="block" PREFIX:line="1152" PREFIX:column="3">/* finally calculate the width of the last char */</comment>
  <comment type="block" PREFIX:line="1153" PREFIX:column="3">/* here is another exception, if the last char is a black, use the dx value instead */</comment>
  <if PREFIX:line="1154" PREFIX:column="3">if <condition PREFIX:line="1154" PREFIX:column="6">( <expr><name PREFIX:line="1154" PREFIX:column="8">enc</name> != ' '</expr> )</condition><then PREFIX:line="1154" PREFIX:column="20">
  <block PREFIX:line="1155" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1156" PREFIX:column="5">/* if g was not updated in the for loop (strlen() == 1), then the initial offset x gets removed */</comment>
    <expr_stmt><expr><name PREFIX:line="1157" PREFIX:column="5">w</name> += <name><name PREFIX:line="1157" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1157" PREFIX:column="15">glyph_width</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="1158" PREFIX:column="5">w</name> += <name><name PREFIX:line="1158" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1158" PREFIX:column="15">glyph_x</name></name></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="1160" PREFIX:column="3">else
  <block PREFIX:line="1161" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="1162" PREFIX:column="5">w</name> += <name><name PREFIX:line="1162" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1162" PREFIX:column="15">glyph_dx</name></name></expr>;</expr_stmt>
  }</block></else></if>
  
  
  <return PREFIX:line="1166" PREFIX:column="3">return <expr><name PREFIX:line="1166" PREFIX:column="10">w</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1169" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1169" PREFIX:column="12">u8g_GetStrPixelWidth</name><parameter_list PREFIX:line="1169" PREFIX:column="32">(<param><decl><type><name PREFIX:line="1169" PREFIX:column="33">u8g_t</name> *</type><name PREFIX:line="1169" PREFIX:column="40">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1169" PREFIX:column="46">char</name> *</type><name PREFIX:line="1169" PREFIX:column="52">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1170" PREFIX:column="1">{
  <return PREFIX:line="1171" PREFIX:column="3">return <expr><call><name PREFIX:line="1171" PREFIX:column="10">u8g_font_calc_str_pixel_width</name><argument_list PREFIX:line="1171" PREFIX:column="39">(<argument><expr><name PREFIX:line="1171" PREFIX:column="40">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1171" PREFIX:column="45">s</name></expr></argument>, <argument><expr><name PREFIX:line="1171" PREFIX:column="48">u8g_font_get_char</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1174" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1174" PREFIX:column="12">u8g_GetStrPixelWidthP</name><parameter_list PREFIX:line="1174" PREFIX:column="33">(<param><decl><type><name PREFIX:line="1174" PREFIX:column="34">u8g_t</name> *</type><name PREFIX:line="1174" PREFIX:column="41">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1174" PREFIX:column="47">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="1174" PREFIX:column="64">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1175" PREFIX:column="1">{
  <return PREFIX:line="1176" PREFIX:column="3">return <expr><call><name PREFIX:line="1176" PREFIX:column="10">u8g_font_calc_str_pixel_width</name><argument_list PREFIX:line="1176" PREFIX:column="39">(<argument><expr><name PREFIX:line="1176" PREFIX:column="40">u8g</name></expr></argument>, <argument><expr PREFIX:line="1176" PREFIX:column="45">( <name PREFIX:line="1176" PREFIX:column="47">char</name> *)<name PREFIX:line="1176" PREFIX:column="54">s</name></expr></argument>, <argument><expr><name PREFIX:line="1176" PREFIX:column="57">u8g_font_get_charP</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1179" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="1179" PREFIX:column="8">u8g_GetStrX</name><parameter_list PREFIX:line="1179" PREFIX:column="19">(<param><decl><type><name PREFIX:line="1179" PREFIX:column="20">u8g_t</name> *</type><name PREFIX:line="1179" PREFIX:column="27">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1179" PREFIX:column="33">char</name> *</type><name PREFIX:line="1179" PREFIX:column="39">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1180" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1181" PREFIX:column="3">u8g_GetGlyph</name><argument_list PREFIX:line="1181" PREFIX:column="15">(<argument><expr><name PREFIX:line="1181" PREFIX:column="16">u8g</name></expr></argument>, <argument><expr PREFIX:line="1181" PREFIX:column="21">*<name PREFIX:line="1181" PREFIX:column="22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="1182" PREFIX:column="3">return <expr><name><name PREFIX:line="1182" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1182" PREFIX:column="15">glyph_x</name></name></expr>;</return>  
}</block></function>

<function><type><name PREFIX:line="1185" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="1185" PREFIX:column="8">u8g_GetStrXP</name><parameter_list PREFIX:line="1185" PREFIX:column="20">(<param><decl><type><name PREFIX:line="1185" PREFIX:column="21">u8g_t</name> *</type><name PREFIX:line="1185" PREFIX:column="28">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1185" PREFIX:column="34">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="1185" PREFIX:column="51">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1186" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1187" PREFIX:column="3">u8g_GetGlyph</name><argument_list PREFIX:line="1187" PREFIX:column="15">(<argument><expr><name PREFIX:line="1187" PREFIX:column="16">u8g</name></expr></argument>, <argument><expr><call><name PREFIX:line="1187" PREFIX:column="21">u8g_pgm_read</name><argument_list PREFIX:line="1187" PREFIX:column="33">(<argument><expr><name PREFIX:line="1187" PREFIX:column="34">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="1188" PREFIX:column="3">return <expr><name><name PREFIX:line="1188" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1188" PREFIX:column="15">glyph_x</name></name></expr>;</return>  
}</block></function>

<comment type="block" PREFIX:line="1191" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="1192" PREFIX:column="1">/* string width calculation */</comment>

<function><type><name PREFIX:line="1194" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1194" PREFIX:column="12">u8g_GetStrWidth</name><parameter_list PREFIX:line="1194" PREFIX:column="27">(<param><decl><type><name PREFIX:line="1194" PREFIX:column="28">u8g_t</name> *</type><name PREFIX:line="1194" PREFIX:column="35">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1194" PREFIX:column="41">char</name> *</type><name PREFIX:line="1194" PREFIX:column="47">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1195" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1196" PREFIX:column="3">u8g_uint_t</name></type>  <name PREFIX:line="1196" PREFIX:column="15">w</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1197" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1197" PREFIX:column="11">encoding</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1199" PREFIX:column="3">/* reset the total width to zero, this will be expanded during calculation */</comment>
  <expr_stmt><expr><name PREFIX:line="1200" PREFIX:column="3">w</name> = 0</expr>;</expr_stmt>
  
  <for PREFIX:line="1202" PREFIX:column="3">for(<init PREFIX:line="1202" PREFIX:column="7">;</init><condition PREFIX:line="1202" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="1203" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="1204" PREFIX:column="5">encoding</name> = *<name PREFIX:line="1204" PREFIX:column="17">s</name></expr>;</expr_stmt>
    <if PREFIX:line="1205" PREFIX:column="5">if <condition PREFIX:line="1205" PREFIX:column="8">( <expr><name PREFIX:line="1205" PREFIX:column="10">encoding</name> == 0</expr> )</condition><then PREFIX:line="1205" PREFIX:column="25">
      <break PREFIX:line="1206" PREFIX:column="7">break;</break></then></if>

    <comment type="block" PREFIX:line="1208" PREFIX:column="5">/* load glyph information */</comment>
    <expr_stmt><expr><call><name PREFIX:line="1209" PREFIX:column="5">u8g_GetGlyph</name><argument_list PREFIX:line="1209" PREFIX:column="17">(<argument><expr><name PREFIX:line="1209" PREFIX:column="18">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1209" PREFIX:column="23">encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="1210" PREFIX:column="5">w</name> += <name><name PREFIX:line="1210" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1210" PREFIX:column="15">glyph_dx</name></name></expr>;</expr_stmt>    
    
    <comment type="block" PREFIX:line="1212" PREFIX:column="5">/* goto next char */</comment>
    <expr_stmt><expr><name PREFIX:line="1213" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></for>
  
  <return PREFIX:line="1216" PREFIX:column="3">return <expr><name PREFIX:line="1216" PREFIX:column="10">w</name></expr>;</return>  
}</block></function>


<function><type><name PREFIX:line="1220" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1220" PREFIX:column="12">u8g_GetStrWidthP</name><parameter_list PREFIX:line="1220" PREFIX:column="28">(<param><decl><type><name PREFIX:line="1220" PREFIX:column="29">u8g_t</name> *</type><name PREFIX:line="1220" PREFIX:column="36">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1220" PREFIX:column="42">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="1220" PREFIX:column="59">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1221" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1222" PREFIX:column="3">u8g_uint_t</name></type>  <name PREFIX:line="1222" PREFIX:column="15">w</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1223" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1223" PREFIX:column="11">encoding</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1225" PREFIX:column="3">/* reset the total width to zero, this will be expanded during calculation */</comment>
  <expr_stmt><expr><name PREFIX:line="1226" PREFIX:column="3">w</name> = 0</expr>;</expr_stmt>
  
  <for PREFIX:line="1228" PREFIX:column="3">for(<init PREFIX:line="1228" PREFIX:column="7">;</init><condition PREFIX:line="1228" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="1229" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="1230" PREFIX:column="5">encoding</name> = <call><name PREFIX:line="1230" PREFIX:column="16">u8g_pgm_read</name><argument_list PREFIX:line="1230" PREFIX:column="28">(<argument><expr><name PREFIX:line="1230" PREFIX:column="29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if PREFIX:line="1231" PREFIX:column="5">if <condition PREFIX:line="1231" PREFIX:column="8">( <expr><name PREFIX:line="1231" PREFIX:column="10">encoding</name> == 0</expr> )</condition><then PREFIX:line="1231" PREFIX:column="25">
      <break PREFIX:line="1232" PREFIX:column="7">break;</break></then></if>

    <comment type="block" PREFIX:line="1234" PREFIX:column="5">/* load glyph information */</comment>
    <expr_stmt><expr><call><name PREFIX:line="1235" PREFIX:column="5">u8g_GetGlyph</name><argument_list PREFIX:line="1235" PREFIX:column="17">(<argument><expr><name PREFIX:line="1235" PREFIX:column="18">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1235" PREFIX:column="23">encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="1236" PREFIX:column="5">w</name> += <name><name PREFIX:line="1236" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1236" PREFIX:column="15">glyph_dx</name></name></expr>;</expr_stmt>    
    
    <comment type="block" PREFIX:line="1238" PREFIX:column="5">/* goto next char */</comment>
    <expr_stmt><expr><name PREFIX:line="1239" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></for>
  
  <return PREFIX:line="1242" PREFIX:column="3">return <expr><name PREFIX:line="1242" PREFIX:column="10">w</name></expr>;</return>  
}</block></function>


<comment type="block" PREFIX:line="1246" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="1247" PREFIX:column="1">/* calculation of font/glyph/string characteristics */</comment>


<comment type="block" PREFIX:line="1250" PREFIX:column="1">/*
  Description:
    Calculate parameter for the minimal bounding box on a given string
  Output
    buf-&gt;y_min          extend of the lower left edge if the string below (y_min&lt;0) or above (y_min&gt;0) baseline (descent)
    buf-&gt;y_max          extend of the upper left edge if the string below (y_min&lt;0) or above (y_min&gt;0) baseline (ascent)
    buf-&gt;w                 the width of the string
*/</comment>
<struct PREFIX:line="1258" PREFIX:column="1">struct <name PREFIX:line="1258" PREFIX:column="8">u8g_str_size_struct</name>
<block PREFIX:line="1259" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1260" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="1260" PREFIX:column="10">y_min</name></decl>;</decl_stmt>         <comment type="block" PREFIX:line="1260" PREFIX:column="25">/* descent */</comment>
  <decl_stmt><decl><type><name PREFIX:line="1261" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="1261" PREFIX:column="10">y_max</name></decl>;</decl_stmt>         <comment type="block" PREFIX:line="1261" PREFIX:column="25">/* ascent */</comment>
  <decl_stmt><decl><type><name PREFIX:line="1262" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="1262" PREFIX:column="10">x</name></decl>, <decl><type ref="prev"/><name PREFIX:line="1262" PREFIX:column="13">y</name></decl>;</decl_stmt>             <comment type="block" PREFIX:line="1262" PREFIX:column="28">/* the reference point of the font (negated!) */</comment>
  <decl_stmt><decl><type><name PREFIX:line="1263" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="1263" PREFIX:column="14">w</name></decl>;</decl_stmt>         <comment type="block" PREFIX:line="1263" PREFIX:column="25">/* width of the overall string */</comment>
}</block>;</struct>
<typedef PREFIX:line="1265" PREFIX:column="1">typedef <type PREFIX:line="1265" PREFIX:column="9">struct <name PREFIX:line="1265" PREFIX:column="16">u8g_str_size_struct</name></type> <name PREFIX:line="1265" PREFIX:column="36">u8g_str_size_t</name>;</typedef>

<function><type><specifier PREFIX:line="1267" PREFIX:column="1">static</specifier> <name PREFIX:line="1267" PREFIX:column="8">void</name></type> <name PREFIX:line="1267" PREFIX:column="13">u8g_font_calc_str_min_box</name><parameter_list PREFIX:line="1267" PREFIX:column="38">(<param><decl><type><name PREFIX:line="1267" PREFIX:column="39">u8g_t</name> *</type><name PREFIX:line="1267" PREFIX:column="46">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1267" PREFIX:column="52">char</name> *</type><name PREFIX:line="1267" PREFIX:column="58">s</name></decl></param>, <param><decl><type><name PREFIX:line="1267" PREFIX:column="61">u8g_str_size_t</name> *</type><name PREFIX:line="1267" PREFIX:column="77">buf</name></decl></param>)</parameter_list>
<block PREFIX:line="1268" PREFIX:column="1">{
  <comment type="block" PREFIX:line="1269" PREFIX:column="3">/* u8g_glyph_t g; */</comment>
  <decl_stmt><decl><type><name PREFIX:line="1270" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="1270" PREFIX:column="10">tmp</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1272" PREFIX:column="3">/* reset the total minimal width to zero, this will be expanded during calculation */</comment>
  <expr_stmt><expr><name><name PREFIX:line="1273" PREFIX:column="3">buf</name>-&gt;<name PREFIX:line="1273" PREFIX:column="8">w</name></name> = 0</expr>;</expr_stmt>
    
  <comment type="block" PREFIX:line="1275" PREFIX:column="3">/* check for empty string, width is already 0, but also reset y_min and y_max to 0 */</comment>
  <if PREFIX:line="1276" PREFIX:column="3">if <condition PREFIX:line="1276" PREFIX:column="6">( <expr PREFIX:line="1276" PREFIX:column="8">*<name PREFIX:line="1276" PREFIX:column="9">s</name> == '\0'</expr> )</condition><then PREFIX:line="1276" PREFIX:column="20">
  <block PREFIX:line="1277" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="1278" PREFIX:column="5">buf</name>-&gt;<name PREFIX:line="1278" PREFIX:column="10">y_min</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="1279" PREFIX:column="5">buf</name>-&gt;<name PREFIX:line="1279" PREFIX:column="10">y_max</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="1280" PREFIX:column="5">buf</name>-&gt;<name PREFIX:line="1280" PREFIX:column="10">x</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="1281" PREFIX:column="5">buf</name>-&gt;<name PREFIX:line="1281" PREFIX:column="10">y</name></name> = 0</expr>;</expr_stmt>
    <return PREFIX:line="1282" PREFIX:column="5">return;</return>
  }</block></then></if>
  
  <comment type="block" PREFIX:line="1285" PREFIX:column="3">/* reset y_min to the largest possible value. Later we search for the smallest value */</comment>
  <comment type="block" PREFIX:line="1286" PREFIX:column="3">/* y_min contains the position [pixel] of the lower left edge of the glyph above (y_min&gt;0) or below (y_min&lt;0) baseline  */</comment>
  <expr_stmt><expr><name><name PREFIX:line="1287" PREFIX:column="3">buf</name>-&gt;<name PREFIX:line="1287" PREFIX:column="8">y_min</name></name> = 127</expr>;</expr_stmt>
  <comment type="block" PREFIX:line="1288" PREFIX:column="3">/* reset y_max to the smallest possible value. Later we search for the highest value */</comment>
  <comment type="block" PREFIX:line="1289" PREFIX:column="3">/* y_max contains the position [pixel] of the upper left edge of the glyph above (y_max&gt;0) or below (y_max&lt;0) baseline  */</comment>
  <expr_stmt><expr><name><name PREFIX:line="1290" PREFIX:column="3">buf</name>-&gt;<name PREFIX:line="1290" PREFIX:column="8">y_max</name></name> = -128</expr>;</expr_stmt>

  <comment type="block" PREFIX:line="1292" PREFIX:column="3">/* get the glyph information of the first char. This must be valid, because we already checked for the empty string */</comment>
  <expr_stmt><expr><call><name PREFIX:line="1293" PREFIX:column="3">u8g_GetGlyph</name><argument_list PREFIX:line="1293" PREFIX:column="15">(<argument><expr><name PREFIX:line="1293" PREFIX:column="16">u8g</name></expr></argument>, <argument><expr PREFIX:line="1293" PREFIX:column="21">*<name PREFIX:line="1293" PREFIX:column="22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" PREFIX:line="1295" PREFIX:column="3">/* strlen(s) == 1:       width = width(s[0]) */</comment>
  <comment type="block" PREFIX:line="1296" PREFIX:column="3">/* strlen(s) == 2:       width = - offx(s[0]) + deltax(s[0]) + offx(s[1]) + width(s[1]) */</comment>
  <comment type="block" PREFIX:line="1297" PREFIX:column="3">/* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */</comment>
  
  <comment type="block" PREFIX:line="1299" PREFIX:column="3">/* assume that the string has size 2 or more, than start with negative offset-x */</comment>
  <comment type="block" PREFIX:line="1300" PREFIX:column="3">/* for string with size 1, this will be nullified after the loop */</comment>
  <comment type="line" PREFIX:line="1301" PREFIX:column="3">// buf-&gt;w = - u8g_font_GetGlyphBBXOffX(u8g-&gt;font, g);</comment>
  <expr_stmt><expr><name><name PREFIX:line="1302" PREFIX:column="3">buf</name>-&gt;<name PREFIX:line="1302" PREFIX:column="8">w</name></name> = - <name><name PREFIX:line="1302" PREFIX:column="14">u8g</name>-&gt;<name PREFIX:line="1302" PREFIX:column="19">glyph_x</name></name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1304" PREFIX:column="3">/* Also copy the position of the first glyph. This is the reference point of the string (negated) */</comment>
  <expr_stmt><expr><name><name PREFIX:line="1305" PREFIX:column="3">buf</name>-&gt;<name PREFIX:line="1305" PREFIX:column="8">x</name></name> = <name><name PREFIX:line="1305" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="1305" PREFIX:column="17">glyph_x</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="1306" PREFIX:column="3">buf</name>-&gt;<name PREFIX:line="1306" PREFIX:column="8">y</name></name> = <name><name PREFIX:line="1306" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="1306" PREFIX:column="17">glyph_y</name></name></expr>;</expr_stmt>
  
  <for PREFIX:line="1308" PREFIX:column="3">for(<init PREFIX:line="1308" PREFIX:column="7">;</init><condition PREFIX:line="1308" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="1309" PREFIX:column="3">{
    
    <comment type="block" PREFIX:line="1311" PREFIX:column="5">/* calculated y position of the upper left corner (y_max) and lower left corner (y_min) of the string */</comment>
    <comment type="block" PREFIX:line="1312" PREFIX:column="5">/* relative to the base line */</comment>
    
    <expr_stmt><expr><name PREFIX:line="1314" PREFIX:column="5">tmp</name> = <name><name PREFIX:line="1314" PREFIX:column="11">u8g</name>-&gt;<name PREFIX:line="1314" PREFIX:column="16">glyph_y</name></name></expr>;</expr_stmt>
    <if PREFIX:line="1315" PREFIX:column="5">if <condition PREFIX:line="1315" PREFIX:column="8">( <expr><name><name PREFIX:line="1315" PREFIX:column="10">buf</name>-&gt;<name PREFIX:line="1315" PREFIX:column="15">y_min</name></name> &gt; <name PREFIX:line="1315" PREFIX:column="23">tmp</name></expr> )</condition><then PREFIX:line="1315" PREFIX:column="28">
      <expr_stmt><expr><name><name PREFIX:line="1316" PREFIX:column="7">buf</name>-&gt;<name PREFIX:line="1316" PREFIX:column="12">y_min</name></name> = <name PREFIX:line="1316" PREFIX:column="20">tmp</name></expr>;</expr_stmt></then></if>
    
    <expr_stmt><expr><name PREFIX:line="1318" PREFIX:column="5">tmp</name> +=<name><name PREFIX:line="1318" PREFIX:column="11">u8g</name>-&gt;<name PREFIX:line="1318" PREFIX:column="16">glyph_height</name></name></expr>;</expr_stmt>
    <if PREFIX:line="1319" PREFIX:column="5">if <condition PREFIX:line="1319" PREFIX:column="8">( <expr><name><name PREFIX:line="1319" PREFIX:column="10">buf</name>-&gt;<name PREFIX:line="1319" PREFIX:column="15">y_max</name></name> &lt; <name PREFIX:line="1319" PREFIX:column="23">tmp</name></expr> )</condition><then PREFIX:line="1319" PREFIX:column="28">
      <expr_stmt><expr><name><name PREFIX:line="1320" PREFIX:column="7">buf</name>-&gt;<name PREFIX:line="1320" PREFIX:column="12">y_max</name></name> = <name PREFIX:line="1320" PREFIX:column="20">tmp</name></expr>;</expr_stmt></then></if>
    
    <comment type="block" PREFIX:line="1322" PREFIX:column="5">/* check and stop if the end of the string is reached */</comment>
    <expr_stmt><expr><name PREFIX:line="1323" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
    <if PREFIX:line="1324" PREFIX:column="5">if <condition PREFIX:line="1324" PREFIX:column="8">( <expr PREFIX:line="1324" PREFIX:column="10">*<name PREFIX:line="1324" PREFIX:column="11">s</name> == '\0'</expr> )</condition><then PREFIX:line="1324" PREFIX:column="22">
      <break PREFIX:line="1325" PREFIX:column="7">break;</break></then></if>
    
    <comment type="block" PREFIX:line="1327" PREFIX:column="5">/* if there are still more characters, add the delta to the next glyph */</comment>
    <expr_stmt><expr><name><name PREFIX:line="1328" PREFIX:column="5">buf</name>-&gt;<name PREFIX:line="1328" PREFIX:column="10">w</name></name> += <name><name PREFIX:line="1328" PREFIX:column="15">u8g</name>-&gt;<name PREFIX:line="1328" PREFIX:column="20">glyph_dx</name></name></expr>;</expr_stmt>
    
    <comment type="block" PREFIX:line="1330" PREFIX:column="5">/* load the next glyph information */</comment>
    <expr_stmt><expr><call><name PREFIX:line="1331" PREFIX:column="5">u8g_GetGlyph</name><argument_list PREFIX:line="1331" PREFIX:column="17">(<argument><expr><name PREFIX:line="1331" PREFIX:column="18">u8g</name></expr></argument>, <argument><expr PREFIX:line="1331" PREFIX:column="23">*<name PREFIX:line="1331" PREFIX:column="24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  
  <comment type="block" PREFIX:line="1334" PREFIX:column="3">/* finally calculate the width of the last char */</comment>
  <comment type="block" PREFIX:line="1335" PREFIX:column="3">/* if g was not updated in the for loop (strlen() == 1), then the initial offset x gets removed */</comment>
  <expr_stmt><expr><name><name PREFIX:line="1336" PREFIX:column="3">buf</name>-&gt;<name PREFIX:line="1336" PREFIX:column="8">w</name></name> += <name><name PREFIX:line="1336" PREFIX:column="13">u8g</name>-&gt;<name PREFIX:line="1336" PREFIX:column="18">glyph_width</name></name></expr>;</expr_stmt>
  <comment type="line" PREFIX:line="1337" PREFIX:column="3">// buf-&gt;w += u8g_font_GetGlyphBBXOffX(u8g-&gt;font, g);</comment>
  
  <expr_stmt><expr><name><name PREFIX:line="1339" PREFIX:column="3">buf</name>-&gt;<name PREFIX:line="1339" PREFIX:column="8">w</name></name> += <name><name PREFIX:line="1339" PREFIX:column="13">u8g</name>-&gt;<name PREFIX:line="1339" PREFIX:column="18">glyph_x</name></name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="1342" PREFIX:column="1">/* calculate minimal box */</comment>
<function><type><name PREFIX:line="1343" PREFIX:column="1">void</name></type> <name PREFIX:line="1343" PREFIX:column="6">u8g_font_box_min</name><parameter_list PREFIX:line="1343" PREFIX:column="22">(<param><decl><type><name PREFIX:line="1343" PREFIX:column="23">u8g_t</name> *</type><name PREFIX:line="1343" PREFIX:column="30">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1343" PREFIX:column="36">char</name> *</type><name PREFIX:line="1343" PREFIX:column="42">s</name></decl></param>, <param><decl><type><name PREFIX:line="1343" PREFIX:column="45">u8g_str_size_t</name> *</type><name PREFIX:line="1343" PREFIX:column="61">buf</name></decl></param>)</parameter_list>
<block PREFIX:line="1344" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1345" PREFIX:column="3">u8g_font_calc_str_min_box</name><argument_list PREFIX:line="1345" PREFIX:column="28">(<argument><expr><name PREFIX:line="1345" PREFIX:column="29">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1345" PREFIX:column="34">s</name></expr></argument>, <argument><expr><name PREFIX:line="1345" PREFIX:column="37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="1348" PREFIX:column="1">/* calculate gA box, but do not calculate the overall width */</comment>
<function><type><name PREFIX:line="1349" PREFIX:column="1">void</name></type> <name PREFIX:line="1349" PREFIX:column="6">u8g_font_box_left_gA</name><parameter_list PREFIX:line="1349" PREFIX:column="26">(<param><decl><type><name PREFIX:line="1349" PREFIX:column="27">u8g_t</name> *</type><name PREFIX:line="1349" PREFIX:column="34">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1349" PREFIX:column="40">char</name> *</type><name PREFIX:line="1349" PREFIX:column="46">s</name></decl></param>, <param><decl><type><name PREFIX:line="1349" PREFIX:column="49">u8g_str_size_t</name> *</type><name PREFIX:line="1349" PREFIX:column="65">buf</name></decl></param>)</parameter_list>
<block PREFIX:line="1350" PREFIX:column="1">{
  
}</block></function>

<comment type="block" PREFIX:line="1354" PREFIX:column="1">/* calculate gA box, including overall width */</comment>
<function><type><name PREFIX:line="1355" PREFIX:column="1">void</name></type> <name PREFIX:line="1355" PREFIX:column="6">u8g_font_box_all_gA</name><parameter_list PREFIX:line="1355" PREFIX:column="25">(<param><decl><type><name PREFIX:line="1355" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="1355" PREFIX:column="33">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1355" PREFIX:column="39">char</name> *</type><name PREFIX:line="1355" PREFIX:column="45">s</name></decl></param>, <param><decl><type><name PREFIX:line="1355" PREFIX:column="48">u8g_str_size_t</name> *</type><name PREFIX:line="1355" PREFIX:column="64">buf</name></decl></param>)</parameter_list>
<block PREFIX:line="1356" PREFIX:column="1">{
  
}</block></function>


<function><type><specifier PREFIX:line="1361" PREFIX:column="1">static</specifier> <name PREFIX:line="1361" PREFIX:column="8">void</name></type> <name PREFIX:line="1361" PREFIX:column="13">u8g_font_get_str_box_fill_args</name><parameter_list PREFIX:line="1361" PREFIX:column="43">(<param><decl><type><name PREFIX:line="1361" PREFIX:column="44">u8g_t</name> *</type><name PREFIX:line="1361" PREFIX:column="51">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1361" PREFIX:column="57">char</name> *</type><name PREFIX:line="1361" PREFIX:column="63">s</name></decl></param>, <param><decl><type><name PREFIX:line="1361" PREFIX:column="66">u8g_str_size_t</name> *</type><name PREFIX:line="1361" PREFIX:column="82">buf</name></decl></param>, <param><decl><type><name PREFIX:line="1361" PREFIX:column="87">u8g_uint_t</name> *</type><name PREFIX:line="1361" PREFIX:column="99">x</name></decl></param>, <param><decl><type><name PREFIX:line="1361" PREFIX:column="102">u8g_uint_t</name> *</type><name PREFIX:line="1361" PREFIX:column="114">y</name></decl></param>, <param><decl><type><name PREFIX:line="1361" PREFIX:column="117">u8g_uint_t</name> *</type><name PREFIX:line="1361" PREFIX:column="129">width</name></decl></param>, <param><decl><type><name PREFIX:line="1361" PREFIX:column="136">u8g_uint_t</name> *</type><name PREFIX:line="1361" PREFIX:column="148">height</name></decl></param>)</parameter_list>
<block PREFIX:line="1362" PREFIX:column="1">{
  <comment type="block" PREFIX:line="1363" PREFIX:column="3">/*
  u8g_glyph_t g;
  g =
  */</comment>  
  <expr_stmt><expr><call><name PREFIX:line="1367" PREFIX:column="3">u8g_GetGlyph</name><argument_list PREFIX:line="1367" PREFIX:column="15">(<argument><expr><name PREFIX:line="1367" PREFIX:column="16">u8g</name></expr></argument>, <argument><expr PREFIX:line="1367" PREFIX:column="21">*<name PREFIX:line="1367" PREFIX:column="22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="1368" PREFIX:column="3">*<name PREFIX:line="1368" PREFIX:column="4">x</name> += <name><name PREFIX:line="1368" PREFIX:column="9">u8g</name>-&gt;<name PREFIX:line="1368" PREFIX:column="14">glyph_x</name></name></expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="1369" PREFIX:column="3">*<name PREFIX:line="1369" PREFIX:column="4">width</name> = <name><name PREFIX:line="1369" PREFIX:column="12">buf</name>-&gt;<name PREFIX:line="1369" PREFIX:column="17">w</name></name></expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="1370" PREFIX:column="3">*<name PREFIX:line="1370" PREFIX:column="4">y</name> -= <name><name PREFIX:line="1370" PREFIX:column="9">buf</name>-&gt;<name PREFIX:line="1370" PREFIX:column="14">y_max</name></name></expr>;</expr_stmt>
  <comment type="block" PREFIX:line="1371" PREFIX:column="3">/* +1 because y_max is a height, this compensates the next step */</comment>
  <comment type="line" PREFIX:line="1372" PREFIX:column="3">//*y += 1;                      </comment>
  <comment type="block" PREFIX:line="1373" PREFIX:column="3">/* because the reference point is one below the string, this compensates the previous step */</comment>
  <comment type="line" PREFIX:line="1374" PREFIX:column="3">//*y -= 1;</comment>
  <expr_stmt><expr PREFIX:line="1375" PREFIX:column="3">*<name PREFIX:line="1375" PREFIX:column="4">height</name> = <name><name PREFIX:line="1375" PREFIX:column="13">buf</name>-&gt;<name PREFIX:line="1375" PREFIX:column="18">y_max</name></name></expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="1376" PREFIX:column="3">*<name PREFIX:line="1376" PREFIX:column="4">height</name> -= <name><name PREFIX:line="1376" PREFIX:column="14">buf</name>-&gt;<name PREFIX:line="1376" PREFIX:column="19">y_min</name></name></expr>;</expr_stmt>
}</block></function>


<function><type><name PREFIX:line="1380" PREFIX:column="1">void</name></type> <name PREFIX:line="1380" PREFIX:column="6">u8g_GetStrMinBox</name><parameter_list PREFIX:line="1380" PREFIX:column="22">(<param><decl><type><name PREFIX:line="1380" PREFIX:column="23">u8g_t</name> *</type><name PREFIX:line="1380" PREFIX:column="30">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1380" PREFIX:column="36">char</name> *</type><name PREFIX:line="1380" PREFIX:column="42">s</name></decl></param>, <param><decl><type><name PREFIX:line="1380" PREFIX:column="45">u8g_uint_t</name> *</type><name PREFIX:line="1380" PREFIX:column="57">x</name></decl></param>, <param><decl><type><name PREFIX:line="1380" PREFIX:column="60">u8g_uint_t</name> *</type><name PREFIX:line="1380" PREFIX:column="72">y</name></decl></param>, <param><decl><type><name PREFIX:line="1380" PREFIX:column="75">u8g_uint_t</name> *</type><name PREFIX:line="1380" PREFIX:column="87">width</name></decl></param>, <param><decl><type><name PREFIX:line="1380" PREFIX:column="94">u8g_uint_t</name> *</type><name PREFIX:line="1380" PREFIX:column="106">height</name></decl></param>)</parameter_list>
<block PREFIX:line="1381" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1382" PREFIX:column="3">u8g_str_size_t</name></type> <name PREFIX:line="1382" PREFIX:column="18">buf</name></decl>;</decl_stmt>
  
  <if PREFIX:line="1384" PREFIX:column="3">if <condition PREFIX:line="1384" PREFIX:column="6">( <expr PREFIX:line="1384" PREFIX:column="8">*<name PREFIX:line="1384" PREFIX:column="9">s</name> == '\0'</expr> )</condition><then PREFIX:line="1384" PREFIX:column="20">
  <block PREFIX:line="1385" PREFIX:column="3">{
    <expr_stmt><expr PREFIX:line="1386" PREFIX:column="5">*<name PREFIX:line="1386" PREFIX:column="6">width</name>= 0</expr>;</expr_stmt>
    <expr_stmt><expr PREFIX:line="1387" PREFIX:column="5">*<name PREFIX:line="1387" PREFIX:column="6">height</name> = 0</expr>;</expr_stmt>
    <return PREFIX:line="1388" PREFIX:column="5">return;</return>
  }</block></then></if>
  
  <expr_stmt><expr><call><name PREFIX:line="1391" PREFIX:column="3">u8g_font_calc_str_min_box</name><argument_list PREFIX:line="1391" PREFIX:column="28">(<argument><expr><name PREFIX:line="1391" PREFIX:column="29">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1391" PREFIX:column="34">s</name></expr></argument>, <argument><expr PREFIX:line="1391" PREFIX:column="37">&amp;<name PREFIX:line="1391" PREFIX:column="38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1392" PREFIX:column="3">u8g_font_get_str_box_fill_args</name><argument_list PREFIX:line="1392" PREFIX:column="33">(<argument><expr><name PREFIX:line="1392" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1392" PREFIX:column="39">s</name></expr></argument>, <argument><expr PREFIX:line="1392" PREFIX:column="42">&amp;<name PREFIX:line="1392" PREFIX:column="43">buf</name></expr></argument>, <argument><expr><name PREFIX:line="1392" PREFIX:column="48">x</name></expr></argument>, <argument><expr><name PREFIX:line="1392" PREFIX:column="51">y</name></expr></argument>, <argument><expr><name PREFIX:line="1392" PREFIX:column="54">width</name></expr></argument>, <argument><expr><name PREFIX:line="1392" PREFIX:column="61">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name PREFIX:line="1396" PREFIX:column="1">void</name></type> <name PREFIX:line="1396" PREFIX:column="6">u8g_GetStrAMinBox</name><parameter_list PREFIX:line="1396" PREFIX:column="23">(<param><decl><type><name PREFIX:line="1396" PREFIX:column="24">u8g_t</name> *</type><name PREFIX:line="1396" PREFIX:column="31">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1396" PREFIX:column="37">char</name> *</type><name PREFIX:line="1396" PREFIX:column="43">s</name></decl></param>, <param><decl><type><name PREFIX:line="1396" PREFIX:column="46">u8g_uint_t</name> *</type><name PREFIX:line="1396" PREFIX:column="58">x</name></decl></param>, <param><decl><type><name PREFIX:line="1396" PREFIX:column="61">u8g_uint_t</name> *</type><name PREFIX:line="1396" PREFIX:column="73">y</name></decl></param>, <param><decl><type><name PREFIX:line="1396" PREFIX:column="76">u8g_uint_t</name> *</type><name PREFIX:line="1396" PREFIX:column="88">width</name></decl></param>, <param><decl><type><name PREFIX:line="1396" PREFIX:column="95">u8g_uint_t</name> *</type><name PREFIX:line="1396" PREFIX:column="107">height</name></decl></param>)</parameter_list>
<block PREFIX:line="1397" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1398" PREFIX:column="3">u8g_str_size_t</name></type> <name PREFIX:line="1398" PREFIX:column="18">buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1399" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1399" PREFIX:column="11">cap_a</name></decl>;</decl_stmt>
  
  <if PREFIX:line="1401" PREFIX:column="3">if <condition PREFIX:line="1401" PREFIX:column="6">( <expr PREFIX:line="1401" PREFIX:column="8">*<name PREFIX:line="1401" PREFIX:column="9">s</name> == '\0'</expr> )</condition><then PREFIX:line="1401" PREFIX:column="20">
  <block PREFIX:line="1402" PREFIX:column="3">{
    <expr_stmt><expr PREFIX:line="1403" PREFIX:column="5">*<name PREFIX:line="1403" PREFIX:column="6">width</name>= 0</expr>;</expr_stmt>
    <expr_stmt><expr PREFIX:line="1404" PREFIX:column="5">*<name PREFIX:line="1404" PREFIX:column="6">height</name> = 0</expr>;</expr_stmt>
    <return PREFIX:line="1405" PREFIX:column="5">return;</return>
  }</block></then></if>
  
  <expr_stmt><expr><name PREFIX:line="1408" PREFIX:column="3">cap_a</name> = <call><name PREFIX:line="1408" PREFIX:column="11">u8g_font_GetCapitalAHeight</name><argument_list PREFIX:line="1408" PREFIX:column="37">(<argument><expr><name><name PREFIX:line="1408" PREFIX:column="38">u8g</name>-&gt;<name PREFIX:line="1408" PREFIX:column="43">font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1409" PREFIX:column="3">u8g_font_calc_str_min_box</name><argument_list PREFIX:line="1409" PREFIX:column="28">(<argument><expr><name PREFIX:line="1409" PREFIX:column="29">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1409" PREFIX:column="34">s</name></expr></argument>, <argument><expr PREFIX:line="1409" PREFIX:column="37">&amp;<name PREFIX:line="1409" PREFIX:column="38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if PREFIX:line="1410" PREFIX:column="3">if <condition PREFIX:line="1410" PREFIX:column="6">( <expr><name><name PREFIX:line="1410" PREFIX:column="8">buf</name>.<name PREFIX:line="1410" PREFIX:column="12">y_max</name></name> &lt; <name PREFIX:line="1410" PREFIX:column="20">cap_a</name></expr> )</condition><then PREFIX:line="1410" PREFIX:column="27">
    <expr_stmt><expr><name><name PREFIX:line="1411" PREFIX:column="5">buf</name>.<name PREFIX:line="1411" PREFIX:column="9">y_max</name></name> = <name PREFIX:line="1411" PREFIX:column="17">cap_a</name></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name PREFIX:line="1412" PREFIX:column="3">u8g_font_get_str_box_fill_args</name><argument_list PREFIX:line="1412" PREFIX:column="33">(<argument><expr><name PREFIX:line="1412" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1412" PREFIX:column="39">s</name></expr></argument>, <argument><expr PREFIX:line="1412" PREFIX:column="42">&amp;<name PREFIX:line="1412" PREFIX:column="43">buf</name></expr></argument>, <argument><expr><name PREFIX:line="1412" PREFIX:column="48">x</name></expr></argument>, <argument><expr><name PREFIX:line="1412" PREFIX:column="51">y</name></expr></argument>, <argument><expr><name PREFIX:line="1412" PREFIX:column="54">width</name></expr></argument>, <argument><expr><name PREFIX:line="1412" PREFIX:column="61">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1415" PREFIX:column="1">void</name></type> <name PREFIX:line="1415" PREFIX:column="6">u8g_SetFont</name><parameter_list PREFIX:line="1415" PREFIX:column="17">(<param><decl><type><name PREFIX:line="1415" PREFIX:column="18">u8g_t</name> *</type><name PREFIX:line="1415" PREFIX:column="25">u8g</name></decl></param>,  <param><decl><type><name PREFIX:line="1415" PREFIX:column="31">u8g_fntpgm_uint8_t</name>  *</type><name PREFIX:line="1415" PREFIX:column="52">font</name></decl></param>)</parameter_list>
<block PREFIX:line="1416" PREFIX:column="1">{
  <if PREFIX:line="1417" PREFIX:column="3">if <condition PREFIX:line="1417" PREFIX:column="6">( <expr><name><name PREFIX:line="1417" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="1417" PREFIX:column="13">font</name></name> != <name PREFIX:line="1417" PREFIX:column="21">font</name></expr> )</condition><then PREFIX:line="1417" PREFIX:column="27">
  <block PREFIX:line="1418" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="1419" PREFIX:column="5">u8g</name>-&gt;<name PREFIX:line="1419" PREFIX:column="10">font</name></name> = <name PREFIX:line="1419" PREFIX:column="17">font</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name PREFIX:line="1420" PREFIX:column="5">u8g_UpdateRefHeight</name><argument_list PREFIX:line="1420" PREFIX:column="24">(<argument><expr><name PREFIX:line="1420" PREFIX:column="25">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name PREFIX:line="1421" PREFIX:column="5">u8g_SetFontPosBaseline</name><argument_list PREFIX:line="1421" PREFIX:column="27">(<argument><expr><name PREFIX:line="1421" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<comment type="block" PREFIX:line="1425" PREFIX:column="1">/*========================================================================*/</comment>
<comment type="block" PREFIX:line="1426" PREFIX:column="1">/* anti aliasing fonts */</comment>

<function><type><name PREFIX:line="1428" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="1428" PREFIX:column="8">u8g_draw_aa_glyph</name><parameter_list PREFIX:line="1428" PREFIX:column="25">(<param><decl><type><name PREFIX:line="1428" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="1428" PREFIX:column="33">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="1428" PREFIX:column="38">u8g_uint_t</name></type> <name PREFIX:line="1428" PREFIX:column="49">x</name></decl></param>, <param><decl><type><name PREFIX:line="1428" PREFIX:column="52">u8g_uint_t</name></type> <name PREFIX:line="1428" PREFIX:column="63">y</name></decl></param>, <param><decl><type><name PREFIX:line="1428" PREFIX:column="66">uint8_t</name></type> <name PREFIX:line="1428" PREFIX:column="74">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="1429" PREFIX:column="1">{
   <decl_stmt><decl><type><name PREFIX:line="1430" PREFIX:column="4">u8g_pgm_uint8_t</name> *</type><name PREFIX:line="1430" PREFIX:column="21">data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1431" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1431" PREFIX:column="11">w</name></decl>, <decl><type ref="prev"/><name PREFIX:line="1431" PREFIX:column="14">h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1432" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1432" PREFIX:column="11">i</name></decl>, <decl><type ref="prev"/><name PREFIX:line="1432" PREFIX:column="14">j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1433" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="1433" PREFIX:column="14">ix</name></decl>, <decl><type ref="prev"/><name PREFIX:line="1433" PREFIX:column="18">iy</name></decl>;</decl_stmt>

  <block PREFIX:line="1435" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="1436" PREFIX:column="5">u8g_glyph_t</name></type> <name PREFIX:line="1436" PREFIX:column="17">g</name> <init PREFIX:line="1436" PREFIX:column="19">= <expr><call><name PREFIX:line="1436" PREFIX:column="21">u8g_GetGlyph</name><argument_list PREFIX:line="1436" PREFIX:column="33">(<argument><expr><name PREFIX:line="1436" PREFIX:column="34">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1436" PREFIX:column="39">encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if PREFIX:line="1437" PREFIX:column="5">if <condition PREFIX:line="1437" PREFIX:column="8">( <expr><name PREFIX:line="1437" PREFIX:column="10">g</name> == <name PREFIX:line="1437" PREFIX:column="15">NULL</name></expr>  )</condition><then PREFIX:line="1437" PREFIX:column="22">
      <return PREFIX:line="1438" PREFIX:column="7">return <expr PREFIX:line="1438" PREFIX:column="14">0</expr>;</return></then></if>
    <expr_stmt><expr><name PREFIX:line="1439" PREFIX:column="5">data</name> = <call><name PREFIX:line="1439" PREFIX:column="12">u8g_font_GetGlyphDataStart</name><argument_list PREFIX:line="1439" PREFIX:column="38">(<argument><expr><name><name PREFIX:line="1439" PREFIX:column="39">u8g</name>-&gt;<name PREFIX:line="1439" PREFIX:column="44">font</name></name></expr></argument>, <argument><expr><name PREFIX:line="1439" PREFIX:column="50">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  
  <expr_stmt><expr><name PREFIX:line="1442" PREFIX:column="3">w</name> = <name><name PREFIX:line="1442" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="1442" PREFIX:column="12">glyph_width</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1443" PREFIX:column="3">h</name> = <name><name PREFIX:line="1443" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="1443" PREFIX:column="12">glyph_height</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="1445" PREFIX:column="3">x</name> += <name><name PREFIX:line="1445" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="1445" PREFIX:column="13">glyph_x</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1446" PREFIX:column="3">y</name> -= <name><name PREFIX:line="1446" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="1446" PREFIX:column="13">glyph_y</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1447" PREFIX:column="3">y</name>--</expr>;</expr_stmt>
  
  <if PREFIX:line="1449" PREFIX:column="3">if <condition PREFIX:line="1449" PREFIX:column="6">( <expr><call><name PREFIX:line="1449" PREFIX:column="8">u8g_IsBBXIntersection</name><argument_list PREFIX:line="1449" PREFIX:column="29">(<argument><expr><name PREFIX:line="1449" PREFIX:column="30">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1449" PREFIX:column="35">x</name></expr></argument>, <argument><expr><name PREFIX:line="1449" PREFIX:column="38">y</name>-<name PREFIX:line="1449" PREFIX:column="40">h</name>+1</expr></argument>, <argument><expr><name PREFIX:line="1449" PREFIX:column="45">w</name></expr></argument>, <argument><expr><name PREFIX:line="1449" PREFIX:column="48">h</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="1449" PREFIX:column="57">
    <return PREFIX:line="1450" PREFIX:column="5">return <expr><name><name PREFIX:line="1450" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="1450" PREFIX:column="17">glyph_dx</name></name></expr>;</return></then></if>

  <comment type="block" PREFIX:line="1452" PREFIX:column="3">/* now, w is reused as bytes per line */</comment>
  <expr_stmt><expr><name PREFIX:line="1453" PREFIX:column="3">w</name> += 3</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1454" PREFIX:column="3">w</name> /= 4</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="1456" PREFIX:column="3">iy</name> = <name PREFIX:line="1456" PREFIX:column="8">y</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1457" PREFIX:column="3">iy</name> -= <name PREFIX:line="1457" PREFIX:column="9">h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1458" PREFIX:column="3">iy</name>++</expr>;</expr_stmt>

  <for PREFIX:line="1460" PREFIX:column="3">for( <init><expr><name PREFIX:line="1460" PREFIX:column="8">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="1460" PREFIX:column="15">j</name> &lt; <name PREFIX:line="1460" PREFIX:column="19">h</name></expr>;</condition> <incr><expr><name PREFIX:line="1460" PREFIX:column="22">j</name>++</expr></incr> )
  <block PREFIX:line="1461" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="1462" PREFIX:column="5">ix</name> = <name PREFIX:line="1462" PREFIX:column="10">x</name></expr>;</expr_stmt>
    <for PREFIX:line="1463" PREFIX:column="5">for( <init><expr><name PREFIX:line="1463" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="1463" PREFIX:column="17">i</name> &lt; <name PREFIX:line="1463" PREFIX:column="21">w</name></expr>;</condition> <incr><expr><name PREFIX:line="1463" PREFIX:column="24">i</name>++</expr></incr> )
    <block PREFIX:line="1464" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="1465" PREFIX:column="7">u8g_Draw4TPixel</name><argument_list PREFIX:line="1465" PREFIX:column="22">(<argument><expr><name PREFIX:line="1465" PREFIX:column="23">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1465" PREFIX:column="28">ix</name></expr></argument>, <argument><expr><name PREFIX:line="1465" PREFIX:column="32">iy</name></expr></argument>, <argument><expr PREFIX:line="1465" PREFIX:column="36">0</expr></argument>, <argument><expr><call><name PREFIX:line="1465" PREFIX:column="39">u8g_pgm_read</name><argument_list PREFIX:line="1465" PREFIX:column="51">(<argument><expr><name PREFIX:line="1465" PREFIX:column="52">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="1466" PREFIX:column="7">data</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="1467" PREFIX:column="7">ix</name>+=4</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name PREFIX:line="1469" PREFIX:column="5">iy</name>++</expr>;</expr_stmt>
  }</block></for>
  <return PREFIX:line="1471" PREFIX:column="3">return <expr><name><name PREFIX:line="1471" PREFIX:column="10">u8g</name>-&gt;<name PREFIX:line="1471" PREFIX:column="15">glyph_dx</name></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1474" PREFIX:column="1">int8_t</name></type> <name PREFIX:line="1474" PREFIX:column="8">u8g_DrawAAGlyph</name><parameter_list PREFIX:line="1474" PREFIX:column="23">(<param><decl><type><name PREFIX:line="1474" PREFIX:column="24">u8g_t</name> *</type><name PREFIX:line="1474" PREFIX:column="31">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="1474" PREFIX:column="36">u8g_uint_t</name></type> <name PREFIX:line="1474" PREFIX:column="47">x</name></decl></param>, <param><decl><type><name PREFIX:line="1474" PREFIX:column="50">u8g_uint_t</name></type> <name PREFIX:line="1474" PREFIX:column="61">y</name></decl></param>, <param><decl><type><name PREFIX:line="1474" PREFIX:column="64">uint8_t</name></type> <name PREFIX:line="1474" PREFIX:column="72">encoding</name></decl></param>)</parameter_list>
<block PREFIX:line="1475" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="1476" PREFIX:column="3">y</name> += <call><name><name PREFIX:line="1476" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="1476" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="1476" PREFIX:column="27">(<argument><expr><name PREFIX:line="1476" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="1477" PREFIX:column="3">return <expr><call><name PREFIX:line="1477" PREFIX:column="10">u8g_draw_aa_glyph</name><argument_list PREFIX:line="1477" PREFIX:column="27">(<argument><expr><name PREFIX:line="1477" PREFIX:column="28">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1477" PREFIX:column="33">x</name></expr></argument>, <argument><expr><name PREFIX:line="1477" PREFIX:column="36">y</name></expr></argument>, <argument><expr><name PREFIX:line="1477" PREFIX:column="39">encoding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1480" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="1480" PREFIX:column="12">u8g_DrawAAStr</name><parameter_list PREFIX:line="1480" PREFIX:column="25">(<param><decl><type><name PREFIX:line="1480" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="1480" PREFIX:column="33">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="1480" PREFIX:column="38">u8g_uint_t</name></type> <name PREFIX:line="1480" PREFIX:column="49">x</name></decl></param>, <param><decl><type><name PREFIX:line="1480" PREFIX:column="52">u8g_uint_t</name></type> <name PREFIX:line="1480" PREFIX:column="63">y</name></decl></param>,  <param><decl><type><name PREFIX:line="1480" PREFIX:column="67">char</name> *</type><name PREFIX:line="1480" PREFIX:column="73">s</name></decl></param>)</parameter_list>
<block PREFIX:line="1481" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1482" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="1482" PREFIX:column="14">t</name> <init PREFIX:line="1482" PREFIX:column="16">= <expr PREFIX:line="1482" PREFIX:column="18">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1483" PREFIX:column="3">int8_t</name></type> <name PREFIX:line="1483" PREFIX:column="10">d</name></decl>;</decl_stmt>

  <if PREFIX:line="1485" PREFIX:column="3">if <condition PREFIX:line="1485" PREFIX:column="6">( <expr><call><name PREFIX:line="1485" PREFIX:column="8">u8g_font_GetFormat</name><argument_list PREFIX:line="1485" PREFIX:column="26">(<argument><expr><name><name PREFIX:line="1485" PREFIX:column="27">u8g</name>-&gt;<name PREFIX:line="1485" PREFIX:column="32">font</name></name></expr></argument>)</argument_list></call>  != 2</expr> )</condition><then PREFIX:line="1485" PREFIX:column="45">
    <return PREFIX:line="1486" PREFIX:column="5">return <expr PREFIX:line="1486" PREFIX:column="12">0</expr>;</return></then></if>
  <comment type="line" PREFIX:line="1487" PREFIX:column="3">//u8g_uint_t u8g_GetStrWidth(u8g, s);</comment>
  <comment type="line" PREFIX:line="1488" PREFIX:column="3">//u8g_font_GetFontAscent(u8g-&gt;font)-u8g_font_GetFontDescent(u8g-&gt;font);</comment>
  
  <expr_stmt><expr><name PREFIX:line="1490" PREFIX:column="3">y</name> += <call><name><name PREFIX:line="1490" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="1490" PREFIX:column="13">font_calc_vref</name></name><argument_list PREFIX:line="1490" PREFIX:column="27">(<argument><expr><name PREFIX:line="1490" PREFIX:column="28">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while PREFIX:line="1492" PREFIX:column="3">while<condition PREFIX:line="1492" PREFIX:column="8">( <expr PREFIX:line="1492" PREFIX:column="10">*<name PREFIX:line="1492" PREFIX:column="11">s</name> != '\0'</expr> )</condition>
  <block PREFIX:line="1493" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="1494" PREFIX:column="5">d</name> = <call><name PREFIX:line="1494" PREFIX:column="9">u8g_draw_aa_glyph</name><argument_list PREFIX:line="1494" PREFIX:column="26">(<argument><expr><name PREFIX:line="1494" PREFIX:column="27">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1494" PREFIX:column="32">x</name></expr></argument>, <argument><expr><name PREFIX:line="1494" PREFIX:column="35">y</name></expr></argument>, <argument><expr PREFIX:line="1494" PREFIX:column="38">*<name PREFIX:line="1494" PREFIX:column="39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="1495" PREFIX:column="5">x</name> += <name PREFIX:line="1495" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="1496" PREFIX:column="5">t</name> += <name PREFIX:line="1496" PREFIX:column="10">d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="1497" PREFIX:column="5">s</name>++</expr>;</expr_stmt>
  }</block></while>
  <return PREFIX:line="1499" PREFIX:column="3">return <expr><name PREFIX:line="1499" PREFIX:column="10">t</name></expr>;</return>
}</block></function>
</unit>
