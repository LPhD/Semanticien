<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_delay.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*

  u8g_delay.c

  Universal 8bit Graphics Library
  
  Copyright (c) 2011, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  


  void u8g_Delay(uint16_t val)		Delay by "val" milliseconds
  void u8g_MicroDelay(void)		Delay be one microsecond
  void u8g_10MicroDelay(void)	Delay by 10 microseconds

  
*/</comment>


<cpp:include PREFIX:line="43" PREFIX:column="1">#<cpp:directive PREFIX:line="43" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="43" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>

<comment type="block" PREFIX:line="45" PREFIX:column="1">/*==== Part 1: Derive suitable delay procedure ====*/</comment>

<cpp:if PREFIX:line="47" PREFIX:column="1">#<cpp:directive PREFIX:line="47" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="47" PREFIX:column="5">defined</name><argument_list PREFIX:line="47" PREFIX:column="12">(<argument><expr><name PREFIX:line="47" PREFIX:column="13">ARDUINO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if PREFIX:line="49" PREFIX:column="1">#  <cpp:directive PREFIX:line="49" PREFIX:column="4">if</cpp:directive> <expr><name PREFIX:line="49" PREFIX:column="7">ARDUINO</name> &lt; 100</expr></cpp:if> 
<cpp:include PREFIX:line="50" PREFIX:column="1">#    <cpp:directive PREFIX:line="50" PREFIX:column="6">include</cpp:directive> <cpp:file PREFIX:line="50" PREFIX:column="14">&lt;WProgram.h&gt;</cpp:file></cpp:include> 
<cpp:else PREFIX:line="51" PREFIX:column="1">#  <cpp:directive PREFIX:line="51" PREFIX:column="4">else</cpp:directive></cpp:else> 
<cpp:include PREFIX:line="52" PREFIX:column="1">#    <cpp:directive PREFIX:line="52" PREFIX:column="6">include</cpp:directive> <cpp:file PREFIX:line="52" PREFIX:column="14">&lt;Arduino.h&gt;</cpp:file></cpp:include> 
<cpp:endif PREFIX:line="53" PREFIX:column="1">#  <cpp:directive PREFIX:line="53" PREFIX:column="4">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="55" PREFIX:column="1">#  <cpp:directive PREFIX:line="55" PREFIX:column="4">if</cpp:directive> <expr><call><name PREFIX:line="55" PREFIX:column="7">defined</name><argument_list PREFIX:line="55" PREFIX:column="14">(<argument><expr><name PREFIX:line="55" PREFIX:column="15">__AVR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="56" PREFIX:column="1">#    <cpp:directive PREFIX:line="56" PREFIX:column="6">define</cpp:directive> <cpp:macro><name PREFIX:line="56" PREFIX:column="13">USE_AVR_DELAY</name></cpp:macro></cpp:define>
<cpp:elif PREFIX:line="57" PREFIX:column="1">#  <cpp:directive PREFIX:line="57" PREFIX:column="4">elif</cpp:directive> <expr><call><name PREFIX:line="57" PREFIX:column="9">defined</name><argument_list PREFIX:line="57" PREFIX:column="16">(<argument><expr><name PREFIX:line="57" PREFIX:column="17">__PIC32MX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="58" PREFIX:column="1">#    <cpp:directive PREFIX:line="58" PREFIX:column="6">define</cpp:directive> <cpp:macro><name PREFIX:line="58" PREFIX:column="13">USE_PIC32_DELAY</name></cpp:macro></cpp:define>
<cpp:elif PREFIX:line="59" PREFIX:column="1">#  <cpp:directive PREFIX:line="59" PREFIX:column="4">elif</cpp:directive> <expr><call><name PREFIX:line="59" PREFIX:column="9">defined</name><argument_list PREFIX:line="59" PREFIX:column="16">(<argument><expr><name PREFIX:line="59" PREFIX:column="17">__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>		<comment type="block" PREFIX:line="59" PREFIX:column="41">/* Arduino Due &amp; Teensy */</comment>
<cpp:define PREFIX:line="60" PREFIX:column="1">#    <cpp:directive PREFIX:line="60" PREFIX:column="6">define</cpp:directive> <cpp:macro><name PREFIX:line="60" PREFIX:column="13">USE_ARDUINO_DELAY</name></cpp:macro></cpp:define>
<cpp:else PREFIX:line="61" PREFIX:column="1">#  <cpp:directive PREFIX:line="61" PREFIX:column="4">else</cpp:directive></cpp:else>
<cpp:define PREFIX:line="62" PREFIX:column="1">#    <cpp:directive PREFIX:line="62" PREFIX:column="6">define</cpp:directive> <cpp:macro><name PREFIX:line="62" PREFIX:column="13">USE_ARDUINO_DELAY</name></cpp:macro></cpp:define>
<cpp:endif PREFIX:line="63" PREFIX:column="1">#  <cpp:directive PREFIX:line="63" PREFIX:column="4">endif</cpp:directive></cpp:endif>
<cpp:elif PREFIX:line="64" PREFIX:column="1">#<cpp:directive PREFIX:line="64" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="64" PREFIX:column="7">defined</name><argument_list PREFIX:line="64" PREFIX:column="14">(<argument><expr><name PREFIX:line="64" PREFIX:column="15">U8G_RASPBERRY_PI</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="65" PREFIX:column="1">#  <cpp:directive PREFIX:line="65" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="65" PREFIX:column="11">USE_RASPBERRYPI_DELAY</name></cpp:macro></cpp:define>
<cpp:elif PREFIX:line="66" PREFIX:column="1">#<cpp:directive PREFIX:line="66" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="66" PREFIX:column="7">defined</name><argument_list PREFIX:line="66" PREFIX:column="14">(<argument><expr><name PREFIX:line="66" PREFIX:column="15">__AVR__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="67" PREFIX:column="1">#  <cpp:directive PREFIX:line="67" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="67" PREFIX:column="11">USE_AVR_DELAY</name></cpp:macro></cpp:define>
<cpp:elif PREFIX:line="68" PREFIX:column="1">#<cpp:directive PREFIX:line="68" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="68" PREFIX:column="7">defined</name><argument_list PREFIX:line="68" PREFIX:column="14">(<argument><expr><name PREFIX:line="68" PREFIX:column="15">__18CXX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="69" PREFIX:column="1">#  <cpp:directive PREFIX:line="69" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="69" PREFIX:column="11">USE_PIC18_DELAY</name></cpp:macro></cpp:define>
<cpp:elif PREFIX:line="70" PREFIX:column="1">#<cpp:directive PREFIX:line="70" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="70" PREFIX:column="7">defined</name><argument_list PREFIX:line="70" PREFIX:column="14">(<argument><expr><name PREFIX:line="70" PREFIX:column="15">__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<comment type="block" PREFIX:line="71" PREFIX:column="1">/* do not define anything, all procedures are expected to be defined outside u8glib */</comment>

<comment type="block" PREFIX:line="73" PREFIX:column="1">/*
void u8g_Delay(uint16_t val);
void u8g_MicroDelay(void);
void u8g_10MicroDelay(void);
*/</comment>

<cpp:else PREFIX:line="79" PREFIX:column="1">#<cpp:directive PREFIX:line="79" PREFIX:column="2">else</cpp:directive></cpp:else>
<cpp:define PREFIX:line="80" PREFIX:column="1">#  <cpp:directive PREFIX:line="80" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="80" PREFIX:column="11">USE_DUMMY_DELAY</name></cpp:macro></cpp:define>
<cpp:endif PREFIX:line="81" PREFIX:column="1">#<cpp:directive PREFIX:line="81" PREFIX:column="2">endif</cpp:directive></cpp:endif>



<comment type="block" PREFIX:line="85" PREFIX:column="1">/*==== Part 2: Definition of the delay procedures ====*/</comment>

<comment type="block" PREFIX:line="87" PREFIX:column="1">/*== Raspberry Pi Delay ==*/</comment>
<cpp:if PREFIX:line="88" PREFIX:column="1">#<cpp:directive PREFIX:line="88" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="88" PREFIX:column="5">defined</name> <argument_list PREFIX:line="88" PREFIX:column="13">(<argument><expr><name PREFIX:line="88" PREFIX:column="14">USE_RASPBERRYPI_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include PREFIX:line="89" PREFIX:column="1">#<cpp:directive PREFIX:line="89" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="89" PREFIX:column="10">&lt;wiringPi.h&gt;</cpp:file></cpp:include>
<comment type="line" PREFIX:line="90" PREFIX:column="1">//#include "/usr/local/include/wiringPi.h"</comment>
<function><type><name PREFIX:line="91" PREFIX:column="1">void</name></type> <name PREFIX:line="91" PREFIX:column="6">u8g_Delay</name><parameter_list PREFIX:line="91" PREFIX:column="15">(<param><decl><type><name PREFIX:line="91" PREFIX:column="16">uint16_t</name></type> <name PREFIX:line="91" PREFIX:column="25">val</name></decl></param>)</parameter_list> <block PREFIX:line="91" PREFIX:column="30">{
   <comment type="line" PREFIX:line="92" PREFIX:column="4">//delay(val);</comment>
   <comment type="line" PREFIX:line="93" PREFIX:column="4">//usleep((uint32_t)val*(uint32_t)1000);</comment>
   <expr_stmt><expr><call><name PREFIX:line="94" PREFIX:column="4">delayMicroseconds</name><argument_list PREFIX:line="94" PREFIX:column="21">(<argument><expr PREFIX:line="94" PREFIX:column="22">(<name PREFIX:line="94" PREFIX:column="23">uint32_t</name>)<call><name PREFIX:line="94" PREFIX:column="32">val</name>*<argument_list PREFIX:line="94" PREFIX:column="36">(<argument><expr><name PREFIX:line="94" PREFIX:column="37">uint32_t</name></expr></argument>)</argument_list></call>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name PREFIX:line="96" PREFIX:column="1">void</name></type> <name PREFIX:line="96" PREFIX:column="6">u8g_MicroDelay</name><parameter_list PREFIX:line="96" PREFIX:column="20">(<param><decl><type><name PREFIX:line="96" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="97" PREFIX:column="1">{
   <expr_stmt><expr><call><name PREFIX:line="98" PREFIX:column="4">usleep</name><argument_list PREFIX:line="98" PREFIX:column="10">(<argument><expr PREFIX:line="98" PREFIX:column="11">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name PREFIX:line="100" PREFIX:column="1">void</name></type> <name PREFIX:line="100" PREFIX:column="6">u8g_10MicroDelay</name><parameter_list PREFIX:line="100" PREFIX:column="22">(<param><decl><type><name PREFIX:line="100" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="101" PREFIX:column="1">{
   <expr_stmt><expr><call><name PREFIX:line="102" PREFIX:column="4">usleep</name><argument_list PREFIX:line="102" PREFIX:column="10">(<argument><expr PREFIX:line="102" PREFIX:column="11">10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif PREFIX:line="104" PREFIX:column="1">#<cpp:directive PREFIX:line="104" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="107" PREFIX:column="1">/*== AVR Delay ==*/</comment>

<cpp:if PREFIX:line="109" PREFIX:column="1">#<cpp:directive PREFIX:line="109" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="109" PREFIX:column="5">defined</name><argument_list PREFIX:line="109" PREFIX:column="12">(<argument><expr><name PREFIX:line="109" PREFIX:column="13">USE_AVR_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include PREFIX:line="110" PREFIX:column="1">#<cpp:directive PREFIX:line="110" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="110" PREFIX:column="10">&lt;avr/interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="111" PREFIX:column="1">#<cpp:directive PREFIX:line="111" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="111" PREFIX:column="10">&lt;avr/io.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="112" PREFIX:column="1">#<cpp:directive PREFIX:line="112" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="112" PREFIX:column="10">&lt;util/delay.h&gt;</cpp:file></cpp:include>

<comment type="block" PREFIX:line="114" PREFIX:column="1">/*
  Delay by the provided number of milliseconds.
  Thus, a 16 bit value will allow a delay of 0..65 seconds
  Makes use of the _delay_loop_2
  
  _delay_loop_2 will do a delay of n * 4 prozessor cycles.
  with f = F_CPU cycles per second,
  n = f / (1000 * 4 )
  with f = 16000000 the result is 4000
  with f = 1000000 the result is 250
  
  the millisec loop, gcc requires the following overhead:
  - movev 1
  - subwi 2x2
  - bne i 2
  ==&gt; 7 cycles
  ==&gt; must be devided by 4, rounded up 7/4 = 2
*/</comment>
<function><type><name PREFIX:line="132" PREFIX:column="1">void</name></type> <name PREFIX:line="132" PREFIX:column="6">u8g_Delay</name><parameter_list PREFIX:line="132" PREFIX:column="15">(<param><decl><type><name PREFIX:line="132" PREFIX:column="16">uint16_t</name></type> <name PREFIX:line="132" PREFIX:column="25">val</name></decl></param>)</parameter_list>
<block PREFIX:line="133" PREFIX:column="1">{
  <comment type="block" PREFIX:line="134" PREFIX:column="3">/* old version did a call to the arduino lib: delay(val); */</comment>
  <while PREFIX:line="135" PREFIX:column="3">while<condition PREFIX:line="135" PREFIX:column="8">( <expr><name PREFIX:line="135" PREFIX:column="10">val</name> != 0</expr> )</condition>
  <block PREFIX:line="136" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="137" PREFIX:column="5">_delay_loop_2</name><argument_list PREFIX:line="137" PREFIX:column="18">( <argument><expr PREFIX:line="137" PREFIX:column="20">(<name PREFIX:line="137" PREFIX:column="21">F_CPU</name> / 4000 ) -2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="138" PREFIX:column="5">val</name>--</expr>;</expr_stmt>
  }</block></while>
}</block></function>

<comment type="block" PREFIX:line="142" PREFIX:column="1">/* delay by one micro second */</comment>
<function><type><name PREFIX:line="143" PREFIX:column="1">void</name></type> <name PREFIX:line="143" PREFIX:column="6">u8g_MicroDelay</name><parameter_list PREFIX:line="143" PREFIX:column="20">(<param><decl><type><name PREFIX:line="143" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="144" PREFIX:column="1">{
<cpp:if PREFIX:line="145" PREFIX:column="1">#<cpp:directive PREFIX:line="145" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="145" PREFIX:column="5">(<name PREFIX:line="145" PREFIX:column="6">F_CPU</name> / 4000000 ) &gt; 0</expr></cpp:if> 
  <expr_stmt><expr><call><name PREFIX:line="146" PREFIX:column="3">_delay_loop_2</name><argument_list PREFIX:line="146" PREFIX:column="16">( <argument><expr PREFIX:line="146" PREFIX:column="18">(<name PREFIX:line="146" PREFIX:column="19">F_CPU</name> / 4000000 )</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="147" PREFIX:column="1">#<cpp:directive PREFIX:line="147" PREFIX:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block" PREFIX:line="150" PREFIX:column="1">/* delay by 10 micro seconds */</comment>
<function><type><name PREFIX:line="151" PREFIX:column="1">void</name></type> <name PREFIX:line="151" PREFIX:column="6">u8g_10MicroDelay</name><parameter_list PREFIX:line="151" PREFIX:column="22">(<param><decl><type><name PREFIX:line="151" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="152" PREFIX:column="1">{
<cpp:if PREFIX:line="153" PREFIX:column="1">#<cpp:directive PREFIX:line="153" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="153" PREFIX:column="5">(<name PREFIX:line="153" PREFIX:column="6">F_CPU</name> / 400000 ) &gt; 0</expr></cpp:if> 
  <expr_stmt><expr><call><name PREFIX:line="154" PREFIX:column="3">_delay_loop_2</name><argument_list PREFIX:line="154" PREFIX:column="16">( <argument><expr PREFIX:line="154" PREFIX:column="18">(<name PREFIX:line="154" PREFIX:column="19">F_CPU</name> / 400000 )</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="155" PREFIX:column="1">#<cpp:directive PREFIX:line="155" PREFIX:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<cpp:endif PREFIX:line="158" PREFIX:column="1">#<cpp:directive PREFIX:line="158" PREFIX:column="2">endif</cpp:directive></cpp:endif> 


<comment type="block" PREFIX:line="161" PREFIX:column="1">/*== Delay for PIC18 (not tested) ==*/</comment>

<cpp:if PREFIX:line="163" PREFIX:column="1">#<cpp:directive PREFIX:line="163" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="163" PREFIX:column="5">defined</name><argument_list PREFIX:line="163" PREFIX:column="12">(<argument><expr><name PREFIX:line="163" PREFIX:column="13">USE_PIC18_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include PREFIX:line="164" PREFIX:column="1">#<cpp:directive PREFIX:line="164" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="164" PREFIX:column="10">&lt;delays.h&gt;</cpp:file></cpp:include>
<cpp:define PREFIX:line="165" PREFIX:column="1">#<cpp:directive PREFIX:line="165" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="165" PREFIX:column="9">GetSystemClock</name><parameter_list PREFIX:line="165" PREFIX:column="23">()</parameter_list></cpp:macro>		<cpp:value PREFIX:line="165" PREFIX:column="41">(64000000ul)</cpp:value></cpp:define>      <comment type="line" PREFIX:line="165" PREFIX:column="59">// Hz</comment>
<cpp:define PREFIX:line="166" PREFIX:column="1">#<cpp:directive PREFIX:line="166" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="166" PREFIX:column="9">GetInstructionClock</name><parameter_list PREFIX:line="166" PREFIX:column="28">()</parameter_list></cpp:macro>	<cpp:value PREFIX:line="166" PREFIX:column="33">(GetSystemClock()/4)</cpp:value></cpp:define>

<function><type><name PREFIX:line="168" PREFIX:column="1">void</name></type> <name PREFIX:line="168" PREFIX:column="6">u8g_Delay</name><parameter_list PREFIX:line="168" PREFIX:column="15">(<param><decl><type><name PREFIX:line="168" PREFIX:column="16">uint16_t</name></type> <name PREFIX:line="168" PREFIX:column="25">val</name></decl></param>)</parameter_list>
<block PREFIX:line="169" PREFIX:column="1">{<comment type="block" PREFIX:line="169" PREFIX:column="2">/*
	unknowntype int _iTemp = (val);
	while(_iTemp--)		
		Delay1KTCYx((GetInstructionClock()+999999)/1000000);
		*/</comment>
}</block></function>
<function><type><name PREFIX:line="175" PREFIX:column="1">void</name></type> <name PREFIX:line="175" PREFIX:column="6">u8g_MicroDelay</name><parameter_list PREFIX:line="175" PREFIX:column="20">(<param><decl><type><name PREFIX:line="175" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="176" PREFIX:column="1">{
  <comment type="block" PREFIX:line="177" PREFIX:column="3">/* not implemented */</comment>
}</block></function>
<function><type><name PREFIX:line="179" PREFIX:column="1">void</name></type> <name PREFIX:line="179" PREFIX:column="6">u8g_10MicroDelay</name><parameter_list PREFIX:line="179" PREFIX:column="22">(<param><decl><type><name PREFIX:line="179" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="180" PREFIX:column="1">{
  <comment type="block" PREFIX:line="181" PREFIX:column="3">/* not implemented */</comment>
}</block></function>
<cpp:endif PREFIX:line="183" PREFIX:column="1">#<cpp:directive PREFIX:line="183" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="186" PREFIX:column="1">/*== Arduino Delay ==*/</comment>
<cpp:if PREFIX:line="187" PREFIX:column="1">#<cpp:directive PREFIX:line="187" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="187" PREFIX:column="5">defined</name><argument_list PREFIX:line="187" PREFIX:column="12">(<argument><expr><name PREFIX:line="187" PREFIX:column="13">USE_ARDUINO_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name PREFIX:line="188" PREFIX:column="1">void</name></type> <name PREFIX:line="188" PREFIX:column="6">u8g_Delay</name><parameter_list PREFIX:line="188" PREFIX:column="15">(<param><decl><type><name PREFIX:line="188" PREFIX:column="16">uint16_t</name></type> <name PREFIX:line="188" PREFIX:column="25">val</name></decl></param>)</parameter_list>
<block PREFIX:line="189" PREFIX:column="1">{
<cpp:if PREFIX:line="190" PREFIX:column="1">#<cpp:directive PREFIX:line="190" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="190" PREFIX:column="5">defined</name><argument_list PREFIX:line="190" PREFIX:column="12">(<argument><expr><name PREFIX:line="190" PREFIX:column="13">__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name PREFIX:line="191" PREFIX:column="9">delayMicroseconds</name><argument_list PREFIX:line="191" PREFIX:column="26">(<argument><expr PREFIX:line="191" PREFIX:column="27">(<name PREFIX:line="191" PREFIX:column="28">uint32_t</name>)<call><name PREFIX:line="191" PREFIX:column="37">val</name>*<argument_list PREFIX:line="191" PREFIX:column="41">(<argument><expr><name PREFIX:line="191" PREFIX:column="42">uint32_t</name></expr></argument>)</argument_list></call>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else PREFIX:line="192" PREFIX:column="1">#<cpp:directive PREFIX:line="192" PREFIX:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name PREFIX:line="193" PREFIX:column="9">delay</name><argument_list PREFIX:line="193" PREFIX:column="14">(<argument><expr><name PREFIX:line="193" PREFIX:column="15">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="194" PREFIX:column="1">#<cpp:directive PREFIX:line="194" PREFIX:column="2">endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name PREFIX:line="196" PREFIX:column="1">void</name></type> <name PREFIX:line="196" PREFIX:column="6">u8g_MicroDelay</name><parameter_list PREFIX:line="196" PREFIX:column="20">(<param><decl><type><name PREFIX:line="196" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="197" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="198" PREFIX:column="9">delayMicroseconds</name><argument_list PREFIX:line="198" PREFIX:column="26">(<argument><expr PREFIX:line="198" PREFIX:column="27">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name PREFIX:line="200" PREFIX:column="1">void</name></type> <name PREFIX:line="200" PREFIX:column="6">u8g_10MicroDelay</name><parameter_list PREFIX:line="200" PREFIX:column="22">(<param><decl><type><name PREFIX:line="200" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="201" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="202" PREFIX:column="9">delayMicroseconds</name><argument_list PREFIX:line="202" PREFIX:column="26">(<argument><expr PREFIX:line="202" PREFIX:column="27">10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif PREFIX:line="204" PREFIX:column="1">#<cpp:directive PREFIX:line="204" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="206" PREFIX:column="1">#<cpp:directive PREFIX:line="206" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="206" PREFIX:column="5">defined</name><argument_list PREFIX:line="206" PREFIX:column="12">(<argument><expr><name PREFIX:line="206" PREFIX:column="13">USE_PIC32_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" PREFIX:line="207" PREFIX:column="1">/* 
  Assume chipkit here with F_CPU correctly defined
  The problem was, that u8g_Delay() is called within the ructor.
  It seems that the chipkit is not fully setup at this time, so a
  call to delay() will not work. So here is my own implementation.

*/</comment>
<cpp:define PREFIX:line="214" PREFIX:column="1">#<cpp:directive PREFIX:line="214" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="214" PREFIX:column="9">CPU_COUNTS_PER_SECOND</name></cpp:macro> <cpp:value PREFIX:line="214" PREFIX:column="31">(F_CPU/2UL)</cpp:value></cpp:define>
<cpp:define PREFIX:line="215" PREFIX:column="1">#<cpp:directive PREFIX:line="215" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="215" PREFIX:column="9">TICKS_PER_MILLISECOND</name></cpp:macro>  <cpp:value PREFIX:line="215" PREFIX:column="32">(CPU_COUNTS_PER_SECOND/1000UL)</cpp:value></cpp:define>
<cpp:include PREFIX:line="216" PREFIX:column="1">#<cpp:directive PREFIX:line="216" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="216" PREFIX:column="10">"plib.h"</cpp:file></cpp:include>
<function><type><name PREFIX:line="217" PREFIX:column="1">void</name></type> <name PREFIX:line="217" PREFIX:column="6">u8g_Delay</name><parameter_list PREFIX:line="217" PREFIX:column="15">(<param><decl><type><name PREFIX:line="217" PREFIX:column="16">uint16_t</name></type> <name PREFIX:line="217" PREFIX:column="25">val</name></decl></param>)</parameter_list>
<block PREFIX:line="218" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="219" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="219" PREFIX:column="18">d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="220" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="220" PREFIX:column="18">s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name PREFIX:line="221" PREFIX:column="9">d</name> = <name PREFIX:line="221" PREFIX:column="13">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="222" PREFIX:column="9">d</name> *= <name PREFIX:line="222" PREFIX:column="14">TICKS_PER_MILLISECOND</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="223" PREFIX:column="9">s</name> = <call><name PREFIX:line="223" PREFIX:column="13">ReadCoreTimer</name><argument_list PREFIX:line="223" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
	<while PREFIX:line="224" PREFIX:column="9">while <condition PREFIX:line="224" PREFIX:column="15">( <expr><call PREFIX:line="224" PREFIX:column="17">(<name PREFIX:line="224" PREFIX:column="18">uint32_t</name>)<argument_list PREFIX:line="224" PREFIX:column="27">(<argument><expr><call><name PREFIX:line="224" PREFIX:column="28">ReadCoreTimer</name><argument_list PREFIX:line="224" PREFIX:column="41">()</argument_list></call> - <name PREFIX:line="224" PREFIX:column="46">s</name></expr></argument>)</argument_list></call> &lt; <name PREFIX:line="224" PREFIX:column="51">d</name></expr> )</condition>
		<empty_stmt PREFIX:line="225" PREFIX:column="17">;</empty_stmt></while>
}</block></function> 

<function><type><name PREFIX:line="228" PREFIX:column="1">void</name></type> <name PREFIX:line="228" PREFIX:column="6">u8g_MicroDelay</name><parameter_list PREFIX:line="228" PREFIX:column="20">(<param><decl><type><name PREFIX:line="228" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="229" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="230" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="230" PREFIX:column="18">d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="231" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="231" PREFIX:column="18">s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name PREFIX:line="232" PREFIX:column="9">d</name> = <name PREFIX:line="232" PREFIX:column="13">TICKS_PER_MILLISECOND</name>/1000</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="233" PREFIX:column="9">s</name> = <call><name PREFIX:line="233" PREFIX:column="13">ReadCoreTimer</name><argument_list PREFIX:line="233" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
	<while PREFIX:line="234" PREFIX:column="9">while <condition PREFIX:line="234" PREFIX:column="15">( <expr><call PREFIX:line="234" PREFIX:column="17">(<name PREFIX:line="234" PREFIX:column="18">uint32_t</name>)<argument_list PREFIX:line="234" PREFIX:column="27">(<argument><expr><call><name PREFIX:line="234" PREFIX:column="28">ReadCoreTimer</name><argument_list PREFIX:line="234" PREFIX:column="41">()</argument_list></call> - <name PREFIX:line="234" PREFIX:column="46">s</name></expr></argument>)</argument_list></call> &lt; <name PREFIX:line="234" PREFIX:column="51">d</name></expr> )</condition>
		<empty_stmt PREFIX:line="235" PREFIX:column="17">;</empty_stmt></while>
}</block></function> 

<function><type><name PREFIX:line="238" PREFIX:column="1">void</name></type> <name PREFIX:line="238" PREFIX:column="6">u8g_10MicroDelay</name><parameter_list PREFIX:line="238" PREFIX:column="22">(<param><decl><type><name PREFIX:line="238" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="239" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="240" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="240" PREFIX:column="18">d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="241" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="241" PREFIX:column="18">s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name PREFIX:line="242" PREFIX:column="9">d</name> = <name PREFIX:line="242" PREFIX:column="13">TICKS_PER_MILLISECOND</name>/100</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="243" PREFIX:column="9">s</name> = <call><name PREFIX:line="243" PREFIX:column="13">ReadCoreTimer</name><argument_list PREFIX:line="243" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
	<while PREFIX:line="244" PREFIX:column="9">while <condition PREFIX:line="244" PREFIX:column="15">( <expr><call PREFIX:line="244" PREFIX:column="17">(<name PREFIX:line="244" PREFIX:column="18">uint32_t</name>)<argument_list PREFIX:line="244" PREFIX:column="27">(<argument><expr><call><name PREFIX:line="244" PREFIX:column="28">ReadCoreTimer</name><argument_list PREFIX:line="244" PREFIX:column="41">()</argument_list></call> - <name PREFIX:line="244" PREFIX:column="46">s</name></expr></argument>)</argument_list></call> &lt; <name PREFIX:line="244" PREFIX:column="51">d</name></expr> )</condition>
		<empty_stmt PREFIX:line="245" PREFIX:column="17">;</empty_stmt></while>
}</block></function> 

<cpp:endif PREFIX:line="248" PREFIX:column="1">#<cpp:directive PREFIX:line="248" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" PREFIX:line="250" PREFIX:column="1">/*== Any other systems: Dummy Delay ==*/</comment>
<cpp:if PREFIX:line="251" PREFIX:column="1">#<cpp:directive PREFIX:line="251" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="251" PREFIX:column="5">defined</name><argument_list PREFIX:line="251" PREFIX:column="12">(<argument><expr><name PREFIX:line="251" PREFIX:column="13">USE_DUMMY_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name PREFIX:line="252" PREFIX:column="1">void</name></type> <name PREFIX:line="252" PREFIX:column="6">u8g_Delay</name><parameter_list PREFIX:line="252" PREFIX:column="15">(<param><decl><type><name PREFIX:line="252" PREFIX:column="16">uint16_t</name></type> <name PREFIX:line="252" PREFIX:column="25">val</name></decl></param>)</parameter_list>
<block PREFIX:line="253" PREFIX:column="1">{
	<comment type="block" PREFIX:line="254" PREFIX:column="9">/* do not know how to delay... */</comment>
}</block></function>
<function><type><name PREFIX:line="256" PREFIX:column="1">void</name></type> <name PREFIX:line="256" PREFIX:column="6">u8g_MicroDelay</name><parameter_list PREFIX:line="256" PREFIX:column="20">(<param><decl><type><name PREFIX:line="256" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="257" PREFIX:column="1">{
}</block></function>
<function><type><name PREFIX:line="259" PREFIX:column="1">void</name></type> <name PREFIX:line="259" PREFIX:column="6">u8g_10MicroDelay</name><parameter_list PREFIX:line="259" PREFIX:column="22">(<param><decl><type><name PREFIX:line="259" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="260" PREFIX:column="1">{
}</block></function>
<cpp:endif PREFIX:line="262" PREFIX:column="1">#<cpp:directive PREFIX:line="262" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
