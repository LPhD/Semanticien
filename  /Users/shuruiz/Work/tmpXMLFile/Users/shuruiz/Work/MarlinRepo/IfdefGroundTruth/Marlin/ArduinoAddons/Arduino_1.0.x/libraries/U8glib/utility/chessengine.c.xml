<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/chessengine.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  chessengine.c
  
  "Little Rook Chess" (lrc)

  Port to u8g library

  chess for embedded 8-Bit controllers

  Copyright (c) 2012, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  

  Note:
    UNIX_MAIN --&gt; unix console executable

  Current Rule Limitation
    - no minor promotion, only "Queening" of the pawn
    - threefold repetition is not detected (same board situation appears three times)
	Note: Could be implemented, but requires tracking of the complete game
    - Fifty-move rule is not checked (no pawn move, no capture within last 50 moves)
	
  Words
    Ply		a half move
    
  General Links
    http://chessprogramming.wikispaces.com/

  Arduino specific
    http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1260055596
    
  Prefixes  
    chess_		Generic Chess Application Interface
    ce_		Chess engine, used internally, these function should not be called directly
    cu_		Chess utility function
    stack_		Internal function for stack handling

  Issues
    10.01.2011
      - castling to the right does not move the rook
	  --&gt; done
      - castling to the left: King can only move two squares
	  --&gt; done
      
    11.01.2011	
      Next Steps:
	- replace stack_NextCurrentPos with cu_NextPos, cleanup code according to the loop variable
	    --&gt; done
	- Castling: Need to check for fields under attack
	    --&gt; done
	
	- Check for WIN / LOOSE situation, perhaps call ce_Eval() once on the top-level board setup
	    just after the real move
	- cleanup cu_Move
	    --&gt; almost done
	- add some heuristics to the eval procedure
	- add right side menu
	  --&gt; done
	- clean up chess_ManualMove
	  --&gt; done
	- finish menu (consider is_game_end, undo move)
        - end condition: if KING is under attack and if KING can not move to a field which is under attack...
	      then the game is lost. What will be returned by the Eval procedure? is it -INF?
	    --&gt; finished
	    
	- reduce the use of variable color, all should be reduced to board_orientation and ply&amp;1
	
	- chess_GetNextMarked shoud make use of cu_NextPos
	    --&gt; done
	- chess_ManualMove: again cleanup, solve draw issue (KING is not in check and no legal moves are available)
	    --&gt; done
    22.01.2011
	- simplify eval_t ce_Eval(void)
	- position eval does not work, still moves side pawn :-(
	      maybe because all pieces are considered
	    --&gt; done

*/</comment>

<cpp:include PREFIX:line="103" PREFIX:column="1">#<cpp:directive PREFIX:line="103" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="103" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>

<comment type="line" PREFIX:line="105" PREFIX:column="1">//#ifndef __unix__</comment>
<comment type="line" PREFIX:line="106" PREFIX:column="1">//#else</comment>
<comment type="line" PREFIX:line="107" PREFIX:column="1">//#include &lt;assert.h&gt;</comment>
<comment type="line" PREFIX:line="108" PREFIX:column="1">//#define U8G_NOINLINE</comment>
<comment type="line" PREFIX:line="109" PREFIX:column="1">//#endif</comment>

<comment type="block" PREFIX:line="111" PREFIX:column="1">/*
SAN identifies each piece by a single upper case letter.  The standard English
values: pawn = "P", knight = "N", bishop = "B", rook = "R", queen = "Q", and
king = "K".
*/</comment>

<comment type="block" PREFIX:line="117" PREFIX:column="1">/* numbers for the various pieces */</comment>
<cpp:define PREFIX:line="118" PREFIX:column="1">#<cpp:directive PREFIX:line="118" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="118" PREFIX:column="9">PIECE_NONE</name></cpp:macro>	<cpp:value PREFIX:line="118" PREFIX:column="25">0</cpp:value></cpp:define>
<cpp:define PREFIX:line="119" PREFIX:column="1">#<cpp:directive PREFIX:line="119" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="119" PREFIX:column="9">PIECE_PAWN</name></cpp:macro> 	<cpp:value PREFIX:line="119" PREFIX:column="25">1</cpp:value></cpp:define>
<cpp:define PREFIX:line="120" PREFIX:column="1">#<cpp:directive PREFIX:line="120" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="120" PREFIX:column="9">PIECE_KNIGHT</name></cpp:macro>  	<cpp:value PREFIX:line="120" PREFIX:column="25">2</cpp:value></cpp:define>
<cpp:define PREFIX:line="121" PREFIX:column="1">#<cpp:directive PREFIX:line="121" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="121" PREFIX:column="9">PIECE_BISHOP</name></cpp:macro> 	<cpp:value PREFIX:line="121" PREFIX:column="25">3</cpp:value></cpp:define>
<cpp:define PREFIX:line="122" PREFIX:column="1">#<cpp:directive PREFIX:line="122" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="122" PREFIX:column="9">PIECE_ROOK</name></cpp:macro>	<cpp:value PREFIX:line="122" PREFIX:column="25">4</cpp:value></cpp:define>
<cpp:define PREFIX:line="123" PREFIX:column="1">#<cpp:directive PREFIX:line="123" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="123" PREFIX:column="9">PIECE_QUEEN</name></cpp:macro> 	<cpp:value PREFIX:line="123" PREFIX:column="25">5</cpp:value></cpp:define>
<cpp:define PREFIX:line="124" PREFIX:column="1">#<cpp:directive PREFIX:line="124" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="124" PREFIX:column="9">PIECE_KING</name></cpp:macro>		<cpp:value PREFIX:line="124" PREFIX:column="33">6</cpp:value></cpp:define>

<comment type="block" PREFIX:line="126" PREFIX:column="1">/* color definitions */</comment>
<cpp:define PREFIX:line="127" PREFIX:column="1">#<cpp:directive PREFIX:line="127" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="127" PREFIX:column="9">COLOR_WHITE</name></cpp:macro>	<cpp:value PREFIX:line="127" PREFIX:column="25">0</cpp:value></cpp:define>
<cpp:define PREFIX:line="128" PREFIX:column="1">#<cpp:directive PREFIX:line="128" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="128" PREFIX:column="9">COLOR_BLACK</name></cpp:macro>	<cpp:value PREFIX:line="128" PREFIX:column="25">1</cpp:value></cpp:define>

<comment type="block" PREFIX:line="130" PREFIX:column="1">/* a mask, which includes COLOR and PIECE number */</comment>
<cpp:define PREFIX:line="131" PREFIX:column="1">#<cpp:directive PREFIX:line="131" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="131" PREFIX:column="9">COLOR_PIECE_MASK</name></cpp:macro> <cpp:value PREFIX:line="131" PREFIX:column="26">0x01f</cpp:value></cpp:define>

<cpp:define PREFIX:line="133" PREFIX:column="1">#<cpp:directive PREFIX:line="133" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="133" PREFIX:column="9">CP_MARK_MASK</name></cpp:macro> <cpp:value PREFIX:line="133" PREFIX:column="22">0x20</cpp:value></cpp:define>

<cpp:define PREFIX:line="135" PREFIX:column="1">#<cpp:directive PREFIX:line="135" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="135" PREFIX:column="9">ILLEGAL_POSITION</name></cpp:macro> <cpp:value PREFIX:line="135" PREFIX:column="26">255</cpp:value></cpp:define>

<comment type="block" PREFIX:line="137" PREFIX:column="1">/* This is the build in upper limit of the search stack */</comment>
<comment type="block" PREFIX:line="138" PREFIX:column="1">/* This value defines the amount of memory allocated for the search stack */</comment>
<comment type="block" PREFIX:line="139" PREFIX:column="1">/* The search depth of this chess engine can never exceed this value */</comment>
<cpp:define PREFIX:line="140" PREFIX:column="1">#<cpp:directive PREFIX:line="140" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="140" PREFIX:column="9">STACK_MAX_SIZE</name></cpp:macro> <cpp:value PREFIX:line="140" PREFIX:column="24">5</cpp:value></cpp:define>

<comment type="block" PREFIX:line="142" PREFIX:column="1">/* chess half move stack: twice the number of undo's, a user can do */</comment> 
<cpp:define PREFIX:line="143" PREFIX:column="1">#<cpp:directive PREFIX:line="143" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="143" PREFIX:column="9">CHM_USER_SIZE</name></cpp:macro> <cpp:value PREFIX:line="143" PREFIX:column="23">6</cpp:value></cpp:define>

<comment type="block" PREFIX:line="145" PREFIX:column="1">/* the CHM_LIST_SIZE must be larger than the maximum search depth */</comment>
<comment type="block" PREFIX:line="146" PREFIX:column="1">/* the overall size of ste half move stack */</comment>
<cpp:define PREFIX:line="147" PREFIX:column="1">#<cpp:directive PREFIX:line="147" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="147" PREFIX:column="9">CHM_LIST_SIZE</name></cpp:macro> <cpp:value PREFIX:line="147" PREFIX:column="23">(STACK_MAX_SIZE+CHM_USER_SIZE+2)</cpp:value></cpp:define>

<typedef PREFIX:line="149" PREFIX:column="1">typedef <type><name PREFIX:line="149" PREFIX:column="9">int16_t</name></type> <name PREFIX:line="149" PREFIX:column="17">eval_t</name>;</typedef>	<comment type="block" PREFIX:line="149" PREFIX:column="25">/* a variable type to store results from the evaluation */</comment> 
<comment type="line" PREFIX:line="150" PREFIX:column="1">//#define EVAL_T_LOST -32768</comment>
<cpp:define PREFIX:line="151" PREFIX:column="1">#<cpp:directive PREFIX:line="151" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="151" PREFIX:column="9">EVAL_T_MIN</name></cpp:macro> <cpp:value PREFIX:line="151" PREFIX:column="20">-32767</cpp:value></cpp:define>
<cpp:define PREFIX:line="152" PREFIX:column="1">#<cpp:directive PREFIX:line="152" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="152" PREFIX:column="9">EVAL_T_MAX</name></cpp:macro> <cpp:value PREFIX:line="152" PREFIX:column="20">32767</cpp:value></cpp:define>
<comment type="line" PREFIX:line="153" PREFIX:column="1">//#define EVAL_T_WIN 32767</comment>

<comment type="block" PREFIX:line="155" PREFIX:column="1">/* for maintainance of our own stack: this is the definition of one element on the stack */</comment>
<struct PREFIX:line="156" PREFIX:column="1">struct <name PREFIX:line="156" PREFIX:column="8">_stack_element_struct</name>
<block PREFIX:line="157" PREFIX:column="1">{
  <comment type="block" PREFIX:line="158" PREFIX:column="3">/* the current source position which is investigated */</comment>
  <decl_stmt><decl><type><name PREFIX:line="159" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="159" PREFIX:column="11">current_pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="160" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="160" PREFIX:column="11">current_cp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="161" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="161" PREFIX:column="11">current_color</name></decl>;</decl_stmt>	<comment type="block" PREFIX:line="161" PREFIX:column="33">/* COLOR_WHITE or COLOR_BLACK: must be predefines */</comment>
  
  <comment type="block" PREFIX:line="163" PREFIX:column="3">/* the move which belongs to that value, both values are game positions */</comment>
  <decl_stmt><decl><type><name PREFIX:line="164" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="164" PREFIX:column="11">best_from_pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="165" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="165" PREFIX:column="11">best_to_pos</name></decl>;</decl_stmt>
  <comment type="block" PREFIX:line="166" PREFIX:column="3">/* the best value, which has been dicovered so far */</comment>
  <decl_stmt><decl><type><name PREFIX:line="167" PREFIX:column="3">eval_t</name></type> <name PREFIX:line="167" PREFIX:column="10">best_eval</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef PREFIX:line="169" PREFIX:column="1">typedef <type PREFIX:line="169" PREFIX:column="9">struct <name PREFIX:line="169" PREFIX:column="16">_stack_element_struct</name></type> <name PREFIX:line="169" PREFIX:column="38">stack_element_t</name>;</typedef>
<typedef PREFIX:line="170" PREFIX:column="1">typedef <type PREFIX:line="170" PREFIX:column="9">struct <name PREFIX:line="170" PREFIX:column="16">_stack_element_struct</name> *</type><name PREFIX:line="170" PREFIX:column="39">stack_element_p</name>;</typedef>

<comment type="block" PREFIX:line="172" PREFIX:column="1">/* chess half move history */</comment>
<struct PREFIX:line="173" PREFIX:column="1">struct <name PREFIX:line="173" PREFIX:column="8">_chm_struct</name>
<block PREFIX:line="174" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="175" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="175" PREFIX:column="11">main_cp</name></decl>;</decl_stmt>		<comment type="block" PREFIX:line="175" PREFIX:column="33">/* the main piece, which is moved */</comment>
  <decl_stmt><decl><type><name PREFIX:line="176" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="176" PREFIX:column="11">main_src</name></decl>;</decl_stmt>		<comment type="block" PREFIX:line="176" PREFIX:column="33">/* the source position of the main piece */</comment>
  <decl_stmt><decl><type><name PREFIX:line="177" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="177" PREFIX:column="11">main_dest</name></decl>;</decl_stmt> 	<comment type="block" PREFIX:line="177" PREFIX:column="25">/* the destination of the main piece */</comment>
  
  <decl_stmt><decl><type><name PREFIX:line="179" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="179" PREFIX:column="11">other_cp</name></decl>;</decl_stmt>		<comment type="block" PREFIX:line="179" PREFIX:column="33">/* another piece: the captured one, the ROOK in case of castling or PIECE_NONE */</comment>
  <decl_stmt><decl><type><name PREFIX:line="180" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="180" PREFIX:column="11">other_src</name></decl>;</decl_stmt>		<comment type="block" PREFIX:line="180" PREFIX:column="33">/* the delete position of other_cp. Often identical to main_dest except for e.p. and castling */</comment>
  <decl_stmt><decl><type><name PREFIX:line="181" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="181" PREFIX:column="11">other_dest</name></decl>;</decl_stmt>		<comment type="block" PREFIX:line="181" PREFIX:column="33">/* only used for castling: ROOK destination pos */</comment>
  
  <comment type="block" PREFIX:line="183" PREFIX:column="3">/* the position of the last pawn, which did a double move forward */</comment>
  <comment type="block" PREFIX:line="184" PREFIX:column="3">/* this is required to check en passant conditions */</comment>
  <comment type="block" PREFIX:line="185" PREFIX:column="3">/* this array can be indexed by the color of the current player */</comment>
  <comment type="block" PREFIX:line="186" PREFIX:column="3">/* this is the condition BEFORE the move was done */</comment>
  <decl_stmt><decl><type><name PREFIX:line="187" PREFIX:column="3">uint8_t</name></type> <name><name PREFIX:line="187" PREFIX:column="11">pawn_dbl_move</name><index PREFIX:line="187" PREFIX:column="24">[<expr PREFIX:line="187" PREFIX:column="25">2</expr>]</index></name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="189" PREFIX:column="3">/* flags for the movement of rook and king; required for castling */</comment>
  <comment type="block" PREFIX:line="190" PREFIX:column="3">/* a 1 means: castling is (still) possible */</comment>
  <comment type="block" PREFIX:line="191" PREFIX:column="3">/* a 0 means: castling not possible */</comment>
  <comment type="block" PREFIX:line="192" PREFIX:column="3">/*  bit 0 left side white */</comment>
  <comment type="block" PREFIX:line="193" PREFIX:column="3">/*  bit 1 right side white */</comment>
  <comment type="block" PREFIX:line="194" PREFIX:column="3">/*  bit 2 left side black */</comment>
  <comment type="block" PREFIX:line="195" PREFIX:column="3">/*  bit 3 right side black */</comment>
  <comment type="block" PREFIX:line="196" PREFIX:column="3">/* this is the condition BEFORE the move was done */</comment>
  <decl_stmt><decl><type><name PREFIX:line="197" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="197" PREFIX:column="11">castling_possible</name></decl>;</decl_stmt>   
}</block>;</struct>

<typedef PREFIX:line="200" PREFIX:column="1">typedef <type PREFIX:line="200" PREFIX:column="9">struct <name PREFIX:line="200" PREFIX:column="16">_chm_struct</name></type> <name PREFIX:line="200" PREFIX:column="28">chm_t</name>;</typedef>
<typedef PREFIX:line="201" PREFIX:column="1">typedef <type PREFIX:line="201" PREFIX:column="9">struct <name PREFIX:line="201" PREFIX:column="16">_chm_struct</name> *</type><name PREFIX:line="201" PREFIX:column="29">chm_p</name>;</typedef>

<comment type="block" PREFIX:line="203" PREFIX:column="1">/* little rook chess, main structure */</comment>
<struct PREFIX:line="204" PREFIX:column="1">struct <name PREFIX:line="204" PREFIX:column="8">_lrc_struct</name>
<block PREFIX:line="205" PREFIX:column="1">{  
  <comment type="block" PREFIX:line="206" PREFIX:column="3">/* half-move (ply) counter: Counts the number of half-moves so far. Starts with 0 */</comment>
  <comment type="block" PREFIX:line="207" PREFIX:column="3">/* the lowest bit is used to derive the color of the current player */</comment>
  <comment type="block" PREFIX:line="208" PREFIX:column="3">/* will be set to zero in chess_SetupBoard() */</comment>
  <decl_stmt><decl><type><name PREFIX:line="209" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="209" PREFIX:column="11">ply_count</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="211" PREFIX:column="3">/* the half move stack position counter, counts the number of elements in chm_list */</comment>
  <decl_stmt><decl><type><name PREFIX:line="212" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="212" PREFIX:column="11">chm_pos</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="214" PREFIX:column="3">/* each element contains a colored piece, empty fields have value 0 */</comment>
  <comment type="block" PREFIX:line="215" PREFIX:column="3">/* the field with index 0 is black (lower left) */</comment>
  <decl_stmt><decl><type><name PREFIX:line="216" PREFIX:column="3">uint8_t</name></type> <name><name PREFIX:line="216" PREFIX:column="11">board</name><index PREFIX:line="216" PREFIX:column="16">[<expr PREFIX:line="216" PREFIX:column="17">64</expr>]</index></name></decl>;</decl_stmt>	
  <comment type="block" PREFIX:line="217" PREFIX:column="3">/* the position of the last pawn, which did a double move forward */</comment>
  <comment type="block" PREFIX:line="218" PREFIX:column="3">/* this is required to check en passant conditions */</comment>
  <comment type="block" PREFIX:line="219" PREFIX:column="3">/* this array can be indexed by the color of the current player */</comment>
  <decl_stmt><decl><type><name PREFIX:line="220" PREFIX:column="3">uint8_t</name></type> <name><name PREFIX:line="220" PREFIX:column="11">pawn_dbl_move</name><index PREFIX:line="220" PREFIX:column="24">[<expr PREFIX:line="220" PREFIX:column="25">2</expr>]</index></name></decl>;</decl_stmt> 
  
  <comment type="block" PREFIX:line="222" PREFIX:column="3">/* flags for the movement of rook and king; required for castling */</comment>
  <comment type="block" PREFIX:line="223" PREFIX:column="3">/* a 1 means: castling is (still) possible */</comment>
  <comment type="block" PREFIX:line="224" PREFIX:column="3">/* a 0 means: castling not possible */</comment>
  <comment type="block" PREFIX:line="225" PREFIX:column="3">/*  bit 0 left side white */</comment>
  <comment type="block" PREFIX:line="226" PREFIX:column="3">/*  bit 1 right side white */</comment>
  <comment type="block" PREFIX:line="227" PREFIX:column="3">/*  bit 2 left side black */</comment>
  <comment type="block" PREFIX:line="228" PREFIX:column="3">/*  bit 3 right side black */</comment>
  <decl_stmt><decl><type><name PREFIX:line="229" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="229" PREFIX:column="11">castling_possible</name></decl>;</decl_stmt> 
  
  <comment type="block" PREFIX:line="231" PREFIX:column="3">/* board orientation */</comment>
  <comment type="block" PREFIX:line="232" PREFIX:column="3">/* 0: white is below COLOR_WHITE */</comment>
  <comment type="block" PREFIX:line="233" PREFIX:column="3">/* 1: black is below COLOR_BLACK */</comment>
  <comment type="block" PREFIX:line="234" PREFIX:column="3">/* bascially, this can be used as a color */</comment>
  <decl_stmt><decl><type><name PREFIX:line="235" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="235" PREFIX:column="11">orientation</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="237" PREFIX:column="3">/* exchange colors of the pieces */</comment>
  <comment type="block" PREFIX:line="238" PREFIX:column="3">/* 0: white has an empty body, use this for bright background color */</comment>
  <comment type="block" PREFIX:line="239" PREFIX:column="3">/* 1: black has an empty body, use this for dark backround color */</comment>
  <decl_stmt><decl><type><name PREFIX:line="240" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="240" PREFIX:column="11">strike_out_color</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="242" PREFIX:column="3">/* 0, when the game is ongoing */</comment>
  <comment type="block" PREFIX:line="243" PREFIX:column="3">/* 1, when the game is stopped (lost or draw) */</comment>
  <decl_stmt><decl><type><name PREFIX:line="244" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="244" PREFIX:column="11">is_game_end</name></decl>;</decl_stmt>
  <comment type="block" PREFIX:line="245" PREFIX:column="3">/* the color of the side which lost the game */</comment>
  <comment type="block" PREFIX:line="246" PREFIX:column="3">/* this value is only valid, when is_game_end is not 0 */</comment>
  <comment type="block" PREFIX:line="247" PREFIX:column="3">/* values 0 and 1 represent WHITE and BLACK, 2 means a draw */</comment>
  <decl_stmt><decl><type><name PREFIX:line="248" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="248" PREFIX:column="11">lost_side_color</name></decl>;</decl_stmt>
  
  
  
  <comment type="block" PREFIX:line="252" PREFIX:column="3">/* checks are executed in ce_LoopRecur */</comment>
  <comment type="block" PREFIX:line="253" PREFIX:column="3">/* these checks will put some marks on the board */</comment>
  <comment type="block" PREFIX:line="254" PREFIX:column="3">/* this will be used by the interface to find out */</comment>
  <comment type="block" PREFIX:line="255" PREFIX:column="3">/* legal moves */</comment>
  <decl_stmt><decl><type><name PREFIX:line="256" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="256" PREFIX:column="11">check_src_pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="257" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="257" PREFIX:column="11">check_mode</name></decl>;</decl_stmt>		<comment type="block" PREFIX:line="257" PREFIX:column="33">/* CHECK_MODE_NONE, CHECK_MODE_MOVEABLE, CHECK_MODE_TARGET_MOVE */</comment>
  
  
  <comment type="block" PREFIX:line="260" PREFIX:column="3">/* count of the attacking pieces, indexed by color */</comment>
  <decl_stmt><decl><type><name PREFIX:line="261" PREFIX:column="3">uint8_t</name></type> <name><name PREFIX:line="261" PREFIX:column="11">find_piece_cnt</name><index PREFIX:line="261" PREFIX:column="25">[<expr PREFIX:line="261" PREFIX:column="26">2</expr>]</index></name></decl>;</decl_stmt>

  <comment type="block" PREFIX:line="263" PREFIX:column="3">/* sum of the attacking pieces, indexed by color */</comment>
  <decl_stmt><decl><type><name PREFIX:line="264" PREFIX:column="3">uint8_t</name></type> <name><name PREFIX:line="264" PREFIX:column="11">find_piece_weight</name><index PREFIX:line="264" PREFIX:column="28">[<expr PREFIX:line="264" PREFIX:column="29">2</expr>]</index></name></decl>;</decl_stmt>

  <comment type="block" PREFIX:line="266" PREFIX:column="3">/* points to the current element of the search stack */</comment>
  <comment type="block" PREFIX:line="267" PREFIX:column="3">/* this stack is NEVER empty. The value 0 points to the first element of the stack */</comment>
  <comment type="block" PREFIX:line="268" PREFIX:column="3">/* actually "curr_depth" represent half-moves (plies) */</comment>
  <decl_stmt><decl><type><name PREFIX:line="269" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="269" PREFIX:column="11">curr_depth</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="270" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="270" PREFIX:column="11">max_depth</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="271" PREFIX:column="3">stack_element_p</name></type> <name PREFIX:line="271" PREFIX:column="19">curr_element</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="273" PREFIX:column="3">/* allocated memory for the search stack */</comment>
  <decl_stmt><decl><type><name PREFIX:line="274" PREFIX:column="3">stack_element_t</name></type> <name><name PREFIX:line="274" PREFIX:column="19">stack_memory</name><index PREFIX:line="274" PREFIX:column="31">[<expr><name PREFIX:line="274" PREFIX:column="32">STACK_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block" PREFIX:line="276" PREFIX:column="3">/* the half move stack, used for move undo and depth search, size is stored in chm_pos */</comment>
  <decl_stmt><decl><type><name PREFIX:line="277" PREFIX:column="3">chm_t</name></type> <name><name PREFIX:line="277" PREFIX:column="9">chm_list</name><index PREFIX:line="277" PREFIX:column="17">[<expr><name PREFIX:line="277" PREFIX:column="18">CHM_LIST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<typedef PREFIX:line="279" PREFIX:column="1">typedef <type PREFIX:line="279" PREFIX:column="9">struct <name PREFIX:line="279" PREFIX:column="16">_lrc_struct</name></type> <name PREFIX:line="279" PREFIX:column="28">lrc_t</name>;</typedef>

<cpp:define PREFIX:line="281" PREFIX:column="1">#<cpp:directive PREFIX:line="281" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="281" PREFIX:column="9">CHECK_MODE_NONE</name></cpp:macro> <cpp:value PREFIX:line="281" PREFIX:column="25">0</cpp:value></cpp:define>
<cpp:define PREFIX:line="282" PREFIX:column="1">#<cpp:directive PREFIX:line="282" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="282" PREFIX:column="9">CHECK_MODE_MOVEABLE</name></cpp:macro> <cpp:value PREFIX:line="282" PREFIX:column="29">1</cpp:value></cpp:define>
<cpp:define PREFIX:line="283" PREFIX:column="1">#<cpp:directive PREFIX:line="283" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="283" PREFIX:column="9">CHECK_MODE_TARGET_MOVE</name></cpp:macro> <cpp:value PREFIX:line="283" PREFIX:column="32">2</cpp:value></cpp:define>



<comment type="block" PREFIX:line="287" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="288" PREFIX:column="1">/* global variables */</comment>
<comment type="block" PREFIX:line="289" PREFIX:column="1">/*==============================================================*/</comment>

<decl_stmt><decl><type><name PREFIX:line="291" PREFIX:column="1">u8g_t</name> *</type><name PREFIX:line="291" PREFIX:column="8">lrc_u8g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name PREFIX:line="293" PREFIX:column="1">lrc_t</name></type> <name PREFIX:line="293" PREFIX:column="7">lrc_obj</name></decl>;</decl_stmt>


<comment type="block" PREFIX:line="296" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="297" PREFIX:column="1">/* forward declarations */</comment>
<comment type="block" PREFIX:line="298" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="300" PREFIX:column="1">/* 
  apply no inline to some of the functions:
  avr-gcc very often inlines functions, however not inline saves a lot of program memory!
  On the other hand there are some really short procedures which should be inlined (like cp_GetColor)
  These procedures are marked static to prevent the generation of the expanded procedure, which
  also saves space.
*/</comment>

<decl_stmt><decl><type><name PREFIX:line="308" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="308" PREFIX:column="9">stack_Push</name><argument_list PREFIX:line="308" PREFIX:column="19">(<argument><expr><name PREFIX:line="308" PREFIX:column="20">uint8_t</name> <name PREFIX:line="308" PREFIX:column="28">color</name></expr></argument>)</argument_list> <name PREFIX:line="308" PREFIX:column="35">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="309" PREFIX:column="1">void</name></type> <name PREFIX:line="309" PREFIX:column="6">stack_Pop</name><argument_list PREFIX:line="309" PREFIX:column="15">(<argument><expr><name PREFIX:line="309" PREFIX:column="16">void</name></expr></argument>)</argument_list> <name PREFIX:line="309" PREFIX:column="22">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="310" PREFIX:column="1">void</name></type> <name PREFIX:line="310" PREFIX:column="6">stack_InitCurrElement</name><argument_list PREFIX:line="310" PREFIX:column="27">(<argument><expr><name PREFIX:line="310" PREFIX:column="28">void</name></expr></argument>)</argument_list> <name PREFIX:line="310" PREFIX:column="34">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="311" PREFIX:column="1">void</name></type> <name PREFIX:line="311" PREFIX:column="6">stack_Init</name><argument_list PREFIX:line="311" PREFIX:column="16">(<argument><expr><name PREFIX:line="311" PREFIX:column="17">uint8_t</name> <name PREFIX:line="311" PREFIX:column="25">max</name></expr></argument>)</argument_list> <name PREFIX:line="311" PREFIX:column="30">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="312" PREFIX:column="1">void</name></type> <name PREFIX:line="312" PREFIX:column="6">stack_SetMove</name><argument_list PREFIX:line="312" PREFIX:column="19">(<argument><expr><name PREFIX:line="312" PREFIX:column="20">eval_t</name> <name PREFIX:line="312" PREFIX:column="27">val</name></expr></argument>, <argument><expr><name PREFIX:line="312" PREFIX:column="32">uint8_t</name> <name PREFIX:line="312" PREFIX:column="40">to_pos</name></expr></argument>)</argument_list> <name PREFIX:line="312" PREFIX:column="48">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="313" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="313" PREFIX:column="9">cu_NextPos</name><argument_list PREFIX:line="313" PREFIX:column="19">(<argument><expr><name PREFIX:line="313" PREFIX:column="20">uint8_t</name> <name PREFIX:line="313" PREFIX:column="28">pos</name></expr></argument>)</argument_list> <name PREFIX:line="313" PREFIX:column="33">U8G_NOINLINE</name></decl>;</decl_stmt>
<function_decl><type><specifier PREFIX:line="314" PREFIX:column="1">static</specifier> <name PREFIX:line="314" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="314" PREFIX:column="16">cu_gpos2bpos</name><parameter_list PREFIX:line="314" PREFIX:column="28">(<param><decl><type><name PREFIX:line="314" PREFIX:column="29">uint8_t</name></type> <name PREFIX:line="314" PREFIX:column="37">gpos</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier PREFIX:line="315" PREFIX:column="1">static</specifier> <name PREFIX:line="315" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="315" PREFIX:column="16">cp_Construct</name><parameter_list PREFIX:line="315" PREFIX:column="28">(<param><decl><type><name PREFIX:line="315" PREFIX:column="29">uint8_t</name></type> <name PREFIX:line="315" PREFIX:column="37">color</name></decl></param>, <param><decl><type><name PREFIX:line="315" PREFIX:column="44">uint8_t</name></type> <name PREFIX:line="315" PREFIX:column="52">piece</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier PREFIX:line="316" PREFIX:column="1">static</specifier> <name PREFIX:line="316" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="316" PREFIX:column="16">cp_GetPiece</name><parameter_list PREFIX:line="316" PREFIX:column="27">(<param><decl><type><name PREFIX:line="316" PREFIX:column="28">uint8_t</name></type> <name PREFIX:line="316" PREFIX:column="36">cp</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier PREFIX:line="317" PREFIX:column="1">static</specifier> <name PREFIX:line="317" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="317" PREFIX:column="16">cp_GetColor</name><parameter_list PREFIX:line="317" PREFIX:column="27">(<param><decl><type><name PREFIX:line="317" PREFIX:column="28">uint8_t</name></type> <name PREFIX:line="317" PREFIX:column="36">cp</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name PREFIX:line="318" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="318" PREFIX:column="9">cp_GetFromBoard</name><argument_list PREFIX:line="318" PREFIX:column="24">(<argument><expr><name PREFIX:line="318" PREFIX:column="25">uint8_t</name> <name PREFIX:line="318" PREFIX:column="33">pos</name></expr></argument>)</argument_list> <name PREFIX:line="318" PREFIX:column="38">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="319" PREFIX:column="1">void</name></type> <name PREFIX:line="319" PREFIX:column="6">cp_SetOnBoard</name><argument_list PREFIX:line="319" PREFIX:column="19">(<argument><expr><name PREFIX:line="319" PREFIX:column="20">uint8_t</name> <name PREFIX:line="319" PREFIX:column="28">pos</name></expr></argument>, <argument><expr><name PREFIX:line="319" PREFIX:column="33">uint8_t</name> <name PREFIX:line="319" PREFIX:column="41">cp</name></expr></argument>)</argument_list> <name PREFIX:line="319" PREFIX:column="45">U8G_NOINLINE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name PREFIX:line="321" PREFIX:column="1">void</name></type> <name PREFIX:line="321" PREFIX:column="6">cu_ClearBoard</name><argument_list PREFIX:line="321" PREFIX:column="19">(<argument><expr><name PREFIX:line="321" PREFIX:column="20">void</name></expr></argument>)</argument_list> <name PREFIX:line="321" PREFIX:column="26">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="322" PREFIX:column="1">void</name></type> <name PREFIX:line="322" PREFIX:column="6">chess_SetupBoard</name><argument_list PREFIX:line="322" PREFIX:column="22">(<argument><expr><name PREFIX:line="322" PREFIX:column="23">void</name></expr></argument>)</argument_list> <name PREFIX:line="322" PREFIX:column="29">U8G_NOINLINE</name></decl>;</decl_stmt>
<function_decl><type><name PREFIX:line="323" PREFIX:column="1">eval_t</name></type> <name PREFIX:line="323" PREFIX:column="8">ce_Eval</name><parameter_list PREFIX:line="323" PREFIX:column="15">(<param><decl><type><name PREFIX:line="323" PREFIX:column="16">void</name></type></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name PREFIX:line="325" PREFIX:column="1">void</name></type> <name PREFIX:line="325" PREFIX:column="6">cu_ClearMoveHistory</name><argument_list PREFIX:line="325" PREFIX:column="25">(<argument><expr><name PREFIX:line="325" PREFIX:column="26">void</name></expr></argument>)</argument_list> <name PREFIX:line="325" PREFIX:column="32">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="326" PREFIX:column="1">void</name></type> <name PREFIX:line="326" PREFIX:column="6">cu_ReduceHistoryByFullMove</name><argument_list PREFIX:line="326" PREFIX:column="32">(<argument><expr><name PREFIX:line="326" PREFIX:column="33">void</name></expr></argument>)</argument_list> <name PREFIX:line="326" PREFIX:column="39">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="327" PREFIX:column="1">void</name></type> <name PREFIX:line="327" PREFIX:column="6">cu_UndoHalfMove</name><argument_list PREFIX:line="327" PREFIX:column="21">(<argument><expr><name PREFIX:line="327" PREFIX:column="22">void</name></expr></argument>)</argument_list> <name PREFIX:line="327" PREFIX:column="28">U8G_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="328" PREFIX:column="1">chm_p</name></type> <name PREFIX:line="328" PREFIX:column="7">cu_PushHalfMove</name><argument_list PREFIX:line="328" PREFIX:column="22">(<argument><expr><name PREFIX:line="328" PREFIX:column="23">void</name></expr></argument>)</argument_list> <name PREFIX:line="328" PREFIX:column="29">U8G_NOINLINE</name></decl>;</decl_stmt>


<function_decl><type><name PREFIX:line="331" PREFIX:column="1">void</name></type> <name PREFIX:line="331" PREFIX:column="6">ce_CalculatePositionWeight</name><parameter_list PREFIX:line="331" PREFIX:column="32">(<param><decl><type><name PREFIX:line="331" PREFIX:column="33">uint8_t</name></type> <name PREFIX:line="331" PREFIX:column="41">pos</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="332" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="332" PREFIX:column="9">ce_GetPositionAttackWeight</name><parameter_list PREFIX:line="332" PREFIX:column="35">(<param><decl><type><name PREFIX:line="332" PREFIX:column="36">uint8_t</name></type> <name PREFIX:line="332" PREFIX:column="44">pos</name></decl></param>, <param><decl><type><name PREFIX:line="332" PREFIX:column="49">uint8_t</name></type> <name PREFIX:line="332" PREFIX:column="57">color</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name PREFIX:line="334" PREFIX:column="1">void</name></type> <name PREFIX:line="334" PREFIX:column="6">chess_Thinking</name><parameter_list PREFIX:line="334" PREFIX:column="20">(<param><decl><type><name PREFIX:line="334" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="335" PREFIX:column="1">void</name></type> <name PREFIX:line="335" PREFIX:column="6">ce_LoopPieces</name><parameter_list PREFIX:line="335" PREFIX:column="19">(<param><decl><type><name PREFIX:line="335" PREFIX:column="20">void</name></type></decl></param>)</parameter_list>;</function_decl>


<comment type="block" PREFIX:line="338" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="339" PREFIX:column="1">/* search stack */</comment>
<comment type="block" PREFIX:line="340" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="342" PREFIX:column="1">/* get current element from stack */</comment>
<function><type><name PREFIX:line="343" PREFIX:column="1">stack_element_p</name></type> <name PREFIX:line="343" PREFIX:column="17">stack_GetCurrElement</name><parameter_list PREFIX:line="343" PREFIX:column="37">(<param><decl><type><name PREFIX:line="343" PREFIX:column="38">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="344" PREFIX:column="1">{
  <return PREFIX:line="345" PREFIX:column="3">return <expr><name><name PREFIX:line="345" PREFIX:column="10">lrc_obj</name>.<name PREFIX:line="345" PREFIX:column="18">curr_element</name></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="348" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="348" PREFIX:column="9">stack_Push</name><parameter_list PREFIX:line="348" PREFIX:column="19">(<param><decl><type><name PREFIX:line="348" PREFIX:column="20">uint8_t</name></type> <name PREFIX:line="348" PREFIX:column="28">color</name></decl></param>)</parameter_list>
<block PREFIX:line="349" PREFIX:column="1">{
  <if PREFIX:line="350" PREFIX:column="3">if <condition PREFIX:line="350" PREFIX:column="6">( <expr><name><name PREFIX:line="350" PREFIX:column="8">lrc_obj</name>.<name PREFIX:line="350" PREFIX:column="16">curr_depth</name></name> == <name><name PREFIX:line="350" PREFIX:column="30">lrc_obj</name>.<name PREFIX:line="350" PREFIX:column="38">max_depth</name></name></expr> )</condition><then PREFIX:line="350" PREFIX:column="49">
    <return PREFIX:line="351" PREFIX:column="5">return <expr PREFIX:line="351" PREFIX:column="12">0</expr>;</return></then></if>
  <expr_stmt><expr><name><name PREFIX:line="352" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="352" PREFIX:column="11">curr_depth</name></name>++</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="353" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="353" PREFIX:column="11">curr_element</name></name> = <name><name PREFIX:line="353" PREFIX:column="26">lrc_obj</name>.<name PREFIX:line="353" PREFIX:column="34">stack_memory</name></name>+<name><name PREFIX:line="353" PREFIX:column="47">lrc_obj</name>.<name PREFIX:line="353" PREFIX:column="55">curr_depth</name></name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="355" PREFIX:column="3">/* change view for the evaluation */</comment>
  <expr_stmt><expr><name PREFIX:line="356" PREFIX:column="3">color</name> ^= 1</expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="357" PREFIX:column="3">stack_GetCurrElement</name><argument_list PREFIX:line="357" PREFIX:column="23">()</argument_list></call>-&gt;<name PREFIX:line="357" PREFIX:column="27">current_color</name> = <name PREFIX:line="357" PREFIX:column="43">color</name></expr>;</expr_stmt>

  <return PREFIX:line="359" PREFIX:column="3">return <expr PREFIX:line="359" PREFIX:column="10">1</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="362" PREFIX:column="1">void</name></type> <name PREFIX:line="362" PREFIX:column="6">stack_Pop</name><parameter_list PREFIX:line="362" PREFIX:column="15">(<param><decl><type><name PREFIX:line="362" PREFIX:column="16">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="363" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="364" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="364" PREFIX:column="11">curr_depth</name></name>--</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="365" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="365" PREFIX:column="11">curr_element</name></name> = <name><name PREFIX:line="365" PREFIX:column="26">lrc_obj</name>.<name PREFIX:line="365" PREFIX:column="34">stack_memory</name></name>+<name><name PREFIX:line="365" PREFIX:column="47">lrc_obj</name>.<name PREFIX:line="365" PREFIX:column="55">curr_depth</name></name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="368" PREFIX:column="1">/* reset the current element on the stack */</comment>
<function><type><name PREFIX:line="369" PREFIX:column="1">void</name></type> <name PREFIX:line="369" PREFIX:column="6">stack_InitCurrElement</name><parameter_list PREFIX:line="369" PREFIX:column="27">(<param><decl><type><name PREFIX:line="369" PREFIX:column="28">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="370" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="371" PREFIX:column="3">stack_element_p</name></type> <name PREFIX:line="371" PREFIX:column="19">e</name> <init PREFIX:line="371" PREFIX:column="21">= <expr><call><name PREFIX:line="371" PREFIX:column="23">stack_GetCurrElement</name><argument_list PREFIX:line="371" PREFIX:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name PREFIX:line="372" PREFIX:column="3">e</name>-&gt;<name PREFIX:line="372" PREFIX:column="6">best_eval</name></name> = <name PREFIX:line="372" PREFIX:column="18">EVAL_T_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="373" PREFIX:column="3">e</name>-&gt;<name PREFIX:line="373" PREFIX:column="6">best_from_pos</name></name> = <name PREFIX:line="373" PREFIX:column="22">ILLEGAL_POSITION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="374" PREFIX:column="3">e</name>-&gt;<name PREFIX:line="374" PREFIX:column="6">best_to_pos</name></name> = <name PREFIX:line="374" PREFIX:column="20">ILLEGAL_POSITION</name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="377" PREFIX:column="1">/* resets the search stack (and the check mode) */</comment>
<function><type><name PREFIX:line="378" PREFIX:column="1">void</name></type> <name PREFIX:line="378" PREFIX:column="6">stack_Init</name><parameter_list PREFIX:line="378" PREFIX:column="16">(<param><decl><type><name PREFIX:line="378" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="378" PREFIX:column="25">max</name></decl></param>)</parameter_list>
<block PREFIX:line="379" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="380" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="380" PREFIX:column="11">curr_depth</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="381" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="381" PREFIX:column="11">curr_element</name></name> = <name><name PREFIX:line="381" PREFIX:column="26">lrc_obj</name>.<name PREFIX:line="381" PREFIX:column="34">stack_memory</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="382" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="382" PREFIX:column="11">max_depth</name></name> = <name PREFIX:line="382" PREFIX:column="23">max</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="383" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="383" PREFIX:column="11">check_mode</name></name> = <name PREFIX:line="383" PREFIX:column="24">CHECK_MODE_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="384" PREFIX:column="3">stack_InitCurrElement</name><argument_list PREFIX:line="384" PREFIX:column="24">()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="385" PREFIX:column="3">stack_GetCurrElement</name><argument_list PREFIX:line="385" PREFIX:column="23">()</argument_list></call>-&gt;<name PREFIX:line="385" PREFIX:column="27">current_color</name> = <name><name PREFIX:line="385" PREFIX:column="43">lrc_obj</name>.<name PREFIX:line="385" PREFIX:column="51">ply_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="386" PREFIX:column="3">stack_GetCurrElement</name><argument_list PREFIX:line="386" PREFIX:column="23">()</argument_list></call>-&gt;<name PREFIX:line="386" PREFIX:column="27">current_color</name> &amp;= 1</expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="389" PREFIX:column="1">/* assign evaluation value and store the move, if this is the best move */</comment>
<comment type="block" PREFIX:line="390" PREFIX:column="1">/* assumes, that current_pos contains the source position */</comment>
<function><type><name PREFIX:line="391" PREFIX:column="1">void</name></type> <name PREFIX:line="391" PREFIX:column="6">stack_SetMove</name><parameter_list PREFIX:line="391" PREFIX:column="19">(<param><decl><type><name PREFIX:line="391" PREFIX:column="20">eval_t</name></type> <name PREFIX:line="391" PREFIX:column="27">val</name></decl></param>, <param><decl><type><name PREFIX:line="391" PREFIX:column="32">uint8_t</name></type> <name PREFIX:line="391" PREFIX:column="40">to_pos</name></decl></param>)</parameter_list>
<block PREFIX:line="392" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="393" PREFIX:column="3">stack_element_p</name></type> <name PREFIX:line="393" PREFIX:column="19">e</name> <init PREFIX:line="393" PREFIX:column="21">= <expr><call><name PREFIX:line="393" PREFIX:column="23">stack_GetCurrElement</name><argument_list PREFIX:line="393" PREFIX:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if PREFIX:line="394" PREFIX:column="3">if <condition PREFIX:line="394" PREFIX:column="6">( <expr><name><name PREFIX:line="394" PREFIX:column="8">e</name>-&gt;<name PREFIX:line="394" PREFIX:column="11">best_eval</name></name> &lt; <name PREFIX:line="394" PREFIX:column="23">val</name></expr> )</condition><then PREFIX:line="394" PREFIX:column="28">
  <block PREFIX:line="395" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="396" PREFIX:column="5">e</name>-&gt;<name PREFIX:line="396" PREFIX:column="8">best_eval</name></name> = <name PREFIX:line="396" PREFIX:column="20">val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="397" PREFIX:column="5">e</name>-&gt;<name PREFIX:line="397" PREFIX:column="8">best_from_pos</name></name> = <name><name PREFIX:line="397" PREFIX:column="24">e</name>-&gt;<name PREFIX:line="397" PREFIX:column="27">current_pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="398" PREFIX:column="5">e</name>-&gt;<name PREFIX:line="398" PREFIX:column="8">best_to_pos</name></name> = <name PREFIX:line="398" PREFIX:column="22">to_pos</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<comment type="block" PREFIX:line="402" PREFIX:column="1">/* 
  calculate next position on a 0x88 board 
  loop is ructed in this way:
  i = 0;
  do
  {
    ...
    i = cu_NextPos(i);
  } while( i != 0 );

  next pos might be started with an illegal position like 255
*/</comment>
<function><type><name PREFIX:line="414" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="414" PREFIX:column="9">cu_NextPos</name><parameter_list PREFIX:line="414" PREFIX:column="19">(<param><decl><type><name PREFIX:line="414" PREFIX:column="20">uint8_t</name></type> <name PREFIX:line="414" PREFIX:column="28">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="415" PREFIX:column="1">{
  <comment type="block" PREFIX:line="416" PREFIX:column="3">/* calculate next gpos */</comment>
  <expr_stmt><expr><name PREFIX:line="417" PREFIX:column="3">pos</name>++</expr>;</expr_stmt>
  <if PREFIX:line="418" PREFIX:column="3">if <condition PREFIX:line="418" PREFIX:column="6">( <expr PREFIX:line="418" PREFIX:column="8">( <name PREFIX:line="418" PREFIX:column="10">pos</name> &amp; 0x08 ) != 0</expr> )</condition><then PREFIX:line="418" PREFIX:column="29">
  <block PREFIX:line="419" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="420" PREFIX:column="5">pos</name>+= 0x10</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="421" PREFIX:column="5">pos</name>&amp;= 0xf0</expr>;</expr_stmt> 
  }</block></then></if>
  <if PREFIX:line="423" PREFIX:column="3">if <condition PREFIX:line="423" PREFIX:column="6">( <expr PREFIX:line="423" PREFIX:column="8">( <name PREFIX:line="423" PREFIX:column="10">pos</name> &amp; 0x80 ) != 0</expr> )</condition><then PREFIX:line="423" PREFIX:column="29">
    <expr_stmt><expr><name PREFIX:line="424" PREFIX:column="5">pos</name> = 0</expr>;</expr_stmt></then></if>
  <return PREFIX:line="425" PREFIX:column="3">return <expr><name PREFIX:line="425" PREFIX:column="10">pos</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="428" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="428" PREFIX:column="9">cu_PrevPos</name><parameter_list PREFIX:line="428" PREFIX:column="19">(<param><decl><type><name PREFIX:line="428" PREFIX:column="20">uint8_t</name></type> <name PREFIX:line="428" PREFIX:column="28">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="429" PREFIX:column="1">{
  <comment type="block" PREFIX:line="430" PREFIX:column="3">/* calculate prev gpos */</comment>
  <expr_stmt><expr><name PREFIX:line="431" PREFIX:column="3">pos</name>--</expr>;</expr_stmt>
  <if PREFIX:line="432" PREFIX:column="3">if <condition PREFIX:line="432" PREFIX:column="6">( <expr PREFIX:line="432" PREFIX:column="8">( <name PREFIX:line="432" PREFIX:column="10">pos</name> &amp; 0x80 ) != 0</expr> )</condition><then PREFIX:line="432" PREFIX:column="29">
    <expr_stmt><expr><name PREFIX:line="433" PREFIX:column="5">pos</name> = 0x077</expr>;</expr_stmt></then>
  <else PREFIX:line="434" PREFIX:column="3">else <if PREFIX:line="434" PREFIX:column="8">if <condition PREFIX:line="434" PREFIX:column="11">( <expr PREFIX:line="434" PREFIX:column="13">( <name PREFIX:line="434" PREFIX:column="15">pos</name> &amp; 0x08 ) != 0</expr> )</condition><then PREFIX:line="434" PREFIX:column="34">
  <block PREFIX:line="435" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="436" PREFIX:column="5">pos</name> &amp;= 0xf0</expr>;</expr_stmt> 
    <expr_stmt><expr><name PREFIX:line="437" PREFIX:column="5">pos</name> |= 0x07</expr>;</expr_stmt>
  }</block></then></if></else></if>
  <return PREFIX:line="439" PREFIX:column="3">return <expr><name PREFIX:line="439" PREFIX:column="10">pos</name></expr>;</return>
}</block></function>


<comment type="block" PREFIX:line="443" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="444" PREFIX:column="1">/* position transltion */</comment>
<comment type="block" PREFIX:line="445" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="446" PREFIX:column="1">/*
  there are two positions
    1. game position (gpos): BCD encoded x-y values
    2. board position (bpos): a number between 0 and 63, only used to access the board.
*/</comment>
<comment type="block" PREFIX:line="451" PREFIX:column="1">/*
  gpos:	game position value
  returns:	board position
  note:	does not do any checks
*/</comment>
<function><type><specifier PREFIX:line="456" PREFIX:column="1">static</specifier> <name PREFIX:line="456" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="456" PREFIX:column="16">cu_gpos2bpos</name><parameter_list PREFIX:line="456" PREFIX:column="28">(<param><decl><type><name PREFIX:line="456" PREFIX:column="29">uint8_t</name></type> <name PREFIX:line="456" PREFIX:column="37">gpos</name></decl></param>)</parameter_list>
<block PREFIX:line="457" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="458" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="458" PREFIX:column="11">bpos</name> <init PREFIX:line="458" PREFIX:column="16">= <expr><name PREFIX:line="458" PREFIX:column="18">gpos</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name PREFIX:line="459" PREFIX:column="3">bpos</name> &amp;= 0xf0</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="460" PREFIX:column="3">bpos</name> &gt;&gt;= 1</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="461" PREFIX:column="3">gpos</name> &amp;= 0x0f</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="462" PREFIX:column="3">bpos</name> |= <name PREFIX:line="462" PREFIX:column="11">gpos</name></expr>;</expr_stmt>
  <return PREFIX:line="463" PREFIX:column="3">return <expr><name PREFIX:line="463" PREFIX:column="10">bpos</name></expr>;</return>
}</block></function>

<cpp:define PREFIX:line="466" PREFIX:column="1">#<cpp:directive PREFIX:line="466" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="466" PREFIX:column="9">gpos_IsIllegal</name><parameter_list PREFIX:line="466" PREFIX:column="23">(<param><type><name PREFIX:line="466" PREFIX:column="24">gpos</name></type></param>)</parameter_list></cpp:macro> <cpp:value PREFIX:line="466" PREFIX:column="30">((gpos) &amp; 0x088)</cpp:value></cpp:define>


<comment type="block" PREFIX:line="469" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="470" PREFIX:column="1">/* colored piece handling */</comment>
<comment type="block" PREFIX:line="471" PREFIX:column="1">/*==============================================================*/</comment>

<cpp:define PREFIX:line="473" PREFIX:column="1">#<cpp:directive PREFIX:line="473" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="473" PREFIX:column="9">cp_IsMarked</name><parameter_list PREFIX:line="473" PREFIX:column="20">(<param><type><name PREFIX:line="473" PREFIX:column="21">cp</name></type></param>)</parameter_list></cpp:macro>  <cpp:value PREFIX:line="473" PREFIX:column="26">((cp) &amp; CP_MARK_MASK)</cpp:value></cpp:define>


<comment type="block" PREFIX:line="476" PREFIX:column="1">/*
  piece: one of PIECE_xxx
  color: COLOR_WHITE or COLOR_BLACK

  returns: A colored piece
*/</comment>
<function><type><specifier PREFIX:line="482" PREFIX:column="1">static</specifier> <name PREFIX:line="482" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="482" PREFIX:column="16">cp_Construct</name><parameter_list PREFIX:line="482" PREFIX:column="28">(<param><decl><type><name PREFIX:line="482" PREFIX:column="29">uint8_t</name></type> <name PREFIX:line="482" PREFIX:column="37">color</name></decl></param>, <param><decl><type><name PREFIX:line="482" PREFIX:column="44">uint8_t</name></type> <name PREFIX:line="482" PREFIX:column="52">piece</name></decl></param>)</parameter_list>
<block PREFIX:line="483" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="484" PREFIX:column="3">color</name> &lt;&lt;= 4</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="485" PREFIX:column="3">color</name> |= <name PREFIX:line="485" PREFIX:column="12">piece</name></expr>;</expr_stmt>
  <return PREFIX:line="486" PREFIX:column="3">return <expr><name PREFIX:line="486" PREFIX:column="10">color</name></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="489" PREFIX:column="1">/* inline is better than a macro */</comment>
<function><type><specifier PREFIX:line="490" PREFIX:column="1">static</specifier> <name PREFIX:line="490" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="490" PREFIX:column="16">cp_GetPiece</name><parameter_list PREFIX:line="490" PREFIX:column="27">(<param><decl><type><name PREFIX:line="490" PREFIX:column="28">uint8_t</name></type> <name PREFIX:line="490" PREFIX:column="36">cp</name></decl></param>)</parameter_list>
<block PREFIX:line="491" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="492" PREFIX:column="3">cp</name> &amp;= 0x0f</expr>;</expr_stmt>
  <return PREFIX:line="493" PREFIX:column="3">return <expr><name PREFIX:line="493" PREFIX:column="10">cp</name></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="496" PREFIX:column="1">/*
  we could use a macro:
  #define cp_GetColor(cp)	(((cp) &gt;&gt; 4)&amp;1)
  however, inlined functions are sometimes much better
*/</comment>
<function><type><specifier PREFIX:line="501" PREFIX:column="1">static</specifier> <name PREFIX:line="501" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="501" PREFIX:column="16">cp_GetColor</name><parameter_list PREFIX:line="501" PREFIX:column="27">(<param><decl><type><name PREFIX:line="501" PREFIX:column="28">uint8_t</name></type> <name PREFIX:line="501" PREFIX:column="36">cp</name></decl></param>)</parameter_list>
<block PREFIX:line="502" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="503" PREFIX:column="3">cp</name> &gt;&gt;= 4</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="504" PREFIX:column="3">cp</name> &amp;= 1</expr>;</expr_stmt>
  <return PREFIX:line="505" PREFIX:column="3">return <expr><name PREFIX:line="505" PREFIX:column="10">cp</name></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="508" PREFIX:column="1">/*
  pos: game position
  returns the colored piece at the given position
*/</comment>
<function><type><name PREFIX:line="512" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="512" PREFIX:column="9">cp_GetFromBoard</name><parameter_list PREFIX:line="512" PREFIX:column="24">(<param><decl><type><name PREFIX:line="512" PREFIX:column="25">uint8_t</name></type> <name PREFIX:line="512" PREFIX:column="33">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="513" PREFIX:column="1">{
  <return PREFIX:line="514" PREFIX:column="3">return <expr><name><name PREFIX:line="514" PREFIX:column="10">lrc_obj</name>.<name PREFIX:line="514" PREFIX:column="18">board</name><index PREFIX:line="514" PREFIX:column="23">[<expr><call><name PREFIX:line="514" PREFIX:column="24">cu_gpos2bpos</name><argument_list PREFIX:line="514" PREFIX:column="36">(<argument><expr><name PREFIX:line="514" PREFIX:column="37">pos</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="517" PREFIX:column="1">/*
  pos: game position
  cp: colored piece
*/</comment>
<function><type><name PREFIX:line="521" PREFIX:column="1">void</name></type> <name PREFIX:line="521" PREFIX:column="6">cp_SetOnBoard</name><parameter_list PREFIX:line="521" PREFIX:column="19">(<param><decl><type><name PREFIX:line="521" PREFIX:column="20">uint8_t</name></type> <name PREFIX:line="521" PREFIX:column="28">pos</name></decl></param>, <param><decl><type><name PREFIX:line="521" PREFIX:column="33">uint8_t</name></type> <name PREFIX:line="521" PREFIX:column="41">cp</name></decl></param>)</parameter_list>
<block PREFIX:line="522" PREFIX:column="1">{
  <comment type="block" PREFIX:line="523" PREFIX:column="3">/*printf("cp_SetOnBoard gpos:%02x cp:%02x\n", pos, cp);*/</comment>
  <expr_stmt><expr><name><name PREFIX:line="524" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="524" PREFIX:column="11">board</name><index PREFIX:line="524" PREFIX:column="16">[<expr><call><name PREFIX:line="524" PREFIX:column="17">cu_gpos2bpos</name><argument_list PREFIX:line="524" PREFIX:column="29">(<argument><expr><name PREFIX:line="524" PREFIX:column="30">pos</name></expr></argument>)</argument_list></call></expr>]</index></name> = <name PREFIX:line="524" PREFIX:column="38">cp</name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="527" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="528" PREFIX:column="1">/* global board access */</comment>
<comment type="block" PREFIX:line="529" PREFIX:column="1">/*==============================================================*/</comment>

<function><type><name PREFIX:line="531" PREFIX:column="1">void</name></type> <name PREFIX:line="531" PREFIX:column="6">cu_ClearBoard</name><parameter_list PREFIX:line="531" PREFIX:column="19">(<param><decl><type><name PREFIX:line="531" PREFIX:column="20">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="532" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="533" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="533" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <comment type="block" PREFIX:line="534" PREFIX:column="3">/* clear the board */</comment>
  <for PREFIX:line="535" PREFIX:column="3">for( <init><expr><name PREFIX:line="535" PREFIX:column="8">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="535" PREFIX:column="15">i</name> &lt; 64</expr>;</condition> <incr><expr><name PREFIX:line="535" PREFIX:column="23">i</name>++</expr></incr> )
    <expr_stmt><expr><name><name PREFIX:line="536" PREFIX:column="5">lrc_obj</name>.<name PREFIX:line="536" PREFIX:column="13">board</name><index PREFIX:line="536" PREFIX:column="18">[<expr><name PREFIX:line="536" PREFIX:column="19">i</name></expr>]</index></name> = <name PREFIX:line="536" PREFIX:column="24">PIECE_NONE</name></expr>;</expr_stmt></for>
  
  <expr_stmt><expr><name><name PREFIX:line="538" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="538" PREFIX:column="11">ply_count</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="539" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="539" PREFIX:column="11">orientation</name></name> = <name PREFIX:line="539" PREFIX:column="25">COLOR_WHITE</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name PREFIX:line="541" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="541" PREFIX:column="11">pawn_dbl_move</name><index PREFIX:line="541" PREFIX:column="24">[<expr PREFIX:line="541" PREFIX:column="25">0</expr>]</index></name> = <name PREFIX:line="541" PREFIX:column="30">ILLEGAL_POSITION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="542" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="542" PREFIX:column="11">pawn_dbl_move</name><index PREFIX:line="542" PREFIX:column="24">[<expr PREFIX:line="542" PREFIX:column="25">1</expr>]</index></name> = <name PREFIX:line="542" PREFIX:column="30">ILLEGAL_POSITION</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name PREFIX:line="544" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="544" PREFIX:column="11">castling_possible</name></name> = 0x0f</expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name PREFIX:line="546" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="546" PREFIX:column="11">is_game_end</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="547" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="547" PREFIX:column="11">lost_side_color</name></name> = 0</expr>;</expr_stmt>

  <comment type="block" PREFIX:line="549" PREFIX:column="3">/* clear half move history */</comment>
  <expr_stmt><expr><call><name PREFIX:line="550" PREFIX:column="3">cu_ClearMoveHistory</name><argument_list PREFIX:line="550" PREFIX:column="22">()</argument_list></call></expr>;</expr_stmt>

}</block></function>

<comment type="block" PREFIX:line="554" PREFIX:column="1">/*
  test setup
  white wins in one move
*/</comment>
<function><type><name PREFIX:line="558" PREFIX:column="1">void</name></type> <name PREFIX:line="558" PREFIX:column="6">chess_SetupBoardTest01</name><parameter_list PREFIX:line="558" PREFIX:column="28">(<param><decl><type><name PREFIX:line="558" PREFIX:column="29">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="559" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="560" PREFIX:column="3">cu_ClearBoard</name><argument_list PREFIX:line="560" PREFIX:column="16">()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="561" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="561" PREFIX:column="11">board</name><index PREFIX:line="561" PREFIX:column="16">[<expr PREFIX:line="561" PREFIX:column="17">7+7*8</expr>]</index></name> = <call><name PREFIX:line="561" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="561" PREFIX:column="38">(<argument><expr><name PREFIX:line="561" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="561" PREFIX:column="52">PIECE_KING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="562" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="562" PREFIX:column="11">board</name><index PREFIX:line="562" PREFIX:column="16">[<expr PREFIX:line="562" PREFIX:column="17">7+5*8</expr>]</index></name> = <call><name PREFIX:line="562" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="562" PREFIX:column="38">(<argument><expr><name PREFIX:line="562" PREFIX:column="39">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="562" PREFIX:column="52">PIECE_PAWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="563" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="563" PREFIX:column="11">board</name><index PREFIX:line="563" PREFIX:column="16">[<expr PREFIX:line="563" PREFIX:column="17">3</expr>]</index></name> = <call><name PREFIX:line="563" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="563" PREFIX:column="34">(<argument><expr><name PREFIX:line="563" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="563" PREFIX:column="48">PIECE_KING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="564" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="564" PREFIX:column="11">board</name><index PREFIX:line="564" PREFIX:column="16">[<expr PREFIX:line="564" PREFIX:column="17">0+7*8</expr>]</index></name> = <call><name PREFIX:line="564" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="564" PREFIX:column="38">(<argument><expr><name PREFIX:line="564" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="564" PREFIX:column="52">PIECE_ROOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="565" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="565" PREFIX:column="11">board</name><index PREFIX:line="565" PREFIX:column="16">[<expr PREFIX:line="565" PREFIX:column="17">6</expr>]</index></name> = <call><name PREFIX:line="565" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="565" PREFIX:column="34">(<argument><expr><name PREFIX:line="565" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="565" PREFIX:column="48">PIECE_QUEEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function> 

<comment type="block" PREFIX:line="568" PREFIX:column="1">/* setup the global board */</comment>
<function><type><name PREFIX:line="569" PREFIX:column="1">void</name></type> <name PREFIX:line="569" PREFIX:column="6">chess_SetupBoard</name><parameter_list PREFIX:line="569" PREFIX:column="22">(<param><decl><type><name PREFIX:line="569" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="570" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="571" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="571" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="572" PREFIX:column="3">register</name> <name PREFIX:line="572" PREFIX:column="12">uint8_t</name></type> <name PREFIX:line="572" PREFIX:column="20">bp</name></decl>, <decl><type ref="prev"/><name PREFIX:line="572" PREFIX:column="24">wp</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="574" PREFIX:column="3">/* clear the board */</comment>
  <expr_stmt><expr><call><name PREFIX:line="575" PREFIX:column="3">cu_ClearBoard</name><argument_list PREFIX:line="575" PREFIX:column="16">()</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="577" PREFIX:column="3">/* precronstruct pawns */</comment>
  <expr_stmt><expr><name PREFIX:line="578" PREFIX:column="3">wp</name> = <call><name PREFIX:line="578" PREFIX:column="8">cp_Construct</name><argument_list PREFIX:line="578" PREFIX:column="20">(<argument><expr><name PREFIX:line="578" PREFIX:column="21">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="578" PREFIX:column="34">PIECE_PAWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="579" PREFIX:column="3">bp</name> = <call><name PREFIX:line="579" PREFIX:column="8">cp_Construct</name><argument_list PREFIX:line="579" PREFIX:column="20">(<argument><expr><name PREFIX:line="579" PREFIX:column="21">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="579" PREFIX:column="34">PIECE_PAWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="581" PREFIX:column="3">/* setup pawn */</comment>
  <for PREFIX:line="582" PREFIX:column="3">for( <init><expr><name PREFIX:line="582" PREFIX:column="8">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="582" PREFIX:column="15">i</name> &lt; 8</expr>;</condition> <incr><expr><name PREFIX:line="582" PREFIX:column="22">i</name>++</expr></incr> )
  <block PREFIX:line="583" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="584" PREFIX:column="5">lrc_obj</name>.<name PREFIX:line="584" PREFIX:column="13">board</name><index PREFIX:line="584" PREFIX:column="18">[<expr><name PREFIX:line="584" PREFIX:column="19">i</name>+8</expr>]</index></name> = <name PREFIX:line="584" PREFIX:column="26">wp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="585" PREFIX:column="5">lrc_obj</name>.<name PREFIX:line="585" PREFIX:column="13">board</name><index PREFIX:line="585" PREFIX:column="18">[<expr><name PREFIX:line="585" PREFIX:column="19">i</name>+6*8</expr>]</index></name> = <name PREFIX:line="585" PREFIX:column="28">bp</name></expr>;</expr_stmt>
  }</block></for>
  
  <comment type="block" PREFIX:line="588" PREFIX:column="3">/* assign remaining pieces */</comment>
  
  <expr_stmt><expr><name><name PREFIX:line="590" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="590" PREFIX:column="11">board</name><index PREFIX:line="590" PREFIX:column="16">[<expr PREFIX:line="590" PREFIX:column="17">0</expr>]</index></name> = <call><name PREFIX:line="590" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="590" PREFIX:column="34">(<argument><expr><name PREFIX:line="590" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="590" PREFIX:column="48">PIECE_ROOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="591" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="591" PREFIX:column="11">board</name><index PREFIX:line="591" PREFIX:column="16">[<expr PREFIX:line="591" PREFIX:column="17">1</expr>]</index></name> = <call><name PREFIX:line="591" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="591" PREFIX:column="34">(<argument><expr><name PREFIX:line="591" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="591" PREFIX:column="48">PIECE_KNIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="592" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="592" PREFIX:column="11">board</name><index PREFIX:line="592" PREFIX:column="16">[<expr PREFIX:line="592" PREFIX:column="17">2</expr>]</index></name> = <call><name PREFIX:line="592" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="592" PREFIX:column="34">(<argument><expr><name PREFIX:line="592" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="592" PREFIX:column="48">PIECE_BISHOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="593" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="593" PREFIX:column="11">board</name><index PREFIX:line="593" PREFIX:column="16">[<expr PREFIX:line="593" PREFIX:column="17">3</expr>]</index></name> = <call><name PREFIX:line="593" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="593" PREFIX:column="34">(<argument><expr><name PREFIX:line="593" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="593" PREFIX:column="48">PIECE_QUEEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="594" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="594" PREFIX:column="11">board</name><index PREFIX:line="594" PREFIX:column="16">[<expr PREFIX:line="594" PREFIX:column="17">4</expr>]</index></name> = <call><name PREFIX:line="594" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="594" PREFIX:column="34">(<argument><expr><name PREFIX:line="594" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="594" PREFIX:column="48">PIECE_KING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="595" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="595" PREFIX:column="11">board</name><index PREFIX:line="595" PREFIX:column="16">[<expr PREFIX:line="595" PREFIX:column="17">5</expr>]</index></name> = <call><name PREFIX:line="595" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="595" PREFIX:column="34">(<argument><expr><name PREFIX:line="595" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="595" PREFIX:column="48">PIECE_BISHOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="596" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="596" PREFIX:column="11">board</name><index PREFIX:line="596" PREFIX:column="16">[<expr PREFIX:line="596" PREFIX:column="17">6</expr>]</index></name> = <call><name PREFIX:line="596" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="596" PREFIX:column="34">(<argument><expr><name PREFIX:line="596" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="596" PREFIX:column="48">PIECE_KNIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="597" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="597" PREFIX:column="11">board</name><index PREFIX:line="597" PREFIX:column="16">[<expr PREFIX:line="597" PREFIX:column="17">7</expr>]</index></name> = <call><name PREFIX:line="597" PREFIX:column="22">cp_Construct</name><argument_list PREFIX:line="597" PREFIX:column="34">(<argument><expr><name PREFIX:line="597" PREFIX:column="35">COLOR_WHITE</name></expr></argument>, <argument><expr><name PREFIX:line="597" PREFIX:column="48">PIECE_ROOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name PREFIX:line="599" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="599" PREFIX:column="11">board</name><index PREFIX:line="599" PREFIX:column="16">[<expr PREFIX:line="599" PREFIX:column="17">0+7*8</expr>]</index></name> = <call><name PREFIX:line="599" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="599" PREFIX:column="38">(<argument><expr><name PREFIX:line="599" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="599" PREFIX:column="52">PIECE_ROOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="600" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="600" PREFIX:column="11">board</name><index PREFIX:line="600" PREFIX:column="16">[<expr PREFIX:line="600" PREFIX:column="17">1+7*8</expr>]</index></name> = <call><name PREFIX:line="600" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="600" PREFIX:column="38">(<argument><expr><name PREFIX:line="600" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="600" PREFIX:column="52">PIECE_KNIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="601" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="601" PREFIX:column="11">board</name><index PREFIX:line="601" PREFIX:column="16">[<expr PREFIX:line="601" PREFIX:column="17">2+7*8</expr>]</index></name> = <call><name PREFIX:line="601" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="601" PREFIX:column="38">(<argument><expr><name PREFIX:line="601" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="601" PREFIX:column="52">PIECE_BISHOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="602" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="602" PREFIX:column="11">board</name><index PREFIX:line="602" PREFIX:column="16">[<expr PREFIX:line="602" PREFIX:column="17">3+7*8</expr>]</index></name> = <call><name PREFIX:line="602" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="602" PREFIX:column="38">(<argument><expr><name PREFIX:line="602" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="602" PREFIX:column="52">PIECE_QUEEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="603" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="603" PREFIX:column="11">board</name><index PREFIX:line="603" PREFIX:column="16">[<expr PREFIX:line="603" PREFIX:column="17">4+7*8</expr>]</index></name> = <call><name PREFIX:line="603" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="603" PREFIX:column="38">(<argument><expr><name PREFIX:line="603" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="603" PREFIX:column="52">PIECE_KING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="604" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="604" PREFIX:column="11">board</name><index PREFIX:line="604" PREFIX:column="16">[<expr PREFIX:line="604" PREFIX:column="17">5+7*8</expr>]</index></name> = <call><name PREFIX:line="604" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="604" PREFIX:column="38">(<argument><expr><name PREFIX:line="604" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="604" PREFIX:column="52">PIECE_BISHOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="605" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="605" PREFIX:column="11">board</name><index PREFIX:line="605" PREFIX:column="16">[<expr PREFIX:line="605" PREFIX:column="17">6+7*8</expr>]</index></name> = <call><name PREFIX:line="605" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="605" PREFIX:column="38">(<argument><expr><name PREFIX:line="605" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="605" PREFIX:column="52">PIECE_KNIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="606" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="606" PREFIX:column="11">board</name><index PREFIX:line="606" PREFIX:column="16">[<expr PREFIX:line="606" PREFIX:column="17">7+7*8</expr>]</index></name> = <call><name PREFIX:line="606" PREFIX:column="26">cp_Construct</name><argument_list PREFIX:line="606" PREFIX:column="38">(<argument><expr><name PREFIX:line="606" PREFIX:column="39">COLOR_BLACK</name></expr></argument>, <argument><expr><name PREFIX:line="606" PREFIX:column="52">PIECE_ROOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line" PREFIX:line="608" PREFIX:column="3">//chess_SetupBoardTest01();</comment>

}</block></function>



<comment type="block" PREFIX:line="614" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="615" PREFIX:column="1">/* checks */</comment>
<comment type="block" PREFIX:line="616" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="618" PREFIX:column="1">/*
  checks if the position is somehow illegal
*/</comment>
<function><type><name PREFIX:line="621" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="621" PREFIX:column="9">cu_IsIllegalPosition</name><parameter_list PREFIX:line="621" PREFIX:column="29">(<param><decl><type><name PREFIX:line="621" PREFIX:column="30">uint8_t</name></type> <name PREFIX:line="621" PREFIX:column="38">pos</name></decl></param>, <param><decl><type><name PREFIX:line="621" PREFIX:column="43">uint8_t</name></type> <name PREFIX:line="621" PREFIX:column="51">my_color</name></decl></param>)</parameter_list>
<block PREFIX:line="622" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="623" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="623" PREFIX:column="11">board_cp</name></decl>;</decl_stmt>
  <comment type="block" PREFIX:line="624" PREFIX:column="3">/* check, if the position is offboard */</comment>
  <if PREFIX:line="625" PREFIX:column="3">if <condition PREFIX:line="625" PREFIX:column="6">( <expr><call><name PREFIX:line="625" PREFIX:column="8">gpos_IsIllegal</name><argument_list PREFIX:line="625" PREFIX:column="22">(<argument><expr><name PREFIX:line="625" PREFIX:column="23">pos</name></expr></argument>)</argument_list></call> != 0</expr> )</condition><then PREFIX:line="625" PREFIX:column="34">
    <return PREFIX:line="626" PREFIX:column="5">return <expr PREFIX:line="626" PREFIX:column="12">1</expr>;</return></then></if>
  <comment type="block" PREFIX:line="627" PREFIX:column="3">/* get the piece from the board */</comment>
  <expr_stmt><expr><name PREFIX:line="628" PREFIX:column="3">board_cp</name> = <call><name PREFIX:line="628" PREFIX:column="14">cp_GetFromBoard</name><argument_list PREFIX:line="628" PREFIX:column="29">(<argument><expr><name PREFIX:line="628" PREFIX:column="30">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block" PREFIX:line="629" PREFIX:column="3">/* check if hit our own pieces */</comment>
  <if PREFIX:line="630" PREFIX:column="3">if <condition PREFIX:line="630" PREFIX:column="6">( <expr><name PREFIX:line="630" PREFIX:column="8">board_cp</name> != 0</expr> )</condition><then PREFIX:line="630" PREFIX:column="23"> 
    <if PREFIX:line="631" PREFIX:column="5">if <condition PREFIX:line="631" PREFIX:column="8">( <expr><call><name PREFIX:line="631" PREFIX:column="10">cp_GetColor</name><argument_list PREFIX:line="631" PREFIX:column="21">(<argument><expr><name PREFIX:line="631" PREFIX:column="22">board_cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="631" PREFIX:column="35">my_color</name></expr> )</condition><then PREFIX:line="631" PREFIX:column="45">
      <return PREFIX:line="632" PREFIX:column="7">return <expr PREFIX:line="632" PREFIX:column="14">1</expr>;</return></then></if></then></if>
  <comment type="block" PREFIX:line="633" PREFIX:column="3">/* all ok, we could go to this position */</comment>
  <return PREFIX:line="634" PREFIX:column="3">return <expr PREFIX:line="634" PREFIX:column="10">0</expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="637" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="638" PREFIX:column="1">/* evaluation procedure */</comment>
<comment type="block" PREFIX:line="639" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="641" PREFIX:column="1">/*
  basic idea is to return a value between EVAL_T_MIN and EVAL_T_MAX
*/</comment>

<comment type="block" PREFIX:line="645" PREFIX:column="1">/*
  the weight table uses the PIECE number as index:
      #define PIECE_NONE	0
      #define PIECE_PAWN 	1
      #define PIECE_KNIGHT  	2
      #define PIECE_BISHOP 	3
      #define PIECE_ROOK	4
      #define PIECE_QUEEN 	5
      #define PIECE_KING		6
  the king itself is not counted
*/</comment>
<decl_stmt><decl><type><name PREFIX:line="656" PREFIX:column="1">uint8_t</name></type> <name><name PREFIX:line="656" PREFIX:column="9">ce_piece_weight</name><index PREFIX:line="656" PREFIX:column="24">[]</index></name> <init PREFIX:line="656" PREFIX:column="27">= <expr><block PREFIX:line="656" PREFIX:column="29">{ <expr PREFIX:line="656" PREFIX:column="31">0</expr>, <expr PREFIX:line="656" PREFIX:column="34">1</expr>, <expr PREFIX:line="656" PREFIX:column="37">3</expr>, <expr PREFIX:line="656" PREFIX:column="40">3</expr>, <expr PREFIX:line="656" PREFIX:column="43">5</expr>, <expr PREFIX:line="656" PREFIX:column="46">9</expr>, <expr PREFIX:line="656" PREFIX:column="49">0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="657" PREFIX:column="1">uint8_t</name></type> <name><name PREFIX:line="657" PREFIX:column="9">ce_pos_weight</name><index PREFIX:line="657" PREFIX:column="22">[]</index></name> <init PREFIX:line="657" PREFIX:column="25">= <expr><block PREFIX:line="657" PREFIX:column="27">{ <expr PREFIX:line="657" PREFIX:column="29">0</expr>, <expr PREFIX:line="657" PREFIX:column="32">1</expr>, <expr PREFIX:line="657" PREFIX:column="35">1</expr>, <expr PREFIX:line="657" PREFIX:column="38">2</expr>, <expr PREFIX:line="657" PREFIX:column="41">2</expr>, <expr PREFIX:line="657" PREFIX:column="44">1</expr>, <expr PREFIX:line="657" PREFIX:column="47">1</expr>, <expr PREFIX:line="657" PREFIX:column="50">0</expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="block" PREFIX:line="658" PREFIX:column="1">/*
  evaluate the current situation on the global board
*/</comment>
<function><type><name PREFIX:line="661" PREFIX:column="1">eval_t</name></type> <name PREFIX:line="661" PREFIX:column="8">ce_Eval</name><parameter_list PREFIX:line="661" PREFIX:column="15">(<param><decl><type><name PREFIX:line="661" PREFIX:column="16">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="662" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="663" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="663" PREFIX:column="11">cp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="664" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="664" PREFIX:column="11">is_my_king_present</name> <init PREFIX:line="664" PREFIX:column="30">= <expr PREFIX:line="664" PREFIX:column="32">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="665" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="665" PREFIX:column="11">is_opposit_king_present</name> <init PREFIX:line="665" PREFIX:column="35">= <expr PREFIX:line="665" PREFIX:column="37">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="666" PREFIX:column="3">eval_t</name></type> <name PREFIX:line="666" PREFIX:column="10">material_my_color</name> <init PREFIX:line="666" PREFIX:column="28">= <expr PREFIX:line="666" PREFIX:column="30">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="667" PREFIX:column="3">eval_t</name></type> <name PREFIX:line="667" PREFIX:column="10">material_opposit_color</name> <init PREFIX:line="667" PREFIX:column="33">= <expr PREFIX:line="667" PREFIX:column="35">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="668" PREFIX:column="3">eval_t</name></type> <name PREFIX:line="668" PREFIX:column="10">position_my_color</name> <init PREFIX:line="668" PREFIX:column="28">= <expr PREFIX:line="668" PREFIX:column="30">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="669" PREFIX:column="3">eval_t</name></type> <name PREFIX:line="669" PREFIX:column="10">position_opposit_color</name> <init PREFIX:line="669" PREFIX:column="33">= <expr PREFIX:line="669" PREFIX:column="35">0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="670" PREFIX:column="3">eval_t</name></type> <name PREFIX:line="670" PREFIX:column="10">result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="671" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="671" PREFIX:column="11">pos</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name PREFIX:line="673" PREFIX:column="3">pos</name> = 0</expr>;</expr_stmt>
  <do PREFIX:line="674" PREFIX:column="3">do
  <block PREFIX:line="675" PREFIX:column="3">{
    <comment type="block" PREFIX:line="676" PREFIX:column="5">/* get colored piece from the board */</comment>
    <expr_stmt><expr><name PREFIX:line="677" PREFIX:column="5">cp</name> = <call><name PREFIX:line="677" PREFIX:column="10">cp_GetFromBoard</name><argument_list PREFIX:line="677" PREFIX:column="25">(<argument><expr><name PREFIX:line="677" PREFIX:column="26">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if PREFIX:line="679" PREFIX:column="5">if <condition PREFIX:line="679" PREFIX:column="8">( <expr><call><name PREFIX:line="679" PREFIX:column="10">cp_GetPiece</name><argument_list PREFIX:line="679" PREFIX:column="21">(<argument><expr><name PREFIX:line="679" PREFIX:column="22">cp</name></expr></argument>)</argument_list></call> != <name PREFIX:line="679" PREFIX:column="29">PIECE_NONE</name></expr> )</condition><then PREFIX:line="679" PREFIX:column="41">
    <block PREFIX:line="680" PREFIX:column="5">{
      <if PREFIX:line="681" PREFIX:column="7">if <condition PREFIX:line="681" PREFIX:column="10">( <expr><call><name PREFIX:line="681" PREFIX:column="12">stack_GetCurrElement</name><argument_list PREFIX:line="681" PREFIX:column="32">()</argument_list></call>-&gt;<name PREFIX:line="681" PREFIX:column="36">current_color</name> == <call><name PREFIX:line="681" PREFIX:column="53">cp_GetColor</name><argument_list PREFIX:line="681" PREFIX:column="64">(<argument><expr><name PREFIX:line="681" PREFIX:column="65">cp</name></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="681" PREFIX:column="70">
      <block PREFIX:line="682" PREFIX:column="7">{
	<comment type="block" PREFIX:line="683" PREFIX:column="9">/* this is our color */</comment>
	<comment type="block" PREFIX:line="684" PREFIX:column="9">/* check if we found our king */</comment>
	<if PREFIX:line="685" PREFIX:column="9">if <condition PREFIX:line="685" PREFIX:column="12">( <expr><call><name PREFIX:line="685" PREFIX:column="14">cp_GetPiece</name><argument_list PREFIX:line="685" PREFIX:column="25">(<argument><expr><name PREFIX:line="685" PREFIX:column="26">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="685" PREFIX:column="33">PIECE_KING</name></expr>  )</condition><then PREFIX:line="685" PREFIX:column="46">
	  <expr_stmt><expr><name PREFIX:line="686" PREFIX:column="11">is_my_king_present</name> = 1</expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name PREFIX:line="687" PREFIX:column="9">material_my_color</name> += <name><name PREFIX:line="687" PREFIX:column="30">ce_piece_weight</name><index PREFIX:line="687" PREFIX:column="45">[<expr><call><name PREFIX:line="687" PREFIX:column="46">cp_GetPiece</name><argument_list PREFIX:line="687" PREFIX:column="57">(<argument><expr><name PREFIX:line="687" PREFIX:column="58">cp</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<if PREFIX:line="688" PREFIX:column="9">if <condition PREFIX:line="688" PREFIX:column="12">( <expr><call><name PREFIX:line="688" PREFIX:column="14">cp_GetPiece</name><argument_list PREFIX:line="688" PREFIX:column="25">(<argument><expr><name PREFIX:line="688" PREFIX:column="26">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="688" PREFIX:column="33">PIECE_PAWN</name> || <call><name PREFIX:line="688" PREFIX:column="47">cp_GetPiece</name><argument_list PREFIX:line="688" PREFIX:column="58">(<argument><expr><name PREFIX:line="688" PREFIX:column="59">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="688" PREFIX:column="66">PIECE_KNIGHT</name></expr>  )</condition><then PREFIX:line="688" PREFIX:column="81">
	<block PREFIX:line="689" PREFIX:column="9">{
	  <expr_stmt><expr><name PREFIX:line="690" PREFIX:column="11">position_my_color</name> += <name><name PREFIX:line="690" PREFIX:column="32">ce_pos_weight</name><index PREFIX:line="690" PREFIX:column="45">[<expr><name PREFIX:line="690" PREFIX:column="46">pos</name>&amp;7</expr>]</index></name>*<name><name PREFIX:line="690" PREFIX:column="53">ce_pos_weight</name><index PREFIX:line="690" PREFIX:column="66">[<expr PREFIX:line="690" PREFIX:column="67">(<name PREFIX:line="690" PREFIX:column="68">pos</name>&gt;&gt;4)&amp;7</expr>]</index></name></expr>;</expr_stmt>
	}</block></then></if>
      }</block></then>
      <else PREFIX:line="693" PREFIX:column="7">else
      <block PREFIX:line="694" PREFIX:column="7">{
	<comment type="block" PREFIX:line="695" PREFIX:column="9">/* this is the opposit color */</comment>
	<if PREFIX:line="696" PREFIX:column="9">if <condition PREFIX:line="696" PREFIX:column="12">( <expr><call><name PREFIX:line="696" PREFIX:column="14">cp_GetPiece</name><argument_list PREFIX:line="696" PREFIX:column="25">(<argument><expr><name PREFIX:line="696" PREFIX:column="26">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="696" PREFIX:column="33">PIECE_KING</name></expr>  )</condition><then PREFIX:line="696" PREFIX:column="46">
	  <expr_stmt><expr><name PREFIX:line="697" PREFIX:column="11">is_opposit_king_present</name> = 1</expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name PREFIX:line="698" PREFIX:column="9">material_opposit_color</name> += <name><name PREFIX:line="698" PREFIX:column="35">ce_piece_weight</name><index PREFIX:line="698" PREFIX:column="50">[<expr><call><name PREFIX:line="698" PREFIX:column="51">cp_GetPiece</name><argument_list PREFIX:line="698" PREFIX:column="62">(<argument><expr><name PREFIX:line="698" PREFIX:column="63">cp</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<if PREFIX:line="699" PREFIX:column="9">if <condition PREFIX:line="699" PREFIX:column="12">( <expr><call><name PREFIX:line="699" PREFIX:column="14">cp_GetPiece</name><argument_list PREFIX:line="699" PREFIX:column="25">(<argument><expr><name PREFIX:line="699" PREFIX:column="26">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="699" PREFIX:column="33">PIECE_PAWN</name> || <call><name PREFIX:line="699" PREFIX:column="47">cp_GetPiece</name><argument_list PREFIX:line="699" PREFIX:column="58">(<argument><expr><name PREFIX:line="699" PREFIX:column="59">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="699" PREFIX:column="66">PIECE_KNIGHT</name></expr> )</condition><then PREFIX:line="699" PREFIX:column="80">
	<block PREFIX:line="700" PREFIX:column="9">{
	  <expr_stmt><expr><name PREFIX:line="701" PREFIX:column="11">position_opposit_color</name> += <name><name PREFIX:line="701" PREFIX:column="37">ce_pos_weight</name><index PREFIX:line="701" PREFIX:column="50">[<expr><name PREFIX:line="701" PREFIX:column="51">pos</name>&amp;7</expr>]</index></name>*<name><name PREFIX:line="701" PREFIX:column="58">ce_pos_weight</name><index PREFIX:line="701" PREFIX:column="71">[<expr PREFIX:line="701" PREFIX:column="72">(<name PREFIX:line="701" PREFIX:column="73">pos</name>&gt;&gt;4)&amp;7</expr>]</index></name></expr>;</expr_stmt>
	}</block></then></if>
      }</block></else></if>
    }</block></then></if>
    <expr_stmt><expr><name PREFIX:line="705" PREFIX:column="5">pos</name> = <call><name PREFIX:line="705" PREFIX:column="11">cu_NextPos</name><argument_list PREFIX:line="705" PREFIX:column="21">(<argument><expr><name PREFIX:line="705" PREFIX:column="22">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block> while<condition PREFIX:line="706" PREFIX:column="10">( <expr><name PREFIX:line="706" PREFIX:column="12">pos</name> != 0</expr> )</condition>;</do>

    
  <comment type="block" PREFIX:line="709" PREFIX:column="3">/* decide if we lost or won the game */</comment>
  <if PREFIX:line="710" PREFIX:column="3">if <condition PREFIX:line="710" PREFIX:column="6">( <expr><name PREFIX:line="710" PREFIX:column="8">is_my_king_present</name> == 0</expr> )</condition><then PREFIX:line="710" PREFIX:column="33">
    <return PREFIX:line="711" PREFIX:column="5">return <expr><name PREFIX:line="711" PREFIX:column="12">EVAL_T_MIN</name></expr>;</return></then></if>	<comment type="block" PREFIX:line="711" PREFIX:column="25">/*_LOST*/</comment>
  <if PREFIX:line="712" PREFIX:column="3">if <condition PREFIX:line="712" PREFIX:column="6">( <expr><name PREFIX:line="712" PREFIX:column="8">is_opposit_king_present</name> == 0</expr> )</condition><then PREFIX:line="712" PREFIX:column="38">
    <return PREFIX:line="713" PREFIX:column="5">return <expr><name PREFIX:line="713" PREFIX:column="12">EVAL_T_MAX</name></expr>;</return></then></if>	<comment type="block" PREFIX:line="713" PREFIX:column="25">/*_WIN*/</comment>
  
  <comment type="block" PREFIX:line="715" PREFIX:column="3">/* here is the evaluation function */</comment>
  
  <expr_stmt><expr><name PREFIX:line="717" PREFIX:column="3">result</name> = <name PREFIX:line="717" PREFIX:column="12">material_my_color</name> - <name PREFIX:line="717" PREFIX:column="32">material_opposit_color</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="718" PREFIX:column="3">result</name> &lt;&lt;= 3</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="719" PREFIX:column="3">result</name> += <name PREFIX:line="719" PREFIX:column="13">position_my_color</name> - <name PREFIX:line="719" PREFIX:column="33">position_opposit_color</name></expr>;</expr_stmt>
  <return PREFIX:line="720" PREFIX:column="3">return <expr><name PREFIX:line="720" PREFIX:column="10">result</name></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="723" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="724" PREFIX:column="1">/* move backup and restore */</comment>
<comment type="block" PREFIX:line="725" PREFIX:column="1">/*==============================================================*/</comment>


<comment type="block" PREFIX:line="728" PREFIX:column="1">/* this procedure must be called to keep the size as low as possible */</comment>
<comment type="block" PREFIX:line="729" PREFIX:column="1">/* if the chm_list is large enough, it could hold the complete history */</comment>
<comment type="block" PREFIX:line="730" PREFIX:column="1">/* but for an embedded controler... it is deleted for every engine search */</comment>
<function><type><name PREFIX:line="731" PREFIX:column="1">void</name></type> <name PREFIX:line="731" PREFIX:column="6">cu_ClearMoveHistory</name><parameter_list PREFIX:line="731" PREFIX:column="25">(<param><decl><type><name PREFIX:line="731" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="732" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="733" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="733" PREFIX:column="11">chm_pos</name></name> = 0</expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="736" PREFIX:column="1">void</name></type> <name PREFIX:line="736" PREFIX:column="6">cu_ReduceHistoryByFullMove</name><parameter_list PREFIX:line="736" PREFIX:column="32">(<param><decl><type><name PREFIX:line="736" PREFIX:column="33">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="737" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="738" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="738" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <while PREFIX:line="739" PREFIX:column="3">while<condition PREFIX:line="739" PREFIX:column="8">( <expr><name><name PREFIX:line="739" PREFIX:column="10">lrc_obj</name>.<name PREFIX:line="739" PREFIX:column="18">chm_pos</name></name> &gt; <name PREFIX:line="739" PREFIX:column="28">CHM_USER_SIZE</name></expr> )</condition>
  <block PREFIX:line="740" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="741" PREFIX:column="5">i</name> = 0</expr>;</expr_stmt>
    <for PREFIX:line="742" PREFIX:column="5">for(<init PREFIX:line="742" PREFIX:column="9">;</init><condition PREFIX:line="742" PREFIX:column="10">;</condition><incr/>)
    <block PREFIX:line="743" PREFIX:column="5">{
      <if PREFIX:line="744" PREFIX:column="7">if <condition PREFIX:line="744" PREFIX:column="10">( <expr><name PREFIX:line="744" PREFIX:column="12">i</name>+2 &gt;= <name><name PREFIX:line="744" PREFIX:column="19">lrc_obj</name>.<name PREFIX:line="744" PREFIX:column="27">chm_pos</name></name></expr> )</condition><then PREFIX:line="744" PREFIX:column="36">
	<break PREFIX:line="745" PREFIX:column="9">break;</break></then></if>
      <expr_stmt><expr><name><name PREFIX:line="746" PREFIX:column="7">lrc_obj</name>.<name PREFIX:line="746" PREFIX:column="15">chm_list</name><index PREFIX:line="746" PREFIX:column="23">[<expr><name PREFIX:line="746" PREFIX:column="24">i</name></expr>]</index></name> = <name><name PREFIX:line="746" PREFIX:column="29">lrc_obj</name>.<name PREFIX:line="746" PREFIX:column="37">chm_list</name><index PREFIX:line="746" PREFIX:column="45">[<expr><name PREFIX:line="746" PREFIX:column="46">i</name>+2</expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="747" PREFIX:column="7">i</name>++</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name PREFIX:line="749" PREFIX:column="5">lrc_obj</name>.<name PREFIX:line="749" PREFIX:column="13">chm_pos</name></name> -= 2</expr>;</expr_stmt>
  }</block></while>
}</block></function>

<function><type><name PREFIX:line="753" PREFIX:column="1">void</name></type> <name PREFIX:line="753" PREFIX:column="6">cu_UndoHalfMove</name><parameter_list PREFIX:line="753" PREFIX:column="21">(<param><decl><type><name PREFIX:line="753" PREFIX:column="22">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="754" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="755" PREFIX:column="3">chm_p</name></type> <name PREFIX:line="755" PREFIX:column="9">chm</name></decl>;</decl_stmt>
  
  <if PREFIX:line="757" PREFIX:column="3">if <condition PREFIX:line="757" PREFIX:column="6">( <expr><name><name PREFIX:line="757" PREFIX:column="8">lrc_obj</name>.<name PREFIX:line="757" PREFIX:column="16">chm_pos</name></name> == 0</expr> )</condition><then PREFIX:line="757" PREFIX:column="30">
    <return PREFIX:line="758" PREFIX:column="5">return;</return></then></if>
  
  <expr_stmt><expr><name><name PREFIX:line="760" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="760" PREFIX:column="11">chm_pos</name></name>--</expr>;</expr_stmt>

  <expr_stmt><expr><name PREFIX:line="762" PREFIX:column="3">chm</name> = <name><name PREFIX:line="762" PREFIX:column="9">lrc_obj</name>.<name PREFIX:line="762" PREFIX:column="17">chm_list</name></name>+<name><name PREFIX:line="762" PREFIX:column="26">lrc_obj</name>.<name PREFIX:line="762" PREFIX:column="34">chm_pos</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name PREFIX:line="764" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="764" PREFIX:column="11">pawn_dbl_move</name><index PREFIX:line="764" PREFIX:column="24">[<expr PREFIX:line="764" PREFIX:column="25">0</expr>]</index></name> = <name><name PREFIX:line="764" PREFIX:column="30">chm</name>-&gt;<name PREFIX:line="764" PREFIX:column="35">pawn_dbl_move</name><index PREFIX:line="764" PREFIX:column="48">[<expr PREFIX:line="764" PREFIX:column="49">0</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="765" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="765" PREFIX:column="11">pawn_dbl_move</name><index PREFIX:line="765" PREFIX:column="24">[<expr PREFIX:line="765" PREFIX:column="25">1</expr>]</index></name> = <name><name PREFIX:line="765" PREFIX:column="30">chm</name>-&gt;<name PREFIX:line="765" PREFIX:column="35">pawn_dbl_move</name><index PREFIX:line="765" PREFIX:column="48">[<expr PREFIX:line="765" PREFIX:column="49">1</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="766" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="766" PREFIX:column="11">castling_possible</name></name> = <name><name PREFIX:line="766" PREFIX:column="31">chm</name>-&gt;<name PREFIX:line="766" PREFIX:column="36">castling_possible</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name PREFIX:line="768" PREFIX:column="3">cp_SetOnBoard</name><argument_list PREFIX:line="768" PREFIX:column="16">(<argument><expr><name><name PREFIX:line="768" PREFIX:column="17">chm</name>-&gt;<name PREFIX:line="768" PREFIX:column="22">main_src</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="768" PREFIX:column="32">chm</name>-&gt;<name PREFIX:line="768" PREFIX:column="37">main_cp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="769" PREFIX:column="3">cp_SetOnBoard</name><argument_list PREFIX:line="769" PREFIX:column="16">(<argument><expr><name><name PREFIX:line="769" PREFIX:column="17">chm</name>-&gt;<name PREFIX:line="769" PREFIX:column="22">main_dest</name></name></expr></argument>, <argument><expr><name PREFIX:line="769" PREFIX:column="33">PIECE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if PREFIX:line="771" PREFIX:column="3">if <condition PREFIX:line="771" PREFIX:column="6">( <expr><name><name PREFIX:line="771" PREFIX:column="8">chm</name>-&gt;<name PREFIX:line="771" PREFIX:column="13">other_src</name></name> != <name PREFIX:line="771" PREFIX:column="26">ILLEGAL_POSITION</name></expr> )</condition><then PREFIX:line="771" PREFIX:column="44">
    <expr_stmt><expr><call><name PREFIX:line="772" PREFIX:column="5">cp_SetOnBoard</name><argument_list PREFIX:line="772" PREFIX:column="18">(<argument><expr><name><name PREFIX:line="772" PREFIX:column="19">chm</name>-&gt;<name PREFIX:line="772" PREFIX:column="24">other_src</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="772" PREFIX:column="35">chm</name>-&gt;<name PREFIX:line="772" PREFIX:column="40">other_cp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if PREFIX:line="773" PREFIX:column="3">if <condition PREFIX:line="773" PREFIX:column="6">( <expr><name><name PREFIX:line="773" PREFIX:column="8">chm</name>-&gt;<name PREFIX:line="773" PREFIX:column="13">other_dest</name></name> != <name PREFIX:line="773" PREFIX:column="27">ILLEGAL_POSITION</name></expr> )</condition><then PREFIX:line="773" PREFIX:column="45">
    <expr_stmt><expr><call><name PREFIX:line="774" PREFIX:column="5">cp_SetOnBoard</name><argument_list PREFIX:line="774" PREFIX:column="18">(<argument><expr><name><name PREFIX:line="774" PREFIX:column="19">chm</name>-&gt;<name PREFIX:line="774" PREFIX:column="24">other_dest</name></name></expr></argument>, <argument><expr><name PREFIX:line="774" PREFIX:column="36">PIECE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

}</block></function>

<comment type="block" PREFIX:line="778" PREFIX:column="1">/*
  assumes, that the following members of the returned chm structure are filled 
  uint8_t main_cp;		the main piece, which is moved
  uint8_t main_src;		the source position of the main piece
  uint8_t main_dest; 	the destination of the main piece
  
  uint8_t other_cp;		another piece: the captured one, the ROOK in case of castling or PIECE_NONE
  uint8_t other_src;		the delete position of other_cp. Often identical to main_dest except for e.p. and castling
  uint8_t other_dest;		only used for castling: ROOK destination pos

*/</comment>
<function><type><name PREFIX:line="789" PREFIX:column="1">chm_p</name></type> <name PREFIX:line="789" PREFIX:column="7">cu_PushHalfMove</name><parameter_list PREFIX:line="789" PREFIX:column="22">(<param><decl><type><name PREFIX:line="789" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="790" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="791" PREFIX:column="3">chm_p</name></type> <name PREFIX:line="791" PREFIX:column="9">chm</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name PREFIX:line="793" PREFIX:column="3">chm</name> = <name><name PREFIX:line="793" PREFIX:column="9">lrc_obj</name>.<name PREFIX:line="793" PREFIX:column="17">chm_list</name></name>+<name><name PREFIX:line="793" PREFIX:column="26">lrc_obj</name>.<name PREFIX:line="793" PREFIX:column="34">chm_pos</name></name></expr>;</expr_stmt>
  <if PREFIX:line="794" PREFIX:column="3">if <condition PREFIX:line="794" PREFIX:column="6">( <expr><name><name PREFIX:line="794" PREFIX:column="8">lrc_obj</name>.<name PREFIX:line="794" PREFIX:column="16">chm_pos</name></name> &lt; <name PREFIX:line="794" PREFIX:column="26">CHM_LIST_SIZE</name>-1</expr>)</condition><then PREFIX:line="794" PREFIX:column="42">
    <expr_stmt><expr><name><name PREFIX:line="795" PREFIX:column="5">lrc_obj</name>.<name PREFIX:line="795" PREFIX:column="13">chm_pos</name></name>++</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name><name PREFIX:line="797" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="797" PREFIX:column="8">pawn_dbl_move</name><index PREFIX:line="797" PREFIX:column="21">[<expr PREFIX:line="797" PREFIX:column="22">0</expr>]</index></name> = <name><name PREFIX:line="797" PREFIX:column="27">lrc_obj</name>.<name PREFIX:line="797" PREFIX:column="35">pawn_dbl_move</name><index PREFIX:line="797" PREFIX:column="48">[<expr PREFIX:line="797" PREFIX:column="49">0</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="798" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="798" PREFIX:column="8">pawn_dbl_move</name><index PREFIX:line="798" PREFIX:column="21">[<expr PREFIX:line="798" PREFIX:column="22">1</expr>]</index></name> = <name><name PREFIX:line="798" PREFIX:column="27">lrc_obj</name>.<name PREFIX:line="798" PREFIX:column="35">pawn_dbl_move</name><index PREFIX:line="798" PREFIX:column="48">[<expr PREFIX:line="798" PREFIX:column="49">1</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="799" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="799" PREFIX:column="8">castling_possible</name></name> = <name><name PREFIX:line="799" PREFIX:column="28">lrc_obj</name>.<name PREFIX:line="799" PREFIX:column="36">castling_possible</name></name></expr>;</expr_stmt>
  <return PREFIX:line="800" PREFIX:column="3">return <expr><name PREFIX:line="800" PREFIX:column="10">chm</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><name PREFIX:line="804" PREFIX:column="1">char</name></type> <name><name PREFIX:line="804" PREFIX:column="6">chess_piece_to_char</name><index PREFIX:line="804" PREFIX:column="25">[]</index></name> <init PREFIX:line="804" PREFIX:column="28">= <expr PREFIX:line="804" PREFIX:column="30">"NBRQK"</expr></init></decl>;</decl_stmt>

<comment type="block" PREFIX:line="806" PREFIX:column="1">/*
  simple moves on empty field: 	Ka1-b2
  capture moves:				Ka1xb2
  castling:						0-0 or 0-0-0
*/</comment>

<decl_stmt><decl><type><specifier PREFIX:line="812" PREFIX:column="1">static</specifier> <name PREFIX:line="812" PREFIX:column="8">void</name></type> <name PREFIX:line="812" PREFIX:column="13">cu_add_pos</name><argument_list PREFIX:line="812" PREFIX:column="23">(<argument><expr><name PREFIX:line="812" PREFIX:column="24">char</name> *<name PREFIX:line="812" PREFIX:column="30">s</name></expr></argument>, <argument><expr><name PREFIX:line="812" PREFIX:column="33">uint8_t</name> <name PREFIX:line="812" PREFIX:column="41">pos</name></expr></argument>)</argument_list> <name PREFIX:line="812" PREFIX:column="46">U8G_NOINLINE</name></decl>;</decl_stmt>

<function><type><specifier PREFIX:line="814" PREFIX:column="1">static</specifier> <name PREFIX:line="814" PREFIX:column="8">void</name></type> <name PREFIX:line="814" PREFIX:column="13">cu_add_pos</name><parameter_list PREFIX:line="814" PREFIX:column="23">(<param><decl><type><name PREFIX:line="814" PREFIX:column="24">char</name> *</type><name PREFIX:line="814" PREFIX:column="30">s</name></decl></param>, <param><decl><type><name PREFIX:line="814" PREFIX:column="33">uint8_t</name></type> <name PREFIX:line="814" PREFIX:column="41">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="815" PREFIX:column="1">{
  <expr_stmt><expr PREFIX:line="816" PREFIX:column="3">*<name PREFIX:line="816" PREFIX:column="4">s</name> = <name PREFIX:line="816" PREFIX:column="8">pos</name></expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="817" PREFIX:column="3">*<name PREFIX:line="817" PREFIX:column="4">s</name> &gt;&gt;= 4</expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="818" PREFIX:column="3">*<name PREFIX:line="818" PREFIX:column="4">s</name> += 'a'</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="819" PREFIX:column="3">s</name>++</expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="820" PREFIX:column="3">*<name PREFIX:line="820" PREFIX:column="4">s</name> = <name PREFIX:line="820" PREFIX:column="8">pos</name></expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="821" PREFIX:column="3">*<name PREFIX:line="821" PREFIX:column="4">s</name> &amp;= 15</expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="822" PREFIX:column="3">*<name PREFIX:line="822" PREFIX:column="4">s</name> += '1'</expr>;</expr_stmt>
}</block></function>

 <function><type><name PREFIX:line="825" PREFIX:column="2">char</name> *</type><name PREFIX:line="825" PREFIX:column="8">cu_GetHalfMoveStr</name><parameter_list PREFIX:line="825" PREFIX:column="25">(<param><decl><type><name PREFIX:line="825" PREFIX:column="26">uint8_t</name></type> <name PREFIX:line="825" PREFIX:column="34">idx</name></decl></param>)</parameter_list>
<block PREFIX:line="826" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="827" PREFIX:column="3">chm_p</name></type> <name PREFIX:line="827" PREFIX:column="9">chm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier PREFIX:line="828" PREFIX:column="3">static</specifier> <name PREFIX:line="828" PREFIX:column="10">char</name></type> <name><name PREFIX:line="828" PREFIX:column="15">buf</name><index PREFIX:line="828" PREFIX:column="18">[<expr PREFIX:line="828" PREFIX:column="19">7</expr>]</index></name></decl>;</decl_stmt>		<comment type="block" PREFIX:line="828" PREFIX:column="33">/*Ka1-b2*/</comment>
  <decl_stmt><decl><type><name PREFIX:line="829" PREFIX:column="3">char</name> *</type><name PREFIX:line="829" PREFIX:column="9">p</name> <init PREFIX:line="829" PREFIX:column="11">= <expr><name PREFIX:line="829" PREFIX:column="13">buf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name PREFIX:line="830" PREFIX:column="3">chm</name> = <name><name PREFIX:line="830" PREFIX:column="9">lrc_obj</name>.<name PREFIX:line="830" PREFIX:column="17">chm_list</name></name>+<name PREFIX:line="830" PREFIX:column="26">idx</name></expr>;</expr_stmt>
  
  <if PREFIX:line="832" PREFIX:column="3">if <condition PREFIX:line="832" PREFIX:column="6">( <expr><call><name PREFIX:line="832" PREFIX:column="8">cp_GetPiece</name><argument_list PREFIX:line="832" PREFIX:column="19">(<argument><expr><name><name PREFIX:line="832" PREFIX:column="20">chm</name>-&gt;<name PREFIX:line="832" PREFIX:column="25">main_cp</name></name></expr></argument>)</argument_list></call> != <name PREFIX:line="832" PREFIX:column="37">PIECE_NONE</name></expr> )</condition><then PREFIX:line="832" PREFIX:column="49">
  <block PREFIX:line="833" PREFIX:column="3">{
    <if PREFIX:line="834" PREFIX:column="5">if <condition PREFIX:line="834" PREFIX:column="8">( <expr><call><name PREFIX:line="834" PREFIX:column="10">cp_GetPiece</name><argument_list PREFIX:line="834" PREFIX:column="21">(<argument><expr><name><name PREFIX:line="834" PREFIX:column="22">chm</name>-&gt;<name PREFIX:line="834" PREFIX:column="27">main_cp</name></name></expr></argument>)</argument_list></call> &gt; <name PREFIX:line="834" PREFIX:column="38">PIECE_PAWN</name></expr> )</condition><then PREFIX:line="834" PREFIX:column="50">
    <block PREFIX:line="835" PREFIX:column="5">{
      <expr_stmt><expr PREFIX:line="836" PREFIX:column="7">*<name PREFIX:line="836" PREFIX:column="8">p</name>++ = <name><name PREFIX:line="836" PREFIX:column="14">chess_piece_to_char</name><index PREFIX:line="836" PREFIX:column="33">[<expr><call><name PREFIX:line="836" PREFIX:column="34">cp_GetPiece</name><argument_list PREFIX:line="836" PREFIX:column="45">(<argument><expr><name><name PREFIX:line="836" PREFIX:column="46">chm</name>-&gt;<name PREFIX:line="836" PREFIX:column="51">main_cp</name></name></expr></argument>)</argument_list></call>-2</expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name PREFIX:line="838" PREFIX:column="5">cu_add_pos</name><argument_list PREFIX:line="838" PREFIX:column="15">(<argument><expr><name PREFIX:line="838" PREFIX:column="16">p</name></expr></argument>, <argument><expr><name><name PREFIX:line="838" PREFIX:column="19">chm</name>-&gt;<name PREFIX:line="838" PREFIX:column="24">main_src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="839" PREFIX:column="5">p</name>+=2</expr>;</expr_stmt>
    <if PREFIX:line="840" PREFIX:column="5">if <condition PREFIX:line="840" PREFIX:column="8">( <expr><call><name PREFIX:line="840" PREFIX:column="10">cp_GetPiece</name><argument_list PREFIX:line="840" PREFIX:column="21">(<argument><expr><name><name PREFIX:line="840" PREFIX:column="22">chm</name>-&gt;<name PREFIX:line="840" PREFIX:column="27">other_cp</name></name></expr></argument>)</argument_list></call> == <name PREFIX:line="840" PREFIX:column="40">PIECE_NONE</name></expr> )</condition><then PREFIX:line="840" PREFIX:column="52">
      <expr_stmt><expr PREFIX:line="841" PREFIX:column="7">*<name PREFIX:line="841" PREFIX:column="8">p</name>++ = '-'</expr>;</expr_stmt></then>
    <else PREFIX:line="842" PREFIX:column="5">else
      <expr_stmt><expr PREFIX:line="843" PREFIX:column="7">*<name PREFIX:line="843" PREFIX:column="8">p</name>++ = 'x'</expr>;</expr_stmt></else></if>
    <expr_stmt><expr><call><name PREFIX:line="844" PREFIX:column="5">cu_add_pos</name><argument_list PREFIX:line="844" PREFIX:column="15">(<argument><expr><name PREFIX:line="844" PREFIX:column="16">p</name></expr></argument>, <argument><expr><name><name PREFIX:line="844" PREFIX:column="19">chm</name>-&gt;<name PREFIX:line="844" PREFIX:column="24">main_dest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="845" PREFIX:column="5">p</name>+=2</expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr PREFIX:line="847" PREFIX:column="3">*<name PREFIX:line="847" PREFIX:column="4">p</name> = '\0'</expr>;</expr_stmt>
  <return PREFIX:line="848" PREFIX:column="3">return <expr><name PREFIX:line="848" PREFIX:column="10">buf</name></expr>;</return>
}</block></function>





<comment type="block" PREFIX:line="855" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="856" PREFIX:column="1">/* move */</comment>
<comment type="block" PREFIX:line="857" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="859" PREFIX:column="1">/*
  Move a piece from source position to a destination on the board
  This function
    - does not perform any checking
    - however it processes "en passant" and casteling
    - backup the move and allow 1x undo
  
  2011-02-05: 
    - fill pawn_dbl_move[] for double pawn moves
	--&gt; done
    - Implement casteling 
	--&gt; done
    - en passant
	--&gt; done
    - pawn conversion/promotion
	--&gt; done
    - half-move backup 
	--&gt; done
    - cleanup everything, minimize variables
	--&gt; done
*/</comment>

<function><type><name PREFIX:line="881" PREFIX:column="1">void</name></type> <name PREFIX:line="881" PREFIX:column="6">cu_Move</name><parameter_list PREFIX:line="881" PREFIX:column="13">(<param><decl><type><name PREFIX:line="881" PREFIX:column="14">uint8_t</name></type> <name PREFIX:line="881" PREFIX:column="22">src</name></decl></param>, <param><decl><type><name PREFIX:line="881" PREFIX:column="27">uint8_t</name></type> <name PREFIX:line="881" PREFIX:column="35">dest</name></decl></param>)</parameter_list>
<block PREFIX:line="882" PREFIX:column="1">{  
  <comment type="block" PREFIX:line="883" PREFIX:column="3">/* start backup structure */</comment>
  <decl_stmt><decl><type><name PREFIX:line="884" PREFIX:column="3">chm_p</name></type> <name PREFIX:line="884" PREFIX:column="9">chm</name> <init PREFIX:line="884" PREFIX:column="13">= <expr><call><name PREFIX:line="884" PREFIX:column="15">cu_PushHalfMove</name><argument_list PREFIX:line="884" PREFIX:column="30">()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" PREFIX:line="886" PREFIX:column="3">/* these are the values from the board at the positions, provided as arguments to this function */</comment>
  <decl_stmt><decl><type><name PREFIX:line="887" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="887" PREFIX:column="11">cp_src</name></decl>, <decl><type ref="prev"/><name PREFIX:line="887" PREFIX:column="19">cp_dest</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="889" PREFIX:column="3">/* Maybe a second position is cleared and one additional location is set */</comment>
  <decl_stmt><decl><type><name PREFIX:line="890" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="890" PREFIX:column="11">clr_pos2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="891" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="891" PREFIX:column="11">set_pos2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="892" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="892" PREFIX:column="11">set_cp2</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="894" PREFIX:column="3">/* get values from board */</comment>
  <expr_stmt><expr><name PREFIX:line="895" PREFIX:column="3">cp_src</name> = <call><name PREFIX:line="895" PREFIX:column="12">cp_GetFromBoard</name><argument_list PREFIX:line="895" PREFIX:column="27">(<argument><expr><name PREFIX:line="895" PREFIX:column="28">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="896" PREFIX:column="3">cp_dest</name> = <call><name PREFIX:line="896" PREFIX:column="13">cp_GetFromBoard</name><argument_list PREFIX:line="896" PREFIX:column="28">(<argument><expr><name PREFIX:line="896" PREFIX:column="29">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" PREFIX:line="898" PREFIX:column="3">/* fill backup structure */</comment>
  
  <expr_stmt><expr><name><name PREFIX:line="900" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="900" PREFIX:column="8">main_cp</name></name> = <name PREFIX:line="900" PREFIX:column="18">cp_src</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="901" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="901" PREFIX:column="8">main_src</name></name> = <name PREFIX:line="901" PREFIX:column="19">src</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="902" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="902" PREFIX:column="8">main_dest</name></name> = <name PREFIX:line="902" PREFIX:column="20">dest</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name PREFIX:line="904" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="904" PREFIX:column="8">other_cp</name></name> = <name PREFIX:line="904" PREFIX:column="19">cp_dest</name></expr>;</expr_stmt>		<comment type="block" PREFIX:line="904" PREFIX:column="41">/* prepace capture backup */</comment>
  <expr_stmt><expr><name><name PREFIX:line="905" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="905" PREFIX:column="8">other_src</name></name> = <name PREFIX:line="905" PREFIX:column="20">dest</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="906" PREFIX:column="3">chm</name>-&gt;<name PREFIX:line="906" PREFIX:column="8">other_dest</name></name> = <name PREFIX:line="906" PREFIX:column="21">ILLEGAL_POSITION</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="908" PREFIX:column="3">/* setup results as far as possible with some suitable values */</comment>
  
  <expr_stmt><expr><name PREFIX:line="910" PREFIX:column="3">clr_pos2</name> = <name PREFIX:line="910" PREFIX:column="14">ILLEGAL_POSITION</name></expr>;</expr_stmt>	<comment type="block" PREFIX:line="910" PREFIX:column="33">/* for en passant and castling, two positions might be cleared */</comment>
  <expr_stmt><expr><name PREFIX:line="911" PREFIX:column="3">set_pos2</name> = <name PREFIX:line="911" PREFIX:column="14">ILLEGAL_POSITION</name></expr>;</expr_stmt>	<comment type="block" PREFIX:line="911" PREFIX:column="33">/* only used for castling */</comment>
  <expr_stmt><expr><name PREFIX:line="912" PREFIX:column="3">set_cp2</name> = <name PREFIX:line="912" PREFIX:column="13">PIECE_NONE</name></expr>;</expr_stmt>			<comment type="block" PREFIX:line="912" PREFIX:column="41">/* ROOK for castling */</comment>
  
  <comment type="block" PREFIX:line="914" PREFIX:column="3">/* check for PAWN */</comment>
  <if PREFIX:line="915" PREFIX:column="3">if <condition PREFIX:line="915" PREFIX:column="6">( <expr><call><name PREFIX:line="915" PREFIX:column="8">cp_GetPiece</name><argument_list PREFIX:line="915" PREFIX:column="19">(<argument><expr><name PREFIX:line="915" PREFIX:column="20">cp_src</name></expr></argument>)</argument_list></call> == <name PREFIX:line="915" PREFIX:column="31">PIECE_PAWN</name></expr> )</condition><then PREFIX:line="915" PREFIX:column="43">
  <block PREFIX:line="916" PREFIX:column="3">{
    
    <comment type="block" PREFIX:line="918" PREFIX:column="5">/* double step: is the distance 2 rows */</comment>
    <if PREFIX:line="919" PREFIX:column="5">if <condition PREFIX:line="919" PREFIX:column="8">( <expr PREFIX:line="919" PREFIX:column="10">(<name PREFIX:line="919" PREFIX:column="11">src</name> - <name PREFIX:line="919" PREFIX:column="17">dest</name> == 32) || ( <name PREFIX:line="919" PREFIX:column="34">dest</name> - <name PREFIX:line="919" PREFIX:column="41">src</name> == 32 )</expr> )</condition><then PREFIX:line="919" PREFIX:column="54">
    <block PREFIX:line="920" PREFIX:column="5">{
      <comment type="block" PREFIX:line="921" PREFIX:column="7">/* remember the destination position */</comment>
      <expr_stmt><expr><name><name PREFIX:line="922" PREFIX:column="7">lrc_obj</name>.<name PREFIX:line="922" PREFIX:column="15">pawn_dbl_move</name><index PREFIX:line="922" PREFIX:column="28">[<expr><call><name PREFIX:line="922" PREFIX:column="29">cp_GetColor</name><argument_list PREFIX:line="922" PREFIX:column="40">(<argument><expr><name PREFIX:line="922" PREFIX:column="41">cp_src</name></expr></argument>)</argument_list></call></expr>]</index></name> = <name PREFIX:line="922" PREFIX:column="52">dest</name></expr>;</expr_stmt>
    }</block></then>
    
    <comment type="block" PREFIX:line="925" PREFIX:column="5">/* check if the PAWN is able to promote */</comment>
    <else PREFIX:line="926" PREFIX:column="5">else <if PREFIX:line="926" PREFIX:column="10">if <condition PREFIX:line="926" PREFIX:column="13">( <expr PREFIX:line="926" PREFIX:column="15">(<name PREFIX:line="926" PREFIX:column="16">dest</name>&gt;&gt;4) == 0 || (<name PREFIX:line="926" PREFIX:column="34">dest</name>&gt;&gt;4) == 7</expr> )</condition><then PREFIX:line="926" PREFIX:column="49">
    <block PREFIX:line="927" PREFIX:column="5">{
      <comment type="block" PREFIX:line="928" PREFIX:column="7">/* do simple "queening" */</comment>
      <expr_stmt><expr><name PREFIX:line="929" PREFIX:column="7">cp_src</name> &amp;= ~<name PREFIX:line="929" PREFIX:column="18">PIECE_PAWN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="930" PREFIX:column="7">cp_src</name> |= <name PREFIX:line="930" PREFIX:column="17">PIECE_QUEEN</name></expr>;</expr_stmt>
    }</block></then>
    
    <comment type="block" PREFIX:line="933" PREFIX:column="5">/* is it en passant capture? */</comment>
    <comment type="block" PREFIX:line="934" PREFIX:column="5">/* check for side move */</comment>
    <else PREFIX:line="935" PREFIX:column="5">else <if PREFIX:line="935" PREFIX:column="10">if <condition PREFIX:line="935" PREFIX:column="13">( <expr PREFIX:line="935" PREFIX:column="15">((<name PREFIX:line="935" PREFIX:column="17">src</name> + <name PREFIX:line="935" PREFIX:column="23">dest</name>) &amp; 1) != 0</expr> )</condition><then PREFIX:line="935" PREFIX:column="40">
    <block PREFIX:line="936" PREFIX:column="5">{
      <comment type="block" PREFIX:line="937" PREFIX:column="7">/* check, if target field is empty */</comment>
      <if PREFIX:line="938" PREFIX:column="7">if <condition PREFIX:line="938" PREFIX:column="10">(  <expr><call><name PREFIX:line="938" PREFIX:column="13">cp_GetPiece</name><argument_list PREFIX:line="938" PREFIX:column="24">(<argument><expr><name PREFIX:line="938" PREFIX:column="25">cp_dest</name></expr></argument>)</argument_list></call> == <name PREFIX:line="938" PREFIX:column="37">PIECE_NONE</name></expr> )</condition><then PREFIX:line="938" PREFIX:column="49">
      <block PREFIX:line="939" PREFIX:column="7">{
	<comment type="block" PREFIX:line="940" PREFIX:column="9">/* this is en passant */</comment>
	<comment type="block" PREFIX:line="941" PREFIX:column="9">/* no further checking required, because legal moves are assumed here */</comment>
	<comment type="block" PREFIX:line="942" PREFIX:column="9">/* however... the captured pawn position must be valid */</comment>
	<expr_stmt><expr><name PREFIX:line="943" PREFIX:column="9">clr_pos2</name> = <name><name PREFIX:line="943" PREFIX:column="20">lrc_obj</name>.<name PREFIX:line="943" PREFIX:column="28">pawn_dbl_move</name><index PREFIX:line="943" PREFIX:column="41">[<expr><call><name PREFIX:line="943" PREFIX:column="42">cp_GetColor</name><argument_list PREFIX:line="943" PREFIX:column="53">(<argument><expr><name PREFIX:line="943" PREFIX:column="54">cp_src</name></expr></argument>)</argument_list></call> ^ 1</expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="944" PREFIX:column="9">chm</name>-&gt;<name PREFIX:line="944" PREFIX:column="14">other_src</name></name> = <name PREFIX:line="944" PREFIX:column="26">clr_pos2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="945" PREFIX:column="9">chm</name>-&gt;<name PREFIX:line="945" PREFIX:column="14">other_cp</name></name> = <call><name PREFIX:line="945" PREFIX:column="25">cp_GetFromBoard</name><argument_list PREFIX:line="945" PREFIX:column="40">(<argument><expr><name PREFIX:line="945" PREFIX:column="41">clr_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if></else></if></else></if>    
  }</block></then>
  
  <comment type="block" PREFIX:line="950" PREFIX:column="3">/* check for the KING */</comment>
  <else PREFIX:line="951" PREFIX:column="3">else <if PREFIX:line="951" PREFIX:column="8">if <condition PREFIX:line="951" PREFIX:column="11">( <expr><call><name PREFIX:line="951" PREFIX:column="13">cp_GetPiece</name><argument_list PREFIX:line="951" PREFIX:column="24">(<argument><expr><name PREFIX:line="951" PREFIX:column="25">cp_src</name></expr></argument>)</argument_list></call> == <name PREFIX:line="951" PREFIX:column="36">PIECE_KING</name></expr> )</condition><then PREFIX:line="951" PREFIX:column="48">
  <block PREFIX:line="952" PREFIX:column="3">{
    <comment type="block" PREFIX:line="953" PREFIX:column="5">/* disallow castling, if the KING has moved */</comment>
    <if PREFIX:line="954" PREFIX:column="5">if <condition PREFIX:line="954" PREFIX:column="8">( <expr><call><name PREFIX:line="954" PREFIX:column="10">cp_GetColor</name><argument_list PREFIX:line="954" PREFIX:column="21">(<argument><expr><name PREFIX:line="954" PREFIX:column="22">cp_src</name></expr></argument>)</argument_list></call> == <name PREFIX:line="954" PREFIX:column="33">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="954" PREFIX:column="46">
    <block PREFIX:line="955" PREFIX:column="5">{
      <comment type="block" PREFIX:line="956" PREFIX:column="7">/* if white KING has moved, disallow castling for white */</comment>
      <expr_stmt><expr><name><name PREFIX:line="957" PREFIX:column="7">lrc_obj</name>.<name PREFIX:line="957" PREFIX:column="15">castling_possible</name></name> &amp;= 0x0c</expr>;</expr_stmt>
    }</block></then>
    <else PREFIX:line="959" PREFIX:column="5">else
    <block PREFIX:line="960" PREFIX:column="5">{
      <comment type="block" PREFIX:line="961" PREFIX:column="7">/* if black KING has moved, disallow castling for black */</comment>
      <expr_stmt><expr><name><name PREFIX:line="962" PREFIX:column="7">lrc_obj</name>.<name PREFIX:line="962" PREFIX:column="15">castling_possible</name></name> &amp;= 0x03</expr>;</expr_stmt>
    }</block></else></if>
    
    <comment type="block" PREFIX:line="965" PREFIX:column="5">/* has it been castling to the left? */</comment>
    <if PREFIX:line="966" PREFIX:column="5">if <condition PREFIX:line="966" PREFIX:column="8">( <expr><name PREFIX:line="966" PREFIX:column="10">src</name> - <name PREFIX:line="966" PREFIX:column="16">dest</name> == 2</expr> )</condition><then PREFIX:line="966" PREFIX:column="27">
    <block PREFIX:line="967" PREFIX:column="5">{
      <comment type="block" PREFIX:line="968" PREFIX:column="7">/* let the ROOK move to pos2 */</comment>
      <expr_stmt><expr><name PREFIX:line="969" PREFIX:column="7">set_pos2</name> = <name PREFIX:line="969" PREFIX:column="18">src</name>-1</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="970" PREFIX:column="7">set_cp2</name> = <call><name PREFIX:line="970" PREFIX:column="17">cp_GetFromBoard</name><argument_list PREFIX:line="970" PREFIX:column="32">(<argument><expr><name PREFIX:line="970" PREFIX:column="33">src</name>-4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block" PREFIX:line="972" PREFIX:column="7">/* the ROOK must be cleared from the original position */</comment>
      <expr_stmt><expr><name PREFIX:line="973" PREFIX:column="7">clr_pos2</name> = <name PREFIX:line="973" PREFIX:column="18">src</name>-4</expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name PREFIX:line="975" PREFIX:column="7">chm</name>-&gt;<name PREFIX:line="975" PREFIX:column="12">other_cp</name></name> = <name PREFIX:line="975" PREFIX:column="23">set_cp2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="976" PREFIX:column="7">chm</name>-&gt;<name PREFIX:line="976" PREFIX:column="12">other_src</name></name> = <name PREFIX:line="976" PREFIX:column="24">clr_pos2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="977" PREFIX:column="7">chm</name>-&gt;<name PREFIX:line="977" PREFIX:column="12">other_dest</name></name> = <name PREFIX:line="977" PREFIX:column="25">set_pos2</name></expr>;</expr_stmt>
    }</block></then>
    
    <comment type="block" PREFIX:line="980" PREFIX:column="5">/* has it been castling to the right? */</comment>
    <else PREFIX:line="981" PREFIX:column="5">else <if PREFIX:line="981" PREFIX:column="10">if <condition PREFIX:line="981" PREFIX:column="13">( <expr><name PREFIX:line="981" PREFIX:column="15">dest</name> - <name PREFIX:line="981" PREFIX:column="22">src</name> == 2</expr> )</condition><then PREFIX:line="981" PREFIX:column="32">
    <block PREFIX:line="982" PREFIX:column="5">{
      <comment type="block" PREFIX:line="983" PREFIX:column="7">/* let the ROOK move to pos2 */</comment>
      <expr_stmt><expr><name PREFIX:line="984" PREFIX:column="7">set_pos2</name> = <name PREFIX:line="984" PREFIX:column="18">src</name>+1</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="985" PREFIX:column="7">set_cp2</name> = <call><name PREFIX:line="985" PREFIX:column="17">cp_GetFromBoard</name><argument_list PREFIX:line="985" PREFIX:column="32">(<argument><expr><name PREFIX:line="985" PREFIX:column="33">src</name>+3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block" PREFIX:line="987" PREFIX:column="7">/* the ROOK must be cleared from the original position */</comment>
      <expr_stmt><expr><name PREFIX:line="988" PREFIX:column="7">clr_pos2</name> = <name PREFIX:line="988" PREFIX:column="18">src</name>+3</expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name PREFIX:line="990" PREFIX:column="7">chm</name>-&gt;<name PREFIX:line="990" PREFIX:column="12">other_cp</name></name> = <name PREFIX:line="990" PREFIX:column="23">set_cp2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="991" PREFIX:column="7">chm</name>-&gt;<name PREFIX:line="991" PREFIX:column="12">other_src</name></name> = <name PREFIX:line="991" PREFIX:column="24">clr_pos2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="992" PREFIX:column="7">chm</name>-&gt;<name PREFIX:line="992" PREFIX:column="12">other_dest</name></name> = <name PREFIX:line="992" PREFIX:column="25">set_pos2</name></expr>;</expr_stmt>
      
    }</block></then></if></else></if>
    
  }</block></then>
  
  <comment type="block" PREFIX:line="998" PREFIX:column="3">/* check for the ROOK */</comment>
  <else PREFIX:line="999" PREFIX:column="3">else <if PREFIX:line="999" PREFIX:column="8">if <condition PREFIX:line="999" PREFIX:column="11">( <expr><call><name PREFIX:line="999" PREFIX:column="13">cp_GetPiece</name><argument_list PREFIX:line="999" PREFIX:column="24">(<argument><expr><name PREFIX:line="999" PREFIX:column="25">cp_src</name></expr></argument>)</argument_list></call> == <name PREFIX:line="999" PREFIX:column="36">PIECE_ROOK</name></expr> )</condition><then PREFIX:line="999" PREFIX:column="48">
  <block PREFIX:line="1000" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1001" PREFIX:column="5">/* disallow white left castling */</comment>
    <if PREFIX:line="1002" PREFIX:column="5">if <condition PREFIX:line="1002" PREFIX:column="8">( <expr><name PREFIX:line="1002" PREFIX:column="10">src</name> == 0x00</expr> )</condition><then PREFIX:line="1002" PREFIX:column="23">
      <expr_stmt><expr><name><name PREFIX:line="1003" PREFIX:column="7">lrc_obj</name>.<name PREFIX:line="1003" PREFIX:column="15">castling_possible</name></name> &amp;= ~0x01</expr>;</expr_stmt></then></if>
    <comment type="block" PREFIX:line="1004" PREFIX:column="5">/* disallow white right castling */</comment>
    <if PREFIX:line="1005" PREFIX:column="5">if <condition PREFIX:line="1005" PREFIX:column="8">( <expr><name PREFIX:line="1005" PREFIX:column="10">src</name> == 0x07</expr> )</condition><then PREFIX:line="1005" PREFIX:column="23">
      <expr_stmt><expr><name><name PREFIX:line="1006" PREFIX:column="7">lrc_obj</name>.<name PREFIX:line="1006" PREFIX:column="15">castling_possible</name></name> &amp;= ~0x02</expr>;</expr_stmt></then></if>
    <comment type="block" PREFIX:line="1007" PREFIX:column="5">/* disallow black left castling */</comment>
    <if PREFIX:line="1008" PREFIX:column="5">if <condition PREFIX:line="1008" PREFIX:column="8">( <expr><name PREFIX:line="1008" PREFIX:column="10">src</name> == 0x70</expr> )</condition><then PREFIX:line="1008" PREFIX:column="23">
      <expr_stmt><expr><name><name PREFIX:line="1009" PREFIX:column="7">lrc_obj</name>.<name PREFIX:line="1009" PREFIX:column="15">castling_possible</name></name> &amp;= ~0x04</expr>;</expr_stmt></then></if>
    <comment type="block" PREFIX:line="1010" PREFIX:column="5">/* disallow black right castling */</comment>
    <if PREFIX:line="1011" PREFIX:column="5">if <condition PREFIX:line="1011" PREFIX:column="8">( <expr><name PREFIX:line="1011" PREFIX:column="10">src</name> == 0x77</expr> )</condition><then PREFIX:line="1011" PREFIX:column="23">
      <expr_stmt><expr><name><name PREFIX:line="1012" PREFIX:column="7">lrc_obj</name>.<name PREFIX:line="1012" PREFIX:column="15">castling_possible</name></name> &amp;= ~0x08</expr>;</expr_stmt></then></if>
  }</block></then></if></else></if></else></if>
  
  
  <comment type="block" PREFIX:line="1016" PREFIX:column="3">/* apply new board situation */</comment>
  
  <expr_stmt><expr><call><name PREFIX:line="1018" PREFIX:column="3">cp_SetOnBoard</name><argument_list PREFIX:line="1018" PREFIX:column="16">(<argument><expr><name PREFIX:line="1018" PREFIX:column="17">dest</name></expr></argument>, <argument><expr><name PREFIX:line="1018" PREFIX:column="23">cp_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if PREFIX:line="1020" PREFIX:column="3">if <condition PREFIX:line="1020" PREFIX:column="6">( <expr><name PREFIX:line="1020" PREFIX:column="8">set_pos2</name> != <name PREFIX:line="1020" PREFIX:column="20">ILLEGAL_POSITION</name></expr> )</condition><then PREFIX:line="1020" PREFIX:column="38">
    <expr_stmt><expr><call><name PREFIX:line="1021" PREFIX:column="5">cp_SetOnBoard</name><argument_list PREFIX:line="1021" PREFIX:column="18">(<argument><expr><name PREFIX:line="1021" PREFIX:column="19">set_pos2</name></expr></argument>, <argument><expr><name PREFIX:line="1021" PREFIX:column="29">set_cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  
  <expr_stmt><expr><call><name PREFIX:line="1023" PREFIX:column="3">cp_SetOnBoard</name><argument_list PREFIX:line="1023" PREFIX:column="16">(<argument><expr><name PREFIX:line="1023" PREFIX:column="17">src</name></expr></argument>, <argument><expr><name PREFIX:line="1023" PREFIX:column="22">PIECE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if PREFIX:line="1025" PREFIX:column="3">if <condition PREFIX:line="1025" PREFIX:column="6">( <expr><name PREFIX:line="1025" PREFIX:column="8">clr_pos2</name> != <name PREFIX:line="1025" PREFIX:column="20">ILLEGAL_POSITION</name></expr> )</condition><then PREFIX:line="1025" PREFIX:column="38">
    <expr_stmt><expr><call><name PREFIX:line="1026" PREFIX:column="5">cp_SetOnBoard</name><argument_list PREFIX:line="1026" PREFIX:column="18">(<argument><expr><name PREFIX:line="1026" PREFIX:column="19">clr_pos2</name></expr></argument>, <argument><expr><name PREFIX:line="1026" PREFIX:column="29">PIECE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  
  
}</block></function>

<comment type="block" PREFIX:line="1031" PREFIX:column="1">/*
  this subprocedure decides for evaluation of the current board situation or further (deeper) investigation
  Argument pos is the new target position if the current piece 

*/</comment>
<function><type><name PREFIX:line="1036" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1036" PREFIX:column="9">ce_LoopRecur</name><parameter_list PREFIX:line="1036" PREFIX:column="21">(<param><decl><type><name PREFIX:line="1036" PREFIX:column="22">uint8_t</name></type> <name PREFIX:line="1036" PREFIX:column="30">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="1037" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1038" PREFIX:column="3">eval_t</name></type> <name PREFIX:line="1038" PREFIX:column="10">eval</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1040" PREFIX:column="3">/* 1. check if target position is occupied by the same player (my_color) */</comment>
  <comment type="block" PREFIX:line="1041" PREFIX:column="3">/*     of if pos is somehow illegal or not valid */</comment>
  <if PREFIX:line="1042" PREFIX:column="3">if <condition PREFIX:line="1042" PREFIX:column="6">( <expr><call><name PREFIX:line="1042" PREFIX:column="8">cu_IsIllegalPosition</name><argument_list PREFIX:line="1042" PREFIX:column="28">(<argument><expr><name PREFIX:line="1042" PREFIX:column="29">pos</name></expr></argument>, <argument><expr><call><name PREFIX:line="1042" PREFIX:column="34">stack_GetCurrElement</name><argument_list PREFIX:line="1042" PREFIX:column="54">()</argument_list></call>-&gt;<name PREFIX:line="1042" PREFIX:column="58">current_color</name></expr></argument>)</argument_list></call> != 0</expr> )</condition><then PREFIX:line="1042" PREFIX:column="79">
    <return PREFIX:line="1043" PREFIX:column="5">return <expr PREFIX:line="1043" PREFIX:column="12">0</expr>;</return></then></if>

  <comment type="block" PREFIX:line="1045" PREFIX:column="3">/* 2. move piece to the specified position, capture opponent piece if required */</comment>
  <expr_stmt><expr><call><name PREFIX:line="1046" PREFIX:column="3">cu_Move</name><argument_list PREFIX:line="1046" PREFIX:column="10">(<argument><expr><call><name PREFIX:line="1046" PREFIX:column="11">stack_GetCurrElement</name><argument_list PREFIX:line="1046" PREFIX:column="31">()</argument_list></call>-&gt;<name PREFIX:line="1046" PREFIX:column="35">current_pos</name></expr></argument>, <argument><expr><name PREFIX:line="1046" PREFIX:column="48">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  
  <comment type="block" PREFIX:line="1049" PREFIX:column="3">/* 3. */</comment>
  <comment type="block" PREFIX:line="1050" PREFIX:column="3">/* if depth reached: evaluate */</comment>
  <comment type="block" PREFIX:line="1051" PREFIX:column="3">/* else: go down next level */</comment>
  <comment type="block" PREFIX:line="1052" PREFIX:column="3">/* no eval if there had been any valid half-moves, so the default value (MIN) will be returned. */</comment>
  <if PREFIX:line="1053" PREFIX:column="3">if <condition PREFIX:line="1053" PREFIX:column="6">( <expr><call><name PREFIX:line="1053" PREFIX:column="8">stack_Push</name><argument_list PREFIX:line="1053" PREFIX:column="18">(<argument><expr><call><name PREFIX:line="1053" PREFIX:column="19">stack_GetCurrElement</name><argument_list PREFIX:line="1053" PREFIX:column="39">()</argument_list></call>-&gt;<name PREFIX:line="1053" PREFIX:column="43">current_color</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="1053" PREFIX:column="64">
  <block PREFIX:line="1054" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="1055" PREFIX:column="5">eval</name> = <call><name PREFIX:line="1055" PREFIX:column="12">ce_Eval</name><argument_list PREFIX:line="1055" PREFIX:column="19">()</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="1057" PREFIX:column="3">else
  <block PREFIX:line="1058" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1059" PREFIX:column="5">/* init the element, which has been pushed */</comment>
    <expr_stmt><expr><call><name PREFIX:line="1060" PREFIX:column="5">stack_InitCurrElement</name><argument_list PREFIX:line="1060" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" PREFIX:line="1061" PREFIX:column="5">/* start over with ntext level */</comment>
    <expr_stmt><expr><call><name PREFIX:line="1062" PREFIX:column="5">ce_LoopPieces</name><argument_list PREFIX:line="1062" PREFIX:column="18">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" PREFIX:line="1063" PREFIX:column="5">/* get the best move from opponents view, so invert the result */</comment>
    <expr_stmt><expr><name PREFIX:line="1064" PREFIX:column="5">eval</name> = -<call><name PREFIX:line="1064" PREFIX:column="13">stack_GetCurrElement</name><argument_list PREFIX:line="1064" PREFIX:column="33">()</argument_list></call>-&gt;<name PREFIX:line="1064" PREFIX:column="37">best_eval</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name PREFIX:line="1065" PREFIX:column="5">stack_Pop</name><argument_list PREFIX:line="1065" PREFIX:column="14">()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  
  <comment type="block" PREFIX:line="1068" PREFIX:column="3">/* 4. store result */</comment>
  <expr_stmt><expr><call><name PREFIX:line="1069" PREFIX:column="3">stack_SetMove</name><argument_list PREFIX:line="1069" PREFIX:column="16">(<argument><expr><name PREFIX:line="1069" PREFIX:column="17">eval</name></expr></argument>, <argument><expr><name PREFIX:line="1069" PREFIX:column="23">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1071" PREFIX:column="3">/* 5. undo the move */</comment>
  <expr_stmt><expr><call><name PREFIX:line="1072" PREFIX:column="3">cu_UndoHalfMove</name><argument_list PREFIX:line="1072" PREFIX:column="18">()</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1074" PREFIX:column="3">/* 6. check special modes */</comment>
  <comment type="block" PREFIX:line="1075" PREFIX:column="3">/* the purpose of these checks is to mark special pieces and positions on the board */</comment>
  <comment type="block" PREFIX:line="1076" PREFIX:column="3">/* these marks can be checked by the user interface to highlight special positions */</comment>
  <if PREFIX:line="1077" PREFIX:column="3">if <condition PREFIX:line="1077" PREFIX:column="6">( <expr><name><name PREFIX:line="1077" PREFIX:column="8">lrc_obj</name>.<name PREFIX:line="1077" PREFIX:column="16">check_mode</name></name> != 0</expr> )</condition><then PREFIX:line="1077" PREFIX:column="33">
  <block PREFIX:line="1078" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="1079" PREFIX:column="5">stack_element_p</name></type> <name PREFIX:line="1079" PREFIX:column="21">e</name> <init PREFIX:line="1079" PREFIX:column="23">= <expr><call><name PREFIX:line="1079" PREFIX:column="25">stack_GetCurrElement</name><argument_list PREFIX:line="1079" PREFIX:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if PREFIX:line="1080" PREFIX:column="5">if <condition PREFIX:line="1080" PREFIX:column="8">( <expr><name><name PREFIX:line="1080" PREFIX:column="10">lrc_obj</name>.<name PREFIX:line="1080" PREFIX:column="18">check_mode</name></name> == <name PREFIX:line="1080" PREFIX:column="32">CHECK_MODE_MOVEABLE</name></expr> )</condition><then PREFIX:line="1080" PREFIX:column="53">
    <block PREFIX:line="1081" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="1082" PREFIX:column="7">cp_SetOnBoard</name><argument_list PREFIX:line="1082" PREFIX:column="20">(<argument><expr><name><name PREFIX:line="1082" PREFIX:column="21">e</name>-&gt;<name PREFIX:line="1082" PREFIX:column="24">current_pos</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="1082" PREFIX:column="37">e</name>-&gt;<name PREFIX:line="1082" PREFIX:column="40">current_cp</name></name> | <name PREFIX:line="1082" PREFIX:column="53">CP_MARK_MASK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else PREFIX:line="1084" PREFIX:column="5">else <if PREFIX:line="1084" PREFIX:column="10">if <condition PREFIX:line="1084" PREFIX:column="13">( <expr><name><name PREFIX:line="1084" PREFIX:column="15">lrc_obj</name>.<name PREFIX:line="1084" PREFIX:column="23">check_mode</name></name> == <name PREFIX:line="1084" PREFIX:column="37">CHECK_MODE_TARGET_MOVE</name></expr> )</condition><then PREFIX:line="1084" PREFIX:column="61">
    <block PREFIX:line="1085" PREFIX:column="5">{
      <if PREFIX:line="1086" PREFIX:column="7">if <condition PREFIX:line="1086" PREFIX:column="10">( <expr><name><name PREFIX:line="1086" PREFIX:column="12">e</name>-&gt;<name PREFIX:line="1086" PREFIX:column="15">current_pos</name></name> == <name><name PREFIX:line="1086" PREFIX:column="30">lrc_obj</name>.<name PREFIX:line="1086" PREFIX:column="38">check_src_pos</name></name></expr> )</condition><then PREFIX:line="1086" PREFIX:column="53">
      <block PREFIX:line="1087" PREFIX:column="7">{
	<expr_stmt><expr><call><name PREFIX:line="1088" PREFIX:column="9">cp_SetOnBoard</name><argument_list PREFIX:line="1088" PREFIX:column="22">(<argument><expr><name PREFIX:line="1088" PREFIX:column="23">pos</name></expr></argument>, <argument><expr><call><name PREFIX:line="1088" PREFIX:column="28">cp_GetFromBoard</name><argument_list PREFIX:line="1088" PREFIX:column="43">(<argument><expr><name PREFIX:line="1088" PREFIX:column="44">pos</name></expr></argument>)</argument_list></call>  | <name PREFIX:line="1088" PREFIX:column="52">CP_MARK_MASK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if></else></if>
  }</block></then></if>
  <return PREFIX:line="1092" PREFIX:column="3">return <expr PREFIX:line="1092" PREFIX:column="10">1</expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="1095" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="1096" PREFIX:column="1">/* move pieces which can move one or more steps into a direction */</comment>
<comment type="block" PREFIX:line="1097" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="1099" PREFIX:column="1">/*
  subprocedure to generate various target positions for some pieces
  special cases are handled in the piece specific sub-procedure

  Arguments:
    d: a list of potential directions
    is_multi_step: if the piece can only do one step (zero for KING and KNIGHT)
*/</comment>
<decl_stmt><decl><type><specifier PREFIX:line="1107" PREFIX:column="1">static</specifier>  <name PREFIX:line="1107" PREFIX:column="9">uint8_t</name> <name PREFIX:line="1107" PREFIX:column="17">ce_dir_offset_rook</name><index PREFIX:line="1107" PREFIX:column="35">[]</index></type> <name PREFIX:line="1107" PREFIX:column="38">PROGMEM</name> <init PREFIX:line="1107" PREFIX:column="46">= <expr><block PREFIX:line="1107" PREFIX:column="48">{ <expr PREFIX:line="1107" PREFIX:column="50">1</expr>, <expr PREFIX:line="1107" PREFIX:column="53">16</expr>, <expr PREFIX:line="1107" PREFIX:column="57">-16</expr>, <expr PREFIX:line="1107" PREFIX:column="62">-1</expr>, <expr PREFIX:line="1107" PREFIX:column="66">0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="1108" PREFIX:column="1">static</specifier>  <name PREFIX:line="1108" PREFIX:column="9">uint8_t</name> <name PREFIX:line="1108" PREFIX:column="17">ce_dir_offset_bishop</name><index PREFIX:line="1108" PREFIX:column="37">[]</index></type> <name PREFIX:line="1108" PREFIX:column="40">PROGMEM</name> <init PREFIX:line="1108" PREFIX:column="48">= <expr><block PREFIX:line="1108" PREFIX:column="50">{ <expr PREFIX:line="1108" PREFIX:column="52">15</expr>, <expr PREFIX:line="1108" PREFIX:column="56">17</expr>, <expr PREFIX:line="1108" PREFIX:column="60">-17</expr>, <expr PREFIX:line="1108" PREFIX:column="65">-15</expr>, <expr PREFIX:line="1108" PREFIX:column="70">0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="1109" PREFIX:column="1">static</specifier>  <name PREFIX:line="1109" PREFIX:column="9">uint8_t</name> <name PREFIX:line="1109" PREFIX:column="17">ce_dir_offset_queen</name><index PREFIX:line="1109" PREFIX:column="36">[]</index></type> <name PREFIX:line="1109" PREFIX:column="39">PROGMEM</name> <init PREFIX:line="1109" PREFIX:column="47">= <expr><block PREFIX:line="1109" PREFIX:column="49">{ <expr PREFIX:line="1109" PREFIX:column="51">1</expr>, <expr PREFIX:line="1109" PREFIX:column="54">16</expr>, <expr PREFIX:line="1109" PREFIX:column="58">-16</expr>, <expr PREFIX:line="1109" PREFIX:column="63">-1</expr>, <expr PREFIX:line="1109" PREFIX:column="67">15</expr>, <expr PREFIX:line="1109" PREFIX:column="71">17</expr>, <expr PREFIX:line="1109" PREFIX:column="75">-17</expr>, <expr PREFIX:line="1109" PREFIX:column="80">-15</expr>, <expr PREFIX:line="1109" PREFIX:column="85">0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="1110" PREFIX:column="1">static</specifier>  <name PREFIX:line="1110" PREFIX:column="9">uint8_t</name> <name PREFIX:line="1110" PREFIX:column="17">ce_dir_offset_knight</name><index PREFIX:line="1110" PREFIX:column="37">[]</index></type> <name PREFIX:line="1110" PREFIX:column="40">PROGMEM</name> <init PREFIX:line="1110" PREFIX:column="48">= <expr><block PREFIX:line="1110" PREFIX:column="50">{<expr PREFIX:line="1110" PREFIX:column="51">14</expr>, <expr PREFIX:line="1110" PREFIX:column="55">-14</expr>, <expr PREFIX:line="1110" PREFIX:column="60">18</expr>, <expr PREFIX:line="1110" PREFIX:column="64">-18</expr>, <expr PREFIX:line="1110" PREFIX:column="69">31</expr>, <expr PREFIX:line="1110" PREFIX:column="73">-31</expr>, <expr PREFIX:line="1110" PREFIX:column="78">33</expr>, <expr PREFIX:line="1110" PREFIX:column="82">-33</expr>, <expr PREFIX:line="1110" PREFIX:column="87">0</expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name PREFIX:line="1112" PREFIX:column="1">void</name></type> <name PREFIX:line="1112" PREFIX:column="6">ce_LoopDirsSingleMultiStep</name><parameter_list PREFIX:line="1112" PREFIX:column="32">( <param><decl><type><name PREFIX:line="1112" PREFIX:column="34">uint8_t</name> *</type><name PREFIX:line="1112" PREFIX:column="43">d</name></decl></param>, <param><decl><type><name PREFIX:line="1112" PREFIX:column="46">uint8_t</name></type> <name PREFIX:line="1112" PREFIX:column="54">is_multi_step</name></decl></param>)</parameter_list>
<block PREFIX:line="1113" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1114" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1114" PREFIX:column="11">loop_pos</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1116" PREFIX:column="3">/* with all directions */</comment>
  <for PREFIX:line="1117" PREFIX:column="3">for(<init PREFIX:line="1117" PREFIX:column="7">;</init><condition PREFIX:line="1117" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="1118" PREFIX:column="3">{
    <if PREFIX:line="1119" PREFIX:column="5">if <condition PREFIX:line="1119" PREFIX:column="8">( <expr><call><name PREFIX:line="1119" PREFIX:column="10">u8g_pgm_read</name><argument_list PREFIX:line="1119" PREFIX:column="22">(<argument><expr><name PREFIX:line="1119" PREFIX:column="23">d</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="1119" PREFIX:column="32">
      <break PREFIX:line="1120" PREFIX:column="7">break;</break></then></if>
    
    <comment type="block" PREFIX:line="1122" PREFIX:column="5">/* start again from the initial position */</comment>
    <expr_stmt><expr><name PREFIX:line="1123" PREFIX:column="5">loop_pos</name> = <call><name PREFIX:line="1123" PREFIX:column="16">stack_GetCurrElement</name><argument_list PREFIX:line="1123" PREFIX:column="36">()</argument_list></call>-&gt;<name PREFIX:line="1123" PREFIX:column="40">current_pos</name></expr>;</expr_stmt>
    
    <comment type="block" PREFIX:line="1125" PREFIX:column="5">/* check direction */</comment>
    <do PREFIX:line="1126" PREFIX:column="5">do
    <block PREFIX:line="1127" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1128" PREFIX:column="7">/* check next position into one direction */</comment>
      <expr_stmt><expr><name PREFIX:line="1129" PREFIX:column="7">loop_pos</name> += <call><name PREFIX:line="1129" PREFIX:column="19">u8g_pgm_read</name><argument_list PREFIX:line="1129" PREFIX:column="31">(<argument><expr><name PREFIX:line="1129" PREFIX:column="32">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block" PREFIX:line="1131" PREFIX:column="7">/*
	go further to ce_LoopRecur()
	0 will be returned if the target position is illegal or a piece of the own color
	this is used to stop walking into one direction
      */</comment>
      <if PREFIX:line="1136" PREFIX:column="7">if <condition PREFIX:line="1136" PREFIX:column="10">( <expr><call><name PREFIX:line="1136" PREFIX:column="12">ce_LoopRecur</name><argument_list PREFIX:line="1136" PREFIX:column="24">(<argument><expr><name PREFIX:line="1136" PREFIX:column="25">loop_pos</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="1136" PREFIX:column="41">
	<break PREFIX:line="1137" PREFIX:column="9">break;</break></then></if>
      
      <comment type="block" PREFIX:line="1139" PREFIX:column="7">/* stop if we had hit another piece */</comment>
      <if PREFIX:line="1140" PREFIX:column="7">if <condition PREFIX:line="1140" PREFIX:column="10">( <expr><call><name PREFIX:line="1140" PREFIX:column="12">cp_GetPiece</name><argument_list PREFIX:line="1140" PREFIX:column="23">(<argument><expr><call><name PREFIX:line="1140" PREFIX:column="24">cp_GetFromBoard</name><argument_list PREFIX:line="1140" PREFIX:column="39">(<argument><expr><name PREFIX:line="1140" PREFIX:column="40">loop_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name PREFIX:line="1140" PREFIX:column="54">PIECE_NONE</name></expr> )</condition><then PREFIX:line="1140" PREFIX:column="66">
	<break PREFIX:line="1141" PREFIX:column="9">break;</break></then></if>
    }</block> while<condition PREFIX:line="1142" PREFIX:column="12">( <expr><name PREFIX:line="1142" PREFIX:column="14">is_multi_step</name></expr> )</condition>;</do>
    <expr_stmt><expr><name PREFIX:line="1143" PREFIX:column="5">d</name>++</expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name PREFIX:line="1147" PREFIX:column="1">void</name></type> <name PREFIX:line="1147" PREFIX:column="6">ce_LoopRook</name><parameter_list PREFIX:line="1147" PREFIX:column="17">(<param><decl><type><name PREFIX:line="1147" PREFIX:column="18">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1148" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1149" PREFIX:column="3">ce_LoopDirsSingleMultiStep</name><argument_list PREFIX:line="1149" PREFIX:column="29">(<argument><expr><name PREFIX:line="1149" PREFIX:column="30">ce_dir_offset_rook</name></expr></argument>, <argument><expr PREFIX:line="1149" PREFIX:column="50">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1152" PREFIX:column="1">void</name></type> <name PREFIX:line="1152" PREFIX:column="6">ce_LoopBishop</name><parameter_list PREFIX:line="1152" PREFIX:column="19">(<param><decl><type><name PREFIX:line="1152" PREFIX:column="20">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1153" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1154" PREFIX:column="3">ce_LoopDirsSingleMultiStep</name><argument_list PREFIX:line="1154" PREFIX:column="29">(<argument><expr><name PREFIX:line="1154" PREFIX:column="30">ce_dir_offset_bishop</name></expr></argument>, <argument><expr PREFIX:line="1154" PREFIX:column="52">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1157" PREFIX:column="1">void</name></type> <name PREFIX:line="1157" PREFIX:column="6">ce_LoopQueen</name><parameter_list PREFIX:line="1157" PREFIX:column="18">(<param><decl><type><name PREFIX:line="1157" PREFIX:column="19">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1158" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1159" PREFIX:column="3">ce_LoopDirsSingleMultiStep</name><argument_list PREFIX:line="1159" PREFIX:column="29">(<argument><expr><name PREFIX:line="1159" PREFIX:column="30">ce_dir_offset_queen</name></expr></argument>, <argument><expr PREFIX:line="1159" PREFIX:column="51">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1162" PREFIX:column="1">void</name></type> <name PREFIX:line="1162" PREFIX:column="6">ce_LoopKnight</name><parameter_list PREFIX:line="1162" PREFIX:column="19">(<param><decl><type><name PREFIX:line="1162" PREFIX:column="20">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1163" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1164" PREFIX:column="3">ce_LoopDirsSingleMultiStep</name><argument_list PREFIX:line="1164" PREFIX:column="29">(<argument><expr><name PREFIX:line="1164" PREFIX:column="30">ce_dir_offset_knight</name></expr></argument>, <argument><expr PREFIX:line="1164" PREFIX:column="52">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



<comment type="block" PREFIX:line="1169" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="1170" PREFIX:column="1">/* move king */</comment>
<comment type="block" PREFIX:line="1171" PREFIX:column="1">/*==============================================================*/</comment>

<decl_stmt><decl><type><name PREFIX:line="1173" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1173" PREFIX:column="9">cu_IsKingCastling</name><argument_list PREFIX:line="1173" PREFIX:column="26">(<argument><expr><name PREFIX:line="1173" PREFIX:column="27">uint8_t</name> <name PREFIX:line="1173" PREFIX:column="35">mask</name></expr></argument>, <argument><expr><name PREFIX:line="1173" PREFIX:column="41">int8_t</name> <name PREFIX:line="1173" PREFIX:column="48">direction</name></expr></argument>, <argument><expr><name PREFIX:line="1173" PREFIX:column="59">uint8_t</name> <name PREFIX:line="1173" PREFIX:column="67">cnt</name></expr></argument>)</argument_list> <name PREFIX:line="1173" PREFIX:column="72">U8G_NOINLINE</name></decl>;</decl_stmt>

<comment type="block" PREFIX:line="1175" PREFIX:column="1">/*
  checks, if the king can do castling

  Arguments:
    mask:		the bit-mask for the global "castling possible" flag
    direction:	left castling: -1, right castling 1
    cnt:		number of fields to be checked: 3 or 2
*/</comment>
<function><type><name PREFIX:line="1183" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1183" PREFIX:column="9">cu_IsKingCastling</name><parameter_list PREFIX:line="1183" PREFIX:column="26">(<param><decl><type><name PREFIX:line="1183" PREFIX:column="27">uint8_t</name></type> <name PREFIX:line="1183" PREFIX:column="35">mask</name></decl></param>, <param><decl><type><name PREFIX:line="1183" PREFIX:column="41">int8_t</name></type> <name PREFIX:line="1183" PREFIX:column="48">direction</name></decl></param>, <param><decl><type><name PREFIX:line="1183" PREFIX:column="59">uint8_t</name></type> <name PREFIX:line="1183" PREFIX:column="67">cnt</name></decl></param>)</parameter_list>
<block PREFIX:line="1184" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1185" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1185" PREFIX:column="11">pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1186" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1186" PREFIX:column="11">opponent_color</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1188" PREFIX:column="3">/* check if the current board state allows castling */</comment>
  <if PREFIX:line="1189" PREFIX:column="3">if <condition PREFIX:line="1189" PREFIX:column="6">( <expr PREFIX:line="1189" PREFIX:column="8">(<name><name PREFIX:line="1189" PREFIX:column="9">lrc_obj</name>.<name PREFIX:line="1189" PREFIX:column="17">castling_possible</name></name> &amp; <name PREFIX:line="1189" PREFIX:column="37">mask</name>) == 0</expr> )</condition><then PREFIX:line="1189" PREFIX:column="49">
    <return PREFIX:line="1190" PREFIX:column="5">return <expr PREFIX:line="1190" PREFIX:column="12">0</expr>;</return></then></if> 	<comment type="block" PREFIX:line="1190" PREFIX:column="17">/* castling not allowed */</comment>
  
  <comment type="block" PREFIX:line="1192" PREFIX:column="3">/* get the position of the KING, could be white or black king */</comment>
  <expr_stmt><expr><name PREFIX:line="1193" PREFIX:column="3">pos</name> = <call><name PREFIX:line="1193" PREFIX:column="9">stack_GetCurrElement</name><argument_list PREFIX:line="1193" PREFIX:column="29">()</argument_list></call>-&gt;<name PREFIX:line="1193" PREFIX:column="33">current_pos</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1195" PREFIX:column="3">/* calculate the color of the opponent */</comment>
  <expr_stmt><expr><name PREFIX:line="1196" PREFIX:column="3">opponent_color</name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1197" PREFIX:column="3">opponent_color</name> -= <call><name PREFIX:line="1197" PREFIX:column="21">stack_GetCurrElement</name><argument_list PREFIX:line="1197" PREFIX:column="41">()</argument_list></call>-&gt;<name PREFIX:line="1197" PREFIX:column="45">current_color</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1199" PREFIX:column="3">/* if the KING itself is given check... */</comment>
  <if PREFIX:line="1200" PREFIX:column="3">if <condition PREFIX:line="1200" PREFIX:column="6">( <expr><call><name PREFIX:line="1200" PREFIX:column="8">ce_GetPositionAttackWeight</name><argument_list PREFIX:line="1200" PREFIX:column="34">(<argument><expr><name PREFIX:line="1200" PREFIX:column="35">pos</name></expr></argument>, <argument><expr><name PREFIX:line="1200" PREFIX:column="40">opponent_color</name></expr></argument>)</argument_list></call> &gt; 0</expr> )</condition><then PREFIX:line="1200" PREFIX:column="61">
    <return PREFIX:line="1201" PREFIX:column="5">return <expr PREFIX:line="1201" PREFIX:column="12">0</expr>;</return></then></if>

  
  <comment type="block" PREFIX:line="1204" PREFIX:column="3">/* check if fields in the desired direction are emtpy */</comment>
  <for PREFIX:line="1205" PREFIX:column="3">for(<init PREFIX:line="1205" PREFIX:column="7">;</init><condition PREFIX:line="1205" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="1206" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1207" PREFIX:column="5">/* go to the next field */</comment>
    <expr_stmt><expr><name PREFIX:line="1208" PREFIX:column="5">pos</name> += <name PREFIX:line="1208" PREFIX:column="12">direction</name></expr>;</expr_stmt>
    <comment type="block" PREFIX:line="1209" PREFIX:column="5">/* check for a piece */</comment>
    <if PREFIX:line="1210" PREFIX:column="5">if <condition PREFIX:line="1210" PREFIX:column="8">( <expr><call><name PREFIX:line="1210" PREFIX:column="10">cp_GetPiece</name><argument_list PREFIX:line="1210" PREFIX:column="21">(<argument><expr><call><name PREFIX:line="1210" PREFIX:column="22">cp_GetFromBoard</name><argument_list PREFIX:line="1210" PREFIX:column="37">(<argument><expr><name PREFIX:line="1210" PREFIX:column="38">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name PREFIX:line="1210" PREFIX:column="47">PIECE_NONE</name></expr> )</condition><then PREFIX:line="1210" PREFIX:column="59">
      <return PREFIX:line="1211" PREFIX:column="7">return <expr PREFIX:line="1211" PREFIX:column="14">0</expr>;</return></then></if>		<comment type="block" PREFIX:line="1211" PREFIX:column="25">/* castling not allowed */</comment>

    <comment type="block" PREFIX:line="1213" PREFIX:column="5">/* if some of the fields are under attack */</comment>
    <if PREFIX:line="1214" PREFIX:column="5">if <condition PREFIX:line="1214" PREFIX:column="8">( <expr><call><name PREFIX:line="1214" PREFIX:column="10">ce_GetPositionAttackWeight</name><argument_list PREFIX:line="1214" PREFIX:column="36">(<argument><expr><name PREFIX:line="1214" PREFIX:column="37">pos</name></expr></argument>, <argument><expr><name PREFIX:line="1214" PREFIX:column="42">opponent_color</name></expr></argument>)</argument_list></call> &gt; 0</expr> )</condition><then PREFIX:line="1214" PREFIX:column="63">
      <return PREFIX:line="1215" PREFIX:column="7">return <expr PREFIX:line="1215" PREFIX:column="14">0</expr>;</return></then></if>
    
    <expr_stmt><expr><name PREFIX:line="1217" PREFIX:column="5">cnt</name>--</expr>;</expr_stmt>
    <if PREFIX:line="1218" PREFIX:column="5">if <condition PREFIX:line="1218" PREFIX:column="8">( <expr><name PREFIX:line="1218" PREFIX:column="10">cnt</name> == 0</expr> )</condition><then PREFIX:line="1218" PREFIX:column="20">
      <break PREFIX:line="1219" PREFIX:column="7">break;</break></then></if>
  }</block></for>
  <return PREFIX:line="1221" PREFIX:column="3">return <expr PREFIX:line="1221" PREFIX:column="10">1</expr>;</return> <comment type="block" PREFIX:line="1221" PREFIX:column="13">/* castling allowed */</comment>
}</block></function>

<function><type><name PREFIX:line="1224" PREFIX:column="1">void</name></type> <name PREFIX:line="1224" PREFIX:column="6">ce_LoopKing</name><parameter_list PREFIX:line="1224" PREFIX:column="17">(<param><decl><type><name PREFIX:line="1224" PREFIX:column="18">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1225" PREFIX:column="1">{
  <comment type="block" PREFIX:line="1226" PREFIX:column="3">/*
    there is an interessting timing problem in this procedure
    it must be checked for castling first and as second step the normal
    KING movement. If we would first check for normal moves, than
    any marks might be overwritten by the ROOK in the case of castling.
  */</comment>
  
  <comment type="block" PREFIX:line="1233" PREFIX:column="3">/* castling (this must be done before checking normal moves (see above) */</comment>
  <if PREFIX:line="1234" PREFIX:column="3">if <condition PREFIX:line="1234" PREFIX:column="6">( <expr><call><name PREFIX:line="1234" PREFIX:column="8">stack_GetCurrElement</name><argument_list PREFIX:line="1234" PREFIX:column="28">()</argument_list></call>-&gt;<name PREFIX:line="1234" PREFIX:column="32">current_color</name> == <name PREFIX:line="1234" PREFIX:column="49">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="1234" PREFIX:column="62">
  <block PREFIX:line="1235" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1236" PREFIX:column="5">/* white left castling */</comment>
    <if PREFIX:line="1237" PREFIX:column="5">if <condition PREFIX:line="1237" PREFIX:column="8">( <expr><call><name PREFIX:line="1237" PREFIX:column="10">cu_IsKingCastling</name><argument_list PREFIX:line="1237" PREFIX:column="27">(<argument><expr PREFIX:line="1237" PREFIX:column="28">1</expr></argument>, <argument><expr PREFIX:line="1237" PREFIX:column="31">-1</expr></argument>, <argument><expr PREFIX:line="1237" PREFIX:column="35">3</expr></argument>)</argument_list></call> != 0</expr> )</condition><then PREFIX:line="1237" PREFIX:column="44">
    <block PREFIX:line="1238" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1239" PREFIX:column="7">/* check for attacked fields */</comment>
      <expr_stmt><expr><call><name PREFIX:line="1240" PREFIX:column="7">ce_LoopRecur</name><argument_list PREFIX:line="1240" PREFIX:column="19">(<argument><expr><call><name PREFIX:line="1240" PREFIX:column="20">stack_GetCurrElement</name><argument_list PREFIX:line="1240" PREFIX:column="40">()</argument_list></call>-&gt;<name PREFIX:line="1240" PREFIX:column="44">current_pos</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="block" PREFIX:line="1242" PREFIX:column="5">/* white right castling */</comment>
    <if PREFIX:line="1243" PREFIX:column="5">if <condition PREFIX:line="1243" PREFIX:column="8">( <expr><call><name PREFIX:line="1243" PREFIX:column="10">cu_IsKingCastling</name><argument_list PREFIX:line="1243" PREFIX:column="27">(<argument><expr PREFIX:line="1243" PREFIX:column="28">2</expr></argument>, <argument><expr PREFIX:line="1243" PREFIX:column="31">1</expr></argument>, <argument><expr PREFIX:line="1243" PREFIX:column="34">2</expr></argument>)</argument_list></call> != 0</expr> )</condition><then PREFIX:line="1243" PREFIX:column="43">
    <block PREFIX:line="1244" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1245" PREFIX:column="7">/* check for attacked fields */</comment>
      <expr_stmt><expr><call><name PREFIX:line="1246" PREFIX:column="7">ce_LoopRecur</name><argument_list PREFIX:line="1246" PREFIX:column="19">(<argument><expr><call><name PREFIX:line="1246" PREFIX:column="20">stack_GetCurrElement</name><argument_list PREFIX:line="1246" PREFIX:column="40">()</argument_list></call>-&gt;<name PREFIX:line="1246" PREFIX:column="44">current_pos</name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then>
  <else PREFIX:line="1249" PREFIX:column="3">else
  <block PREFIX:line="1250" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1251" PREFIX:column="5">/* black left castling */</comment>
    <if PREFIX:line="1252" PREFIX:column="5">if <condition PREFIX:line="1252" PREFIX:column="8">( <expr><call><name PREFIX:line="1252" PREFIX:column="10">cu_IsKingCastling</name><argument_list PREFIX:line="1252" PREFIX:column="27">(<argument><expr PREFIX:line="1252" PREFIX:column="28">4</expr></argument>, <argument><expr PREFIX:line="1252" PREFIX:column="31">-1</expr></argument>, <argument><expr PREFIX:line="1252" PREFIX:column="35">3</expr></argument>)</argument_list></call> != 0</expr> )</condition><then PREFIX:line="1252" PREFIX:column="44">
    <block PREFIX:line="1253" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1254" PREFIX:column="7">/* check for attacked fields */</comment>
      <expr_stmt><expr><call><name PREFIX:line="1255" PREFIX:column="7">ce_LoopRecur</name><argument_list PREFIX:line="1255" PREFIX:column="19">(<argument><expr><call><name PREFIX:line="1255" PREFIX:column="20">stack_GetCurrElement</name><argument_list PREFIX:line="1255" PREFIX:column="40">()</argument_list></call>-&gt;<name PREFIX:line="1255" PREFIX:column="44">current_pos</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="block" PREFIX:line="1257" PREFIX:column="5">/* black right castling */</comment>
    <if PREFIX:line="1258" PREFIX:column="5">if <condition PREFIX:line="1258" PREFIX:column="8">( <expr><call><name PREFIX:line="1258" PREFIX:column="10">cu_IsKingCastling</name><argument_list PREFIX:line="1258" PREFIX:column="27">(<argument><expr PREFIX:line="1258" PREFIX:column="28">8</expr></argument>, <argument><expr PREFIX:line="1258" PREFIX:column="31">1</expr></argument>, <argument><expr PREFIX:line="1258" PREFIX:column="34">2</expr></argument>)</argument_list></call> != 0</expr> )</condition><then PREFIX:line="1258" PREFIX:column="43">
    <block PREFIX:line="1259" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1260" PREFIX:column="7">/* check for attacked fields */</comment>
      <expr_stmt><expr><call><name PREFIX:line="1261" PREFIX:column="7">ce_LoopRecur</name><argument_list PREFIX:line="1261" PREFIX:column="19">(<argument><expr><call><name PREFIX:line="1261" PREFIX:column="20">stack_GetCurrElement</name><argument_list PREFIX:line="1261" PREFIX:column="40">()</argument_list></call>-&gt;<name PREFIX:line="1261" PREFIX:column="44">current_pos</name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>
  
  <comment type="block" PREFIX:line="1265" PREFIX:column="3">/* reuse queen directions */</comment>
  <expr_stmt><expr><call><name PREFIX:line="1266" PREFIX:column="3">ce_LoopDirsSingleMultiStep</name><argument_list PREFIX:line="1266" PREFIX:column="29">(<argument><expr><name PREFIX:line="1266" PREFIX:column="30">ce_dir_offset_queen</name></expr></argument>, <argument><expr PREFIX:line="1266" PREFIX:column="51">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block" PREFIX:line="1270" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="1271" PREFIX:column="1">/* move pawn */</comment>
<comment type="block" PREFIX:line="1272" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="1274" PREFIX:column="1">/*
  doppelschritt: nur von der grundlinie aus, beide (!) felder vor dem bauern mï¿½ssen frei sein
  en passant: nur unmittelbar nachdem ein doppelschritt ausgefï¿½hrt wurde.
*/</comment>
<function><type><name PREFIX:line="1278" PREFIX:column="1">void</name></type> <name PREFIX:line="1278" PREFIX:column="6">ce_LoopPawnSideCapture</name><parameter_list PREFIX:line="1278" PREFIX:column="28">(<param><decl><type><name PREFIX:line="1278" PREFIX:column="29">uint8_t</name></type> <name PREFIX:line="1278" PREFIX:column="37">loop_pos</name></decl></param>)</parameter_list>
<block PREFIX:line="1279" PREFIX:column="1">{
  <if PREFIX:line="1280" PREFIX:column="3">if <condition PREFIX:line="1280" PREFIX:column="6">( <expr><call><name PREFIX:line="1280" PREFIX:column="8">gpos_IsIllegal</name><argument_list PREFIX:line="1280" PREFIX:column="22">(<argument><expr><name PREFIX:line="1280" PREFIX:column="23">loop_pos</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="1280" PREFIX:column="39">
  <block PREFIX:line="1281" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1282" PREFIX:column="5">/* get the piece from the board */</comment>
    <comment type="block" PREFIX:line="1283" PREFIX:column="5">/* if the field is NOT empty */</comment>
    <if PREFIX:line="1284" PREFIX:column="5">if <condition PREFIX:line="1284" PREFIX:column="8">( <expr><call><name PREFIX:line="1284" PREFIX:column="10">cp_GetPiece</name><argument_list PREFIX:line="1284" PREFIX:column="21">(<argument><expr><call><name PREFIX:line="1284" PREFIX:column="22">cp_GetFromBoard</name><argument_list PREFIX:line="1284" PREFIX:column="37">(<argument><expr><name PREFIX:line="1284" PREFIX:column="38">loop_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name PREFIX:line="1284" PREFIX:column="52">PIECE_NONE</name></expr> )</condition><then PREFIX:line="1284" PREFIX:column="64">
    <block PREFIX:line="1285" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1286" PREFIX:column="7">/* normal capture */</comment>
      <expr_stmt><expr><call><name PREFIX:line="1287" PREFIX:column="7">ce_LoopRecur</name><argument_list PREFIX:line="1287" PREFIX:column="19">(<argument><expr><name PREFIX:line="1287" PREFIX:column="20">loop_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block" PREFIX:line="1288" PREFIX:column="7">/* TODO: check for pawn conversion/promotion */</comment>
    }</block></then>
    <else PREFIX:line="1290" PREFIX:column="5">else
    <block PREFIX:line="1291" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1292" PREFIX:column="7">/* check conditions for en passant capture */</comment>
      <if PREFIX:line="1293" PREFIX:column="7">if <condition PREFIX:line="1293" PREFIX:column="10">( <expr><call><name PREFIX:line="1293" PREFIX:column="12">stack_GetCurrElement</name><argument_list PREFIX:line="1293" PREFIX:column="32">()</argument_list></call>-&gt;<name PREFIX:line="1293" PREFIX:column="36">current_color</name> == <name PREFIX:line="1293" PREFIX:column="53">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="1293" PREFIX:column="66">
      <block PREFIX:line="1294" PREFIX:column="7">{
	<if PREFIX:line="1295" PREFIX:column="9">if <condition PREFIX:line="1295" PREFIX:column="12">( <expr><name><name PREFIX:line="1295" PREFIX:column="14">lrc_obj</name>.<name PREFIX:line="1295" PREFIX:column="22">pawn_dbl_move</name><index PREFIX:line="1295" PREFIX:column="35">[<expr><name PREFIX:line="1295" PREFIX:column="36">COLOR_BLACK</name></expr>]</index></name>+16 == <name PREFIX:line="1295" PREFIX:column="55">loop_pos</name></expr> )</condition><then PREFIX:line="1295" PREFIX:column="65">
	<block PREFIX:line="1296" PREFIX:column="9">{
	  <expr_stmt><expr><call><name PREFIX:line="1297" PREFIX:column="11">ce_LoopRecur</name><argument_list PREFIX:line="1297" PREFIX:column="23">(<argument><expr><name PREFIX:line="1297" PREFIX:column="24">loop_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <comment type="block" PREFIX:line="1298" PREFIX:column="11">/* note: pawn conversion/promotion can not occur */</comment>
	}</block></then></if>
      }</block></then>
      <else PREFIX:line="1301" PREFIX:column="7">else
      <block PREFIX:line="1302" PREFIX:column="7">{
	<if PREFIX:line="1303" PREFIX:column="9">if <condition PREFIX:line="1303" PREFIX:column="12">( <expr><name><name PREFIX:line="1303" PREFIX:column="14">lrc_obj</name>.<name PREFIX:line="1303" PREFIX:column="22">pawn_dbl_move</name><index PREFIX:line="1303" PREFIX:column="35">[<expr><name PREFIX:line="1303" PREFIX:column="36">COLOR_WHITE</name></expr>]</index></name> == <name PREFIX:line="1303" PREFIX:column="52">loop_pos</name>+16</expr> )</condition><then PREFIX:line="1303" PREFIX:column="65">
	<block PREFIX:line="1304" PREFIX:column="9">{
	  <expr_stmt><expr><call><name PREFIX:line="1305" PREFIX:column="11">ce_LoopRecur</name><argument_list PREFIX:line="1305" PREFIX:column="23">(<argument><expr><name PREFIX:line="1305" PREFIX:column="24">loop_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <comment type="block" PREFIX:line="1306" PREFIX:column="11">/* note: pawn conversion/promotion can not occur */</comment>
	}</block></then></if>
      }</block></else></if>
    }</block></else></if>
  }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="1313" PREFIX:column="1">void</name></type> <name PREFIX:line="1313" PREFIX:column="6">ce_LoopPawn</name><parameter_list PREFIX:line="1313" PREFIX:column="17">(<param><decl><type><name PREFIX:line="1313" PREFIX:column="18">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1314" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1315" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1315" PREFIX:column="11">initial_pos</name> <init PREFIX:line="1315" PREFIX:column="23">= <expr><call><name PREFIX:line="1315" PREFIX:column="25">stack_GetCurrElement</name><argument_list PREFIX:line="1315" PREFIX:column="45">()</argument_list></call>-&gt;<name PREFIX:line="1315" PREFIX:column="49">current_pos</name></expr></init></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name PREFIX:line="1316" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1316" PREFIX:column="11">my_color</name> <init PREFIX:line="1316" PREFIX:column="20">= <expr><call><name PREFIX:line="1316" PREFIX:column="22">stack_GetCurrElement</name><argument_list PREFIX:line="1316" PREFIX:column="42">()</argument_list></call>-&gt;<name PREFIX:line="1316" PREFIX:column="46">current_color</name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name PREFIX:line="1318" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1318" PREFIX:column="11">loop_pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1319" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1319" PREFIX:column="11">line</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1321" PREFIX:column="3">/* one step forward */</comment>
  
  <expr_stmt><expr><name PREFIX:line="1323" PREFIX:column="3">loop_pos</name> = <name PREFIX:line="1323" PREFIX:column="14">initial_pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1324" PREFIX:column="3">line</name> = <name PREFIX:line="1324" PREFIX:column="10">initial_pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1325" PREFIX:column="3">line</name> &gt;&gt;= 4</expr>;</expr_stmt>
  <if PREFIX:line="1326" PREFIX:column="3">if <condition PREFIX:line="1326" PREFIX:column="6">( <expr><name PREFIX:line="1326" PREFIX:column="8">my_color</name> == <name PREFIX:line="1326" PREFIX:column="20">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="1326" PREFIX:column="33">
    <expr_stmt><expr><name PREFIX:line="1327" PREFIX:column="5">loop_pos</name> += 16</expr>;</expr_stmt></then>
  <else PREFIX:line="1328" PREFIX:column="3">else
    <expr_stmt><expr><name PREFIX:line="1329" PREFIX:column="5">loop_pos</name> -= 16</expr>;</expr_stmt></else></if>
  <if PREFIX:line="1330" PREFIX:column="3">if <condition PREFIX:line="1330" PREFIX:column="6">( <expr><call><name PREFIX:line="1330" PREFIX:column="8">gpos_IsIllegal</name><argument_list PREFIX:line="1330" PREFIX:column="22">(<argument><expr><name PREFIX:line="1330" PREFIX:column="23">loop_pos</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="1330" PREFIX:column="39">
  <block PREFIX:line="1331" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1332" PREFIX:column="5">/* if the field is empty */</comment>
    <if PREFIX:line="1333" PREFIX:column="5">if <condition PREFIX:line="1333" PREFIX:column="8">( <expr><call><name PREFIX:line="1333" PREFIX:column="10">cp_GetPiece</name><argument_list PREFIX:line="1333" PREFIX:column="21">(<argument><expr><call><name PREFIX:line="1333" PREFIX:column="22">cp_GetFromBoard</name><argument_list PREFIX:line="1333" PREFIX:column="37">(<argument><expr><name PREFIX:line="1333" PREFIX:column="38">loop_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name PREFIX:line="1333" PREFIX:column="52">PIECE_NONE</name></expr> )</condition><then PREFIX:line="1333" PREFIX:column="64">
    <block PREFIX:line="1334" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1335" PREFIX:column="7">/* TODO: check for and loop through piece conversion/promotion */</comment>
      <expr_stmt><expr><call><name PREFIX:line="1336" PREFIX:column="7">ce_LoopRecur</name><argument_list PREFIX:line="1336" PREFIX:column="19">(<argument><expr><name PREFIX:line="1336" PREFIX:column="20">loop_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      

      <comment type="block" PREFIX:line="1338" PREFIX:column="7">/* second step forward */</comment>
      
      <comment type="block" PREFIX:line="1340" PREFIX:column="7">/* if pawn is on his starting line */</comment>
      <if PREFIX:line="1341" PREFIX:column="7">if <condition PREFIX:line="1341" PREFIX:column="10">( <expr PREFIX:line="1341" PREFIX:column="12">(<name PREFIX:line="1341" PREFIX:column="13">my_color</name> == <name PREFIX:line="1341" PREFIX:column="25">COLOR_WHITE</name> &amp;&amp; <name PREFIX:line="1341" PREFIX:column="40">line</name> == 1) || (<name PREFIX:line="1341" PREFIX:column="55">my_color</name> == <name PREFIX:line="1341" PREFIX:column="67">COLOR_BLACK</name> &amp;&amp; <name PREFIX:line="1341" PREFIX:column="82">line</name> == 6 )</expr> )</condition><then PREFIX:line="1341" PREFIX:column="95">
      <block PREFIX:line="1342" PREFIX:column="7">{
	<comment type="block" PREFIX:line="1343" PREFIX:column="9">/* the place before the pawn is not occupied, so we can do double moves, see above */</comment>
	
	<if PREFIX:line="1345" PREFIX:column="9">if <condition PREFIX:line="1345" PREFIX:column="12">( <expr><name PREFIX:line="1345" PREFIX:column="14">my_color</name> == <name PREFIX:line="1345" PREFIX:column="26">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="1345" PREFIX:column="39">
	  <expr_stmt><expr><name PREFIX:line="1346" PREFIX:column="11">loop_pos</name> += 16</expr>;</expr_stmt></then>
	<else PREFIX:line="1347" PREFIX:column="9">else
	  <expr_stmt><expr><name PREFIX:line="1348" PREFIX:column="11">loop_pos</name> -= 16</expr>;</expr_stmt></else></if>
	<if PREFIX:line="1349" PREFIX:column="9">if <condition PREFIX:line="1349" PREFIX:column="12">( <expr><call><name PREFIX:line="1349" PREFIX:column="14">cp_GetPiece</name><argument_list PREFIX:line="1349" PREFIX:column="25">(<argument><expr><call><name PREFIX:line="1349" PREFIX:column="26">cp_GetFromBoard</name><argument_list PREFIX:line="1349" PREFIX:column="41">(<argument><expr><name PREFIX:line="1349" PREFIX:column="42">loop_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name PREFIX:line="1349" PREFIX:column="56">PIECE_NONE</name></expr> )</condition><then PREFIX:line="1349" PREFIX:column="68">
	<block PREFIX:line="1350" PREFIX:column="9">{
	  <comment type="block" PREFIX:line="1351" PREFIX:column="11">/* this is a special case, other promotions of the pawn can not occur */</comment>
	  <expr_stmt><expr><call><name PREFIX:line="1352" PREFIX:column="11">ce_LoopRecur</name><argument_list PREFIX:line="1352" PREFIX:column="23">(<argument><expr><name PREFIX:line="1352" PREFIX:column="24">loop_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <comment type="block" PREFIX:line="1358" PREFIX:column="3">/* capture */</comment>
  
  <expr_stmt><expr><name PREFIX:line="1360" PREFIX:column="3">loop_pos</name> = <name PREFIX:line="1360" PREFIX:column="14">initial_pos</name></expr>;</expr_stmt>
  <if PREFIX:line="1361" PREFIX:column="3">if <condition PREFIX:line="1361" PREFIX:column="6">( <expr><name PREFIX:line="1361" PREFIX:column="8">my_color</name> == <name PREFIX:line="1361" PREFIX:column="20">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="1361" PREFIX:column="33">
    <expr_stmt><expr><name PREFIX:line="1362" PREFIX:column="5">loop_pos</name> += 15</expr>;</expr_stmt></then>
  <else PREFIX:line="1363" PREFIX:column="3">else
    <expr_stmt><expr><name PREFIX:line="1364" PREFIX:column="5">loop_pos</name> -= 15</expr>;</expr_stmt></else></if>
  <expr_stmt><expr><call><name PREFIX:line="1365" PREFIX:column="3">ce_LoopPawnSideCapture</name><argument_list PREFIX:line="1365" PREFIX:column="25">(<argument><expr><name PREFIX:line="1365" PREFIX:column="26">loop_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name PREFIX:line="1368" PREFIX:column="3">loop_pos</name> = <name PREFIX:line="1368" PREFIX:column="14">initial_pos</name></expr>;</expr_stmt>
  <if PREFIX:line="1369" PREFIX:column="3">if <condition PREFIX:line="1369" PREFIX:column="6">( <expr><name PREFIX:line="1369" PREFIX:column="8">my_color</name> == <name PREFIX:line="1369" PREFIX:column="20">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="1369" PREFIX:column="33">
    <expr_stmt><expr><name PREFIX:line="1370" PREFIX:column="5">loop_pos</name> += 17</expr>;</expr_stmt></then>
  <else PREFIX:line="1371" PREFIX:column="3">else
    <expr_stmt><expr><name PREFIX:line="1372" PREFIX:column="5">loop_pos</name> -= 17</expr>;</expr_stmt></else></if>
  <expr_stmt><expr><call><name PREFIX:line="1373" PREFIX:column="3">ce_LoopPawnSideCapture</name><argument_list PREFIX:line="1373" PREFIX:column="25">(<argument><expr><name PREFIX:line="1373" PREFIX:column="26">loop_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="1376" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="1377" PREFIX:column="1">/* attacked */</comment>
<comment type="block" PREFIX:line="1378" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="1380" PREFIX:column="1">/*
  from a starting position, search for a piece, that might jump to that postion.
  return:
    the two global variables
      lrc_obj.find_piece_weight[0];
      lrc_obj.find_piece_weight[1];
  will be increased by the weight of the attacked pieces of that color.
  it is usually required to reset these global variables to zero, before using
  this function.
*/</comment>

<function><type><name PREFIX:line="1391" PREFIX:column="1">void</name></type> <name PREFIX:line="1391" PREFIX:column="6">ce_FindPieceByStep</name><parameter_list PREFIX:line="1391" PREFIX:column="24">(<param><decl><type><name PREFIX:line="1391" PREFIX:column="25">uint8_t</name></type> <name PREFIX:line="1391" PREFIX:column="33">start_pos</name></decl></param>, <param><decl><type><name PREFIX:line="1391" PREFIX:column="44">uint8_t</name></type> <name PREFIX:line="1391" PREFIX:column="52">piece</name></decl></param>,  <param><decl><type><name PREFIX:line="1391" PREFIX:column="60">uint8_t</name> *</type><name PREFIX:line="1391" PREFIX:column="69">d</name></decl></param>, <param><decl><type><name PREFIX:line="1391" PREFIX:column="72">uint8_t</name></type> <name PREFIX:line="1391" PREFIX:column="80">is_multi_step</name></decl></param>)</parameter_list>
<block PREFIX:line="1392" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1393" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1393" PREFIX:column="11">loop_pos</name></decl>, <decl><type ref="prev"/><name PREFIX:line="1393" PREFIX:column="21">cp</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1395" PREFIX:column="3">/* with all directions */</comment>
  <for PREFIX:line="1396" PREFIX:column="3">for(<init PREFIX:line="1396" PREFIX:column="7">;</init><condition PREFIX:line="1396" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="1397" PREFIX:column="3">{
    <if PREFIX:line="1398" PREFIX:column="5">if <condition PREFIX:line="1398" PREFIX:column="8">( <expr><call><name PREFIX:line="1398" PREFIX:column="10">u8g_pgm_read</name><argument_list PREFIX:line="1398" PREFIX:column="22">(<argument><expr><name PREFIX:line="1398" PREFIX:column="23">d</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="1398" PREFIX:column="32">
      <break PREFIX:line="1399" PREFIX:column="7">break;</break></then></if>
    
    <comment type="block" PREFIX:line="1401" PREFIX:column="5">/* start again from the initial position */</comment>
    <expr_stmt><expr><name PREFIX:line="1402" PREFIX:column="5">loop_pos</name> = <name PREFIX:line="1402" PREFIX:column="16">start_pos</name></expr>;</expr_stmt>
    
    <comment type="block" PREFIX:line="1404" PREFIX:column="5">/* check direction */</comment>
    <do PREFIX:line="1405" PREFIX:column="5">do
    <block PREFIX:line="1406" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1407" PREFIX:column="7">/* check next position into one direction */</comment>
      <expr_stmt><expr><name PREFIX:line="1408" PREFIX:column="7">loop_pos</name> += <call><name PREFIX:line="1408" PREFIX:column="19">u8g_pgm_read</name><argument_list PREFIX:line="1408" PREFIX:column="31">(<argument><expr><name PREFIX:line="1408" PREFIX:column="32">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block" PREFIX:line="1410" PREFIX:column="7">/* check if the board boundary has been crossed */</comment>
      <if PREFIX:line="1411" PREFIX:column="7">if <condition PREFIX:line="1411" PREFIX:column="10">( <expr PREFIX:line="1411" PREFIX:column="12">(<name PREFIX:line="1411" PREFIX:column="13">loop_pos</name> &amp; 0x088) != 0</expr> )</condition><then PREFIX:line="1411" PREFIX:column="37">
	<break PREFIX:line="1412" PREFIX:column="9">break;</break></then></if>
      
      <comment type="block" PREFIX:line="1414" PREFIX:column="7">/* get the colored piece from the board */</comment>
      <expr_stmt><expr><name PREFIX:line="1415" PREFIX:column="7">cp</name> = <call><name PREFIX:line="1415" PREFIX:column="12">cp_GetFromBoard</name><argument_list PREFIX:line="1415" PREFIX:column="27">(<argument><expr><name PREFIX:line="1415" PREFIX:column="28">loop_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block" PREFIX:line="1417" PREFIX:column="7">/* stop if we had hit another piece */</comment>
      <if PREFIX:line="1418" PREFIX:column="7">if <condition PREFIX:line="1418" PREFIX:column="10">( <expr><call><name PREFIX:line="1418" PREFIX:column="12">cp_GetPiece</name><argument_list PREFIX:line="1418" PREFIX:column="23">(<argument><expr><name PREFIX:line="1418" PREFIX:column="24">cp</name></expr></argument>)</argument_list></call> != <name PREFIX:line="1418" PREFIX:column="31">PIECE_NONE</name></expr> )</condition><then PREFIX:line="1418" PREFIX:column="43">
      <block PREFIX:line="1419" PREFIX:column="7">{
	<comment type="block" PREFIX:line="1420" PREFIX:column="9">/* if it is the piece we are looking for, then add the weight */</comment>
	<if PREFIX:line="1421" PREFIX:column="9">if <condition PREFIX:line="1421" PREFIX:column="12">( <expr><call><name PREFIX:line="1421" PREFIX:column="14">cp_GetPiece</name><argument_list PREFIX:line="1421" PREFIX:column="25">(<argument><expr><name PREFIX:line="1421" PREFIX:column="26">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="1421" PREFIX:column="33">piece</name></expr> )</condition><then PREFIX:line="1421" PREFIX:column="40">
	<block PREFIX:line="1422" PREFIX:column="9">{
	  <expr_stmt><expr><name><name PREFIX:line="1423" PREFIX:column="11">lrc_obj</name>.<name PREFIX:line="1423" PREFIX:column="19">find_piece_weight</name><index PREFIX:line="1423" PREFIX:column="36">[<expr><call><name PREFIX:line="1423" PREFIX:column="37">cp_GetColor</name><argument_list PREFIX:line="1423" PREFIX:column="48">(<argument><expr><name PREFIX:line="1423" PREFIX:column="49">cp</name></expr></argument>)</argument_list></call></expr>]</index></name> += <name><name PREFIX:line="1423" PREFIX:column="57">ce_piece_weight</name><index PREFIX:line="1423" PREFIX:column="72">[<expr><name PREFIX:line="1423" PREFIX:column="73">piece</name></expr>]</index></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name PREFIX:line="1424" PREFIX:column="11">lrc_obj</name>.<name PREFIX:line="1424" PREFIX:column="19">find_piece_cnt</name><index PREFIX:line="1424" PREFIX:column="33">[<expr><call><name PREFIX:line="1424" PREFIX:column="34">cp_GetColor</name><argument_list PREFIX:line="1424" PREFIX:column="45">(<argument><expr><name PREFIX:line="1424" PREFIX:column="46">cp</name></expr></argument>)</argument_list></call></expr>]</index></name>++</expr>;</expr_stmt>
	}</block></then></if>
	<comment type="block" PREFIX:line="1426" PREFIX:column="9">/* in any case, break out of the inner loop */</comment>
	<break PREFIX:line="1427" PREFIX:column="9">break;</break>
      }</block></then></if>
    }</block> while<condition PREFIX:line="1429" PREFIX:column="12">( <expr><name PREFIX:line="1429" PREFIX:column="14">is_multi_step</name></expr> )</condition>;</do>
    <expr_stmt><expr><name PREFIX:line="1430" PREFIX:column="5">d</name>++</expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name PREFIX:line="1434" PREFIX:column="1">void</name></type> <name PREFIX:line="1434" PREFIX:column="6">ce_FindPawnPiece</name><parameter_list PREFIX:line="1434" PREFIX:column="22">(<param><decl><type><name PREFIX:line="1434" PREFIX:column="23">uint8_t</name></type> <name PREFIX:line="1434" PREFIX:column="31">dest_pos</name></decl></param>, <param><decl><type><name PREFIX:line="1434" PREFIX:column="41">uint8_t</name></type> <name PREFIX:line="1434" PREFIX:column="49">color</name></decl></param>)</parameter_list>
<block PREFIX:line="1435" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1436" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1436" PREFIX:column="11">cp</name></decl>;</decl_stmt>
  <comment type="block" PREFIX:line="1437" PREFIX:column="3">/* check if the board boundary has been crossed */</comment>
  <if PREFIX:line="1438" PREFIX:column="3">if <condition PREFIX:line="1438" PREFIX:column="6">( <expr PREFIX:line="1438" PREFIX:column="8">(<name PREFIX:line="1438" PREFIX:column="9">dest_pos</name> &amp; 0x088) == 0</expr> )</condition><then PREFIX:line="1438" PREFIX:column="33">
  <block PREFIX:line="1439" PREFIX:column="3">{
    <comment type="block" PREFIX:line="1440" PREFIX:column="5">/* get the colored piece from the board */</comment>
    <expr_stmt><expr><name PREFIX:line="1441" PREFIX:column="5">cp</name> = <call><name PREFIX:line="1441" PREFIX:column="10">cp_GetFromBoard</name><argument_list PREFIX:line="1441" PREFIX:column="25">(<argument><expr><name PREFIX:line="1441" PREFIX:column="26">dest_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" PREFIX:line="1442" PREFIX:column="5">/* only if there is a pawn of the matching color */</comment>
    <if PREFIX:line="1443" PREFIX:column="5">if <condition PREFIX:line="1443" PREFIX:column="8">( <expr><call><name PREFIX:line="1443" PREFIX:column="10">cp_GetPiece</name><argument_list PREFIX:line="1443" PREFIX:column="21">(<argument><expr><name PREFIX:line="1443" PREFIX:column="22">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="1443" PREFIX:column="29">PIECE_PAWN</name></expr> )</condition><then PREFIX:line="1443" PREFIX:column="41">
    <block PREFIX:line="1444" PREFIX:column="5">{
      <if PREFIX:line="1445" PREFIX:column="7">if <condition PREFIX:line="1445" PREFIX:column="10">( <expr><call><name PREFIX:line="1445" PREFIX:column="12">cp_GetColor</name><argument_list PREFIX:line="1445" PREFIX:column="23">(<argument><expr><name PREFIX:line="1445" PREFIX:column="24">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="1445" PREFIX:column="31">color</name></expr> )</condition><then PREFIX:line="1445" PREFIX:column="38">
      <block PREFIX:line="1446" PREFIX:column="7">{
	<comment type="block" PREFIX:line="1447" PREFIX:column="9">/* the weight of the PAWN */</comment>
	<expr_stmt><expr><name><name PREFIX:line="1448" PREFIX:column="9">lrc_obj</name>.<name PREFIX:line="1448" PREFIX:column="17">find_piece_weight</name><index PREFIX:line="1448" PREFIX:column="34">[<expr><name PREFIX:line="1448" PREFIX:column="35">color</name></expr>]</index></name> += 1</expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="1449" PREFIX:column="9">lrc_obj</name>.<name PREFIX:line="1449" PREFIX:column="17">find_piece_cnt</name><index PREFIX:line="1449" PREFIX:column="31">[<expr><name PREFIX:line="1449" PREFIX:column="32">color</name></expr>]</index></name>++</expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
}</block></function>


<comment type="block" PREFIX:line="1456" PREFIX:column="1">/*
  find out, which pieces do attack a specified field
  used to
  - check if the KING can do castling
  - check if the KING must move

  may be used in the eval procedure ... once...

  the result is stored in the global array
    uint8_t lrc_obj.find_piece_weight[2];
  which is indexed with the color.
  lrc_obj.find_piece_weight[COLOR_WHITE] is the sum of all white pieces
  which can directly move to this field.

  example:
    if the black KING is at "pos" and lrc_obj.find_piece_weight[COLOR_WHITE] is not zero 
    (after executing ce_CalculatePositionWeight(pos)) then the KING must be protected or moveed, because 
    the KING was given check.
*/</comment>

<function><type><name PREFIX:line="1476" PREFIX:column="1">void</name></type> <name PREFIX:line="1476" PREFIX:column="6">ce_CalculatePositionWeight</name><parameter_list PREFIX:line="1476" PREFIX:column="32">(<param><decl><type><name PREFIX:line="1476" PREFIX:column="33">uint8_t</name></type> <name PREFIX:line="1476" PREFIX:column="41">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="1477" PREFIX:column="1">{
  
  <expr_stmt><expr><name><name PREFIX:line="1479" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1479" PREFIX:column="11">find_piece_weight</name><index PREFIX:line="1479" PREFIX:column="28">[<expr PREFIX:line="1479" PREFIX:column="29">0</expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="1480" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1480" PREFIX:column="11">find_piece_weight</name><index PREFIX:line="1480" PREFIX:column="28">[<expr PREFIX:line="1480" PREFIX:column="29">1</expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="1481" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1481" PREFIX:column="11">find_piece_cnt</name><index PREFIX:line="1481" PREFIX:column="25">[<expr PREFIX:line="1481" PREFIX:column="26">0</expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="1482" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1482" PREFIX:column="11">find_piece_cnt</name><index PREFIX:line="1482" PREFIX:column="25">[<expr PREFIX:line="1482" PREFIX:column="26">1</expr>]</index></name> = 0</expr>;</expr_stmt>
  
  <if PREFIX:line="1484" PREFIX:column="3">if <condition PREFIX:line="1484" PREFIX:column="6">( <expr PREFIX:line="1484" PREFIX:column="8">(<name PREFIX:line="1484" PREFIX:column="9">pos</name> &amp; 0x088) != 0</expr> )</condition><then PREFIX:line="1484" PREFIX:column="28">
    <return PREFIX:line="1485" PREFIX:column="5">return;</return></then></if>

  <expr_stmt><expr><call><name PREFIX:line="1487" PREFIX:column="3">ce_FindPieceByStep</name><argument_list PREFIX:line="1487" PREFIX:column="21">(<argument><expr><name PREFIX:line="1487" PREFIX:column="22">pos</name></expr></argument>, <argument><expr><name PREFIX:line="1487" PREFIX:column="27">PIECE_ROOK</name></expr></argument>, <argument><expr><name PREFIX:line="1487" PREFIX:column="39">ce_dir_offset_rook</name></expr></argument>, <argument><expr PREFIX:line="1487" PREFIX:column="59">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1488" PREFIX:column="3">ce_FindPieceByStep</name><argument_list PREFIX:line="1488" PREFIX:column="21">(<argument><expr><name PREFIX:line="1488" PREFIX:column="22">pos</name></expr></argument>, <argument><expr><name PREFIX:line="1488" PREFIX:column="27">PIECE_BISHOP</name></expr></argument>, <argument><expr><name PREFIX:line="1488" PREFIX:column="41">ce_dir_offset_bishop</name></expr></argument>, <argument><expr PREFIX:line="1488" PREFIX:column="63">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1489" PREFIX:column="3">ce_FindPieceByStep</name><argument_list PREFIX:line="1489" PREFIX:column="21">(<argument><expr><name PREFIX:line="1489" PREFIX:column="22">pos</name></expr></argument>, <argument><expr><name PREFIX:line="1489" PREFIX:column="27">PIECE_QUEEN</name></expr></argument>, <argument><expr><name PREFIX:line="1489" PREFIX:column="40">ce_dir_offset_queen</name></expr></argument>, <argument><expr PREFIX:line="1489" PREFIX:column="61">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1490" PREFIX:column="3">ce_FindPieceByStep</name><argument_list PREFIX:line="1490" PREFIX:column="21">(<argument><expr><name PREFIX:line="1490" PREFIX:column="22">pos</name></expr></argument>, <argument><expr><name PREFIX:line="1490" PREFIX:column="27">PIECE_KNIGHT</name></expr></argument>, <argument><expr><name PREFIX:line="1490" PREFIX:column="41">ce_dir_offset_knight</name></expr></argument>, <argument><expr PREFIX:line="1490" PREFIX:column="63">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1491" PREFIX:column="3">ce_FindPieceByStep</name><argument_list PREFIX:line="1491" PREFIX:column="21">(<argument><expr><name PREFIX:line="1491" PREFIX:column="22">pos</name></expr></argument>, <argument><expr><name PREFIX:line="1491" PREFIX:column="27">PIECE_KING</name></expr></argument>, <argument><expr><name PREFIX:line="1491" PREFIX:column="39">ce_dir_offset_queen</name></expr></argument>, <argument><expr PREFIX:line="1491" PREFIX:column="60">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name PREFIX:line="1493" PREFIX:column="3">ce_FindPawnPiece</name><argument_list PREFIX:line="1493" PREFIX:column="19">(<argument><expr><name PREFIX:line="1493" PREFIX:column="20">pos</name>+17</expr></argument>, <argument><expr><name PREFIX:line="1493" PREFIX:column="28">COLOR_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1494" PREFIX:column="3">ce_FindPawnPiece</name><argument_list PREFIX:line="1494" PREFIX:column="19">(<argument><expr><name PREFIX:line="1494" PREFIX:column="20">pos</name>+15</expr></argument>, <argument><expr><name PREFIX:line="1494" PREFIX:column="28">COLOR_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1495" PREFIX:column="3">ce_FindPawnPiece</name><argument_list PREFIX:line="1495" PREFIX:column="19">(<argument><expr><name PREFIX:line="1495" PREFIX:column="20">pos</name>-17</expr></argument>, <argument><expr><name PREFIX:line="1495" PREFIX:column="28">COLOR_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1496" PREFIX:column="3">ce_FindPawnPiece</name><argument_list PREFIX:line="1496" PREFIX:column="19">(<argument><expr><name PREFIX:line="1496" PREFIX:column="20">pos</name>-15</expr></argument>, <argument><expr><name PREFIX:line="1496" PREFIX:column="28">COLOR_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="1499" PREFIX:column="1">/*
  calculate the summed weight of pieces with specified color which can move to a specified position

  argument:
    pos: 	the position which should be analysed
    color: 	the color of those pieces which should be analysed
		e.g. if a black piece is at 'pos' and 'color' is white then this procedure returns the white atting count
*/</comment>
<function><type><name PREFIX:line="1507" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1507" PREFIX:column="9">ce_GetPositionAttackWeight</name><parameter_list PREFIX:line="1507" PREFIX:column="35">(<param><decl><type><name PREFIX:line="1507" PREFIX:column="36">uint8_t</name></type> <name PREFIX:line="1507" PREFIX:column="44">pos</name></decl></param>, <param><decl><type><name PREFIX:line="1507" PREFIX:column="49">uint8_t</name></type> <name PREFIX:line="1507" PREFIX:column="57">color</name></decl></param>)</parameter_list>
<block PREFIX:line="1508" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1509" PREFIX:column="3">ce_CalculatePositionWeight</name><argument_list PREFIX:line="1509" PREFIX:column="29">(<argument><expr><name PREFIX:line="1509" PREFIX:column="30">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="1510" PREFIX:column="3">return <expr><name><name PREFIX:line="1510" PREFIX:column="10">lrc_obj</name>.<name PREFIX:line="1510" PREFIX:column="18">find_piece_weight</name><index PREFIX:line="1510" PREFIX:column="35">[<expr><name PREFIX:line="1510" PREFIX:column="36">color</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="1513" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1513" PREFIX:column="9">ce_GetPositionAttackCount</name><parameter_list PREFIX:line="1513" PREFIX:column="34">(<param><decl><type><name PREFIX:line="1513" PREFIX:column="35">uint8_t</name></type> <name PREFIX:line="1513" PREFIX:column="43">pos</name></decl></param>, <param><decl><type><name PREFIX:line="1513" PREFIX:column="48">uint8_t</name></type> <name PREFIX:line="1513" PREFIX:column="56">color</name></decl></param>)</parameter_list>
<block PREFIX:line="1514" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1515" PREFIX:column="3">ce_CalculatePositionWeight</name><argument_list PREFIX:line="1515" PREFIX:column="29">(<argument><expr><name PREFIX:line="1515" PREFIX:column="30">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return PREFIX:line="1516" PREFIX:column="3">return <expr><name><name PREFIX:line="1516" PREFIX:column="10">lrc_obj</name>.<name PREFIX:line="1516" PREFIX:column="18">find_piece_cnt</name><index PREFIX:line="1516" PREFIX:column="32">[<expr><name PREFIX:line="1516" PREFIX:column="33">color</name></expr>]</index></name></expr>;</return>
}</block></function>


<comment type="block" PREFIX:line="1520" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="1521" PREFIX:column="1">/* depth search starts here: loop over all pieces of the current color on the board */</comment>
<comment type="block" PREFIX:line="1522" PREFIX:column="1">/*==============================================================*/</comment>

<function><type><name PREFIX:line="1524" PREFIX:column="1">void</name></type> <name PREFIX:line="1524" PREFIX:column="6">ce_LoopPieces</name><parameter_list PREFIX:line="1524" PREFIX:column="19">(<param><decl><type><name PREFIX:line="1524" PREFIX:column="20">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1525" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1526" PREFIX:column="3">stack_element_p</name></type> <name PREFIX:line="1526" PREFIX:column="19">e</name> <init PREFIX:line="1526" PREFIX:column="21">= <expr><call><name PREFIX:line="1526" PREFIX:column="23">stack_GetCurrElement</name><argument_list PREFIX:line="1526" PREFIX:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" PREFIX:line="1527" PREFIX:column="3">/* start with lower left position (A1) */</comment>
  <expr_stmt><expr><name><name PREFIX:line="1528" PREFIX:column="3">e</name>-&gt;<name PREFIX:line="1528" PREFIX:column="6">current_pos</name></name> = 0</expr>;</expr_stmt>
  <do PREFIX:line="1529" PREFIX:column="3">do
  <block PREFIX:line="1530" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="1531" PREFIX:column="5">e</name>-&gt;<name PREFIX:line="1531" PREFIX:column="8">current_cp</name></name> = <call><name PREFIX:line="1531" PREFIX:column="21">cp_GetFromBoard</name><argument_list PREFIX:line="1531" PREFIX:column="36">(<argument><expr><name><name PREFIX:line="1531" PREFIX:column="37">e</name>-&gt;<name PREFIX:line="1531" PREFIX:column="40">current_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" PREFIX:line="1532" PREFIX:column="5">/* check if the position on the board is empty */</comment>
    <if PREFIX:line="1533" PREFIX:column="5">if <condition PREFIX:line="1533" PREFIX:column="8">( <expr><name><name PREFIX:line="1533" PREFIX:column="10">e</name>-&gt;<name PREFIX:line="1533" PREFIX:column="13">current_cp</name></name> != 0</expr> )</condition><then PREFIX:line="1533" PREFIX:column="30">
    <block PREFIX:line="1534" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1535" PREFIX:column="7">/* only generate moves for the current color */</comment>
      <if PREFIX:line="1536" PREFIX:column="7">if <condition PREFIX:line="1536" PREFIX:column="10">( <expr><name><name PREFIX:line="1536" PREFIX:column="12">e</name>-&gt;<name PREFIX:line="1536" PREFIX:column="15">current_color</name></name> == <call><name PREFIX:line="1536" PREFIX:column="32">cp_GetColor</name><argument_list PREFIX:line="1536" PREFIX:column="43">(<argument><expr><name><name PREFIX:line="1536" PREFIX:column="44">e</name>-&gt;<name PREFIX:line="1536" PREFIX:column="47">current_cp</name></name></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="1536" PREFIX:column="60">
      <block PREFIX:line="1537" PREFIX:column="7">{
	<expr_stmt><expr><call><name PREFIX:line="1538" PREFIX:column="9">chess_Thinking</name><argument_list PREFIX:line="1538" PREFIX:column="23">()</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block" PREFIX:line="1540" PREFIX:column="9">/* find out which piece is used */</comment>
	<switch PREFIX:line="1541" PREFIX:column="9">switch<condition PREFIX:line="1541" PREFIX:column="15">(<expr><call><name PREFIX:line="1541" PREFIX:column="16">cp_GetPiece</name><argument_list PREFIX:line="1541" PREFIX:column="27">(<argument><expr><name><name PREFIX:line="1541" PREFIX:column="28">e</name>-&gt;<name PREFIX:line="1541" PREFIX:column="31">current_cp</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block PREFIX:line="1542" PREFIX:column="9">{
	  <case PREFIX:line="1543" PREFIX:column="11">case <expr><name PREFIX:line="1543" PREFIX:column="16">PIECE_NONE</name></expr>:
	    <break PREFIX:line="1544" PREFIX:column="13">break;</break>
	  </case><case PREFIX:line="1545" PREFIX:column="11">case <expr><name PREFIX:line="1545" PREFIX:column="16">PIECE_PAWN</name></expr>:
	    <expr_stmt><expr><call><name PREFIX:line="1546" PREFIX:column="13">ce_LoopPawn</name><argument_list PREFIX:line="1546" PREFIX:column="24">()</argument_list></call></expr>;</expr_stmt>
	    <break PREFIX:line="1547" PREFIX:column="13">break;</break>
	  </case><case PREFIX:line="1548" PREFIX:column="11">case <expr><name PREFIX:line="1548" PREFIX:column="16">PIECE_KNIGHT</name></expr>:
	    <expr_stmt><expr><call><name PREFIX:line="1549" PREFIX:column="13">ce_LoopKnight</name><argument_list PREFIX:line="1549" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
	    <break PREFIX:line="1550" PREFIX:column="13">break;</break>
	  </case><case PREFIX:line="1551" PREFIX:column="11">case <expr><name PREFIX:line="1551" PREFIX:column="16">PIECE_BISHOP</name></expr>:
	    <expr_stmt><expr><call><name PREFIX:line="1552" PREFIX:column="13">ce_LoopBishop</name><argument_list PREFIX:line="1552" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
	    <break PREFIX:line="1553" PREFIX:column="13">break;</break>
	  </case><case PREFIX:line="1554" PREFIX:column="11">case <expr><name PREFIX:line="1554" PREFIX:column="16">PIECE_ROOK</name></expr>:
	    <expr_stmt><expr><call><name PREFIX:line="1555" PREFIX:column="13">ce_LoopRook</name><argument_list PREFIX:line="1555" PREFIX:column="24">()</argument_list></call></expr>;</expr_stmt>
	    <break PREFIX:line="1556" PREFIX:column="13">break;</break>
	  </case><case PREFIX:line="1557" PREFIX:column="11">case <expr><name PREFIX:line="1557" PREFIX:column="16">PIECE_QUEEN</name></expr>:
	    <expr_stmt><expr><call><name PREFIX:line="1558" PREFIX:column="13">ce_LoopQueen</name><argument_list PREFIX:line="1558" PREFIX:column="25">()</argument_list></call></expr>;</expr_stmt>
	    <break PREFIX:line="1559" PREFIX:column="13">break;</break>
	  </case><case PREFIX:line="1560" PREFIX:column="11">case <expr><name PREFIX:line="1560" PREFIX:column="16">PIECE_KING</name></expr>:
	    <expr_stmt><expr><call><name PREFIX:line="1561" PREFIX:column="13">ce_LoopKing</name><argument_list PREFIX:line="1561" PREFIX:column="24">()</argument_list></call></expr>;</expr_stmt>
	    <break PREFIX:line="1562" PREFIX:column="13">break;</break>
	</case>}</block></switch>
      }</block></then></if>
    }</block></then></if>    
    <expr_stmt><expr><name><name PREFIX:line="1566" PREFIX:column="5">e</name>-&gt;<name PREFIX:line="1566" PREFIX:column="8">current_pos</name></name> = <call><name PREFIX:line="1566" PREFIX:column="22">cu_NextPos</name><argument_list PREFIX:line="1566" PREFIX:column="32">(<argument><expr><name><name PREFIX:line="1566" PREFIX:column="33">e</name>-&gt;<name PREFIX:line="1566" PREFIX:column="36">current_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block> while<condition PREFIX:line="1567" PREFIX:column="10">( <expr><name><name PREFIX:line="1567" PREFIX:column="12">e</name>-&gt;<name PREFIX:line="1567" PREFIX:column="15">current_pos</name></name> != 0</expr> )</condition>;</do>
}</block></function>

<comment type="block" PREFIX:line="1570" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="1571" PREFIX:column="1">/* user interface */</comment>
<comment type="block" PREFIX:line="1572" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="block" PREFIX:line="1574" PREFIX:column="1">/*
eval_t chess_EvalCurrBoard(uint8_t color)
{
  stack_Init(0);
  stack_GetCurrElement()-&gt;current_color = color;
  ce_LoopPieces();
  return stack_GetCurrElement()-&gt;best_eval;
}
*/</comment>

<comment type="block" PREFIX:line="1584" PREFIX:column="1">/* clear any marks on the board */</comment>
<function><type><name PREFIX:line="1585" PREFIX:column="1">void</name></type> <name PREFIX:line="1585" PREFIX:column="6">chess_ClearMarks</name><parameter_list PREFIX:line="1585" PREFIX:column="22">(<param><decl><type><name PREFIX:line="1585" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1586" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1587" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1587" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <for PREFIX:line="1588" PREFIX:column="3">for( <init><expr><name PREFIX:line="1588" PREFIX:column="8">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="1588" PREFIX:column="15">i</name> &lt; 64</expr>;</condition> <incr><expr><name PREFIX:line="1588" PREFIX:column="23">i</name>++</expr></incr> )
     <expr_stmt><expr><name><name PREFIX:line="1589" PREFIX:column="6">lrc_obj</name>.<name PREFIX:line="1589" PREFIX:column="14">board</name><index PREFIX:line="1589" PREFIX:column="19">[<expr><name PREFIX:line="1589" PREFIX:column="20">i</name></expr>]</index></name> &amp;= ~<name PREFIX:line="1589" PREFIX:column="27">CP_MARK_MASK</name></expr>;</expr_stmt></for>
}</block></function>

<comment type="block" PREFIX:line="1592" PREFIX:column="1">/*
  Mark all pieces which can do moves. This is done by setting flags on the global board
*/</comment>
<function><type><name PREFIX:line="1595" PREFIX:column="1">void</name></type> <name PREFIX:line="1595" PREFIX:column="6">chess_MarkMovable</name><parameter_list PREFIX:line="1595" PREFIX:column="23">(<param><decl><type><name PREFIX:line="1595" PREFIX:column="24">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1596" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1597" PREFIX:column="3">stack_Init</name><argument_list PREFIX:line="1597" PREFIX:column="13">(<argument><expr PREFIX:line="1597" PREFIX:column="14">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line" PREFIX:line="1598" PREFIX:column="3">//stack_GetCurrElement()-&gt;current_color = color;</comment>
  <expr_stmt><expr><name><name PREFIX:line="1599" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1599" PREFIX:column="11">check_mode</name></name> = <name PREFIX:line="1599" PREFIX:column="24">CHECK_MODE_MOVEABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1600" PREFIX:column="3">ce_LoopPieces</name><argument_list PREFIX:line="1600" PREFIX:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="1603" PREFIX:column="1">/*
  Checks, if the piece can move from src_pos to dest_pos

  src_pos: The game position of a piece on the chess board
*/</comment>
<function><type><name PREFIX:line="1608" PREFIX:column="1">void</name></type> <name PREFIX:line="1608" PREFIX:column="6">chess_MarkTargetMoves</name><parameter_list PREFIX:line="1608" PREFIX:column="27">(<param><decl><type><name PREFIX:line="1608" PREFIX:column="28">uint8_t</name></type> <name PREFIX:line="1608" PREFIX:column="36">src_pos</name></decl></param>)</parameter_list>
<block PREFIX:line="1609" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1610" PREFIX:column="3">stack_Init</name><argument_list PREFIX:line="1610" PREFIX:column="13">(<argument><expr PREFIX:line="1610" PREFIX:column="14">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1611" PREFIX:column="3">stack_GetCurrElement</name><argument_list PREFIX:line="1611" PREFIX:column="23">()</argument_list></call>-&gt;<name PREFIX:line="1611" PREFIX:column="27">current_color</name> = <call><name PREFIX:line="1611" PREFIX:column="43">cp_GetColor</name><argument_list PREFIX:line="1611" PREFIX:column="54">(<argument><expr><call><name PREFIX:line="1611" PREFIX:column="55">cp_GetFromBoard</name><argument_list PREFIX:line="1611" PREFIX:column="70">(<argument><expr><name PREFIX:line="1611" PREFIX:column="71">src_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="1612" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1612" PREFIX:column="11">check_src_pos</name></name> = <name PREFIX:line="1612" PREFIX:column="27">src_pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="1613" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1613" PREFIX:column="11">check_mode</name></name> = <name PREFIX:line="1613" PREFIX:column="24">CHECK_MODE_TARGET_MOVE</name></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name PREFIX:line="1614" PREFIX:column="3">ce_LoopPieces</name><argument_list PREFIX:line="1614" PREFIX:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="1617" PREFIX:column="1">/*
  first call should start with 255
  this procedure will return 255 if 
      - there are no marks at all
      - it has looped over all marks once
*/</comment>
<function><type><name PREFIX:line="1623" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1623" PREFIX:column="9">chess_GetNextMarked</name><parameter_list PREFIX:line="1623" PREFIX:column="28">(<param><decl><type><name PREFIX:line="1623" PREFIX:column="29">uint8_t</name></type> <name PREFIX:line="1623" PREFIX:column="37">arg</name></decl></param>, <param><decl><type><name PREFIX:line="1623" PREFIX:column="42">uint8_t</name></type> <name PREFIX:line="1623" PREFIX:column="50">is_prev</name></decl></param>)</parameter_list>
<block PREFIX:line="1624" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1625" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1625" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1626" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1626" PREFIX:column="11">pos</name> <init PREFIX:line="1626" PREFIX:column="15">= <expr><name PREFIX:line="1626" PREFIX:column="17">arg</name></expr></init></decl>;</decl_stmt>
  <for PREFIX:line="1627" PREFIX:column="3">for(<init><expr><name PREFIX:line="1627" PREFIX:column="7">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="1627" PREFIX:column="14">i</name> &lt; 64</expr>;</condition> <incr><expr><name PREFIX:line="1627" PREFIX:column="22">i</name>++</expr></incr>)
  <block PREFIX:line="1628" PREFIX:column="3">{
    <if PREFIX:line="1629" PREFIX:column="5">if <condition PREFIX:line="1629" PREFIX:column="8">( <expr><name PREFIX:line="1629" PREFIX:column="10">is_prev</name> != 0</expr> )</condition><then PREFIX:line="1629" PREFIX:column="24">
      <expr_stmt><expr><name PREFIX:line="1630" PREFIX:column="7">pos</name> = <call><name PREFIX:line="1630" PREFIX:column="13">cu_PrevPos</name><argument_list PREFIX:line="1630" PREFIX:column="23">(<argument><expr><name PREFIX:line="1630" PREFIX:column="24">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else PREFIX:line="1631" PREFIX:column="5">else
      <expr_stmt><expr><name PREFIX:line="1632" PREFIX:column="7">pos</name> = <call><name PREFIX:line="1632" PREFIX:column="13">cu_NextPos</name><argument_list PREFIX:line="1632" PREFIX:column="23">(<argument><expr><name PREFIX:line="1632" PREFIX:column="24">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <if PREFIX:line="1633" PREFIX:column="5">if <condition PREFIX:line="1633" PREFIX:column="8">( <expr><name PREFIX:line="1633" PREFIX:column="10">arg</name> != 255 &amp;&amp; <name PREFIX:line="1633" PREFIX:column="24">pos</name> == 0</expr> )</condition><then PREFIX:line="1633" PREFIX:column="34">
      <return PREFIX:line="1634" PREFIX:column="7">return <expr PREFIX:line="1634" PREFIX:column="14">255</expr>;</return></then></if>
    <if PREFIX:line="1635" PREFIX:column="5">if <condition PREFIX:line="1635" PREFIX:column="8">( <expr><call><name PREFIX:line="1635" PREFIX:column="10">cp_IsMarked</name><argument_list PREFIX:line="1635" PREFIX:column="21">(<argument><expr><call><name PREFIX:line="1635" PREFIX:column="22">cp_GetFromBoard</name><argument_list PREFIX:line="1635" PREFIX:column="37">(<argument><expr><name PREFIX:line="1635" PREFIX:column="38">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="1635" PREFIX:column="45">
      <return PREFIX:line="1636" PREFIX:column="7">return <expr><name PREFIX:line="1636" PREFIX:column="14">pos</name></expr>;</return></then></if>
  }</block></for>
  <return PREFIX:line="1638" PREFIX:column="3">return <expr PREFIX:line="1638" PREFIX:column="10">255</expr>;</return>
}</block></function>


<comment type="block" PREFIX:line="1642" PREFIX:column="1">/* make a manual move: this is a little bit more than cu_Move() */</comment>
<function><type><name PREFIX:line="1643" PREFIX:column="1">void</name></type> <name PREFIX:line="1643" PREFIX:column="6">chess_ManualMove</name><parameter_list PREFIX:line="1643" PREFIX:column="22">(<param><decl><type><name PREFIX:line="1643" PREFIX:column="23">uint8_t</name></type> <name PREFIX:line="1643" PREFIX:column="31">src</name></decl></param>, <param><decl><type><name PREFIX:line="1643" PREFIX:column="36">uint8_t</name></type> <name PREFIX:line="1643" PREFIX:column="44">dest</name></decl></param>)</parameter_list>
<block PREFIX:line="1644" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1645" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1645" PREFIX:column="11">cp</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="1647" PREFIX:column="3">/* printf("chess_ManualMove %02x -&gt; %02x\n", src, dest); */</comment>
  
  <comment type="block" PREFIX:line="1649" PREFIX:column="3">/* if all other things fail, this is the place where the game is to be decided: */</comment>
  <comment type="block" PREFIX:line="1650" PREFIX:column="3">/* ... if the KING is captured */</comment>
  <expr_stmt><expr><name PREFIX:line="1651" PREFIX:column="3">cp</name> = <call><name PREFIX:line="1651" PREFIX:column="8">cp_GetFromBoard</name><argument_list PREFIX:line="1651" PREFIX:column="23">(<argument><expr><name PREFIX:line="1651" PREFIX:column="24">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if PREFIX:line="1652" PREFIX:column="3">if <condition PREFIX:line="1652" PREFIX:column="6">( <expr><call><name PREFIX:line="1652" PREFIX:column="8">cp_GetPiece</name><argument_list PREFIX:line="1652" PREFIX:column="19">(<argument><expr><name PREFIX:line="1652" PREFIX:column="20">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="1652" PREFIX:column="27">PIECE_KING</name></expr> )</condition><then PREFIX:line="1652" PREFIX:column="39">
  <block PREFIX:line="1653" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="1654" PREFIX:column="5">lrc_obj</name>.<name PREFIX:line="1654" PREFIX:column="13">is_game_end</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="1655" PREFIX:column="5">lrc_obj</name>.<name PREFIX:line="1655" PREFIX:column="13">lost_side_color</name></name> = <call><name PREFIX:line="1655" PREFIX:column="31">cp_GetColor</name><argument_list PREFIX:line="1655" PREFIX:column="42">(<argument><expr><name PREFIX:line="1655" PREFIX:column="43">cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  }</block></then></if>

  <comment type="block" PREFIX:line="1658" PREFIX:column="3">/* clear ply history here, to avoid memory overflow */</comment>
  <comment type="block" PREFIX:line="1659" PREFIX:column="3">/* may be the last X moves can be kept here */</comment>
  <expr_stmt><expr><call><name PREFIX:line="1660" PREFIX:column="3">cu_ReduceHistoryByFullMove</name><argument_list PREFIX:line="1660" PREFIX:column="29">()</argument_list></call></expr>;</expr_stmt>
  <comment type="block" PREFIX:line="1661" PREFIX:column="3">/* perform the move on the board */</comment>
  <expr_stmt><expr><call><name PREFIX:line="1662" PREFIX:column="3">cu_Move</name><argument_list PREFIX:line="1662" PREFIX:column="10">(<argument><expr><name PREFIX:line="1662" PREFIX:column="11">src</name></expr></argument>, <argument><expr><name PREFIX:line="1662" PREFIX:column="16">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1664" PREFIX:column="3">/* update en passant double move positions: en passant position is removed after two half moves  */</comment>
  <expr_stmt><expr><name><name PREFIX:line="1665" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1665" PREFIX:column="11">pawn_dbl_move</name><index PREFIX:line="1665" PREFIX:column="24">[<expr><name><name PREFIX:line="1665" PREFIX:column="25">lrc_obj</name>.<name PREFIX:line="1665" PREFIX:column="33">ply_count</name></name>&amp;1</expr>]</index></name>  = <name PREFIX:line="1665" PREFIX:column="49">ILLEGAL_POSITION</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1667" PREFIX:column="3">/* update the global half move counter */</comment>
  <expr_stmt><expr><name><name PREFIX:line="1668" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="1668" PREFIX:column="11">ply_count</name></name>++</expr>;</expr_stmt>


  <comment type="block" PREFIX:line="1671" PREFIX:column="3">/* make a small check about the end of the game */</comment>
  <comment type="block" PREFIX:line="1672" PREFIX:column="3">/* use at least depth 1, because we must know if the king can still move */</comment>
  <comment type="block" PREFIX:line="1673" PREFIX:column="3">/* this is: King moves at level 0 and will be captured at level 1 */</comment>
  <comment type="block" PREFIX:line="1674" PREFIX:column="3">/* so we check if the king can move and will not be captured at search level 1 */</comment>
  
  <expr_stmt><expr><call><name PREFIX:line="1676" PREFIX:column="3">stack_Init</name><argument_list PREFIX:line="1676" PREFIX:column="13">(<argument><expr PREFIX:line="1676" PREFIX:column="14">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1677" PREFIX:column="3">ce_LoopPieces</name><argument_list PREFIX:line="1677" PREFIX:column="16">()</argument_list></call></expr>;</expr_stmt> 

  <comment type="block" PREFIX:line="1679" PREFIX:column="3">/* printf("chess_ManualMove/analysis best_from_pos %02x -&gt; best_to_pos %02x\n", stack_GetCurrElement()-&gt;best_from_pos, stack_GetCurrElement()-&gt;best_to_pos); */</comment>

  <comment type="block" PREFIX:line="1681" PREFIX:column="3">/* analyse the eval result */</comment>
  
  <comment type="block" PREFIX:line="1683" PREFIX:column="3">/* check if the other player has any moves left */</comment>
  <if PREFIX:line="1684" PREFIX:column="3">if <condition PREFIX:line="1684" PREFIX:column="6">( <expr><call><name PREFIX:line="1684" PREFIX:column="8">stack_GetCurrElement</name><argument_list PREFIX:line="1684" PREFIX:column="28">()</argument_list></call>-&gt;<name PREFIX:line="1684" PREFIX:column="32">best_from_pos</name> == <name PREFIX:line="1684" PREFIX:column="49">ILLEGAL_POSITION</name></expr> )</condition><then PREFIX:line="1684" PREFIX:column="67">
  <block PREFIX:line="1685" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="1686" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="1686" PREFIX:column="13">color</name></decl>;</decl_stmt>
    <comment type="block" PREFIX:line="1687" PREFIX:column="5">/* conditions: */</comment>
    <comment type="block" PREFIX:line="1688" PREFIX:column="5">/* 1. no King, should never happen, opposite color has won */</comment>
    <comment type="block" PREFIX:line="1689" PREFIX:column="5">/*		this is already checked above at the beginning if this procedure */</comment>
    <comment type="block" PREFIX:line="1690" PREFIX:column="5">/* 2. King is under attack, opposite color has won */</comment>
    <comment type="block" PREFIX:line="1691" PREFIX:column="5">/* 3. King is not under attack, game is a draw */</comment>

    <decl_stmt><decl><type><name PREFIX:line="1693" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="1693" PREFIX:column="13">i</name> <init PREFIX:line="1693" PREFIX:column="15">= <expr PREFIX:line="1693" PREFIX:column="17">0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name PREFIX:line="1694" PREFIX:column="5">color</name> = <name><name PREFIX:line="1694" PREFIX:column="13">lrc_obj</name>.<name PREFIX:line="1694" PREFIX:column="21">ply_count</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="1695" PREFIX:column="5">color</name> &amp;= 1</expr>;</expr_stmt>
    <do PREFIX:line="1696" PREFIX:column="5">do
    <block PREFIX:line="1697" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="1698" PREFIX:column="7">cp</name> = <call><name PREFIX:line="1698" PREFIX:column="12">cp_GetFromBoard</name><argument_list PREFIX:line="1698" PREFIX:column="27">(<argument><expr><name PREFIX:line="1698" PREFIX:column="28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block" PREFIX:line="1699" PREFIX:column="7">/* look for the King */</comment>
      <if PREFIX:line="1700" PREFIX:column="7">if <condition PREFIX:line="1700" PREFIX:column="10">( <expr><call><name PREFIX:line="1700" PREFIX:column="12">cp_GetPiece</name><argument_list PREFIX:line="1700" PREFIX:column="23">(<argument><expr><name PREFIX:line="1700" PREFIX:column="24">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="1700" PREFIX:column="31">PIECE_KING</name></expr> )</condition><then PREFIX:line="1700" PREFIX:column="43">
      <block PREFIX:line="1701" PREFIX:column="7">{
	<if PREFIX:line="1702" PREFIX:column="9">if <condition PREFIX:line="1702" PREFIX:column="12">( <expr><call><name PREFIX:line="1702" PREFIX:column="14">cp_GetColor</name><argument_list PREFIX:line="1702" PREFIX:column="25">(<argument><expr><name PREFIX:line="1702" PREFIX:column="26">cp</name></expr></argument>)</argument_list></call> == <name PREFIX:line="1702" PREFIX:column="33">color</name></expr> )</condition><then PREFIX:line="1702" PREFIX:column="40">
	<block PREFIX:line="1703" PREFIX:column="9">{
	  <comment type="block" PREFIX:line="1704" PREFIX:column="11">/* check if  KING is attacked */</comment>
	  <if PREFIX:line="1705" PREFIX:column="11">if <condition PREFIX:line="1705" PREFIX:column="14">( <expr><call><name PREFIX:line="1705" PREFIX:column="16">ce_GetPositionAttackCount</name><argument_list PREFIX:line="1705" PREFIX:column="41">(<argument><expr><name PREFIX:line="1705" PREFIX:column="42">i</name></expr></argument>, <argument><expr><name PREFIX:line="1705" PREFIX:column="45">color</name>^1</expr></argument>)</argument_list></call> != 0</expr> )</condition><then PREFIX:line="1705" PREFIX:column="60">
	  <block PREFIX:line="1706" PREFIX:column="11">{
	    <comment type="block" PREFIX:line="1707" PREFIX:column="13">/* KING is under attack (check) and can not move: Game is lost */</comment>
	    <expr_stmt><expr><name><name PREFIX:line="1708" PREFIX:column="13">lrc_obj</name>.<name PREFIX:line="1708" PREFIX:column="21">is_game_end</name></name> = 1</expr>;</expr_stmt>
	    <expr_stmt><expr><name><name PREFIX:line="1709" PREFIX:column="13">lrc_obj</name>.<name PREFIX:line="1709" PREFIX:column="21">lost_side_color</name></name> = <name PREFIX:line="1709" PREFIX:column="39">color</name></expr>;</expr_stmt> 
	  }</block></then>
	  <else PREFIX:line="1711" PREFIX:column="11">else
	  <block PREFIX:line="1712" PREFIX:column="11">{
	    <comment type="block" PREFIX:line="1713" PREFIX:column="13">/* KING is NOT under attack (check) but can not move: Game is a draw */</comment>
	    <expr_stmt><expr><name><name PREFIX:line="1714" PREFIX:column="13">lrc_obj</name>.<name PREFIX:line="1714" PREFIX:column="21">is_game_end</name></name> = 1</expr>;</expr_stmt>
	    <expr_stmt><expr><name><name PREFIX:line="1715" PREFIX:column="13">lrc_obj</name>.<name PREFIX:line="1715" PREFIX:column="21">lost_side_color</name></name> = 2</expr>;</expr_stmt> 
	  }</block></else></if>
	  <comment type="block" PREFIX:line="1717" PREFIX:column="11">/* break out of the loop */</comment>
	  <break PREFIX:line="1718" PREFIX:column="11">break;</break>	  
	}</block></then></if>
      }</block></then></if>
      <expr_stmt><expr><name PREFIX:line="1721" PREFIX:column="7">i</name> = <call><name PREFIX:line="1721" PREFIX:column="11">cu_NextPos</name><argument_list PREFIX:line="1721" PREFIX:column="21">(<argument><expr><name PREFIX:line="1721" PREFIX:column="22">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while<condition PREFIX:line="1722" PREFIX:column="12">( <expr><name PREFIX:line="1722" PREFIX:column="14">i</name> != 0</expr> )</condition>;</do>
  }</block></then></if>
}</block></function>

<comment type="block" PREFIX:line="1726" PREFIX:column="1">/* let the computer do a move */</comment>
<function><type><name PREFIX:line="1727" PREFIX:column="1">void</name></type> <name PREFIX:line="1727" PREFIX:column="6">chess_ComputerMove</name><parameter_list PREFIX:line="1727" PREFIX:column="24">(<param><decl><type><name PREFIX:line="1727" PREFIX:column="25">uint8_t</name></type> <name PREFIX:line="1727" PREFIX:column="33">depth</name></decl></param>)</parameter_list>
<block PREFIX:line="1728" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="1729" PREFIX:column="3">stack_Init</name><argument_list PREFIX:line="1729" PREFIX:column="13">(<argument><expr><name PREFIX:line="1729" PREFIX:column="14">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line" PREFIX:line="1731" PREFIX:column="3">//stack_GetCurrElement()-&gt;current_color = lrc_obj.ply_count;</comment>
  <comment type="line" PREFIX:line="1732" PREFIX:column="3">//stack_GetCurrElement()-&gt;current_color &amp;= 1;</comment>
  
  <expr_stmt><expr><call><name PREFIX:line="1734" PREFIX:column="3">cu_ReduceHistoryByFullMove</name><argument_list PREFIX:line="1734" PREFIX:column="29">()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1735" PREFIX:column="3">ce_LoopPieces</name><argument_list PREFIX:line="1735" PREFIX:column="16">()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name PREFIX:line="1737" PREFIX:column="3">chess_ManualMove</name><argument_list PREFIX:line="1737" PREFIX:column="19">(<argument><expr><call><name PREFIX:line="1737" PREFIX:column="20">stack_GetCurrElement</name><argument_list PREFIX:line="1737" PREFIX:column="40">()</argument_list></call>-&gt;<name PREFIX:line="1737" PREFIX:column="44">best_from_pos</name></expr></argument>, <argument><expr><call><name PREFIX:line="1737" PREFIX:column="59">stack_GetCurrElement</name><argument_list PREFIX:line="1737" PREFIX:column="79">()</argument_list></call>-&gt;<name PREFIX:line="1737" PREFIX:column="83">best_to_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block" PREFIX:line="1741" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="1742" PREFIX:column="1">/* unix code */</comment>
<comment type="block" PREFIX:line="1743" PREFIX:column="1">/*==============================================================*/</comment>

<cpp:ifdef PREFIX:line="1745" PREFIX:column="1">#<cpp:directive PREFIX:line="1745" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="1745" PREFIX:column="8">UNIX_MAIN</name></cpp:ifdef>

<cpp:include PREFIX:line="1747" PREFIX:column="1">#<cpp:directive PREFIX:line="1747" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="1747" PREFIX:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="1748" PREFIX:column="1">#<cpp:directive PREFIX:line="1748" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="1748" PREFIX:column="10">&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name PREFIX:line="1750" PREFIX:column="1">char</name> *</type><name><name PREFIX:line="1750" PREFIX:column="7">piece_str</name><index PREFIX:line="1750" PREFIX:column="16">[]</index></name> <init PREFIX:line="1750" PREFIX:column="19">= <expr><block PREFIX:line="1750" PREFIX:column="21">{
  <comment type="block" PREFIX:line="1751" PREFIX:column="3">/* 0x00 */</comment>
  <expr PREFIX:line="1752" PREFIX:column="3">"  "</expr>, 
  <expr PREFIX:line="1753" PREFIX:column="3">"wP"</expr>, 
  <expr PREFIX:line="1754" PREFIX:column="3">"wN"</expr>, 
  <expr PREFIX:line="1755" PREFIX:column="3">"wB"</expr>, 
  
  <comment type="block" PREFIX:line="1757" PREFIX:column="3">/* 0x04 */</comment>
  <expr PREFIX:line="1758" PREFIX:column="3">"wR"</expr>, 
  <expr PREFIX:line="1759" PREFIX:column="3">"wQ"</expr>, 
  <expr PREFIX:line="1760" PREFIX:column="3">"wK"</expr>, 
  <expr PREFIX:line="1761" PREFIX:column="3">"w?"</expr>, 

  <comment type="block" PREFIX:line="1763" PREFIX:column="3">/* 0x08 */</comment>
  <expr PREFIX:line="1764" PREFIX:column="3">"w?"</expr>, 
  <expr PREFIX:line="1765" PREFIX:column="3">"w?"</expr>, 
  <expr PREFIX:line="1766" PREFIX:column="3">"w?"</expr>, 
  <expr PREFIX:line="1767" PREFIX:column="3">"w?"</expr>, 
  
  <comment type="block" PREFIX:line="1769" PREFIX:column="3">/* 0x0c */</comment>
  <expr PREFIX:line="1770" PREFIX:column="3">"w?"</expr>, 
  <expr PREFIX:line="1771" PREFIX:column="3">"w?"</expr>, 
  <expr PREFIX:line="1772" PREFIX:column="3">"w?"</expr>, 
  <expr PREFIX:line="1773" PREFIX:column="3">"w?"</expr>, 

  <comment type="block" PREFIX:line="1775" PREFIX:column="3">/* 0x10 */</comment>
  <expr PREFIX:line="1776" PREFIX:column="3">"b "</expr>,
  <expr PREFIX:line="1777" PREFIX:column="3">"bP"</expr>, 
  <expr PREFIX:line="1778" PREFIX:column="3">"bN"</expr>, 
  <expr PREFIX:line="1779" PREFIX:column="3">"bB"</expr>, 
  <expr PREFIX:line="1780" PREFIX:column="3">"bR"</expr>, 
  <expr PREFIX:line="1781" PREFIX:column="3">"bQ"</expr>, 
  <expr PREFIX:line="1782" PREFIX:column="3">"bK"</expr>, 
  <expr PREFIX:line="1783" PREFIX:column="3">"b?"</expr>, 

  <expr PREFIX:line="1785" PREFIX:column="3">"b?"</expr>, 
  <expr PREFIX:line="1786" PREFIX:column="3">"b?"</expr>, 
  <expr PREFIX:line="1787" PREFIX:column="3">"b?"</expr>, 
  <expr PREFIX:line="1788" PREFIX:column="3">"b?"</expr>, 
  <expr PREFIX:line="1789" PREFIX:column="3">"b?"</expr>, 
  <expr PREFIX:line="1790" PREFIX:column="3">"b?"</expr>, 
  <expr PREFIX:line="1791" PREFIX:column="3">"b?"</expr>, 
  <expr PREFIX:line="1792" PREFIX:column="3">"b?"</expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name PREFIX:line="1795" PREFIX:column="1">void</name></type> <name PREFIX:line="1795" PREFIX:column="6">chess_Thinking</name><parameter_list PREFIX:line="1795" PREFIX:column="20">(<param><decl><type><name PREFIX:line="1795" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1796" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1797" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1797" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1798" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1798" PREFIX:column="11">cp</name> <init PREFIX:line="1798" PREFIX:column="14">= <expr><call><name PREFIX:line="1798" PREFIX:column="16">cp_GetPiece</name><argument_list PREFIX:line="1798" PREFIX:column="27">(<argument><expr><call><name PREFIX:line="1798" PREFIX:column="28">stack_GetCurrElement</name><argument_list PREFIX:line="1798" PREFIX:column="48">()</argument_list></call>-&gt;<name PREFIX:line="1798" PREFIX:column="52">current_cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name PREFIX:line="1800" PREFIX:column="3">printf</name><argument_list PREFIX:line="1800" PREFIX:column="9">(<argument><expr PREFIX:line="1800" PREFIX:column="10">"Thinking:  "</expr></argument>, <argument><expr><name><name PREFIX:line="1800" PREFIX:column="25">piece_str</name><index PREFIX:line="1800" PREFIX:column="34">[<expr><name PREFIX:line="1800" PREFIX:column="35">cp</name></expr>]</index></name></expr></argument>, <argument><expr><call><name PREFIX:line="1800" PREFIX:column="40">stack_GetCurrElement</name><argument_list PREFIX:line="1800" PREFIX:column="60">()</argument_list></call>-&gt;<name PREFIX:line="1800" PREFIX:column="64">current_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for PREFIX:line="1802" PREFIX:column="3">for( <init><expr><name PREFIX:line="1802" PREFIX:column="8">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="1802" PREFIX:column="15">i</name> &lt;= <name><name PREFIX:line="1802" PREFIX:column="20">lrc_obj</name>.<name PREFIX:line="1802" PREFIX:column="28">curr_depth</name></name></expr>;</condition> <incr><expr><name PREFIX:line="1802" PREFIX:column="40">i</name>++</expr></incr> )
    <expr_stmt><expr><call><name PREFIX:line="1803" PREFIX:column="5">printf</name><argument_list PREFIX:line="1803" PREFIX:column="11">(<argument><expr PREFIX:line="1803" PREFIX:column="12">"%s "</expr></argument>, <argument><expr><name><name PREFIX:line="1803" PREFIX:column="19">piece_str</name><index PREFIX:line="1803" PREFIX:column="28">[<expr PREFIX:line="1803" PREFIX:column="29">(<name><name PREFIX:line="1803" PREFIX:column="30">lrc_obj</name>.<name PREFIX:line="1803" PREFIX:column="38">stack_memory</name></name>+<name PREFIX:line="1803" PREFIX:column="51">i</name>)-&gt;<name PREFIX:line="1803" PREFIX:column="55">current_cp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
  
  <expr_stmt><expr><call><name PREFIX:line="1805" PREFIX:column="3">printf</name><argument_list PREFIX:line="1805" PREFIX:column="9">(<argument><expr PREFIX:line="1805" PREFIX:column="10">"    \r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="1808" PREFIX:column="1">void</name></type> <name PREFIX:line="1808" PREFIX:column="6">board_Show</name><parameter_list PREFIX:line="1808" PREFIX:column="16">(<param><decl><type><name PREFIX:line="1808" PREFIX:column="17">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1809" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1810" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1810" PREFIX:column="11">i</name></decl>, <decl><type ref="prev"/><name PREFIX:line="1810" PREFIX:column="14">j</name></decl>, <decl><type ref="prev"/><name PREFIX:line="1810" PREFIX:column="17">cp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1811" PREFIX:column="3">char</name></type> <name><name PREFIX:line="1811" PREFIX:column="8">buf</name><index PREFIX:line="1811" PREFIX:column="11">[<expr PREFIX:line="1811" PREFIX:column="12">10</expr>]</index></name></decl>;</decl_stmt>
  <for PREFIX:line="1812" PREFIX:column="3">for ( <init><expr><name PREFIX:line="1812" PREFIX:column="9">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="1812" PREFIX:column="16">i</name> &lt; 8</expr>;</condition> <incr><expr><name PREFIX:line="1812" PREFIX:column="23">i</name>++</expr></incr> )
  <block PREFIX:line="1813" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="1814" PREFIX:column="5">printf</name><argument_list PREFIX:line="1814" PREFIX:column="11">(<argument><expr PREFIX:line="1814" PREFIX:column="12">"%1d "</expr></argument>, <argument><expr PREFIX:line="1814" PREFIX:column="20">7-<name PREFIX:line="1814" PREFIX:column="22">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for PREFIX:line="1815" PREFIX:column="5">for ( <init><expr><name PREFIX:line="1815" PREFIX:column="11">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="1815" PREFIX:column="18">j</name> &lt; 8</expr>;</condition> <incr><expr><name PREFIX:line="1815" PREFIX:column="25">j</name>++</expr></incr> )
    <block PREFIX:line="1816" PREFIX:column="5">{
      <comment type="block" PREFIX:line="1817" PREFIX:column="7">/* get piece from global board */</comment>
      <expr_stmt><expr><name PREFIX:line="1818" PREFIX:column="7">cp</name> = <name><name PREFIX:line="1818" PREFIX:column="12">lrc_obj</name>.<name PREFIX:line="1818" PREFIX:column="20">board</name><index PREFIX:line="1818" PREFIX:column="25">[<expr PREFIX:line="1818" PREFIX:column="26">(7-<name PREFIX:line="1818" PREFIX:column="29">i</name>)*8+<name PREFIX:line="1818" PREFIX:column="34">j</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="1819" PREFIX:column="7">strcpy</name><argument_list PREFIX:line="1819" PREFIX:column="13">(<argument><expr><name PREFIX:line="1819" PREFIX:column="14">buf</name></expr></argument>, <argument><expr><name><name PREFIX:line="1819" PREFIX:column="19">piece_str</name><index PREFIX:line="1819" PREFIX:column="28">[<expr><name PREFIX:line="1819" PREFIX:column="29">cp</name>&amp;<name PREFIX:line="1819" PREFIX:column="32">COLOR_PIECE_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if PREFIX:line="1821" PREFIX:column="7">if <condition PREFIX:line="1821" PREFIX:column="10">( <expr PREFIX:line="1821" PREFIX:column="12">(<name PREFIX:line="1821" PREFIX:column="13">cp</name> &amp; <name PREFIX:line="1821" PREFIX:column="18">CP_MARK_MASK</name>) != 0</expr> )</condition><then PREFIX:line="1821" PREFIX:column="38">
      <block PREFIX:line="1822" PREFIX:column="7">{
	<expr_stmt><expr><name><name PREFIX:line="1823" PREFIX:column="9">buf</name><index PREFIX:line="1823" PREFIX:column="12">[<expr PREFIX:line="1823" PREFIX:column="13">0</expr>]</index></name> = '#'</expr>;</expr_stmt>
      }</block></then></if>
      
      <comment type="block" PREFIX:line="1826" PREFIX:column="7">/* mask out any bits except color and piece index */</comment>
      <expr_stmt><expr><name PREFIX:line="1827" PREFIX:column="7">cp</name> &amp;= <name PREFIX:line="1827" PREFIX:column="13">COLOR_PIECE_MASK</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="1828" PREFIX:column="7">printf</name><argument_list PREFIX:line="1828" PREFIX:column="13">(<argument><expr PREFIX:line="1828" PREFIX:column="14">"%s %02x "</expr></argument>, <argument><expr><name PREFIX:line="1828" PREFIX:column="26">buf</name></expr></argument>, <argument><expr><name PREFIX:line="1828" PREFIX:column="31">cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
    }</block></for>
    <expr_stmt><expr><call><name PREFIX:line="1831" PREFIX:column="5">printf</name><argument_list PREFIX:line="1831" PREFIX:column="11">(<argument><expr PREFIX:line="1831" PREFIX:column="12">"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name PREFIX:line="1835" PREFIX:column="1">int</name></type> <name PREFIX:line="1835" PREFIX:column="5">main</name><parameter_list PREFIX:line="1835" PREFIX:column="9">(<param><decl><type><name PREFIX:line="1835" PREFIX:column="10">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1836" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1837" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1837" PREFIX:column="11">depth</name> <init PREFIX:line="1837" PREFIX:column="17">= <expr PREFIX:line="1837" PREFIX:column="19">3</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1838" PREFIX:column="3">chess_SetupBoard</name><argument_list PREFIX:line="1838" PREFIX:column="19">()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1839" PREFIX:column="3">board_Show</name><argument_list PREFIX:line="1839" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1840" PREFIX:column="3">puts</name><argument_list PREFIX:line="1840" PREFIX:column="7">(<argument><expr PREFIX:line="1840" PREFIX:column="8">""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
 
 <comment type="block" PREFIX:line="1843" PREFIX:column="2">/* 
  chess_ClearMarks();
  chess_MarkMovable(COLOR_WHITE);
  board_Show();
  */</comment>
  
  <expr_stmt><expr><call><name PREFIX:line="1849" PREFIX:column="3">chess_ManualMove</name><argument_list PREFIX:line="1849" PREFIX:column="19">(<argument><expr PREFIX:line="1849" PREFIX:column="20">0x006</expr></argument>, <argument><expr PREFIX:line="1849" PREFIX:column="27">0x066</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name PREFIX:line="1851" PREFIX:column="3">printf</name><argument_list PREFIX:line="1851" PREFIX:column="9">(<argument><expr PREFIX:line="1851" PREFIX:column="10">"lrc_obj.is_game_end: %d\n"</expr></argument> , <argument><expr><name><name PREFIX:line="1851" PREFIX:column="40">lrc_obj</name>.<name PREFIX:line="1851" PREFIX:column="48">is_game_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1852" PREFIX:column="3">printf</name><argument_list PREFIX:line="1852" PREFIX:column="9">(<argument><expr PREFIX:line="1852" PREFIX:column="10">"lrc_obj.lost_side_color: %d\n"</expr></argument> , <argument><expr><name><name PREFIX:line="1852" PREFIX:column="44">lrc_obj</name>.<name PREFIX:line="1852" PREFIX:column="52">lost_side_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name PREFIX:line="1854" PREFIX:column="3">chess_ComputerMove</name><argument_list PREFIX:line="1854" PREFIX:column="21">(<argument><expr PREFIX:line="1854" PREFIX:column="22">2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name PREFIX:line="1856" PREFIX:column="3">printf</name><argument_list PREFIX:line="1856" PREFIX:column="9">(<argument><expr PREFIX:line="1856" PREFIX:column="10">"lrc_obj.is_game_end: %d\n"</expr></argument> , <argument><expr><name><name PREFIX:line="1856" PREFIX:column="40">lrc_obj</name>.<name PREFIX:line="1856" PREFIX:column="48">is_game_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1857" PREFIX:column="3">printf</name><argument_list PREFIX:line="1857" PREFIX:column="9">(<argument><expr PREFIX:line="1857" PREFIX:column="10">"lrc_obj.lost_side_color: %d\n"</expr></argument> , <argument><expr><name><name PREFIX:line="1857" PREFIX:column="44">lrc_obj</name>.<name PREFIX:line="1857" PREFIX:column="52">lost_side_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name PREFIX:line="1859" PREFIX:column="3">board_Show</name><argument_list PREFIX:line="1859" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>

}</block></function>



<cpp:else PREFIX:line="1865" PREFIX:column="1">#<cpp:directive PREFIX:line="1865" PREFIX:column="2">else</cpp:directive></cpp:else>

<comment type="block" PREFIX:line="1867" PREFIX:column="1">/*==============================================================*/</comment>
<comment type="block" PREFIX:line="1868" PREFIX:column="1">/* display menu */</comment>
<comment type="block" PREFIX:line="1869" PREFIX:column="1">/*==============================================================*/</comment>

<comment type="line" PREFIX:line="1871" PREFIX:column="1">//#define MNU_FONT font_5x7</comment>
<cpp:define PREFIX:line="1872" PREFIX:column="1">#<cpp:directive PREFIX:line="1872" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="1872" PREFIX:column="9">MNU_FONT</name></cpp:macro> <cpp:value PREFIX:line="1872" PREFIX:column="18">u8g_font_5x8r</cpp:value></cpp:define>
<comment type="line" PREFIX:line="1873" PREFIX:column="1">//#define MNU_FONT font_6x9</comment>
<cpp:define PREFIX:line="1874" PREFIX:column="1">#<cpp:directive PREFIX:line="1874" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="1874" PREFIX:column="9">MNU_ENTRY_HEIGHT</name></cpp:macro> <cpp:value PREFIX:line="1874" PREFIX:column="26">9</cpp:value></cpp:define>

<decl_stmt><decl><type><name PREFIX:line="1876" PREFIX:column="1">char</name> *</type><name PREFIX:line="1876" PREFIX:column="7">mnu_title</name> <init PREFIX:line="1876" PREFIX:column="17">= <expr PREFIX:line="1876" PREFIX:column="19">"Little Rook Chess"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="1877" PREFIX:column="1">char</name> *</type><name><name PREFIX:line="1877" PREFIX:column="7">mnu_list</name><index PREFIX:line="1877" PREFIX:column="15">[]</index></name> <init PREFIX:line="1877" PREFIX:column="18">= <expr><block PREFIX:line="1877" PREFIX:column="20">{ <expr PREFIX:line="1877" PREFIX:column="22">"New Game (White)"</expr>, <expr PREFIX:line="1877" PREFIX:column="42">"New Game (Black)"</expr>, <expr PREFIX:line="1877" PREFIX:column="62">"Undo Move"</expr>, <expr PREFIX:line="1877" PREFIX:column="75">"Return"</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="1878" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1878" PREFIX:column="9">mnu_pos</name> <init PREFIX:line="1878" PREFIX:column="17">= <expr PREFIX:line="1878" PREFIX:column="19">0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="1879" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1879" PREFIX:column="9">mnu_max</name> <init PREFIX:line="1879" PREFIX:column="17">= <expr PREFIX:line="1879" PREFIX:column="19">4</expr></init></decl>;</decl_stmt>

<function><type><name PREFIX:line="1881" PREFIX:column="1">void</name></type> <name PREFIX:line="1881" PREFIX:column="6">mnu_DrawHome</name><parameter_list PREFIX:line="1881" PREFIX:column="18">(<param><decl><type><name PREFIX:line="1881" PREFIX:column="19">uint8_t</name></type> <name PREFIX:line="1881" PREFIX:column="27">is_highlight</name></decl></param>)</parameter_list>
<block PREFIX:line="1882" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1883" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1883" PREFIX:column="11">x</name> <init PREFIX:line="1883" PREFIX:column="13">= <expr><name><name PREFIX:line="1883" PREFIX:column="15">lrc_u8g</name>-&gt;<name PREFIX:line="1883" PREFIX:column="24">width</name></name> - 35</expr></init></decl>;</decl_stmt>  
  <decl_stmt><decl><type><name PREFIX:line="1884" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1884" PREFIX:column="11">y</name> <init PREFIX:line="1884" PREFIX:column="13">= <expr PREFIX:line="1884" PREFIX:column="15">(<name><name PREFIX:line="1884" PREFIX:column="16">lrc_u8g</name>-&gt;<name PREFIX:line="1884" PREFIX:column="25">height</name></name>-1)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1885" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1885" PREFIX:column="11">t</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name PREFIX:line="1887" PREFIX:column="3">u8g_SetFont</name><argument_list PREFIX:line="1887" PREFIX:column="14">(<argument><expr><name PREFIX:line="1887" PREFIX:column="15">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1887" PREFIX:column="24">u8g_font_5x7r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1888" PREFIX:column="3">u8g_SetDefaultForegroundColor</name><argument_list PREFIX:line="1888" PREFIX:column="32">(<argument><expr><name PREFIX:line="1888" PREFIX:column="33">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1889" PREFIX:column="3">t</name> = <call><name PREFIX:line="1889" PREFIX:column="7">u8g_DrawStrP</name><argument_list PREFIX:line="1889" PREFIX:column="19">(<argument><expr><name PREFIX:line="1889" PREFIX:column="20">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1889" PREFIX:column="29">x</name></expr></argument>, <argument><expr><name PREFIX:line="1889" PREFIX:column="32">y</name> -1</expr></argument>, <argument><expr><call><name PREFIX:line="1889" PREFIX:column="38">U8G_PSTR</name><argument_list PREFIX:line="1889" PREFIX:column="46">(<argument><expr PREFIX:line="1889" PREFIX:column="47">"Options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <if PREFIX:line="1891" PREFIX:column="3">if <condition PREFIX:line="1891" PREFIX:column="6">( <expr><name PREFIX:line="1891" PREFIX:column="8">is_highlight</name></expr> )</condition><then PREFIX:line="1891" PREFIX:column="22">
    <expr_stmt><expr><call><name PREFIX:line="1892" PREFIX:column="5">u8g_DrawFrame</name><argument_list PREFIX:line="1892" PREFIX:column="18">(<argument><expr><name PREFIX:line="1892" PREFIX:column="19">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1892" PREFIX:column="28">x</name>-1</expr></argument>, <argument><expr><name PREFIX:line="1892" PREFIX:column="33">y</name> - <name PREFIX:line="1892" PREFIX:column="37">MNU_ENTRY_HEIGHT</name> +1</expr></argument>, <argument><expr><name PREFIX:line="1892" PREFIX:column="58">t</name></expr></argument>, <argument><expr><name PREFIX:line="1892" PREFIX:column="61">MNU_ENTRY_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>  
}</block></function>

<function><type><name PREFIX:line="1895" PREFIX:column="1">void</name></type> <name PREFIX:line="1895" PREFIX:column="6">mnu_DrawEntry</name><parameter_list PREFIX:line="1895" PREFIX:column="19">(<param><decl><type><name PREFIX:line="1895" PREFIX:column="20">uint8_t</name></type> <name PREFIX:line="1895" PREFIX:column="28">y</name></decl></param>, <param><decl><type><name PREFIX:line="1895" PREFIX:column="31">char</name> *</type><name PREFIX:line="1895" PREFIX:column="37">str</name></decl></param>, <param><decl><type><name PREFIX:line="1895" PREFIX:column="42">uint8_t</name></type> <name PREFIX:line="1895" PREFIX:column="50">is_clr_background</name></decl></param>, <param><decl><type><name PREFIX:line="1895" PREFIX:column="69">uint8_t</name></type> <name PREFIX:line="1895" PREFIX:column="77">is_highlight</name></decl></param>)</parameter_list>
<block PREFIX:line="1896" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1897" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1897" PREFIX:column="11">t</name></decl>, <decl><type ref="prev"/><name PREFIX:line="1897" PREFIX:column="14">x</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1898" PREFIX:column="3">u8g_SetFont</name><argument_list PREFIX:line="1898" PREFIX:column="14">(<argument><expr><name PREFIX:line="1898" PREFIX:column="15">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1898" PREFIX:column="24">MNU_FONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1899" PREFIX:column="3">t</name> = <call><name PREFIX:line="1899" PREFIX:column="7">u8g_GetStrWidth</name><argument_list PREFIX:line="1899" PREFIX:column="22">(<argument><expr><name PREFIX:line="1899" PREFIX:column="23">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1899" PREFIX:column="32">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1900" PREFIX:column="3">x</name> = <call><name PREFIX:line="1900" PREFIX:column="7">u8g_GetWidth</name><argument_list PREFIX:line="1900" PREFIX:column="19">(<argument><expr><name PREFIX:line="1900" PREFIX:column="20">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1901" PREFIX:column="3">x</name> -= <name PREFIX:line="1901" PREFIX:column="8">t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1902" PREFIX:column="3">x</name> &gt;&gt;= 1</expr>;</expr_stmt>
  
  <if PREFIX:line="1904" PREFIX:column="3">if <condition PREFIX:line="1904" PREFIX:column="6">( <expr><name PREFIX:line="1904" PREFIX:column="8">is_clr_background</name></expr> )</condition><then PREFIX:line="1904" PREFIX:column="27">
  <block PREFIX:line="1905" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="1906" PREFIX:column="5">u8g_SetDefaultBackgroundColor</name><argument_list PREFIX:line="1906" PREFIX:column="34">(<argument><expr><name PREFIX:line="1906" PREFIX:column="35">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name PREFIX:line="1907" PREFIX:column="5">u8g_DrawBox</name><argument_list PREFIX:line="1907" PREFIX:column="16">(<argument><expr><name PREFIX:line="1907" PREFIX:column="17">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1907" PREFIX:column="26">x</name>-3</expr></argument>, <argument><expr PREFIX:line="1907" PREFIX:column="31">(<name><name PREFIX:line="1907" PREFIX:column="32">lrc_u8g</name>-&gt;<name PREFIX:line="1907" PREFIX:column="41">height</name></name>-1) - (<name PREFIX:line="1907" PREFIX:column="54">y</name>+<name PREFIX:line="1907" PREFIX:column="56">MNU_ENTRY_HEIGHT</name>-1+2)</expr></argument>, <argument><expr><name PREFIX:line="1907" PREFIX:column="79">t</name>+5</expr></argument>, <argument><expr><name PREFIX:line="1907" PREFIX:column="84">MNU_ENTRY_HEIGHT</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <expr_stmt><expr><call><name PREFIX:line="1910" PREFIX:column="3">u8g_SetDefaultForegroundColor</name><argument_list PREFIX:line="1910" PREFIX:column="32">(<argument><expr><name PREFIX:line="1910" PREFIX:column="33">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1911" PREFIX:column="3">u8g_DrawStr</name><argument_list PREFIX:line="1911" PREFIX:column="14">(<argument><expr><name PREFIX:line="1911" PREFIX:column="15">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1911" PREFIX:column="24">x</name></expr></argument>, <argument><expr PREFIX:line="1911" PREFIX:column="27">(<name><name PREFIX:line="1911" PREFIX:column="28">lrc_u8g</name>-&gt;<name PREFIX:line="1911" PREFIX:column="37">height</name></name>-1) - <name PREFIX:line="1911" PREFIX:column="49">y</name></expr></argument>, <argument><expr><name PREFIX:line="1911" PREFIX:column="52">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if PREFIX:line="1913" PREFIX:column="3">if <condition PREFIX:line="1913" PREFIX:column="6">( <expr><name PREFIX:line="1913" PREFIX:column="8">is_highlight</name></expr> )</condition><then PREFIX:line="1913" PREFIX:column="22">
  <block PREFIX:line="1914" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="1915" PREFIX:column="5">u8g_DrawFrame</name><argument_list PREFIX:line="1915" PREFIX:column="18">(<argument><expr><name PREFIX:line="1915" PREFIX:column="19">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="1915" PREFIX:column="28">x</name>-1</expr></argument>, <argument><expr PREFIX:line="1915" PREFIX:column="33">(<name><name PREFIX:line="1915" PREFIX:column="34">lrc_u8g</name>-&gt;<name PREFIX:line="1915" PREFIX:column="43">height</name></name>-1) - <name PREFIX:line="1915" PREFIX:column="55">y</name> -<name PREFIX:line="1915" PREFIX:column="58">MNU_ENTRY_HEIGHT</name> +1</expr></argument>, <argument><expr><name PREFIX:line="1915" PREFIX:column="79">t</name></expr></argument>, <argument><expr><name PREFIX:line="1915" PREFIX:column="82">MNU_ENTRY_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="1919" PREFIX:column="1">void</name></type> <name PREFIX:line="1919" PREFIX:column="6">mnu_Draw</name><parameter_list PREFIX:line="1919" PREFIX:column="14">(<param><decl><type><name PREFIX:line="1919" PREFIX:column="15">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1920" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="1921" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1921" PREFIX:column="11">i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="1922" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="1922" PREFIX:column="11">t</name></decl>,<decl><type ref="prev"/><name PREFIX:line="1922" PREFIX:column="13">y</name></decl>;</decl_stmt>
  <comment type="block" PREFIX:line="1923" PREFIX:column="3">/* calculate hight of the complete menu */</comment>
  <expr_stmt><expr><name PREFIX:line="1924" PREFIX:column="3">y</name> = <name PREFIX:line="1924" PREFIX:column="7">mnu_max</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1925" PREFIX:column="3">y</name>++</expr>;</expr_stmt> 					<comment type="block" PREFIX:line="1925" PREFIX:column="41">/* consider also some space for the title */</comment>
  <expr_stmt><expr><name PREFIX:line="1926" PREFIX:column="3">y</name>++</expr>;</expr_stmt> 					<comment type="block" PREFIX:line="1926" PREFIX:column="41">/* consider also some space for the title */</comment>
  <expr_stmt><expr><name PREFIX:line="1927" PREFIX:column="3">y</name> *= <name PREFIX:line="1927" PREFIX:column="8">MNU_ENTRY_HEIGHT</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1929" PREFIX:column="3">/* calculate how much space will be left */</comment>
  <expr_stmt><expr><name PREFIX:line="1930" PREFIX:column="3">t</name> = <call><name PREFIX:line="1930" PREFIX:column="7">u8g_GetHeight</name><argument_list PREFIX:line="1930" PREFIX:column="20">(<argument><expr><name PREFIX:line="1930" PREFIX:column="21">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
  <expr_stmt><expr><name PREFIX:line="1931" PREFIX:column="3">t</name> -= <name PREFIX:line="1931" PREFIX:column="8">y</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="1933" PREFIX:column="3">/* topmost pos start half of that empty space from the top */</comment>
  <expr_stmt><expr><name PREFIX:line="1934" PREFIX:column="3">t</name> &gt;&gt;= 1</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1935" PREFIX:column="3">y</name> = <call><name PREFIX:line="1935" PREFIX:column="7">u8g_GetHeight</name><argument_list PREFIX:line="1935" PREFIX:column="20">(<argument><expr><name PREFIX:line="1935" PREFIX:column="21">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="1936" PREFIX:column="3">y</name> -= <name PREFIX:line="1936" PREFIX:column="8">t</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="1938" PREFIX:column="3">y</name> -= <name PREFIX:line="1938" PREFIX:column="8">MNU_ENTRY_HEIGHT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="1939" PREFIX:column="3">mnu_DrawEntry</name><argument_list PREFIX:line="1939" PREFIX:column="16">(<argument><expr><name PREFIX:line="1939" PREFIX:column="17">y</name></expr></argument>, <argument><expr><name PREFIX:line="1939" PREFIX:column="20">mnu_title</name></expr></argument>, <argument><expr PREFIX:line="1939" PREFIX:column="31">0</expr></argument>, <argument><expr PREFIX:line="1939" PREFIX:column="34">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="1941" PREFIX:column="3">y</name> -= <name PREFIX:line="1941" PREFIX:column="8">MNU_ENTRY_HEIGHT</name></expr>;</expr_stmt>
  
  
  <for PREFIX:line="1944" PREFIX:column="3">for( <init><expr><name PREFIX:line="1944" PREFIX:column="8">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="1944" PREFIX:column="15">i</name> &lt; <name PREFIX:line="1944" PREFIX:column="19">mnu_max</name></expr>;</condition> <incr><expr><name PREFIX:line="1944" PREFIX:column="28">i</name>++</expr></incr> )
  <block PREFIX:line="1945" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="1946" PREFIX:column="5">y</name> -= <name PREFIX:line="1946" PREFIX:column="10">MNU_ENTRY_HEIGHT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name PREFIX:line="1947" PREFIX:column="5">mnu_DrawEntry</name><argument_list PREFIX:line="1947" PREFIX:column="18">(<argument><expr><name PREFIX:line="1947" PREFIX:column="19">y</name></expr></argument>, <argument><expr><name><name PREFIX:line="1947" PREFIX:column="22">mnu_list</name><index PREFIX:line="1947" PREFIX:column="30">[<expr><name PREFIX:line="1947" PREFIX:column="31">i</name></expr>]</index></name></expr></argument>, <argument><expr PREFIX:line="1947" PREFIX:column="35">0</expr></argument>, <argument><expr><name PREFIX:line="1947" PREFIX:column="38">i</name> == <name PREFIX:line="1947" PREFIX:column="43">mnu_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name PREFIX:line="1951" PREFIX:column="1">void</name></type> <name PREFIX:line="1951" PREFIX:column="6">mnu_Step</name><parameter_list PREFIX:line="1951" PREFIX:column="14">(<param><decl><type><name PREFIX:line="1951" PREFIX:column="15">uint8_t</name></type> <name PREFIX:line="1951" PREFIX:column="23">key_cmd</name></decl></param>)</parameter_list>
<block PREFIX:line="1952" PREFIX:column="1">{
    <if PREFIX:line="1953" PREFIX:column="5">if <condition PREFIX:line="1953" PREFIX:column="8">( <expr><name PREFIX:line="1953" PREFIX:column="10">key_cmd</name> == <name PREFIX:line="1953" PREFIX:column="21">CHESS_KEY_NEXT</name></expr> )</condition><then PREFIX:line="1953" PREFIX:column="37">
    <block PREFIX:line="1954" PREFIX:column="5">{
      <if PREFIX:line="1955" PREFIX:column="7">if <condition PREFIX:line="1955" PREFIX:column="10">( <expr><name PREFIX:line="1955" PREFIX:column="12">mnu_pos</name>+1 &lt; <name PREFIX:line="1955" PREFIX:column="24">mnu_max</name></expr> )</condition><then PREFIX:line="1955" PREFIX:column="33">
	<expr_stmt><expr><name PREFIX:line="1956" PREFIX:column="9">mnu_pos</name>++</expr>;</expr_stmt></then></if>
    }</block></then>
    <else PREFIX:line="1958" PREFIX:column="5">else <if PREFIX:line="1958" PREFIX:column="10">if <condition PREFIX:line="1958" PREFIX:column="13">( <expr><name PREFIX:line="1958" PREFIX:column="15">key_cmd</name> == <name PREFIX:line="1958" PREFIX:column="26">CHESS_KEY_PREV</name></expr> )</condition><then PREFIX:line="1958" PREFIX:column="42">
    <block PREFIX:line="1959" PREFIX:column="5">{
      <if PREFIX:line="1960" PREFIX:column="7">if <condition PREFIX:line="1960" PREFIX:column="10">( <expr><name PREFIX:line="1960" PREFIX:column="12">mnu_pos</name> &gt; 0</expr> )</condition><then PREFIX:line="1960" PREFIX:column="25">
	<expr_stmt><expr><name PREFIX:line="1961" PREFIX:column="9">mnu_pos</name>--</expr>;</expr_stmt></then></if>
    }</block></then></if></else></if>
}</block></function>




<decl_stmt><decl><type><name PREFIX:line="1968" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1968" PREFIX:column="9">chess_key_code</name> <init PREFIX:line="1968" PREFIX:column="24">= <expr PREFIX:line="1968" PREFIX:column="26">0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="1969" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1969" PREFIX:column="9">chess_key_cmd</name> <init PREFIX:line="1969" PREFIX:column="23">= <expr PREFIX:line="1969" PREFIX:column="25">0</expr></init></decl>;</decl_stmt>
<cpp:define PREFIX:line="1970" PREFIX:column="1">#<cpp:directive PREFIX:line="1970" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="1970" PREFIX:column="9">CHESS_STATE_MENU</name></cpp:macro> <cpp:value PREFIX:line="1970" PREFIX:column="26">0</cpp:value></cpp:define>
<cpp:define PREFIX:line="1971" PREFIX:column="1">#<cpp:directive PREFIX:line="1971" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="1971" PREFIX:column="9">CHESS_STATE_SELECT_START</name></cpp:macro> <cpp:value PREFIX:line="1971" PREFIX:column="34">1</cpp:value></cpp:define>
<cpp:define PREFIX:line="1972" PREFIX:column="1">#<cpp:directive PREFIX:line="1972" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="1972" PREFIX:column="9">CHESS_STATE_SELECT_PIECE</name></cpp:macro> <cpp:value PREFIX:line="1972" PREFIX:column="34">2</cpp:value></cpp:define>
<cpp:define PREFIX:line="1973" PREFIX:column="1">#<cpp:directive PREFIX:line="1973" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="1973" PREFIX:column="9">CHESS_STATE_SELECT_TARGET_POS</name></cpp:macro> <cpp:value PREFIX:line="1973" PREFIX:column="39">3</cpp:value></cpp:define>
<cpp:define PREFIX:line="1974" PREFIX:column="1">#<cpp:directive PREFIX:line="1974" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="1974" PREFIX:column="9">CHESS_STATE_THINKING</name></cpp:macro> <cpp:value PREFIX:line="1974" PREFIX:column="30">4</cpp:value></cpp:define>
<cpp:define PREFIX:line="1975" PREFIX:column="1">#<cpp:directive PREFIX:line="1975" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="1975" PREFIX:column="9">CHESS_STATE_GAME_END</name></cpp:macro> <cpp:value PREFIX:line="1975" PREFIX:column="30">5</cpp:value></cpp:define>
<decl_stmt><decl><type><name PREFIX:line="1976" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1976" PREFIX:column="9">chess_state</name> <init PREFIX:line="1976" PREFIX:column="21">= <expr><name PREFIX:line="1976" PREFIX:column="23">CHESS_STATE_MENU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="1977" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1977" PREFIX:column="9">chess_source_pos</name> <init PREFIX:line="1977" PREFIX:column="26">= <expr PREFIX:line="1977" PREFIX:column="28">255</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="1978" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="1978" PREFIX:column="9">chess_target_pos</name> <init PREFIX:line="1978" PREFIX:column="26">= <expr PREFIX:line="1978" PREFIX:column="28">255</expr></init></decl>;</decl_stmt>

 <decl_stmt><decl><type><name PREFIX:line="1980" PREFIX:column="2">uint8_t</name> <name PREFIX:line="1980" PREFIX:column="10">chess_pieces_body_bm</name><index PREFIX:line="1980" PREFIX:column="30">[]</index></type> <name PREFIX:line="1980" PREFIX:column="33">PROGMEM</name> <init PREFIX:line="1980" PREFIX:column="41">= 
<expr><block PREFIX:line="1981" PREFIX:column="1">{
  <comment type="block" PREFIX:line="1982" PREFIX:column="3">/* PAWN */</comment> 		<expr PREFIX:line="1982" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1982" PREFIX:column="31">0x00</expr>, <expr PREFIX:line="1982" PREFIX:column="37">0x00</expr>, <expr PREFIX:line="1982" PREFIX:column="43">0x18</expr>, <expr PREFIX:line="1982" PREFIX:column="49">0x18</expr>, <expr PREFIX:line="1982" PREFIX:column="55">0x00</expr>, <expr PREFIX:line="1982" PREFIX:column="61">0x00</expr>, <expr PREFIX:line="1982" PREFIX:column="67">0x00</expr>, <comment type="block" PREFIX:line="1982" PREFIX:column="73">/* 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x00, */</comment> 
  <comment type="block" PREFIX:line="1983" PREFIX:column="3">/* KNIGHT */</comment>		<expr PREFIX:line="1983" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1983" PREFIX:column="31">0x00</expr>, <expr PREFIX:line="1983" PREFIX:column="37">0x1c</expr>, <expr PREFIX:line="1983" PREFIX:column="43">0x2c</expr>, <expr PREFIX:line="1983" PREFIX:column="49">0x04</expr>, <expr PREFIX:line="1983" PREFIX:column="55">0x04</expr>, <expr PREFIX:line="1983" PREFIX:column="61">0x0e</expr>, <expr PREFIX:line="1983" PREFIX:column="67">0x00</expr>,
  <comment type="block" PREFIX:line="1984" PREFIX:column="3">/* BISHOP */</comment>		<expr PREFIX:line="1984" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1984" PREFIX:column="31">0x00</expr>, <expr PREFIX:line="1984" PREFIX:column="37">0x1c</expr>, <expr PREFIX:line="1984" PREFIX:column="43">0x1c</expr>, <expr PREFIX:line="1984" PREFIX:column="49">0x1c</expr>, <expr PREFIX:line="1984" PREFIX:column="55">0x08</expr>, <expr PREFIX:line="1984" PREFIX:column="61">0x00</expr>, <expr PREFIX:line="1984" PREFIX:column="67">0x00</expr>, <comment type="block" PREFIX:line="1984" PREFIX:column="73">/* 0x00, 0x00, 0x08, 0x1c, 0x1c, 0x08, 0x00, 0x00, */</comment>
  <comment type="block" PREFIX:line="1985" PREFIX:column="3">/* ROOK */</comment>		<expr PREFIX:line="1985" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1985" PREFIX:column="31">0x00</expr>, <expr PREFIX:line="1985" PREFIX:column="37">0x00</expr>, <expr PREFIX:line="1985" PREFIX:column="43">0x1c</expr>, <expr PREFIX:line="1985" PREFIX:column="49">0x1c</expr>, <expr PREFIX:line="1985" PREFIX:column="55">0x1c</expr>, <expr PREFIX:line="1985" PREFIX:column="61">0x1c</expr>, <expr PREFIX:line="1985" PREFIX:column="67">0x00</expr>,
  <comment type="block" PREFIX:line="1986" PREFIX:column="3">/* QUEEN */</comment>		<expr PREFIX:line="1986" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1986" PREFIX:column="31">0x00</expr>, <expr PREFIX:line="1986" PREFIX:column="37">0x14</expr>, <expr PREFIX:line="1986" PREFIX:column="43">0x1c</expr>, <expr PREFIX:line="1986" PREFIX:column="49">0x08</expr>, <expr PREFIX:line="1986" PREFIX:column="55">0x1c</expr>, <expr PREFIX:line="1986" PREFIX:column="61">0x08</expr>, <expr PREFIX:line="1986" PREFIX:column="67">0x00</expr>,
  <comment type="block" PREFIX:line="1987" PREFIX:column="3">/* KING */</comment>		<expr PREFIX:line="1987" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1987" PREFIX:column="31">0x00</expr>, <expr PREFIX:line="1987" PREFIX:column="37">0x00</expr>, <expr PREFIX:line="1987" PREFIX:column="43">0x08</expr>, <expr PREFIX:line="1987" PREFIX:column="49">0x3e</expr>, <expr PREFIX:line="1987" PREFIX:column="55">0x1c</expr>, <expr PREFIX:line="1987" PREFIX:column="61">0x08</expr>, <expr PREFIX:line="1987" PREFIX:column="67">0x00</expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef PREFIX:line="1990" PREFIX:column="1">#<cpp:directive PREFIX:line="1990" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="1990" PREFIX:column="8">NOT_REQUIRED</name></cpp:ifdef>
<comment type="block" PREFIX:line="1991" PREFIX:column="1">/* white pieces are ructed by painting black pieces and cutting out the white area */</comment>
 <decl_stmt><decl><type><name PREFIX:line="1992" PREFIX:column="2">uint8_t</name> <name PREFIX:line="1992" PREFIX:column="10">chess_white_pieces_bm</name><index PREFIX:line="1992" PREFIX:column="31">[]</index></type> <name PREFIX:line="1992" PREFIX:column="34">PROGMEM</name> <init PREFIX:line="1992" PREFIX:column="42">= 
<expr><block PREFIX:line="1993" PREFIX:column="1">{
  <comment type="block" PREFIX:line="1994" PREFIX:column="3">/* PAWN */</comment> 		<expr PREFIX:line="1994" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1994" PREFIX:column="31">0x00</expr>, <expr PREFIX:line="1994" PREFIX:column="37">0x0c</expr>, <expr PREFIX:line="1994" PREFIX:column="43">0x12</expr>, <expr PREFIX:line="1994" PREFIX:column="49">0x12</expr>, <expr PREFIX:line="1994" PREFIX:column="55">0x0c</expr>, <expr PREFIX:line="1994" PREFIX:column="61">0x1e</expr>, <expr PREFIX:line="1994" PREFIX:column="67">0x00</expr>, 
  <comment type="block" PREFIX:line="1995" PREFIX:column="3">/* KNIGHT */</comment>		<expr PREFIX:line="1995" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1995" PREFIX:column="31">0x1c</expr>, <expr PREFIX:line="1995" PREFIX:column="37">0x22</expr>, <expr PREFIX:line="1995" PREFIX:column="43">0x52</expr>, <expr PREFIX:line="1995" PREFIX:column="49">0x6a</expr>, <expr PREFIX:line="1995" PREFIX:column="55">0x0a</expr>, <expr PREFIX:line="1995" PREFIX:column="61">0x11</expr>, <expr PREFIX:line="1995" PREFIX:column="67">0x1f</expr>,
  <comment type="block" PREFIX:line="1996" PREFIX:column="3">/* BISHOP */</comment>		<expr PREFIX:line="1996" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1996" PREFIX:column="31">0x08</expr>, <expr PREFIX:line="1996" PREFIX:column="37">0x14</expr>, <expr PREFIX:line="1996" PREFIX:column="43">0x22</expr>, <expr PREFIX:line="1996" PREFIX:column="49">0x22</expr>, <expr PREFIX:line="1996" PREFIX:column="55">0x14</expr>, <expr PREFIX:line="1996" PREFIX:column="61">0x08</expr>, <expr PREFIX:line="1996" PREFIX:column="67">0x7f</expr>,
  <comment type="block" PREFIX:line="1997" PREFIX:column="3">/* ROOK */</comment>		<expr PREFIX:line="1997" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1997" PREFIX:column="31">0x55</expr>, <expr PREFIX:line="1997" PREFIX:column="37">0x7f</expr>, <expr PREFIX:line="1997" PREFIX:column="43">0x22</expr>, <expr PREFIX:line="1997" PREFIX:column="49">0x22</expr>, <expr PREFIX:line="1997" PREFIX:column="55">0x22</expr>, <expr PREFIX:line="1997" PREFIX:column="61">0x22</expr>, <expr PREFIX:line="1997" PREFIX:column="67">0x7f</expr>,
  <comment type="block" PREFIX:line="1998" PREFIX:column="3">/* QUEEN */</comment>		<expr PREFIX:line="1998" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="1998" PREFIX:column="31">0x55</expr>, <expr PREFIX:line="1998" PREFIX:column="37">0x2a</expr>, <expr PREFIX:line="1998" PREFIX:column="43">0x22</expr>, <expr PREFIX:line="1998" PREFIX:column="49">0x14</expr>, <expr PREFIX:line="1998" PREFIX:column="55">0x22</expr>, <expr PREFIX:line="1998" PREFIX:column="61">0x14</expr>, <expr PREFIX:line="1998" PREFIX:column="67">0x7f</expr>,
  <comment type="block" PREFIX:line="1999" PREFIX:column="3">/* KING */</comment>		<expr PREFIX:line="1999" PREFIX:column="25">0x08</expr>, <expr PREFIX:line="1999" PREFIX:column="31">0x1c</expr>, <expr PREFIX:line="1999" PREFIX:column="37">0x49</expr>, <expr PREFIX:line="1999" PREFIX:column="43">0x77</expr>, <expr PREFIX:line="1999" PREFIX:column="49">0x41</expr>, <expr PREFIX:line="1999" PREFIX:column="55">0x22</expr>, <expr PREFIX:line="1999" PREFIX:column="61">0x14</expr>, <expr PREFIX:line="1999" PREFIX:column="67">0x7f</expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif PREFIX:line="2001" PREFIX:column="1">#<cpp:directive PREFIX:line="2001" PREFIX:column="2">endif</cpp:directive></cpp:endif>

 <decl_stmt><decl><type><name PREFIX:line="2003" PREFIX:column="2">uint8_t</name> <name PREFIX:line="2003" PREFIX:column="10">chess_black_pieces_bm</name><index PREFIX:line="2003" PREFIX:column="31">[]</index></type> <name PREFIX:line="2003" PREFIX:column="34">PROGMEM</name> <init PREFIX:line="2003" PREFIX:column="42">= 
<expr><block PREFIX:line="2004" PREFIX:column="1">{
  <comment type="block" PREFIX:line="2005" PREFIX:column="3">/* PAWN */</comment> 		<expr PREFIX:line="2005" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="2005" PREFIX:column="31">0x00</expr>, <expr PREFIX:line="2005" PREFIX:column="37">0x18</expr>, <expr PREFIX:line="2005" PREFIX:column="43">0x3c</expr>, <expr PREFIX:line="2005" PREFIX:column="49">0x3c</expr>, <expr PREFIX:line="2005" PREFIX:column="55">0x18</expr>, <expr PREFIX:line="2005" PREFIX:column="61">0x3c</expr>, <expr PREFIX:line="2005" PREFIX:column="67">0x00</expr>, <comment type="block" PREFIX:line="2005" PREFIX:column="73">/* 0x00, 0x00, 0x0c, 0x1e, 0x1e, 0x0c, 0x1e, 0x00, */</comment> 
  <comment type="block" PREFIX:line="2006" PREFIX:column="3">/* KNIGHT */</comment>		<expr PREFIX:line="2006" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="2006" PREFIX:column="31">0x1c</expr>, <expr PREFIX:line="2006" PREFIX:column="37">0x3e</expr>, <expr PREFIX:line="2006" PREFIX:column="43">0x7e</expr>, <expr PREFIX:line="2006" PREFIX:column="49">0x6e</expr>, <expr PREFIX:line="2006" PREFIX:column="55">0x0e</expr>, <expr PREFIX:line="2006" PREFIX:column="61">0x1f</expr>, <expr PREFIX:line="2006" PREFIX:column="67">0x1f</expr>,
  <comment type="block" PREFIX:line="2007" PREFIX:column="3">/* BISHOP */</comment>		<expr PREFIX:line="2007" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="2007" PREFIX:column="31">0x1c</expr>, <expr PREFIX:line="2007" PREFIX:column="37">0x2e</expr>, <expr PREFIX:line="2007" PREFIX:column="43">0x3e</expr>, <expr PREFIX:line="2007" PREFIX:column="49">0x3e</expr>, <expr PREFIX:line="2007" PREFIX:column="55">0x1c</expr>, <expr PREFIX:line="2007" PREFIX:column="61">0x08</expr>, <expr PREFIX:line="2007" PREFIX:column="67">0x7f</expr>,  <comment type="block" PREFIX:line="2007" PREFIX:column="74">/*0x00, 0x08, 0x1c, 0x3e, 0x3e, 0x1c, 0x08, 0x7f,*/</comment>
  <comment type="block" PREFIX:line="2008" PREFIX:column="3">/* ROOK */</comment>		<expr PREFIX:line="2008" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="2008" PREFIX:column="31">0x55</expr>, <expr PREFIX:line="2008" PREFIX:column="37">0x7f</expr>, <expr PREFIX:line="2008" PREFIX:column="43">0x3e</expr>, <expr PREFIX:line="2008" PREFIX:column="49">0x3e</expr>, <expr PREFIX:line="2008" PREFIX:column="55">0x3e</expr>, <expr PREFIX:line="2008" PREFIX:column="61">0x3e</expr>, <expr PREFIX:line="2008" PREFIX:column="67">0x7f</expr>,
  <comment type="block" PREFIX:line="2009" PREFIX:column="3">/* QUEEN */</comment>		<expr PREFIX:line="2009" PREFIX:column="25">0x00</expr>, <expr PREFIX:line="2009" PREFIX:column="31">0x55</expr>, <expr PREFIX:line="2009" PREFIX:column="37">0x3e</expr>, <expr PREFIX:line="2009" PREFIX:column="43">0x3e</expr>, <expr PREFIX:line="2009" PREFIX:column="49">0x1c</expr>, <expr PREFIX:line="2009" PREFIX:column="55">0x3e</expr>, <expr PREFIX:line="2009" PREFIX:column="61">0x1c</expr>, <expr PREFIX:line="2009" PREFIX:column="67">0x7f</expr>,
  <comment type="block" PREFIX:line="2010" PREFIX:column="3">/* KING -*/</comment>		<expr PREFIX:line="2010" PREFIX:column="25">0x08</expr>, <expr PREFIX:line="2010" PREFIX:column="31">0x1c</expr>, <expr PREFIX:line="2010" PREFIX:column="37">0x49</expr>, <expr PREFIX:line="2010" PREFIX:column="43">0x7f</expr>, <expr PREFIX:line="2010" PREFIX:column="49">0x7f</expr>, <expr PREFIX:line="2010" PREFIX:column="55">0x3e</expr>, <expr PREFIX:line="2010" PREFIX:column="61">0x1c</expr>, <expr PREFIX:line="2010" PREFIX:column="67">0x7f</expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:if PREFIX:line="2014" PREFIX:column="1">#<cpp:directive PREFIX:line="2014" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="2014" PREFIX:column="5">defined</name><argument_list PREFIX:line="2014" PREFIX:column="12">(<argument><expr><name PREFIX:line="2014" PREFIX:column="13">DOGXL160_HW_GR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="2015" PREFIX:column="1">#<cpp:directive PREFIX:line="2015" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="2015" PREFIX:column="9">BOXSIZE</name></cpp:macro> <cpp:value PREFIX:line="2015" PREFIX:column="17">13</cpp:value></cpp:define>
<cpp:define PREFIX:line="2016" PREFIX:column="1">#<cpp:directive PREFIX:line="2016" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="2016" PREFIX:column="9">BOXOFFSET</name></cpp:macro> <cpp:value PREFIX:line="2016" PREFIX:column="19">3</cpp:value></cpp:define>
<cpp:else PREFIX:line="2017" PREFIX:column="1">#<cpp:directive PREFIX:line="2017" PREFIX:column="2">else</cpp:directive></cpp:else>
<cpp:define PREFIX:line="2018" PREFIX:column="1">#<cpp:directive PREFIX:line="2018" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="2018" PREFIX:column="9">BOXSIZE</name></cpp:macro> <cpp:value PREFIX:line="2018" PREFIX:column="17">8</cpp:value></cpp:define>
<cpp:define PREFIX:line="2019" PREFIX:column="1">#<cpp:directive PREFIX:line="2019" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="2019" PREFIX:column="9">BOXOFFSET</name></cpp:macro> <cpp:value PREFIX:line="2019" PREFIX:column="19">1</cpp:value></cpp:define>
<cpp:endif PREFIX:line="2020" PREFIX:column="1">#<cpp:directive PREFIX:line="2020" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name PREFIX:line="2022" PREFIX:column="1">u8g_uint_t</name></type> <name PREFIX:line="2022" PREFIX:column="12">chess_low_edge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="2023" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="2023" PREFIX:column="9">chess_boxsize</name> <init PREFIX:line="2023" PREFIX:column="23">= <expr PREFIX:line="2023" PREFIX:column="25">8</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="2024" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="2024" PREFIX:column="9">chess_boxoffset</name> <init PREFIX:line="2024" PREFIX:column="25">= <expr PREFIX:line="2024" PREFIX:column="27">1</expr></init></decl>;</decl_stmt>


<function><type><name PREFIX:line="2027" PREFIX:column="1">void</name></type> <name PREFIX:line="2027" PREFIX:column="6">chess_DrawFrame</name><parameter_list PREFIX:line="2027" PREFIX:column="21">(<param><decl><type><name PREFIX:line="2027" PREFIX:column="22">uint8_t</name></type> <name PREFIX:line="2027" PREFIX:column="30">pos</name></decl></param>, <param><decl><type><name PREFIX:line="2027" PREFIX:column="35">uint8_t</name></type> <name PREFIX:line="2027" PREFIX:column="43">is_bold</name></decl></param>)</parameter_list>
<block PREFIX:line="2028" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="2029" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="2029" PREFIX:column="14">x0</name></decl>, <decl><type ref="prev"/><name PREFIX:line="2029" PREFIX:column="18">y0</name></decl>;</decl_stmt>

  <expr_stmt><expr><name PREFIX:line="2031" PREFIX:column="3">x0</name> = <name PREFIX:line="2031" PREFIX:column="8">pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="2032" PREFIX:column="3">x0</name> &amp;= 15</expr>;</expr_stmt>
  <if PREFIX:line="2033" PREFIX:column="3">if <condition PREFIX:line="2033" PREFIX:column="6">( <expr><name><name PREFIX:line="2033" PREFIX:column="8">lrc_obj</name>.<name PREFIX:line="2033" PREFIX:column="16">orientation</name></name> != <name PREFIX:line="2033" PREFIX:column="31">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="2033" PREFIX:column="44">
    <expr_stmt><expr><name PREFIX:line="2034" PREFIX:column="5">x0</name> ^= 7</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name PREFIX:line="2036" PREFIX:column="3">y0</name> = <name PREFIX:line="2036" PREFIX:column="8">pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="2037" PREFIX:column="3">y0</name>&gt;&gt;= 4</expr>;</expr_stmt>
  <if PREFIX:line="2038" PREFIX:column="3">if <condition PREFIX:line="2038" PREFIX:column="6">( <expr><name><name PREFIX:line="2038" PREFIX:column="8">lrc_obj</name>.<name PREFIX:line="2038" PREFIX:column="16">orientation</name></name> != <name PREFIX:line="2038" PREFIX:column="31">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="2038" PREFIX:column="44">
    <expr_stmt><expr><name PREFIX:line="2039" PREFIX:column="5">y0</name> ^= 7</expr>;</expr_stmt></then></if>
  
  <expr_stmt><expr><name PREFIX:line="2041" PREFIX:column="3">x0</name> *= <name PREFIX:line="2041" PREFIX:column="9">chess_boxsize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="2042" PREFIX:column="3">y0</name> *= <name PREFIX:line="2042" PREFIX:column="9">chess_boxsize</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name PREFIX:line="2044" PREFIX:column="3">u8g_SetDefaultForegroundColor</name><argument_list PREFIX:line="2044" PREFIX:column="32">(<argument><expr><name PREFIX:line="2044" PREFIX:column="33">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="2045" PREFIX:column="3">u8g_DrawFrame</name><argument_list PREFIX:line="2045" PREFIX:column="16">(<argument><expr><name PREFIX:line="2045" PREFIX:column="17">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2045" PREFIX:column="26">x0</name></expr></argument>, <argument><expr><name PREFIX:line="2045" PREFIX:column="30">chess_low_edge</name> - <name PREFIX:line="2045" PREFIX:column="47">y0</name> - <name PREFIX:line="2045" PREFIX:column="52">chess_boxsize</name>+1</expr></argument>, <argument><expr><name PREFIX:line="2045" PREFIX:column="69">chess_boxsize</name></expr></argument>, <argument><expr><name PREFIX:line="2045" PREFIX:column="84">chess_boxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  
  <if PREFIX:line="2048" PREFIX:column="3">if <condition PREFIX:line="2048" PREFIX:column="6">( <expr><name PREFIX:line="2048" PREFIX:column="8">is_bold</name></expr> )</condition><then PREFIX:line="2048" PREFIX:column="17">
  <block PREFIX:line="2049" PREFIX:column="3">{
      <expr_stmt><expr><name PREFIX:line="2050" PREFIX:column="7">x0</name>--</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="2051" PREFIX:column="7">y0</name>++</expr>;</expr_stmt>
  
    <expr_stmt><expr><call><name PREFIX:line="2053" PREFIX:column="5">u8g_DrawFrame</name><argument_list PREFIX:line="2053" PREFIX:column="18">(<argument><expr><name PREFIX:line="2053" PREFIX:column="19">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2053" PREFIX:column="28">x0</name></expr></argument>, <argument><expr><name PREFIX:line="2053" PREFIX:column="32">chess_low_edge</name> - <name PREFIX:line="2053" PREFIX:column="49">y0</name> - <name PREFIX:line="2053" PREFIX:column="54">chess_boxsize</name> +1</expr></argument>, <argument><expr><name PREFIX:line="2053" PREFIX:column="72">chess_boxsize</name>+2</expr></argument>, <argument><expr><name PREFIX:line="2053" PREFIX:column="89">chess_boxsize</name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>


<function><type><name PREFIX:line="2058" PREFIX:column="1">void</name></type> <name PREFIX:line="2058" PREFIX:column="6">chess_DrawBoard</name><parameter_list PREFIX:line="2058" PREFIX:column="21">(<param><decl><type><name PREFIX:line="2058" PREFIX:column="22">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="2059" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="2060" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="2060" PREFIX:column="11">i</name></decl>, <decl><type ref="prev"/><name PREFIX:line="2060" PREFIX:column="14">j</name></decl>, <decl><type ref="prev"/><name PREFIX:line="2060" PREFIX:column="17">cp</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name PREFIX:line="2061" PREFIX:column="4">uint8_t</name> *</type><name PREFIX:line="2061" PREFIX:column="13">ptr</name></decl>;</decl_stmt>  <comment type="block" PREFIX:line="2061" PREFIX:column="19">/* pointer into PROGMEM */</comment>
  
  <if PREFIX:line="2063" PREFIX:column="3">if <condition PREFIX:line="2063" PREFIX:column="6">( <expr><call><name PREFIX:line="2063" PREFIX:column="8">U8G_MODE_GET_BITS_PER_PIXEL</name><argument_list PREFIX:line="2063" PREFIX:column="35">(<argument><expr><call><name PREFIX:line="2063" PREFIX:column="36">u8g_GetMode</name><argument_list PREFIX:line="2063" PREFIX:column="47">(<argument><expr><name PREFIX:line="2063" PREFIX:column="48">lrc_u8g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &gt; 1</expr> )</condition><then PREFIX:line="2063" PREFIX:column="63">
  <block PREFIX:line="2064" PREFIX:column="3">{
    <for PREFIX:line="2065" PREFIX:column="5">for( <init><expr><name PREFIX:line="2065" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="2065" PREFIX:column="17">i</name> &lt; 8</expr>;</condition> <incr><expr><name PREFIX:line="2065" PREFIX:column="24">i</name>++</expr></incr> )
      <for PREFIX:line="2066" PREFIX:column="7">for( <init><expr><name PREFIX:line="2066" PREFIX:column="12">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="2066" PREFIX:column="19">j</name> &lt; 8</expr>;</condition> <incr><expr><name PREFIX:line="2066" PREFIX:column="26">j</name>++</expr></incr> )
      <block PREFIX:line="2067" PREFIX:column="7">{
        <decl_stmt><decl><type><name PREFIX:line="2068" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="2068" PREFIX:column="17">x</name></decl>,<decl><type ref="prev"/><name PREFIX:line="2068" PREFIX:column="19">y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name PREFIX:line="2069" PREFIX:column="9">x</name> = <name PREFIX:line="2069" PREFIX:column="13">i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name PREFIX:line="2070" PREFIX:column="9">x</name>*=<name PREFIX:line="2070" PREFIX:column="12">chess_boxsize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name PREFIX:line="2071" PREFIX:column="9">y</name> = <name PREFIX:line="2071" PREFIX:column="13">j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name PREFIX:line="2072" PREFIX:column="9">y</name>*=<name PREFIX:line="2072" PREFIX:column="12">chess_boxsize</name></expr>;</expr_stmt>
        <if PREFIX:line="2073" PREFIX:column="9">if <condition PREFIX:line="2073" PREFIX:column="12">( <expr PREFIX:line="2073" PREFIX:column="14">((<name PREFIX:line="2073" PREFIX:column="16">i</name>^<name PREFIX:line="2073" PREFIX:column="18">j</name>) &amp; 1)  == 0</expr> )</condition><then PREFIX:line="2073" PREFIX:column="33">
          <expr_stmt><expr><call><name PREFIX:line="2074" PREFIX:column="11">u8g_SetDefaultMidColor</name><argument_list PREFIX:line="2074" PREFIX:column="33">(<argument><expr><name PREFIX:line="2074" PREFIX:column="34">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>  
        <else PREFIX:line="2075" PREFIX:column="9">else
          <expr_stmt><expr><call><name PREFIX:line="2076" PREFIX:column="11">u8g_SetDefaultBackgroundColor</name><argument_list PREFIX:line="2076" PREFIX:column="40">(<argument><expr><name PREFIX:line="2076" PREFIX:column="41">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>  
        <expr_stmt><expr><call><name PREFIX:line="2077" PREFIX:column="9">u8g_DrawBox</name><argument_list PREFIX:line="2077" PREFIX:column="20">(<argument><expr><name PREFIX:line="2077" PREFIX:column="21">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2077" PREFIX:column="30">x</name></expr></argument>,<argument><expr><name PREFIX:line="2077" PREFIX:column="32">chess_low_edge</name>-<name PREFIX:line="2077" PREFIX:column="47">y</name>-<name PREFIX:line="2077" PREFIX:column="49">chess_boxsize</name>+1</expr></argument>,<argument><expr><name PREFIX:line="2077" PREFIX:column="65">chess_boxsize</name></expr></argument>,<argument><expr><name PREFIX:line="2077" PREFIX:column="79">chess_boxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for></for>
    <comment type="line" PREFIX:line="2079" PREFIX:column="5">//u8g_SetDefaultForegroundColor(lrc_u8g);  </comment>
  }</block></then>
  <else PREFIX:line="2081" PREFIX:column="3">else
  <block PREFIX:line="2082" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="2083" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="2083" PREFIX:column="13">x_offset</name> <init PREFIX:line="2083" PREFIX:column="22">= <expr PREFIX:line="2083" PREFIX:column="24">1</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name PREFIX:line="2084" PREFIX:column="5">u8g_SetDefaultForegroundColor</name><argument_list PREFIX:line="2084" PREFIX:column="34">(<argument><expr><name PREFIX:line="2084" PREFIX:column="35">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    <for PREFIX:line="2085" PREFIX:column="5">for( <init><expr><name PREFIX:line="2085" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="2085" PREFIX:column="17">i</name> &lt; 8*8</expr>;</condition> <incr><expr><name PREFIX:line="2085" PREFIX:column="26">i</name>+=8</expr></incr> )
    <block PREFIX:line="2086" PREFIX:column="5">{
      <for PREFIX:line="2087" PREFIX:column="7">for( <init><expr><name PREFIX:line="2087" PREFIX:column="12">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="2087" PREFIX:column="19">j</name> &lt; 8*8</expr>;</condition> <incr><expr><name PREFIX:line="2087" PREFIX:column="28">j</name>+=8</expr></incr> )
      <block PREFIX:line="2088" PREFIX:column="7">{
        <if PREFIX:line="2089" PREFIX:column="9">if <condition PREFIX:line="2089" PREFIX:column="12">( <expr PREFIX:line="2089" PREFIX:column="14">((<name PREFIX:line="2089" PREFIX:column="16">i</name>^<name PREFIX:line="2089" PREFIX:column="18">j</name>) &amp; 8)  == 0</expr> )</condition><then PREFIX:line="2089" PREFIX:column="33">
        <block PREFIX:line="2090" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="2091" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2091" PREFIX:column="24">(<argument><expr><name PREFIX:line="2091" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2091" PREFIX:column="34">j</name>+0+<name PREFIX:line="2091" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2091" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2091" PREFIX:column="65">i</name>-0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2092" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2092" PREFIX:column="24">(<argument><expr><name PREFIX:line="2092" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2092" PREFIX:column="34">j</name>+0+<name PREFIX:line="2092" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2092" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2092" PREFIX:column="65">i</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2093" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2093" PREFIX:column="24">(<argument><expr><name PREFIX:line="2093" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2093" PREFIX:column="34">j</name>+0+<name PREFIX:line="2093" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2093" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2093" PREFIX:column="65">i</name>-4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2094" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2094" PREFIX:column="24">(<argument><expr><name PREFIX:line="2094" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2094" PREFIX:column="34">j</name>+0+<name PREFIX:line="2094" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2094" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2094" PREFIX:column="65">i</name>-6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2095" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2095" PREFIX:column="24">(<argument><expr><name PREFIX:line="2095" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2095" PREFIX:column="34">j</name>+2+<name PREFIX:line="2095" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2095" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2095" PREFIX:column="65">i</name>-0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2096" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2096" PREFIX:column="24">(<argument><expr><name PREFIX:line="2096" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2096" PREFIX:column="34">j</name>+2+<name PREFIX:line="2096" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2096" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2096" PREFIX:column="65">i</name>-6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2097" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2097" PREFIX:column="24">(<argument><expr><name PREFIX:line="2097" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2097" PREFIX:column="34">j</name>+4+<name PREFIX:line="2097" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2097" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2097" PREFIX:column="65">i</name>-0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2098" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2098" PREFIX:column="24">(<argument><expr><name PREFIX:line="2098" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2098" PREFIX:column="34">j</name>+4+<name PREFIX:line="2098" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2098" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2098" PREFIX:column="65">i</name>-6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2099" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2099" PREFIX:column="24">(<argument><expr><name PREFIX:line="2099" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2099" PREFIX:column="34">j</name>+6+<name PREFIX:line="2099" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2099" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2099" PREFIX:column="65">i</name>-0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2100" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2100" PREFIX:column="24">(<argument><expr><name PREFIX:line="2100" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2100" PREFIX:column="34">j</name>+6+<name PREFIX:line="2100" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2100" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2100" PREFIX:column="65">i</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2101" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2101" PREFIX:column="24">(<argument><expr><name PREFIX:line="2101" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2101" PREFIX:column="34">j</name>+6+<name PREFIX:line="2101" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2101" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2101" PREFIX:column="65">i</name>-4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2102" PREFIX:column="11">u8g_DrawPixel</name><argument_list PREFIX:line="2102" PREFIX:column="24">(<argument><expr><name PREFIX:line="2102" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2102" PREFIX:column="34">j</name>+6+<name PREFIX:line="2102" PREFIX:column="38">x_offset</name></expr></argument>, <argument><expr><name PREFIX:line="2102" PREFIX:column="48">chess_low_edge</name> - <name PREFIX:line="2102" PREFIX:column="65">i</name>-6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></for>
    }</block></for>
  }</block></else></if>
  
  <for PREFIX:line="2108" PREFIX:column="3">for ( <init><expr><name PREFIX:line="2108" PREFIX:column="9">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="2108" PREFIX:column="16">i</name> &lt; 8</expr>;</condition> <incr><expr><name PREFIX:line="2108" PREFIX:column="23">i</name>++</expr></incr> )
  <block PREFIX:line="2109" PREFIX:column="3">{
    <for PREFIX:line="2110" PREFIX:column="5">for ( <init><expr><name PREFIX:line="2110" PREFIX:column="11">j</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="2110" PREFIX:column="18">j</name> &lt; 8</expr>;</condition> <incr><expr><name PREFIX:line="2110" PREFIX:column="25">j</name>++</expr></incr> )
    <block PREFIX:line="2111" PREFIX:column="5">{
      <comment type="block" PREFIX:line="2112" PREFIX:column="7">/* get piece from global board */</comment>
      <if PREFIX:line="2113" PREFIX:column="7">if <condition PREFIX:line="2113" PREFIX:column="10">( <expr><name><name PREFIX:line="2113" PREFIX:column="12">lrc_obj</name>.<name PREFIX:line="2113" PREFIX:column="20">orientation</name></name> == <name PREFIX:line="2113" PREFIX:column="35">COLOR_WHITE</name></expr> )</condition><then PREFIX:line="2113" PREFIX:column="48">
      <block PREFIX:line="2114" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="2115" PREFIX:column="9">cp</name> =  <name><name PREFIX:line="2115" PREFIX:column="15">lrc_obj</name>.<name PREFIX:line="2115" PREFIX:column="23">board</name><index PREFIX:line="2115" PREFIX:column="28">[<expr><name PREFIX:line="2115" PREFIX:column="29">i</name>*8+<name PREFIX:line="2115" PREFIX:column="33">j</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="2117" PREFIX:column="7">else
      <block PREFIX:line="2118" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="2119" PREFIX:column="9">cp</name> =  <name><name PREFIX:line="2119" PREFIX:column="15">lrc_obj</name>.<name PREFIX:line="2119" PREFIX:column="23">board</name><index PREFIX:line="2119" PREFIX:column="28">[<expr PREFIX:line="2119" PREFIX:column="29">(7-<name PREFIX:line="2119" PREFIX:column="32">i</name>)*8+7-<name PREFIX:line="2119" PREFIX:column="39">j</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></else></if>
      <if PREFIX:line="2121" PREFIX:column="7">if <condition PREFIX:line="2121" PREFIX:column="10">( <expr><call><name PREFIX:line="2121" PREFIX:column="12">cp_GetPiece</name><argument_list PREFIX:line="2121" PREFIX:column="23">(<argument><expr><name PREFIX:line="2121" PREFIX:column="24">cp</name></expr></argument>)</argument_list></call> != <name PREFIX:line="2121" PREFIX:column="31">PIECE_NONE</name></expr> )</condition><then PREFIX:line="2121" PREFIX:column="43">
      <block PREFIX:line="2122" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="2123" PREFIX:column="9">ptr</name> = <name PREFIX:line="2123" PREFIX:column="15">chess_black_pieces_bm</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="2124" PREFIX:column="9">ptr</name> += (<call><name PREFIX:line="2124" PREFIX:column="17">cp_GetPiece</name><argument_list PREFIX:line="2124" PREFIX:column="28">(<argument><expr><name PREFIX:line="2124" PREFIX:column="29">cp</name></expr></argument>)</argument_list></call>-1)*8</expr>;</expr_stmt>
        <expr_stmt><expr><call><name PREFIX:line="2125" PREFIX:column="9">u8g_SetDefaultForegroundColor</name><argument_list PREFIX:line="2125" PREFIX:column="38">(<argument><expr><name PREFIX:line="2125" PREFIX:column="39">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name PREFIX:line="2126" PREFIX:column="9">u8g_DrawBitmapP</name><argument_list PREFIX:line="2126" PREFIX:column="24">(<argument><expr><name PREFIX:line="2126" PREFIX:column="25">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2126" PREFIX:column="34">j</name>*<name PREFIX:line="2126" PREFIX:column="36">chess_boxsize</name>+<name PREFIX:line="2126" PREFIX:column="50">chess_boxoffset</name>-1</expr></argument>, <argument><expr><name PREFIX:line="2126" PREFIX:column="69">chess_low_edge</name> - (<name PREFIX:line="2126" PREFIX:column="87">i</name>*<name PREFIX:line="2126" PREFIX:column="89">chess_boxsize</name>+<name PREFIX:line="2126" PREFIX:column="103">chess_boxsize</name>-<name PREFIX:line="2126" PREFIX:column="117">chess_boxoffset</name>)</expr></argument>, <argument><expr PREFIX:line="2126" PREFIX:column="135">1</expr></argument>, <argument><expr PREFIX:line="2126" PREFIX:column="138">8</expr></argument>, <argument><expr><name PREFIX:line="2126" PREFIX:column="141">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
	<if PREFIX:line="2128" PREFIX:column="9">if <condition PREFIX:line="2128" PREFIX:column="12">( <expr><call><name PREFIX:line="2128" PREFIX:column="14">cp_GetColor</name><argument_list PREFIX:line="2128" PREFIX:column="25">(<argument><expr><name PREFIX:line="2128" PREFIX:column="26">cp</name></expr></argument>)</argument_list></call> == <name><name PREFIX:line="2128" PREFIX:column="33">lrc_obj</name>.<name PREFIX:line="2128" PREFIX:column="41">strike_out_color</name></name></expr> )</condition><then PREFIX:line="2128" PREFIX:column="59"> 
	<block PREFIX:line="2129" PREFIX:column="9">{
	  <expr_stmt><expr><name PREFIX:line="2130" PREFIX:column="11">ptr</name> = <name PREFIX:line="2130" PREFIX:column="17">chess_pieces_body_bm</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name PREFIX:line="2131" PREFIX:column="11">ptr</name> += (<call><name PREFIX:line="2131" PREFIX:column="19">cp_GetPiece</name><argument_list PREFIX:line="2131" PREFIX:column="30">(<argument><expr><name PREFIX:line="2131" PREFIX:column="31">cp</name></expr></argument>)</argument_list></call>-1)*8</expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2132" PREFIX:column="11">u8g_SetDefaultBackgroundColor</name><argument_list PREFIX:line="2132" PREFIX:column="40">(<argument><expr><name PREFIX:line="2132" PREFIX:column="41">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name PREFIX:line="2133" PREFIX:column="11">u8g_DrawBitmapP</name><argument_list PREFIX:line="2133" PREFIX:column="26">(<argument><expr><name PREFIX:line="2133" PREFIX:column="27">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2133" PREFIX:column="36">j</name>*<name PREFIX:line="2133" PREFIX:column="38">chess_boxsize</name>+<name PREFIX:line="2133" PREFIX:column="52">chess_boxoffset</name>-1</expr></argument>, <argument><expr><name PREFIX:line="2133" PREFIX:column="71">chess_low_edge</name> - (<name PREFIX:line="2133" PREFIX:column="89">i</name>*<name PREFIX:line="2133" PREFIX:column="91">chess_boxsize</name>+<name PREFIX:line="2133" PREFIX:column="105">chess_boxsize</name>-<name PREFIX:line="2133" PREFIX:column="119">chess_boxoffset</name>)</expr></argument>, <argument><expr PREFIX:line="2133" PREFIX:column="137">1</expr></argument>, <argument><expr PREFIX:line="2133" PREFIX:column="140">8</expr></argument>, <argument><expr><name PREFIX:line="2133" PREFIX:column="143">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
      }</block></then></if>
    }</block></for>
  }</block></for>
  
  <if PREFIX:line="2139" PREFIX:column="3">if <condition PREFIX:line="2139" PREFIX:column="6">( <expr PREFIX:line="2139" PREFIX:column="8">(<name PREFIX:line="2139" PREFIX:column="9">chess_source_pos</name> &amp; 0x88) == 0</expr> )</condition><then PREFIX:line="2139" PREFIX:column="40">
  <block PREFIX:line="2140" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="2141" PREFIX:column="5">chess_DrawFrame</name><argument_list PREFIX:line="2141" PREFIX:column="20">(<argument><expr><name PREFIX:line="2141" PREFIX:column="21">chess_source_pos</name></expr></argument>, <argument><expr PREFIX:line="2141" PREFIX:column="39">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if PREFIX:line="2144" PREFIX:column="3">if <condition PREFIX:line="2144" PREFIX:column="6">( <expr PREFIX:line="2144" PREFIX:column="8">(<name PREFIX:line="2144" PREFIX:column="9">chess_target_pos</name> &amp; 0x88) == 0</expr> )</condition><then PREFIX:line="2144" PREFIX:column="40">
  <block PREFIX:line="2145" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="2146" PREFIX:column="5">chess_DrawFrame</name><argument_list PREFIX:line="2146" PREFIX:column="20">(<argument><expr><name PREFIX:line="2146" PREFIX:column="21">chess_target_pos</name></expr></argument>, <argument><expr PREFIX:line="2146" PREFIX:column="39">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
}</block></function>


<function><type><name PREFIX:line="2152" PREFIX:column="1">void</name></type> <name PREFIX:line="2152" PREFIX:column="6">chess_Thinking</name><parameter_list PREFIX:line="2152" PREFIX:column="20">(<param><decl><type><name PREFIX:line="2152" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="2153" PREFIX:column="1">{
}</block></function>

<function><type><name PREFIX:line="2156" PREFIX:column="1">void</name></type> <name PREFIX:line="2156" PREFIX:column="6">chess_Init</name><parameter_list PREFIX:line="2156" PREFIX:column="16">(<param><decl><type><name PREFIX:line="2156" PREFIX:column="17">u8g_t</name> *</type><name PREFIX:line="2156" PREFIX:column="24">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="2156" PREFIX:column="29">uint8_t</name></type> <name PREFIX:line="2156" PREFIX:column="37">body_color</name></decl></param>)</parameter_list>
<block PREFIX:line="2157" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="2158" PREFIX:column="3">lrc_u8g</name> = <name PREFIX:line="2158" PREFIX:column="13">u8g</name></expr>;</expr_stmt>

  <expr_stmt><expr><name PREFIX:line="2160" PREFIX:column="3">chess_low_edge</name> = <call><name PREFIX:line="2160" PREFIX:column="20">u8g_GetHeight</name><argument_list PREFIX:line="2160" PREFIX:column="33">(<argument><expr><name PREFIX:line="2160" PREFIX:column="34">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="2161" PREFIX:column="3">chess_low_edge</name>--</expr>;</expr_stmt>
  

  <if PREFIX:line="2164" PREFIX:column="3">if <condition PREFIX:line="2164" PREFIX:column="6">( <expr><call><name PREFIX:line="2164" PREFIX:column="8">U8G_MODE_GET_BITS_PER_PIXEL</name><argument_list PREFIX:line="2164" PREFIX:column="35">(<argument><expr><call><name PREFIX:line="2164" PREFIX:column="36">u8g_GetMode</name><argument_list PREFIX:line="2164" PREFIX:column="47">(<argument><expr><name PREFIX:line="2164" PREFIX:column="48">lrc_u8g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 1</expr> )</condition><then PREFIX:line="2164" PREFIX:column="64">
  <block PREFIX:line="2165" PREFIX:column="3">{
  
    <expr_stmt><expr><name PREFIX:line="2167" PREFIX:column="5">chess_boxsize</name> = 8</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="2168" PREFIX:column="5">chess_boxoffset</name> = 1</expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="2170" PREFIX:column="3">else
  <block PREFIX:line="2171" PREFIX:column="3">{

    <comment type="block" PREFIX:line="2173" PREFIX:column="5">/*    
    if ( u8g_GetHeight(lrc_u8g) &gt;= 12*8 )
    {
      chess_boxsize = 12;
      chess_boxoffset = 3;
    }
    else */</comment> <if PREFIX:line="2179" PREFIX:column="13">if <condition PREFIX:line="2179" PREFIX:column="16">( <expr><call><name PREFIX:line="2179" PREFIX:column="18">u8g_GetHeight</name><argument_list PREFIX:line="2179" PREFIX:column="31">(<argument><expr><name PREFIX:line="2179" PREFIX:column="32">lrc_u8g</name></expr></argument>)</argument_list></call> &gt;= 11*8</expr> )</condition><then PREFIX:line="2179" PREFIX:column="50">
    <block PREFIX:line="2180" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="2181" PREFIX:column="7">chess_boxsize</name> = 10</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="2182" PREFIX:column="7">chess_boxoffset</name> = 2</expr>;</expr_stmt>
    }</block></then>
    <else PREFIX:line="2184" PREFIX:column="5">else
    <block PREFIX:line="2185" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="2186" PREFIX:column="7">chess_boxsize</name> = 8</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="2187" PREFIX:column="7">chess_boxoffset</name> = 1</expr>;</expr_stmt>      
    }</block></else></if>
    
    <if PREFIX:line="2190" PREFIX:column="5">if <condition PREFIX:line="2190" PREFIX:column="8">( <expr><call><name PREFIX:line="2190" PREFIX:column="10">u8g_GetHeight</name><argument_list PREFIX:line="2190" PREFIX:column="23">(<argument><expr><name PREFIX:line="2190" PREFIX:column="24">lrc_u8g</name></expr></argument>)</argument_list></call> &gt; 64</expr> )</condition><then PREFIX:line="2190" PREFIX:column="39">
      <expr_stmt><expr><name PREFIX:line="2191" PREFIX:column="7">chess_low_edge</name> -= (<call><name PREFIX:line="2191" PREFIX:column="26">u8g_GetHeight</name><argument_list PREFIX:line="2191" PREFIX:column="39">(<argument><expr><name PREFIX:line="2191" PREFIX:column="40">lrc_u8g</name></expr></argument>)</argument_list></call>-<name PREFIX:line="2191" PREFIX:column="49">chess_boxsize</name>*8) / 2</expr>;</expr_stmt></then></if>
    
  }</block></else></if>
    
  <expr_stmt><expr><name><name PREFIX:line="2195" PREFIX:column="3">lrc_obj</name>.<name PREFIX:line="2195" PREFIX:column="11">strike_out_color</name></name> = <name PREFIX:line="2195" PREFIX:column="30">body_color</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="2196" PREFIX:column="3">chess_SetupBoard</name><argument_list PREFIX:line="2196" PREFIX:column="19">()</argument_list></call></expr>;</expr_stmt>
}</block></function>



<function><type><name PREFIX:line="2201" PREFIX:column="1">void</name></type> <name PREFIX:line="2201" PREFIX:column="6">chess_Draw</name><parameter_list PREFIX:line="2201" PREFIX:column="16">(<param><decl><type><name PREFIX:line="2201" PREFIX:column="17">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="2202" PREFIX:column="1">{
  <if PREFIX:line="2203" PREFIX:column="3">if <condition PREFIX:line="2203" PREFIX:column="6">( <expr><name PREFIX:line="2203" PREFIX:column="8">chess_state</name> == <name PREFIX:line="2203" PREFIX:column="23">CHESS_STATE_MENU</name></expr> )</condition><then PREFIX:line="2203" PREFIX:column="41">
  <block PREFIX:line="2204" PREFIX:column="3">{
    <if PREFIX:line="2205" PREFIX:column="5">if <condition PREFIX:line="2205" PREFIX:column="8">( <expr><name><name PREFIX:line="2205" PREFIX:column="10">lrc_obj</name>.<name PREFIX:line="2205" PREFIX:column="18">ply_count</name></name> == 0</expr>)</condition><then PREFIX:line="2205" PREFIX:column="33">
      <expr_stmt><expr><name PREFIX:line="2206" PREFIX:column="7">mnu_max</name> = 2</expr>;</expr_stmt></then>
    <else PREFIX:line="2207" PREFIX:column="5">else
      <expr_stmt><expr><name PREFIX:line="2208" PREFIX:column="7">mnu_max</name> = 4</expr>;</expr_stmt></else></if>
    <expr_stmt><expr><call><name PREFIX:line="2209" PREFIX:column="5">mnu_Draw</name><argument_list PREFIX:line="2209" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="2211" PREFIX:column="3">else
  <block PREFIX:line="2212" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="2213" PREFIX:column="5">chess_DrawBoard</name><argument_list PREFIX:line="2213" PREFIX:column="20">()</argument_list></call></expr>;</expr_stmt>
    
    <block PREFIX:line="2215" PREFIX:column="5">{
      <decl_stmt><decl><type><name PREFIX:line="2216" PREFIX:column="7">uint8_t</name></type> <name PREFIX:line="2216" PREFIX:column="15">i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name PREFIX:line="2217" PREFIX:column="7">uint8_t</name></type> <name PREFIX:line="2217" PREFIX:column="15">entries</name> <init PREFIX:line="2217" PREFIX:column="23">= <expr><name><name PREFIX:line="2217" PREFIX:column="25">lrc_obj</name>.<name PREFIX:line="2217" PREFIX:column="33">chm_pos</name></name></expr></init></decl>;</decl_stmt>
      <if PREFIX:line="2218" PREFIX:column="7">if <condition PREFIX:line="2218" PREFIX:column="10">( <expr><name PREFIX:line="2218" PREFIX:column="12">entries</name> &gt; 4</expr> )</condition><then PREFIX:line="2218" PREFIX:column="25">
	<expr_stmt><expr><name PREFIX:line="2219" PREFIX:column="9">entries</name> = 4</expr>;</expr_stmt></then></if>
      
      <expr_stmt><expr><call><name PREFIX:line="2221" PREFIX:column="7">u8g_SetFont</name><argument_list PREFIX:line="2221" PREFIX:column="18">(<argument><expr><name PREFIX:line="2221" PREFIX:column="19">lrc_u8g</name></expr></argument>, <argument><expr><name PREFIX:line="2221" PREFIX:column="28">u8g_font_5x7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="2222" PREFIX:column="7">u8g_SetDefaultForegroundColor</name><argument_list PREFIX:line="2222" PREFIX:column="36">(<argument><expr><name PREFIX:line="2222" PREFIX:column="37">lrc_u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for PREFIX:line="2223" PREFIX:column="7">for( <init><expr><name PREFIX:line="2223" PREFIX:column="12">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="2223" PREFIX:column="19">i</name> &lt; <name PREFIX:line="2223" PREFIX:column="23">entries</name></expr>;</condition> <incr><expr><name PREFIX:line="2223" PREFIX:column="32">i</name>++</expr></incr> )
      <block PREFIX:line="2224" PREFIX:column="7">{
        
<cpp:if PREFIX:line="2226" PREFIX:column="1">#<cpp:directive PREFIX:line="2226" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="2226" PREFIX:column="5">defined</name><argument_list PREFIX:line="2226" PREFIX:column="12">(<argument><expr><name PREFIX:line="2226" PREFIX:column="13">DOGXL160_HW_GR</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="2226" PREFIX:column="32">defined</name><argument_list PREFIX:line="2226" PREFIX:column="39">(<argument><expr><name PREFIX:line="2226" PREFIX:column="40">DOGXL160_HW_BW</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name PREFIX:line="2227" PREFIX:column="9">dog_DrawStr</name><argument_list PREFIX:line="2227" PREFIX:column="20">(<argument><expr><call><name PREFIX:line="2227" PREFIX:column="21">u8g_GetWidth</name><argument_list PREFIX:line="2227" PREFIX:column="33">(<argument><expr><name PREFIX:line="2227" PREFIX:column="34">lrc_u8g</name></expr></argument>)</argument_list></call>-35</expr></argument>, <argument><expr><call><name PREFIX:line="2227" PREFIX:column="47">u8g_GetHeight</name><argument_list PREFIX:line="2227" PREFIX:column="60">(<argument><expr><name PREFIX:line="2227" PREFIX:column="61">lrc_u8g</name></expr></argument>)</argument_list></call>-8*(<name PREFIX:line="2227" PREFIX:column="73">i</name>+1)</expr></argument>, <argument><expr><name PREFIX:line="2227" PREFIX:column="79">font_5x7</name></expr></argument>, <argument><expr><call><name PREFIX:line="2227" PREFIX:column="89">cu_GetHalfMoveStr</name><argument_list PREFIX:line="2227" PREFIX:column="106">(<argument><expr><name><name PREFIX:line="2227" PREFIX:column="107">lrc_obj</name>.<name PREFIX:line="2227" PREFIX:column="115">chm_pos</name></name>-<name PREFIX:line="2227" PREFIX:column="123">entries</name>+<name PREFIX:line="2227" PREFIX:column="131">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else PREFIX:line="2228" PREFIX:column="1">#<cpp:directive PREFIX:line="2228" PREFIX:column="2">else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name PREFIX:line="2229" PREFIX:column="9">u8g_DrawStr</name><argument_list PREFIX:line="2229" PREFIX:column="20">(<argument><expr><name PREFIX:line="2229" PREFIX:column="21">lrc_u8g</name></expr></argument>, <argument><expr><call><name PREFIX:line="2229" PREFIX:column="30">u8g_GetWidth</name><argument_list PREFIX:line="2229" PREFIX:column="42">(<argument><expr><name PREFIX:line="2229" PREFIX:column="43">lrc_u8g</name></expr></argument>)</argument_list></call>-35</expr></argument>, <argument><expr PREFIX:line="2229" PREFIX:column="56">8*(<name PREFIX:line="2229" PREFIX:column="59">i</name>+1)</expr></argument>, <argument><expr><call><name PREFIX:line="2229" PREFIX:column="65">cu_GetHalfMoveStr</name><argument_list PREFIX:line="2229" PREFIX:column="82">(<argument><expr><name><name PREFIX:line="2229" PREFIX:column="83">lrc_obj</name>.<name PREFIX:line="2229" PREFIX:column="91">chm_pos</name></name>-<name PREFIX:line="2229" PREFIX:column="99">entries</name>+<name PREFIX:line="2229" PREFIX:column="107">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="2230" PREFIX:column="1">#<cpp:directive PREFIX:line="2230" PREFIX:column="2">endif</cpp:directive></cpp:endif>

      }</block></for>
      
    }</block>
    
    <if PREFIX:line="2236" PREFIX:column="5">if <condition PREFIX:line="2236" PREFIX:column="8">( <expr><name PREFIX:line="2236" PREFIX:column="10">chess_state</name> == <name PREFIX:line="2236" PREFIX:column="25">CHESS_STATE_SELECT_PIECE</name></expr> )</condition><then PREFIX:line="2236" PREFIX:column="51">
      <expr_stmt><expr><call><name PREFIX:line="2237" PREFIX:column="7">mnu_DrawHome</name><argument_list PREFIX:line="2237" PREFIX:column="19">(<argument><expr><name PREFIX:line="2237" PREFIX:column="20">chess_source_pos</name> == 255</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else PREFIX:line="2238" PREFIX:column="5">else <if PREFIX:line="2238" PREFIX:column="10">if <condition PREFIX:line="2238" PREFIX:column="13">( <expr><name PREFIX:line="2238" PREFIX:column="15">chess_state</name> == <name PREFIX:line="2238" PREFIX:column="30">CHESS_STATE_SELECT_TARGET_POS</name></expr> )</condition><then PREFIX:line="2238" PREFIX:column="61">
      <expr_stmt><expr><call><name PREFIX:line="2239" PREFIX:column="7">mnu_DrawHome</name><argument_list PREFIX:line="2239" PREFIX:column="19">(<argument><expr><name PREFIX:line="2239" PREFIX:column="20">chess_target_pos</name> == 255</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else PREFIX:line="2240" PREFIX:column="5">else
      <expr_stmt><expr><call><name PREFIX:line="2241" PREFIX:column="7">mnu_DrawHome</name><argument_list PREFIX:line="2241" PREFIX:column="19">(<argument><expr PREFIX:line="2241" PREFIX:column="20">0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
      
    <if PREFIX:line="2243" PREFIX:column="5">if <condition PREFIX:line="2243" PREFIX:column="8">( <expr><name PREFIX:line="2243" PREFIX:column="10">chess_state</name> == <name PREFIX:line="2243" PREFIX:column="25">CHESS_STATE_GAME_END</name></expr> )</condition><then PREFIX:line="2243" PREFIX:column="47">
    <block PREFIX:line="2244" PREFIX:column="5">{
      <switch PREFIX:line="2245" PREFIX:column="7">switch<condition PREFIX:line="2245" PREFIX:column="13">( <expr><name><name PREFIX:line="2245" PREFIX:column="15">lrc_obj</name>.<name PREFIX:line="2245" PREFIX:column="23">lost_side_color</name></name></expr> )</condition>
      <block PREFIX:line="2246" PREFIX:column="7">{
	<case PREFIX:line="2247" PREFIX:column="9">case <expr><name PREFIX:line="2247" PREFIX:column="14">COLOR_WHITE</name></expr>:
	  <expr_stmt><expr><call><name PREFIX:line="2248" PREFIX:column="11">mnu_DrawEntry</name><argument_list PREFIX:line="2248" PREFIX:column="24">(<argument><expr><call><name PREFIX:line="2248" PREFIX:column="25">u8g_GetHeight</name><argument_list PREFIX:line="2248" PREFIX:column="38">(<argument><expr><name PREFIX:line="2248" PREFIX:column="39">lrc_u8g</name></expr></argument>)</argument_list></call> / 2-2</expr></argument>, <argument><expr PREFIX:line="2248" PREFIX:column="55">"Black wins"</expr></argument>, <argument><expr PREFIX:line="2248" PREFIX:column="69">1</expr></argument>, <argument><expr PREFIX:line="2248" PREFIX:column="72">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break PREFIX:line="2249" PREFIX:column="11">break;</break>
	</case><case PREFIX:line="2250" PREFIX:column="9">case <expr><name PREFIX:line="2250" PREFIX:column="14">COLOR_BLACK</name></expr>:
	  <expr_stmt><expr><call><name PREFIX:line="2251" PREFIX:column="11">mnu_DrawEntry</name><argument_list PREFIX:line="2251" PREFIX:column="24">(<argument><expr><call><name PREFIX:line="2251" PREFIX:column="25">u8g_GetHeight</name><argument_list PREFIX:line="2251" PREFIX:column="38">(<argument><expr><name PREFIX:line="2251" PREFIX:column="39">lrc_u8g</name></expr></argument>)</argument_list></call> / 2-2</expr></argument>, <argument><expr PREFIX:line="2251" PREFIX:column="55">"White wins"</expr></argument>, <argument><expr PREFIX:line="2251" PREFIX:column="69">1</expr></argument>, <argument><expr PREFIX:line="2251" PREFIX:column="72">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break PREFIX:line="2252" PREFIX:column="11">break;</break>
	</case><default PREFIX:line="2253" PREFIX:column="9">default:
	  <expr_stmt><expr><call><name PREFIX:line="2254" PREFIX:column="11">mnu_DrawEntry</name><argument_list PREFIX:line="2254" PREFIX:column="24">(<argument><expr><call><name PREFIX:line="2254" PREFIX:column="25">u8g_GetHeight</name><argument_list PREFIX:line="2254" PREFIX:column="38">(<argument><expr><name PREFIX:line="2254" PREFIX:column="39">lrc_u8g</name></expr></argument>)</argument_list></call> / 2-2</expr></argument>, <argument><expr PREFIX:line="2254" PREFIX:column="55">"Stalemate"</expr></argument>, <argument><expr PREFIX:line="2254" PREFIX:column="68">1</expr></argument>, <argument><expr PREFIX:line="2254" PREFIX:column="71">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break PREFIX:line="2255" PREFIX:column="11">break;</break>
      </default>}</block></switch>  
    }</block></then></if>
  }</block></else></if>
}</block></function>


<function><type><name PREFIX:line="2262" PREFIX:column="1">void</name></type> <name PREFIX:line="2262" PREFIX:column="6">chess_Step</name><parameter_list PREFIX:line="2262" PREFIX:column="16">(<param><decl><type><name PREFIX:line="2262" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="2262" PREFIX:column="25">keycode</name></decl></param>)</parameter_list>
<block PREFIX:line="2263" PREFIX:column="1">{
  <if PREFIX:line="2264" PREFIX:column="3">if <condition PREFIX:line="2264" PREFIX:column="6">( <expr><name PREFIX:line="2264" PREFIX:column="8">keycode</name> == <name PREFIX:line="2264" PREFIX:column="19">CHESS_KEY_NONE</name></expr> )</condition><then PREFIX:line="2264" PREFIX:column="35">
  <block PREFIX:line="2265" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="2266" PREFIX:column="5">chess_key_cmd</name> = <name PREFIX:line="2266" PREFIX:column="21">chess_key_code</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="2267" PREFIX:column="5">chess_key_code</name> = <name PREFIX:line="2267" PREFIX:column="22">CHESS_KEY_NONE</name></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="2269" PREFIX:column="3">else
  <block PREFIX:line="2270" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="2271" PREFIX:column="5">chess_key_cmd</name> = <name PREFIX:line="2271" PREFIX:column="21">CHESS_KEY_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="2272" PREFIX:column="5">chess_key_code</name> = <name PREFIX:line="2272" PREFIX:column="22">keycode</name></expr>;</expr_stmt>
  }</block></else></if>
  <comment type="line" PREFIX:line="2274" PREFIX:column="3">//chess_ComputerMove(2);</comment>
  <switch PREFIX:line="2275" PREFIX:column="3">switch<condition PREFIX:line="2275" PREFIX:column="9">(<expr><name PREFIX:line="2275" PREFIX:column="10">chess_state</name></expr>)</condition>
  <block PREFIX:line="2276" PREFIX:column="3">{
    <case PREFIX:line="2277" PREFIX:column="5">case <expr><name PREFIX:line="2277" PREFIX:column="10">CHESS_STATE_MENU</name></expr>:
      <expr_stmt><expr><call><name PREFIX:line="2278" PREFIX:column="7">mnu_Step</name><argument_list PREFIX:line="2278" PREFIX:column="15">(<argument><expr><name PREFIX:line="2278" PREFIX:column="16">chess_key_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if PREFIX:line="2279" PREFIX:column="7">if <condition PREFIX:line="2279" PREFIX:column="10">( <expr><name PREFIX:line="2279" PREFIX:column="12">chess_key_cmd</name> == <name PREFIX:line="2279" PREFIX:column="29">CHESS_KEY_SELECT</name></expr> )</condition><then PREFIX:line="2279" PREFIX:column="47">
      <block PREFIX:line="2280" PREFIX:column="7">{
	<if PREFIX:line="2281" PREFIX:column="9">if <condition PREFIX:line="2281" PREFIX:column="12">( <expr><name PREFIX:line="2281" PREFIX:column="14">mnu_pos</name> == 0</expr> )</condition><then PREFIX:line="2281" PREFIX:column="28">
	<block PREFIX:line="2282" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="2283" PREFIX:column="11">chess_SetupBoard</name><argument_list PREFIX:line="2283" PREFIX:column="27">()</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name PREFIX:line="2284" PREFIX:column="11">lrc_obj</name>.<name PREFIX:line="2284" PREFIX:column="19">orientation</name></name> = 0</expr>;</expr_stmt>
	  <expr_stmt><expr><name PREFIX:line="2285" PREFIX:column="11">chess_state</name> = <name PREFIX:line="2285" PREFIX:column="25">CHESS_STATE_SELECT_START</name></expr>;</expr_stmt>
	}</block></then>
	<else PREFIX:line="2287" PREFIX:column="9">else <if PREFIX:line="2287" PREFIX:column="14">if <condition PREFIX:line="2287" PREFIX:column="17">( <expr><name PREFIX:line="2287" PREFIX:column="19">mnu_pos</name> == 1</expr> )</condition><then PREFIX:line="2287" PREFIX:column="33">
	<block PREFIX:line="2288" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="2289" PREFIX:column="11">chess_SetupBoard</name><argument_list PREFIX:line="2289" PREFIX:column="27">()</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name PREFIX:line="2290" PREFIX:column="11">lrc_obj</name>.<name PREFIX:line="2290" PREFIX:column="19">orientation</name></name> = 1</expr>;</expr_stmt>
	  <expr_stmt><expr><name PREFIX:line="2291" PREFIX:column="11">chess_state</name> = <name PREFIX:line="2291" PREFIX:column="25">CHESS_STATE_THINKING</name></expr>;</expr_stmt>
	}</block></then>
	<else PREFIX:line="2293" PREFIX:column="9">else <if PREFIX:line="2293" PREFIX:column="14">if <condition PREFIX:line="2293" PREFIX:column="17">( <expr><name PREFIX:line="2293" PREFIX:column="19">mnu_pos</name> == 2</expr> )</condition><then PREFIX:line="2293" PREFIX:column="33">
	<block PREFIX:line="2294" PREFIX:column="9">{
	  <if PREFIX:line="2295" PREFIX:column="11">if <condition PREFIX:line="2295" PREFIX:column="14">( <expr><name><name PREFIX:line="2295" PREFIX:column="16">lrc_obj</name>.<name PREFIX:line="2295" PREFIX:column="24">ply_count</name></name> &gt;= 2</expr> )</condition><then PREFIX:line="2295" PREFIX:column="40">
	  <block PREFIX:line="2296" PREFIX:column="11">{
	    <expr_stmt><expr><call><name PREFIX:line="2297" PREFIX:column="13">cu_UndoHalfMove</name><argument_list PREFIX:line="2297" PREFIX:column="28">()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name PREFIX:line="2298" PREFIX:column="13">cu_UndoHalfMove</name><argument_list PREFIX:line="2298" PREFIX:column="28">()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name PREFIX:line="2299" PREFIX:column="13">lrc_obj</name>.<name PREFIX:line="2299" PREFIX:column="21">ply_count</name></name>-=2</expr>;</expr_stmt>
	    <if PREFIX:line="2300" PREFIX:column="13">if <condition PREFIX:line="2300" PREFIX:column="16">( <expr><name><name PREFIX:line="2300" PREFIX:column="18">lrc_obj</name>.<name PREFIX:line="2300" PREFIX:column="26">ply_count</name></name> == 0</expr> )</condition><then PREFIX:line="2300" PREFIX:column="42">
	      <expr_stmt><expr><name PREFIX:line="2301" PREFIX:column="15">mnu_pos</name> = 0</expr>;</expr_stmt></then></if>
	  }</block></then></if>
	  <expr_stmt><expr><name PREFIX:line="2303" PREFIX:column="11">chess_state</name> = <name PREFIX:line="2303" PREFIX:column="25">CHESS_STATE_SELECT_START</name></expr>;</expr_stmt>
	}</block></then>
	<else PREFIX:line="2305" PREFIX:column="9">else <if PREFIX:line="2305" PREFIX:column="14">if <condition PREFIX:line="2305" PREFIX:column="17">( <expr><name PREFIX:line="2305" PREFIX:column="19">mnu_pos</name> == 3</expr> )</condition><then PREFIX:line="2305" PREFIX:column="33">
	<block PREFIX:line="2306" PREFIX:column="9">{
	  <expr_stmt><expr><name PREFIX:line="2307" PREFIX:column="11">chess_state</name> = <name PREFIX:line="2307" PREFIX:column="25">CHESS_STATE_SELECT_START</name></expr>;</expr_stmt>
	}</block></then></if></else></if></else></if></else></if>
      }</block></then></if>
      <break PREFIX:line="2310" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="2311" PREFIX:column="5">case <expr><name PREFIX:line="2311" PREFIX:column="10">CHESS_STATE_SELECT_START</name></expr>:
      <expr_stmt><expr><call><name PREFIX:line="2312" PREFIX:column="7">chess_ClearMarks</name><argument_list PREFIX:line="2312" PREFIX:column="23">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="2313" PREFIX:column="7">chess_MarkMovable</name><argument_list PREFIX:line="2313" PREFIX:column="24">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="2314" PREFIX:column="7">chess_source_pos</name> = <call><name PREFIX:line="2314" PREFIX:column="26">chess_GetNextMarked</name><argument_list PREFIX:line="2314" PREFIX:column="45">(<argument><expr PREFIX:line="2314" PREFIX:column="46">255</expr></argument>, <argument><expr PREFIX:line="2314" PREFIX:column="51">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="2315" PREFIX:column="7">chess_target_pos</name> = <name PREFIX:line="2315" PREFIX:column="26">ILLEGAL_POSITION</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="2316" PREFIX:column="7">chess_state</name> = <name PREFIX:line="2316" PREFIX:column="21">CHESS_STATE_SELECT_PIECE</name></expr>;</expr_stmt>
      <break PREFIX:line="2317" PREFIX:column="7">break;</break>
      
    </case><case PREFIX:line="2319" PREFIX:column="5">case <expr><name PREFIX:line="2319" PREFIX:column="10">CHESS_STATE_SELECT_PIECE</name></expr>:
      <if PREFIX:line="2320" PREFIX:column="7">if <condition PREFIX:line="2320" PREFIX:column="10">( <expr><name PREFIX:line="2320" PREFIX:column="12">chess_key_cmd</name> == <name PREFIX:line="2320" PREFIX:column="29">CHESS_KEY_NEXT</name></expr> )</condition><then PREFIX:line="2320" PREFIX:column="45">
      <block PREFIX:line="2321" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="2322" PREFIX:column="9">chess_source_pos</name> = <call><name PREFIX:line="2322" PREFIX:column="28">chess_GetNextMarked</name><argument_list PREFIX:line="2322" PREFIX:column="47">(<argument><expr><name PREFIX:line="2322" PREFIX:column="48">chess_source_pos</name></expr></argument>, <argument><expr PREFIX:line="2322" PREFIX:column="66">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="2324" PREFIX:column="7">else <if PREFIX:line="2324" PREFIX:column="12">if <condition PREFIX:line="2324" PREFIX:column="15">( <expr><name PREFIX:line="2324" PREFIX:column="17">chess_key_cmd</name> == <name PREFIX:line="2324" PREFIX:column="34">CHESS_KEY_PREV</name></expr> )</condition><then PREFIX:line="2324" PREFIX:column="50">
      <block PREFIX:line="2325" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="2326" PREFIX:column="9">chess_source_pos</name> = <call><name PREFIX:line="2326" PREFIX:column="28">chess_GetNextMarked</name><argument_list PREFIX:line="2326" PREFIX:column="47">(<argument><expr><name PREFIX:line="2326" PREFIX:column="48">chess_source_pos</name></expr></argument>, <argument><expr PREFIX:line="2326" PREFIX:column="66">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="2328" PREFIX:column="7">else <if PREFIX:line="2328" PREFIX:column="12">if <condition PREFIX:line="2328" PREFIX:column="15">( <expr><name PREFIX:line="2328" PREFIX:column="17">chess_key_cmd</name> == <name PREFIX:line="2328" PREFIX:column="34">CHESS_KEY_SELECT</name></expr> )</condition><then PREFIX:line="2328" PREFIX:column="52">
      <block PREFIX:line="2329" PREFIX:column="7">{
	<if PREFIX:line="2330" PREFIX:column="9">if <condition PREFIX:line="2330" PREFIX:column="12">( <expr><name PREFIX:line="2330" PREFIX:column="14">chess_source_pos</name> == 255</expr> )</condition><then PREFIX:line="2330" PREFIX:column="39">
	<block PREFIX:line="2331" PREFIX:column="9">{
	  <expr_stmt><expr><name PREFIX:line="2332" PREFIX:column="11">chess_state</name> = <name PREFIX:line="2332" PREFIX:column="25">CHESS_STATE_MENU</name></expr>;</expr_stmt>
	}</block></then>
	<else PREFIX:line="2334" PREFIX:column="9">else
	<block PREFIX:line="2335" PREFIX:column="9">{
	  <expr_stmt><expr><call><name PREFIX:line="2336" PREFIX:column="11">chess_ClearMarks</name><argument_list PREFIX:line="2336" PREFIX:column="27">()</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name PREFIX:line="2337" PREFIX:column="11">chess_MarkTargetMoves</name><argument_list PREFIX:line="2337" PREFIX:column="32">(<argument><expr><name PREFIX:line="2337" PREFIX:column="33">chess_source_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name PREFIX:line="2338" PREFIX:column="11">chess_target_pos</name> = <call><name PREFIX:line="2338" PREFIX:column="30">chess_GetNextMarked</name><argument_list PREFIX:line="2338" PREFIX:column="49">(<argument><expr PREFIX:line="2338" PREFIX:column="50">255</expr></argument>, <argument><expr PREFIX:line="2338" PREFIX:column="55">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name PREFIX:line="2339" PREFIX:column="11">chess_state</name> = <name PREFIX:line="2339" PREFIX:column="25">CHESS_STATE_SELECT_TARGET_POS</name></expr>;</expr_stmt>      
	}</block></else></if>
      }</block></then></if></else></if></else></if>
      <break PREFIX:line="2342" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="2343" PREFIX:column="5">case <expr><name PREFIX:line="2343" PREFIX:column="10">CHESS_STATE_SELECT_TARGET_POS</name></expr>:
      <if PREFIX:line="2344" PREFIX:column="7">if <condition PREFIX:line="2344" PREFIX:column="10">( <expr><name PREFIX:line="2344" PREFIX:column="12">chess_key_cmd</name> == <name PREFIX:line="2344" PREFIX:column="29">CHESS_KEY_NEXT</name></expr> )</condition><then PREFIX:line="2344" PREFIX:column="45">
      <block PREFIX:line="2345" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="2346" PREFIX:column="9">chess_target_pos</name> = <call><name PREFIX:line="2346" PREFIX:column="28">chess_GetNextMarked</name><argument_list PREFIX:line="2346" PREFIX:column="47">(<argument><expr><name PREFIX:line="2346" PREFIX:column="48">chess_target_pos</name></expr></argument>, <argument><expr PREFIX:line="2346" PREFIX:column="66">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="2348" PREFIX:column="7">else <if PREFIX:line="2348" PREFIX:column="12">if <condition PREFIX:line="2348" PREFIX:column="15">( <expr><name PREFIX:line="2348" PREFIX:column="17">chess_key_cmd</name> == <name PREFIX:line="2348" PREFIX:column="34">CHESS_KEY_PREV</name></expr> )</condition><then PREFIX:line="2348" PREFIX:column="50">
      <block PREFIX:line="2349" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="2350" PREFIX:column="9">chess_target_pos</name> = <call><name PREFIX:line="2350" PREFIX:column="28">chess_GetNextMarked</name><argument_list PREFIX:line="2350" PREFIX:column="47">(<argument><expr><name PREFIX:line="2350" PREFIX:column="48">chess_target_pos</name></expr></argument>, <argument><expr PREFIX:line="2350" PREFIX:column="66">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="2352" PREFIX:column="7">else <if PREFIX:line="2352" PREFIX:column="12">if <condition PREFIX:line="2352" PREFIX:column="15">( <expr><name PREFIX:line="2352" PREFIX:column="17">chess_key_cmd</name> == <name PREFIX:line="2352" PREFIX:column="34">CHESS_KEY_BACK</name></expr> )</condition><then PREFIX:line="2352" PREFIX:column="50">
      <block PREFIX:line="2353" PREFIX:column="7">{
	<expr_stmt><expr><call><name PREFIX:line="2354" PREFIX:column="9">chess_ClearMarks</name><argument_list PREFIX:line="2354" PREFIX:column="25">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="2355" PREFIX:column="9">chess_MarkMovable</name><argument_list PREFIX:line="2355" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="2356" PREFIX:column="9">chess_target_pos</name> = <name PREFIX:line="2356" PREFIX:column="28">ILLEGAL_POSITION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="2357" PREFIX:column="9">chess_state</name> = <name PREFIX:line="2357" PREFIX:column="23">CHESS_STATE_SELECT_PIECE</name></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="2359" PREFIX:column="7">else <if PREFIX:line="2359" PREFIX:column="12">if <condition PREFIX:line="2359" PREFIX:column="15">( <expr><name PREFIX:line="2359" PREFIX:column="17">chess_key_cmd</name> == <name PREFIX:line="2359" PREFIX:column="34">CHESS_KEY_SELECT</name></expr> )</condition><then PREFIX:line="2359" PREFIX:column="52">
      <block PREFIX:line="2360" PREFIX:column="7">{
	<expr_stmt><expr><call><name PREFIX:line="2361" PREFIX:column="9">chess_ManualMove</name><argument_list PREFIX:line="2361" PREFIX:column="25">(<argument><expr><name PREFIX:line="2361" PREFIX:column="26">chess_source_pos</name></expr></argument>, <argument><expr><name PREFIX:line="2361" PREFIX:column="44">chess_target_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if PREFIX:line="2362" PREFIX:column="9">if <condition PREFIX:line="2362" PREFIX:column="12">( <expr><name><name PREFIX:line="2362" PREFIX:column="14">lrc_obj</name>.<name PREFIX:line="2362" PREFIX:column="22">is_game_end</name></name> != 0</expr> )</condition><then PREFIX:line="2362" PREFIX:column="40">
	  <expr_stmt><expr><name PREFIX:line="2363" PREFIX:column="11">chess_state</name> = <name PREFIX:line="2363" PREFIX:column="25">CHESS_STATE_GAME_END</name></expr>;</expr_stmt></then>
	<else PREFIX:line="2364" PREFIX:column="9">else
	  <expr_stmt><expr><name PREFIX:line="2365" PREFIX:column="11">chess_state</name> = <name PREFIX:line="2365" PREFIX:column="25">CHESS_STATE_THINKING</name></expr>;</expr_stmt></else></if>
	<comment type="block" PREFIX:line="2366" PREFIX:column="9">/* clear marks as some kind of feedback to the user... it simply looks better */</comment>
	<expr_stmt><expr><name PREFIX:line="2367" PREFIX:column="9">chess_source_pos</name> = <name PREFIX:line="2367" PREFIX:column="28">ILLEGAL_POSITION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="2368" PREFIX:column="9">chess_target_pos</name> = <name PREFIX:line="2368" PREFIX:column="28">ILLEGAL_POSITION</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="2369" PREFIX:column="9">chess_ClearMarks</name><argument_list PREFIX:line="2369" PREFIX:column="25">()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></else></if></else></if></else></if>
      <break PREFIX:line="2371" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="2372" PREFIX:column="5">case <expr><name PREFIX:line="2372" PREFIX:column="10">CHESS_STATE_THINKING</name></expr>:
      <expr_stmt><expr><call><name PREFIX:line="2373" PREFIX:column="7">chess_ComputerMove</name><argument_list PREFIX:line="2373" PREFIX:column="25">(<argument><expr PREFIX:line="2373" PREFIX:column="26">2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if PREFIX:line="2374" PREFIX:column="7">if <condition PREFIX:line="2374" PREFIX:column="10">( <expr><name><name PREFIX:line="2374" PREFIX:column="12">lrc_obj</name>.<name PREFIX:line="2374" PREFIX:column="20">is_game_end</name></name> != 0</expr> )</condition><then PREFIX:line="2374" PREFIX:column="38">
	<expr_stmt><expr><name PREFIX:line="2375" PREFIX:column="9">chess_state</name> = <name PREFIX:line="2375" PREFIX:column="23">CHESS_STATE_GAME_END</name></expr>;</expr_stmt></then>
      <else PREFIX:line="2376" PREFIX:column="7">else
	<expr_stmt><expr><name PREFIX:line="2377" PREFIX:column="9">chess_state</name> = <name PREFIX:line="2377" PREFIX:column="23">CHESS_STATE_SELECT_START</name></expr>;</expr_stmt></else></if>
      <break PREFIX:line="2378" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="2379" PREFIX:column="5">case <expr><name PREFIX:line="2379" PREFIX:column="10">CHESS_STATE_GAME_END</name></expr>:
      <if PREFIX:line="2380" PREFIX:column="7">if <condition PREFIX:line="2380" PREFIX:column="10">( <expr><name PREFIX:line="2380" PREFIX:column="12">chess_key_cmd</name> != <name PREFIX:line="2380" PREFIX:column="29">CHESS_KEY_NONE</name></expr> )</condition><then PREFIX:line="2380" PREFIX:column="45">
      <block PREFIX:line="2381" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="2382" PREFIX:column="9">chess_state</name> = <name PREFIX:line="2382" PREFIX:column="23">CHESS_STATE_MENU</name></expr>;</expr_stmt>  
	<expr_stmt><expr><call><name PREFIX:line="2383" PREFIX:column="9">chess_SetupBoard</name><argument_list PREFIX:line="2383" PREFIX:column="25">()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>	
      <break PREFIX:line="2385" PREFIX:column="7">break;</break>
  </case>}</block></switch>
  
}</block></function>

<cpp:endif PREFIX:line="2390" PREFIX:column="1">#<cpp:directive PREFIX:line="2390" PREFIX:column="2">endif</cpp:directive></cpp:endif>


</unit>
