<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/Udp.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
 *  Udp.cpp: Library to send/receive UDP packets.
 *
 * NOTE: UDP is fast, but has some important limitations (thanks to Warren Gray for mentioning these)
 * 1) UDP does not guarantee the order in which assembled UDP packets are received. This
 * might not happen often in practice, but in larger network topologies, a UDP
 * packet can be received out of sequence. 
 * 2) UDP does not guard against lost packets - so packets *can* disappear without the sender being
 * aware of it. Again, this may not be a concern in practice on small local networks.
 * For more information, see http://www.cafeaulait.org/course/week12/35.html
 *
 * MIT License:
 * Copyright (c) 2008 Bjoern Hartmann
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * bjoern@cs.stanford.edu 12/30/2008
 */</comment>

<cpp:ifndef PREFIX:line="35" PREFIX:column="1">#<cpp:directive PREFIX:line="35" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="35" PREFIX:column="9">udp_h</name></cpp:ifndef>
<cpp:define PREFIX:line="36" PREFIX:column="1">#<cpp:directive PREFIX:line="36" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="36" PREFIX:column="9">udp_h</name></cpp:macro></cpp:define>

<cpp:include PREFIX:line="38" PREFIX:column="1">#<cpp:directive PREFIX:line="38" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="38" PREFIX:column="10">&lt;Stream.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="39" PREFIX:column="1">#<cpp:directive PREFIX:line="39" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="39" PREFIX:column="10">&lt;IPAddress.h&gt;</cpp:file></cpp:include>

<class PREFIX:line="41" PREFIX:column="1">class <name PREFIX:line="41" PREFIX:column="7">UDP</name> <super PREFIX:line="41" PREFIX:column="11">: <specifier PREFIX:line="41" PREFIX:column="13">public</specifier> <name PREFIX:line="41" PREFIX:column="20">Stream</name></super> <block PREFIX:line="41" PREFIX:column="27">{<private type="default" PREFIX:line="41" PREFIX:column="28">

</private><public PREFIX:line="43" PREFIX:column="1">public:
  <function_decl><type><specifier PREFIX:line="44" PREFIX:column="3">virtual</specifier> <name PREFIX:line="44" PREFIX:column="11">uint8_t</name></type> <name PREFIX:line="44" PREFIX:column="19">begin</name><parameter_list PREFIX:line="44" PREFIX:column="24">(<param><decl><type><name PREFIX:line="44" PREFIX:column="25">uint16_t</name></type></decl></param>)</parameter_list> =0;</function_decl>	<comment type="line" PREFIX:line="44" PREFIX:column="41">// initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use</comment>
  <function_decl><type><specifier PREFIX:line="45" PREFIX:column="3">virtual</specifier> <name PREFIX:line="45" PREFIX:column="11">void</name></type> <name PREFIX:line="45" PREFIX:column="16">stop</name><parameter_list PREFIX:line="45" PREFIX:column="20">()</parameter_list> =0;</function_decl>  <comment type="line" PREFIX:line="45" PREFIX:column="28">// Finish with the UDP socket</comment>

  <comment type="line" PREFIX:line="47" PREFIX:column="3">// Sending UDP packets</comment>
  
  <comment type="line" PREFIX:line="49" PREFIX:column="3">// Start building up a packet to send to the remote host specific in ip and port</comment>
  <comment type="line" PREFIX:line="50" PREFIX:column="3">// Returns 1 if successful, 0 if there was a problem with the supplied IP address or port</comment>
  <function_decl><type><specifier PREFIX:line="51" PREFIX:column="3">virtual</specifier> <name PREFIX:line="51" PREFIX:column="11">int</name></type> <name PREFIX:line="51" PREFIX:column="15">beginPacket</name><parameter_list PREFIX:line="51" PREFIX:column="26">(<param><decl><type><name PREFIX:line="51" PREFIX:column="27">IPAddress</name></type> <name PREFIX:line="51" PREFIX:column="37">ip</name></decl></param>, <param><decl><type><name PREFIX:line="51" PREFIX:column="41">uint16_t</name></type> <name PREFIX:line="51" PREFIX:column="50">port</name></decl></param>)</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="52" PREFIX:column="3">// Start building up a packet to send to the remote host specific in host and port</comment>
  <comment type="line" PREFIX:line="53" PREFIX:column="3">// Returns 1 if successful, 0 if there was a problem resolving the hostname or port</comment>
  <function_decl><type><specifier PREFIX:line="54" PREFIX:column="3">virtual</specifier> <name PREFIX:line="54" PREFIX:column="11">int</name></type> <name PREFIX:line="54" PREFIX:column="15">beginPacket</name><parameter_list PREFIX:line="54" PREFIX:column="26">( <param><decl><type><name PREFIX:line="54" PREFIX:column="28">char</name> *</type><name PREFIX:line="54" PREFIX:column="34">host</name></decl></param>, <param><decl><type><name PREFIX:line="54" PREFIX:column="40">uint16_t</name></type> <name PREFIX:line="54" PREFIX:column="49">port</name></decl></param>)</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="55" PREFIX:column="3">// Finish off this packet and send it</comment>
  <comment type="line" PREFIX:line="56" PREFIX:column="3">// Returns 1 if the packet was sent successfully, 0 if there was an error</comment>
  <function_decl><type><specifier PREFIX:line="57" PREFIX:column="3">virtual</specifier> <name PREFIX:line="57" PREFIX:column="11">int</name></type> <name PREFIX:line="57" PREFIX:column="15">endPacket</name><parameter_list PREFIX:line="57" PREFIX:column="24">()</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="58" PREFIX:column="3">// Write a single byte into the packet</comment>
  <function_decl><type><specifier PREFIX:line="59" PREFIX:column="3">virtual</specifier> <name PREFIX:line="59" PREFIX:column="11">size_t</name></type> <name PREFIX:line="59" PREFIX:column="18">write</name><parameter_list PREFIX:line="59" PREFIX:column="23">(<param><decl><type><name PREFIX:line="59" PREFIX:column="24">uint8_t</name></type></decl></param>)</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="60" PREFIX:column="3">// Write size bytes from buffer into the packet</comment>
  <function_decl><type><specifier PREFIX:line="61" PREFIX:column="3">virtual</specifier> <name PREFIX:line="61" PREFIX:column="11">size_t</name></type> <name PREFIX:line="61" PREFIX:column="18">write</name><parameter_list PREFIX:line="61" PREFIX:column="23">( <param><decl><type><name PREFIX:line="61" PREFIX:column="25">uint8_t</name> *</type><name PREFIX:line="61" PREFIX:column="34">buffer</name></decl></param>, <param><decl><type><name PREFIX:line="61" PREFIX:column="42">size_t</name></type> <name PREFIX:line="61" PREFIX:column="49">size</name></decl></param>)</parameter_list> =0;</function_decl>

  <comment type="line" PREFIX:line="63" PREFIX:column="3">// Start processing the next available incoming packet</comment>
  <comment type="line" PREFIX:line="64" PREFIX:column="3">// Returns the size of the packet in bytes, or 0 if no packets are available</comment>
  <function_decl><type><specifier PREFIX:line="65" PREFIX:column="3">virtual</specifier> <name PREFIX:line="65" PREFIX:column="11">int</name></type> <name PREFIX:line="65" PREFIX:column="15">parsePacket</name><parameter_list PREFIX:line="65" PREFIX:column="26">()</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="66" PREFIX:column="3">// Number of bytes remaining in the current packet</comment>
  <function_decl><type><specifier PREFIX:line="67" PREFIX:column="3">virtual</specifier> <name PREFIX:line="67" PREFIX:column="11">int</name></type> <name PREFIX:line="67" PREFIX:column="15">available</name><parameter_list PREFIX:line="67" PREFIX:column="24">()</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="68" PREFIX:column="3">// Read a single byte from the current packet</comment>
  <function_decl><type><specifier PREFIX:line="69" PREFIX:column="3">virtual</specifier> <name PREFIX:line="69" PREFIX:column="11">int</name></type> <name PREFIX:line="69" PREFIX:column="15">read</name><parameter_list PREFIX:line="69" PREFIX:column="19">()</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="70" PREFIX:column="3">// Read up to len bytes from the current packet and place them into buffer</comment>
  <comment type="line" PREFIX:line="71" PREFIX:column="3">// Returns the number of bytes read, or 0 if none are available</comment>
  <function_decl><type><specifier PREFIX:line="72" PREFIX:column="3">virtual</specifier> <name PREFIX:line="72" PREFIX:column="11">int</name></type> <name PREFIX:line="72" PREFIX:column="15">read</name><parameter_list PREFIX:line="72" PREFIX:column="19">(<param><decl><type><name PREFIX:line="72" PREFIX:column="20">unknowntype</name> <name PREFIX:line="72" PREFIX:column="32">char</name>*</type> <name PREFIX:line="72" PREFIX:column="38">buffer</name></decl></param>, <param><decl><type><name PREFIX:line="72" PREFIX:column="46">size_t</name></type> <name PREFIX:line="72" PREFIX:column="53">len</name></decl></param>)</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="73" PREFIX:column="3">// Read up to len characters from the current packet and place them into buffer</comment>
  <comment type="line" PREFIX:line="74" PREFIX:column="3">// Returns the number of characters read, or 0 if none are available</comment>
  <function_decl><type><specifier PREFIX:line="75" PREFIX:column="3">virtual</specifier> <name PREFIX:line="75" PREFIX:column="11">int</name></type> <name PREFIX:line="75" PREFIX:column="15">read</name><parameter_list PREFIX:line="75" PREFIX:column="19">(<param><decl><type><name PREFIX:line="75" PREFIX:column="20">char</name>*</type> <name PREFIX:line="75" PREFIX:column="26">buffer</name></decl></param>, <param><decl><type><name PREFIX:line="75" PREFIX:column="34">size_t</name></type> <name PREFIX:line="75" PREFIX:column="41">len</name></decl></param>)</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="76" PREFIX:column="3">// Return the next byte from the current packet without moving on to the next byte</comment>
  <function_decl><type><specifier PREFIX:line="77" PREFIX:column="3">virtual</specifier> <name PREFIX:line="77" PREFIX:column="11">int</name></type> <name PREFIX:line="77" PREFIX:column="15">peek</name><parameter_list PREFIX:line="77" PREFIX:column="19">()</parameter_list> =0;</function_decl>
  <function_decl><type><specifier PREFIX:line="78" PREFIX:column="3">virtual</specifier> <name PREFIX:line="78" PREFIX:column="11">void</name></type> <name PREFIX:line="78" PREFIX:column="16">flush</name><parameter_list PREFIX:line="78" PREFIX:column="21">()</parameter_list> =0;</function_decl>	<comment type="line" PREFIX:line="78" PREFIX:column="33">// Finish reading the current packet</comment>

  <comment type="line" PREFIX:line="80" PREFIX:column="3">// Return the IP address of the host who sent the current incoming packet</comment>
  <function_decl><type><specifier PREFIX:line="81" PREFIX:column="3">virtual</specifier> <name PREFIX:line="81" PREFIX:column="11">IPAddress</name></type> <name PREFIX:line="81" PREFIX:column="21">remoteIP</name><parameter_list PREFIX:line="81" PREFIX:column="29">()</parameter_list> =0;</function_decl>
  <comment type="line" PREFIX:line="82" PREFIX:column="3">// Return the port of the host who sent the current incoming packet</comment>
  <function_decl><type><specifier PREFIX:line="83" PREFIX:column="3">virtual</specifier> <name PREFIX:line="83" PREFIX:column="11">uint16_t</name></type> <name PREFIX:line="83" PREFIX:column="20">remotePort</name><parameter_list PREFIX:line="83" PREFIX:column="30">()</parameter_list> =0;</function_decl>
</public><protected PREFIX:line="84" PREFIX:column="1">protected:
  <function><type><name PREFIX:line="85" PREFIX:column="3">uint8_t</name>*</type> <name PREFIX:line="85" PREFIX:column="12">rawIPAddress</name><parameter_list PREFIX:line="85" PREFIX:column="24">(<param><decl><type><name PREFIX:line="85" PREFIX:column="25">IPAddress</name>&amp;</type> <name PREFIX:line="85" PREFIX:column="36">addr</name></decl></param>)</parameter_list> <block PREFIX:line="85" PREFIX:column="42">{ <return PREFIX:line="85" PREFIX:column="44">return <expr><call><name><name PREFIX:line="85" PREFIX:column="51">addr</name>.<name PREFIX:line="85" PREFIX:column="56">raw_address</name></name><argument_list PREFIX:line="85" PREFIX:column="67">()</argument_list></call></expr>;</return> }</block></function><empty_stmt PREFIX:line="85" PREFIX:column="72">;</empty_stmt>
</protected>}</block>;</class>

<cpp:endif PREFIX:line="88" PREFIX:column="1">#<cpp:directive PREFIX:line="88" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
