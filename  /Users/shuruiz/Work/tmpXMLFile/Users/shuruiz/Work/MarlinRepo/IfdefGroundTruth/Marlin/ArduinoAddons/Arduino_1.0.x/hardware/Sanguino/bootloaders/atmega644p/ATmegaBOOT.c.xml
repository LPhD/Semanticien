<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/bootloaders/atmega644p/ATmegaBOOT.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/**********************************************************/</comment>
<comment type="block" PREFIX:line="2" PREFIX:column="1">/* Serial Bootloader for Atmel megaAVR Controllers        */</comment>
<comment type="block" PREFIX:line="3" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="4" PREFIX:column="1">/* tested with ATmega644 and ATmega644P                   */</comment>
<comment type="block" PREFIX:line="5" PREFIX:column="1">/* should work with other mega's, see code for details    */</comment>
<comment type="block" PREFIX:line="6" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="7" PREFIX:column="1">/* ATmegaBOOT.c                                           */</comment>
<comment type="block" PREFIX:line="8" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="9" PREFIX:column="1">/* 20090131: Added 324P support from Alex Leone           */</comment>
<comment type="block" PREFIX:line="10" PREFIX:column="1">/*           Marius Kintel                                */</comment>
<comment type="block" PREFIX:line="11" PREFIX:column="1">/* 20080915: applied ADABoot mods for Sanguino 644P       */</comment>
<comment type="block" PREFIX:line="12" PREFIX:column="1">/*           Brian Riley                                  */</comment>
<comment type="block" PREFIX:line="13" PREFIX:column="1">/* 20080711: hacked for Sanguino by Zach Smith            */</comment>
<comment type="block" PREFIX:line="14" PREFIX:column="1">/*           and Justin Day                               */</comment>
<comment type="block" PREFIX:line="15" PREFIX:column="1">/* 20070626: hacked for Arduino Diecimila (which auto-    */</comment>
<comment type="block" PREFIX:line="16" PREFIX:column="1">/*           resets when a USB connection is made to it)  */</comment>
<comment type="block" PREFIX:line="17" PREFIX:column="1">/*           by D. Mellis                                 */</comment>
<comment type="block" PREFIX:line="18" PREFIX:column="1">/* 20060802: hacked for Arduino by D. Cuartielles         */</comment>
<comment type="block" PREFIX:line="19" PREFIX:column="1">/*           based on a previous hack by D. Mellis        */</comment>
<comment type="block" PREFIX:line="20" PREFIX:column="1">/*           and D. Cuartielles                           */</comment>
<comment type="block" PREFIX:line="21" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="22" PREFIX:column="1">/* Monitor and debug functions were added to the original */</comment>
<comment type="block" PREFIX:line="23" PREFIX:column="1">/* code by Dr. Erik Lins, chip45.com. (See below)         */</comment>
<comment type="block" PREFIX:line="24" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="25" PREFIX:column="1">/* Thanks to Karl Pitrich for fixing a bootloader pin     */</comment>
<comment type="block" PREFIX:line="26" PREFIX:column="1">/* problem and more informative LED blinking!             */</comment>
<comment type="block" PREFIX:line="27" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="28" PREFIX:column="1">/* For the latest version see:                            */</comment>
<comment type="block" PREFIX:line="29" PREFIX:column="1">/* http://www.chip45.com/                                 */</comment>
<comment type="block" PREFIX:line="30" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="31" PREFIX:column="1">/* ------------------------------------------------------ */</comment>
<comment type="block" PREFIX:line="32" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="33" PREFIX:column="1">/* based on stk500boot.c                                  */</comment>
<comment type="block" PREFIX:line="34" PREFIX:column="1">/* Copyright (c) 2003, Jason P. Kyle                      */</comment>
<comment type="block" PREFIX:line="35" PREFIX:column="1">/* All rights reserved.                                   */</comment>
<comment type="block" PREFIX:line="36" PREFIX:column="1">/* see avr1.org for original file and information         */</comment>
<comment type="block" PREFIX:line="37" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="38" PREFIX:column="1">/* This program is free software; you can redistribute it */</comment>
<comment type="block" PREFIX:line="39" PREFIX:column="1">/* and/or modify it under the terms of the GNU General    */</comment>
<comment type="block" PREFIX:line="40" PREFIX:column="1">/* Public License as published by the Free Software       */</comment>
<comment type="block" PREFIX:line="41" PREFIX:column="1">/* Foundation; either version 2 of the License, or        */</comment>
<comment type="block" PREFIX:line="42" PREFIX:column="1">/* (at your option) any later version.                    */</comment>
<comment type="block" PREFIX:line="43" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="44" PREFIX:column="1">/* This program is distributed in the hope that it will   */</comment>
<comment type="block" PREFIX:line="45" PREFIX:column="1">/* be useful, but WITHOUT ANY WARRANTY; without even the  */</comment>
<comment type="block" PREFIX:line="46" PREFIX:column="1">/* implied warranty of MERCHANTABILITY or FITNESS FOR A   */</comment>
<comment type="block" PREFIX:line="47" PREFIX:column="1">/* PARTICULAR PURPOSE.  See the GNU General Public        */</comment>
<comment type="block" PREFIX:line="48" PREFIX:column="1">/* License for more details.                              */</comment>
<comment type="block" PREFIX:line="49" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="50" PREFIX:column="1">/* You should have received a copy of the GNU General     */</comment>
<comment type="block" PREFIX:line="51" PREFIX:column="1">/* Public License along with this program; if not, write  */</comment>
<comment type="block" PREFIX:line="52" PREFIX:column="1">/* to the Free Software Foundation, Inc.,                 */</comment>
<comment type="block" PREFIX:line="53" PREFIX:column="1">/* 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA */</comment>
<comment type="block" PREFIX:line="54" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="55" PREFIX:column="1">/* Licence can be viewed at                               */</comment>
<comment type="block" PREFIX:line="56" PREFIX:column="1">/* http://www.fsf.org/licenses/gpl.txt                    */</comment>
<comment type="block" PREFIX:line="57" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="58" PREFIX:column="1">/* Target = Atmel AVR m128,m64,m32,m16,m8,m162,m163,m169, */</comment>
<comment type="block" PREFIX:line="59" PREFIX:column="1">/* m8515,m8535. ATmega161 has a very small boot block so  */</comment>
<comment type="block" PREFIX:line="60" PREFIX:column="1">/* isn't supported.                                       */</comment>
<comment type="block" PREFIX:line="61" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="62" PREFIX:column="1">/* Tested with m168                                       */</comment>
<comment type="block" PREFIX:line="63" PREFIX:column="1">/**********************************************************/</comment>

<comment type="block" PREFIX:line="65" PREFIX:column="1">/* $Id$ */</comment>


<comment type="block" PREFIX:line="68" PREFIX:column="1">/* some includes */</comment>
<cpp:include PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="69" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="70" PREFIX:column="1">#<cpp:directive PREFIX:line="70" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="70" PREFIX:column="10">&lt;avr/io.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="71" PREFIX:column="1">#<cpp:directive PREFIX:line="71" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="71" PREFIX:column="10">&lt;avr/pgmspace.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="72" PREFIX:column="1">#<cpp:directive PREFIX:line="72" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="72" PREFIX:column="10">&lt;avr/interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="73" PREFIX:column="1">#<cpp:directive PREFIX:line="73" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="73" PREFIX:column="10">&lt;avr/wdt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="74" PREFIX:column="1">#<cpp:directive PREFIX:line="74" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="74" PREFIX:column="10">&lt;avr/boot.h&gt;</cpp:file></cpp:include>

<cpp:ifdef PREFIX:line="76" PREFIX:column="1">#<cpp:directive PREFIX:line="76" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="76" PREFIX:column="8">ADABOOT</name></cpp:ifdef>
    <cpp:define PREFIX:line="77" PREFIX:column="5">#<cpp:directive PREFIX:line="77" PREFIX:column="6">define</cpp:directive> <cpp:macro><name PREFIX:line="77" PREFIX:column="13">NUM_LED_FLASHES</name></cpp:macro> <cpp:value PREFIX:line="77" PREFIX:column="29">3</cpp:value></cpp:define>
    <cpp:define PREFIX:line="78" PREFIX:column="5">#<cpp:directive PREFIX:line="78" PREFIX:column="6">define</cpp:directive> <cpp:macro><name PREFIX:line="78" PREFIX:column="13">ADABOOT_VER</name></cpp:macro>	<cpp:value PREFIX:line="78" PREFIX:column="25">1</cpp:value></cpp:define>
<cpp:endif PREFIX:line="79" PREFIX:column="1">#<cpp:directive PREFIX:line="79" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="82" PREFIX:column="1">/* 20070707: hacked by David A. Mellis - after this many errors give up and launch application */</comment>
<cpp:define PREFIX:line="83" PREFIX:column="1">#<cpp:directive PREFIX:line="83" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="83" PREFIX:column="9">MAX_ERROR_COUNT</name></cpp:macro> <cpp:value PREFIX:line="83" PREFIX:column="25">5</cpp:value></cpp:define>

<comment type="block" PREFIX:line="85" PREFIX:column="1">/* set the UART baud rate */</comment>
<comment type="block" PREFIX:line="86" PREFIX:column="1">/* 20080711: hack by Zach Hoeken */</comment>
<cpp:define PREFIX:line="87" PREFIX:column="1">#<cpp:directive PREFIX:line="87" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="87" PREFIX:column="9">BAUD_RATE</name></cpp:macro>   <cpp:value PREFIX:line="87" PREFIX:column="21">38400</cpp:value></cpp:define>

<comment type="block" PREFIX:line="89" PREFIX:column="1">/* SW_MAJOR and MINOR needs to be updated from time to time to avoid warning message from AVR Studio */</comment>
<comment type="block" PREFIX:line="90" PREFIX:column="1">/* never allow AVR Studio to do an update !!!! */</comment>
<cpp:define PREFIX:line="91" PREFIX:column="1">#<cpp:directive PREFIX:line="91" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="91" PREFIX:column="9">HW_VER</name></cpp:macro>	 <cpp:value PREFIX:line="91" PREFIX:column="18">0x02</cpp:value></cpp:define>
<cpp:define PREFIX:line="92" PREFIX:column="1">#<cpp:directive PREFIX:line="92" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="92" PREFIX:column="9">SW_MAJOR</name></cpp:macro> <cpp:value PREFIX:line="92" PREFIX:column="18">0x01</cpp:value></cpp:define>
<cpp:define PREFIX:line="93" PREFIX:column="1">#<cpp:directive PREFIX:line="93" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="93" PREFIX:column="9">SW_MINOR</name></cpp:macro> <cpp:value PREFIX:line="93" PREFIX:column="18">0x10</cpp:value></cpp:define>

<comment type="block" PREFIX:line="95" PREFIX:column="1">/* onboard LED is used to indicate, that the bootloader was entered (3x flashing) */</comment>
<comment type="block" PREFIX:line="96" PREFIX:column="1">/* if monitor functions are included, LED goes on after monitor was entered */</comment>
<cpp:define PREFIX:line="97" PREFIX:column="1">#<cpp:directive PREFIX:line="97" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="97" PREFIX:column="9">LED_DDR</name></cpp:macro>  <cpp:value PREFIX:line="97" PREFIX:column="18">DDRB</cpp:value></cpp:define>
<cpp:define PREFIX:line="98" PREFIX:column="1">#<cpp:directive PREFIX:line="98" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="98" PREFIX:column="9">LED_PORT</name></cpp:macro> <cpp:value PREFIX:line="98" PREFIX:column="18">PORTB</cpp:value></cpp:define>
<cpp:define PREFIX:line="99" PREFIX:column="1">#<cpp:directive PREFIX:line="99" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="99" PREFIX:column="9">LED_PIN</name></cpp:macro>  <cpp:value PREFIX:line="99" PREFIX:column="18">PINB</cpp:value></cpp:define>
<cpp:define PREFIX:line="100" PREFIX:column="1">#<cpp:directive PREFIX:line="100" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="100" PREFIX:column="9">LED</name></cpp:macro>      <cpp:value PREFIX:line="100" PREFIX:column="18">PINB0</cpp:value></cpp:define>

<comment type="block" PREFIX:line="102" PREFIX:column="1">/* define various device id's */</comment>
<comment type="block" PREFIX:line="103" PREFIX:column="1">/* manufacturer byte is always the same */</comment>
<cpp:define PREFIX:line="104" PREFIX:column="1">#<cpp:directive PREFIX:line="104" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="104" PREFIX:column="9">SIG1</name></cpp:macro>	<cpp:value PREFIX:line="104" PREFIX:column="17">0x1E</cpp:value></cpp:define>	<comment type="line" PREFIX:line="104" PREFIX:column="25">// Yep, Atmel is the only manufacturer of AVR micros.  Single source :(</comment>
<cpp:if PREFIX:line="105" PREFIX:column="1">#<cpp:directive PREFIX:line="105" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="105" PREFIX:column="5">defined</name><argument_list PREFIX:line="105" PREFIX:column="12">(<argument><expr><name PREFIX:line="105" PREFIX:column="13">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="106" PREFIX:column="1">#<cpp:directive PREFIX:line="106" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="106" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="106" PREFIX:column="17">0x97</cpp:value></cpp:define>
<cpp:define PREFIX:line="107" PREFIX:column="1">#<cpp:directive PREFIX:line="107" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="107" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="107" PREFIX:column="17">0x05</cpp:value></cpp:define>
<cpp:elif PREFIX:line="108" PREFIX:column="1">#<cpp:directive PREFIX:line="108" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="108" PREFIX:column="7">defined</name><argument_list PREFIX:line="108" PREFIX:column="14">(<argument><expr><name PREFIX:line="108" PREFIX:column="15">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="109" PREFIX:column="1">#<cpp:directive PREFIX:line="109" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="109" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="109" PREFIX:column="17">0x96</cpp:value></cpp:define>
<cpp:define PREFIX:line="110" PREFIX:column="1">#<cpp:directive PREFIX:line="110" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="110" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="110" PREFIX:column="17">0x0A</cpp:value></cpp:define>
<cpp:elif PREFIX:line="111" PREFIX:column="1">#<cpp:directive PREFIX:line="111" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="111" PREFIX:column="7">defined</name><argument_list PREFIX:line="111" PREFIX:column="14">(<argument><expr><name PREFIX:line="111" PREFIX:column="15">__AVR_ATmega644__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="112" PREFIX:column="1">#<cpp:directive PREFIX:line="112" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="112" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="112" PREFIX:column="17">0x96</cpp:value></cpp:define>
<cpp:define PREFIX:line="113" PREFIX:column="1">#<cpp:directive PREFIX:line="113" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="113" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="113" PREFIX:column="17">0x09</cpp:value></cpp:define>
<cpp:elif PREFIX:line="114" PREFIX:column="1">#<cpp:directive PREFIX:line="114" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="114" PREFIX:column="7">defined</name><argument_list PREFIX:line="114" PREFIX:column="14">(<argument><expr><name PREFIX:line="114" PREFIX:column="15">__AVR_ATmega324P__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="115" PREFIX:column="1">#<cpp:directive PREFIX:line="115" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="115" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="115" PREFIX:column="17">0x95</cpp:value></cpp:define>
<cpp:define PREFIX:line="116" PREFIX:column="1">#<cpp:directive PREFIX:line="116" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="116" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="116" PREFIX:column="17">0x08</cpp:value></cpp:define>
<cpp:endif PREFIX:line="117" PREFIX:column="1">#<cpp:directive PREFIX:line="117" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:define PREFIX:line="119" PREFIX:column="1">#<cpp:directive PREFIX:line="119" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="119" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>		<cpp:value PREFIX:line="119" PREFIX:column="33">0x080U</cpp:value></cpp:define>   <comment type="line" PREFIX:line="119" PREFIX:column="42">//128 words</comment>
<cpp:define PREFIX:line="120" PREFIX:column="1">#<cpp:directive PREFIX:line="120" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="120" PREFIX:column="9">PAGE_SIZE_BYTES</name></cpp:macro>	<cpp:value PREFIX:line="120" PREFIX:column="25">0x100U</cpp:value></cpp:define>   <comment type="line" PREFIX:line="120" PREFIX:column="34">//256 bytes</comment>

<comment type="block" PREFIX:line="122" PREFIX:column="1">/* function prototypes */</comment>
<function_decl><type><name PREFIX:line="123" PREFIX:column="1">void</name></type> <name PREFIX:line="123" PREFIX:column="6">putch</name><parameter_list PREFIX:line="123" PREFIX:column="11">(<param><decl><type><name PREFIX:line="123" PREFIX:column="12">char</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="124" PREFIX:column="1">char</name></type> <name PREFIX:line="124" PREFIX:column="6">getch</name><parameter_list PREFIX:line="124" PREFIX:column="11">(<param><decl><type><name PREFIX:line="124" PREFIX:column="12">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="125" PREFIX:column="1">void</name></type> <name PREFIX:line="125" PREFIX:column="6">getNch</name><parameter_list PREFIX:line="125" PREFIX:column="12">(<param><decl><type><name PREFIX:line="125" PREFIX:column="13">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="126" PREFIX:column="1">void</name></type> <name PREFIX:line="126" PREFIX:column="6">byte_response</name><parameter_list PREFIX:line="126" PREFIX:column="19">(<param><decl><type><name PREFIX:line="126" PREFIX:column="20">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="127" PREFIX:column="1">void</name></type> <name PREFIX:line="127" PREFIX:column="6">nothing_response</name><parameter_list PREFIX:line="127" PREFIX:column="22">(<param><decl><type><name PREFIX:line="127" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="128" PREFIX:column="1">char</name></type> <name PREFIX:line="128" PREFIX:column="6">gethex</name><parameter_list PREFIX:line="128" PREFIX:column="12">(<param><decl><type><name PREFIX:line="128" PREFIX:column="13">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="129" PREFIX:column="1">void</name></type> <name PREFIX:line="129" PREFIX:column="6">puthex</name><parameter_list PREFIX:line="129" PREFIX:column="12">(<param><decl><type><name PREFIX:line="129" PREFIX:column="13">char</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="130" PREFIX:column="1">void</name></type> <name PREFIX:line="130" PREFIX:column="6">flash_led</name><parameter_list PREFIX:line="130" PREFIX:column="15">(<param><decl><type><name PREFIX:line="130" PREFIX:column="16">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block" PREFIX:line="132" PREFIX:column="1">/* some variables */</comment>
<union PREFIX:line="133" PREFIX:column="1">union <name PREFIX:line="133" PREFIX:column="7">address_union</name>
<block PREFIX:line="134" PREFIX:column="1">{
    <decl_stmt><decl><type><name PREFIX:line="135" PREFIX:column="5">uint16_t</name></type> <name PREFIX:line="135" PREFIX:column="14">word</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="136" PREFIX:column="5">uint8_t</name></type>  <name><name PREFIX:line="136" PREFIX:column="14">byte</name><index PREFIX:line="136" PREFIX:column="18">[<expr PREFIX:line="136" PREFIX:column="19">2</expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name PREFIX:line="137" PREFIX:column="3">address</name></decl>;</union>

<union PREFIX:line="139" PREFIX:column="1">union <name PREFIX:line="139" PREFIX:column="7">length_union</name>
<block PREFIX:line="140" PREFIX:column="1">{
    <decl_stmt><decl><type><name PREFIX:line="141" PREFIX:column="5">uint16_t</name></type> <name PREFIX:line="141" PREFIX:column="14">word</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="142" PREFIX:column="5">uint8_t</name></type>  <name><name PREFIX:line="142" PREFIX:column="14">byte</name><index PREFIX:line="142" PREFIX:column="18">[<expr PREFIX:line="142" PREFIX:column="19">2</expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name PREFIX:line="143" PREFIX:column="3">length</name></decl>;</union>

<struct PREFIX:line="145" PREFIX:column="1">struct <name PREFIX:line="145" PREFIX:column="8">flags_struct</name>
<block PREFIX:line="146" PREFIX:column="1">{
    <expr_stmt><expr><name PREFIX:line="147" PREFIX:column="5">unknowntype</name> <name PREFIX:line="147" PREFIX:column="17">eeprom</name> : 1</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="148" PREFIX:column="5">unknowntype</name> <name PREFIX:line="148" PREFIX:column="17">rampz</name>  : 1</expr>;</expr_stmt>
}</block> <decl><name PREFIX:line="149" PREFIX:column="3">flags</name></decl>;</struct>

<decl_stmt><decl><type><name PREFIX:line="151" PREFIX:column="1">uint8_t</name></type> <name><name PREFIX:line="151" PREFIX:column="9">buff</name><index PREFIX:line="151" PREFIX:column="13">[<expr PREFIX:line="151" PREFIX:column="14">256</expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name PREFIX:line="153" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="153" PREFIX:column="9">error_count</name> <init PREFIX:line="153" PREFIX:column="21">= <expr PREFIX:line="153" PREFIX:column="23">0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="154" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="154" PREFIX:column="9">sreg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name PREFIX:line="156" PREFIX:column="1">void</name> <argument_list PREFIX:line="156" PREFIX:column="6">(<argument><expr PREFIX:line="156" PREFIX:column="7">*<name PREFIX:line="156" PREFIX:column="8">app_start</name></expr></argument>)</argument_list></call><argument_list PREFIX:line="156" PREFIX:column="18">(<argument><expr><name PREFIX:line="156" PREFIX:column="19">void</name></expr></argument>)</argument_list></call> = 0x0000</expr>;</expr_stmt>

<comment type="block" PREFIX:line="158" PREFIX:column="1">/* main program starts here */</comment>
<function><type><name PREFIX:line="159" PREFIX:column="1">int</name></type> <name PREFIX:line="159" PREFIX:column="5">main</name><parameter_list PREFIX:line="159" PREFIX:column="9">(<param><decl><type><name PREFIX:line="159" PREFIX:column="10">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="160" PREFIX:column="1">{
    <decl_stmt><decl><type><name PREFIX:line="161" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="161" PREFIX:column="13">ch</name></decl>,<decl><type ref="prev"/><name PREFIX:line="161" PREFIX:column="16">ch2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="162" PREFIX:column="5">uint16_t</name></type> <name PREFIX:line="162" PREFIX:column="14">w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="163" PREFIX:column="9">uint16_t</name></type> <name PREFIX:line="163" PREFIX:column="18">i</name></decl>;</decl_stmt>
	
    <asm PREFIX:line="165" PREFIX:column="5">asm <specifier PREFIX:line="165" PREFIX:column="9">volatile</specifier>("nop\n\t");</asm>

<cpp:ifdef PREFIX:line="167" PREFIX:column="1">#<cpp:directive PREFIX:line="167" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="167" PREFIX:column="8">ADABOOT</name></cpp:ifdef>		<comment type="line" PREFIX:line="167" PREFIX:column="25">// BBR/LF 10/8/2007 &amp; 9/13/2008</comment>
    <expr_stmt><expr><name PREFIX:line="168" PREFIX:column="5">ch</name> = <name PREFIX:line="168" PREFIX:column="10">MCUSR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="169" PREFIX:column="5">MCUSR</name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><name PREFIX:line="171" PREFIX:column="5">WDTCSR</name> |= <call><name PREFIX:line="171" PREFIX:column="15">_BV</name><argument_list PREFIX:line="171" PREFIX:column="18">(<argument><expr><name PREFIX:line="171" PREFIX:column="19">WDCE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="171" PREFIX:column="27">_BV</name><argument_list PREFIX:line="171" PREFIX:column="30">(<argument><expr><name PREFIX:line="171" PREFIX:column="31">WDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="172" PREFIX:column="5">WDTCSR</name> = 0</expr>;</expr_stmt>

    <comment type="line" PREFIX:line="174" PREFIX:column="5">// Check if the WDT was used to reset, in which case we dont bootload and skip straight to the code. woot.</comment>
    <if PREFIX:line="175" PREFIX:column="5">if <condition PREFIX:line="175" PREFIX:column="8">(<expr PREFIX:line="175" PREFIX:column="9">! (<name PREFIX:line="175" PREFIX:column="12">ch</name> &amp;  <call><name PREFIX:line="175" PREFIX:column="18">_BV</name><argument_list PREFIX:line="175" PREFIX:column="21">(<argument><expr><name PREFIX:line="175" PREFIX:column="22">EXTRF</name></expr></argument>)</argument_list></call>)</expr>)</condition><then PREFIX:line="175" PREFIX:column="30"> <comment type="line" PREFIX:line="175" PREFIX:column="31">// if it's a not an al reset...</comment>
      <expr_stmt><expr><call><name PREFIX:line="176" PREFIX:column="7">app_start</name><argument_list PREFIX:line="176" PREFIX:column="16">()</argument_list></call></expr>;</expr_stmt></then></if>  <comment type="line" PREFIX:line="176" PREFIX:column="21">// skip bootloader</comment>
<cpp:endif PREFIX:line="177" PREFIX:column="1">#<cpp:directive PREFIX:line="177" PREFIX:column="2">endif</cpp:directive></cpp:endif>


	<comment type="line" PREFIX:line="180" PREFIX:column="9">//initialize our serial port.</comment>
    <expr_stmt><expr><name PREFIX:line="181" PREFIX:column="5">UBRR0L</name> = <call PREFIX:line="181" PREFIX:column="14">(<name PREFIX:line="181" PREFIX:column="15">uint8_t</name>)<argument_list PREFIX:line="181" PREFIX:column="23">(<argument><expr><name PREFIX:line="181" PREFIX:column="24">F_CPU</name>/(<name PREFIX:line="181" PREFIX:column="31">BAUD_RATE</name>*16L)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="182" PREFIX:column="5">UBRR0H</name> = (<name PREFIX:line="182" PREFIX:column="15">F_CPU</name>/(<name PREFIX:line="182" PREFIX:column="22">BAUD_RATE</name>*16L)-1) &gt;&gt; 8</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="183" PREFIX:column="5">UCSR0B</name> = (1&lt;&lt;<name PREFIX:line="183" PREFIX:column="18">RXEN0</name>) | (1&lt;&lt;<name PREFIX:line="183" PREFIX:column="31">TXEN0</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="184" PREFIX:column="5">UCSR0C</name> = (1&lt;&lt;<name PREFIX:line="184" PREFIX:column="18">UCSZ00</name>) | (1&lt;&lt;<name PREFIX:line="184" PREFIX:column="32">UCSZ01</name>)</expr>;</expr_stmt>

    <comment type="block" PREFIX:line="186" PREFIX:column="5">/* Enable internal pull-up resistor on pin D0 (RX), in order
    to supress line noise that prevents the bootloader from
    timing out (DAM: 20070509) */</comment>
    <expr_stmt><expr><name PREFIX:line="189" PREFIX:column="5">DDRD</name> &amp;= ~<call><name PREFIX:line="189" PREFIX:column="14">_BV</name><argument_list PREFIX:line="189" PREFIX:column="17">(<argument><expr><name PREFIX:line="189" PREFIX:column="18">PIND0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="190" PREFIX:column="5">PORTD</name> |= <call><name PREFIX:line="190" PREFIX:column="14">_BV</name><argument_list PREFIX:line="190" PREFIX:column="17">(<argument><expr><name PREFIX:line="190" PREFIX:column="18">PIND0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" PREFIX:line="192" PREFIX:column="5">/* set LED pin as output */</comment>
    <expr_stmt><expr><name PREFIX:line="193" PREFIX:column="5">LED_DDR</name> |= <call><name PREFIX:line="193" PREFIX:column="16">_BV</name><argument_list PREFIX:line="193" PREFIX:column="19">(<argument><expr><name PREFIX:line="193" PREFIX:column="20">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block" PREFIX:line="195" PREFIX:column="13">/* flash onboard LED to signal entering of bootloader                   */</comment>
	    <comment type="block" PREFIX:line="196" PREFIX:column="13">/* ADABOOT will do two series of flashes. first 4 - signifying ADABOOT  */</comment>
	    <comment type="block" PREFIX:line="197" PREFIX:column="13">/* then a pause and another flash series signifying ADABOOT sub-version */</comment>


	<expr_stmt><expr><call><name PREFIX:line="200" PREFIX:column="9">flash_led</name><argument_list PREFIX:line="200" PREFIX:column="18">(<argument><expr><name PREFIX:line="200" PREFIX:column="19">NUM_LED_FLASHES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<cpp:ifdef PREFIX:line="202" PREFIX:column="9">#<cpp:directive PREFIX:line="202" PREFIX:column="10">ifdef</cpp:directive>	<name PREFIX:line="202" PREFIX:column="17">ADABOOT</name></cpp:ifdef>
		<expr_stmt><expr><call><name PREFIX:line="203" PREFIX:column="17">flash_led</name><argument_list PREFIX:line="203" PREFIX:column="26">(<argument><expr><name PREFIX:line="203" PREFIX:column="27">ADABOOT_VER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="line" PREFIX:line="203" PREFIX:column="49">// BBR 9/13/2008</comment>
	<cpp:endif PREFIX:line="204" PREFIX:column="9">#<cpp:directive PREFIX:line="204" PREFIX:column="10">endif</cpp:directive></cpp:endif> 

    <comment type="block" PREFIX:line="206" PREFIX:column="5">/* forever loop */</comment>
    <for PREFIX:line="207" PREFIX:column="5">for (<init PREFIX:line="207" PREFIX:column="10">;</init><condition PREFIX:line="207" PREFIX:column="11">;</condition><incr/>)
	<block PREFIX:line="208" PREFIX:column="9">{
		<comment type="block" PREFIX:line="209" PREFIX:column="17">/* get character from UART */</comment>
		<expr_stmt><expr><name PREFIX:line="210" PREFIX:column="17">ch</name> = <call><name PREFIX:line="210" PREFIX:column="22">getch</name><argument_list PREFIX:line="210" PREFIX:column="27">()</argument_list></call></expr>;</expr_stmt>

		<comment type="block" PREFIX:line="212" PREFIX:column="17">/* A bunch of if...else if... gives smaller code than switch...case ! */</comment>

		<comment type="block" PREFIX:line="214" PREFIX:column="17">/* Hello is anyone home ? */</comment> 
		<if PREFIX:line="215" PREFIX:column="17">if<condition PREFIX:line="215" PREFIX:column="19">(<expr><name PREFIX:line="215" PREFIX:column="20">ch</name>=='0'</expr>)</condition><then PREFIX:line="215" PREFIX:column="28">
		    <expr_stmt><expr><call><name PREFIX:line="216" PREFIX:column="21">nothing_response</name><argument_list PREFIX:line="216" PREFIX:column="37">()</argument_list></call></expr>;</expr_stmt></then>


		<comment type="block" PREFIX:line="219" PREFIX:column="17">/* Request programmer ID */</comment>
		<comment type="block" PREFIX:line="220" PREFIX:column="17">/* Not using PROGMEM string due to boot block in m128 being beyond 64kB boundry  */</comment>
		<comment type="block" PREFIX:line="221" PREFIX:column="17">/* Would need to selectively manipulate RAMPZ, and it's only 9 characters anyway so who cares.  */</comment>
		<else PREFIX:line="222" PREFIX:column="17">else <if PREFIX:line="222" PREFIX:column="22">if<condition PREFIX:line="222" PREFIX:column="24">(<expr><name PREFIX:line="222" PREFIX:column="25">ch</name>=='1'</expr>)</condition><then PREFIX:line="222" PREFIX:column="33">
		<block PREFIX:line="223" PREFIX:column="17">{
		    <if PREFIX:line="224" PREFIX:column="21">if <condition PREFIX:line="224" PREFIX:column="24">(<expr><call><name PREFIX:line="224" PREFIX:column="25">getch</name><argument_list PREFIX:line="224" PREFIX:column="30">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="224" PREFIX:column="40">
			<block PREFIX:line="225" PREFIX:column="25">{
				<expr_stmt><expr><call><name PREFIX:line="226" PREFIX:column="33">putch</name><argument_list PREFIX:line="226" PREFIX:column="38">(<argument><expr PREFIX:line="226" PREFIX:column="39">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="227" PREFIX:column="33">putch</name><argument_list PREFIX:line="227" PREFIX:column="38">(<argument><expr PREFIX:line="227" PREFIX:column="39">'A'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="228" PREFIX:column="33">putch</name><argument_list PREFIX:line="228" PREFIX:column="38">(<argument><expr PREFIX:line="228" PREFIX:column="39">'V'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="229" PREFIX:column="33">putch</name><argument_list PREFIX:line="229" PREFIX:column="38">(<argument><expr PREFIX:line="229" PREFIX:column="39">'R'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="230" PREFIX:column="33">putch</name><argument_list PREFIX:line="230" PREFIX:column="38">(<argument><expr PREFIX:line="230" PREFIX:column="39">' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="231" PREFIX:column="33">putch</name><argument_list PREFIX:line="231" PREFIX:column="38">(<argument><expr PREFIX:line="231" PREFIX:column="39">'I'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="232" PREFIX:column="33">putch</name><argument_list PREFIX:line="232" PREFIX:column="38">(<argument><expr PREFIX:line="232" PREFIX:column="39">'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="233" PREFIX:column="33">putch</name><argument_list PREFIX:line="233" PREFIX:column="38">(<argument><expr PREFIX:line="233" PREFIX:column="39">'P'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="234" PREFIX:column="33">putch</name><argument_list PREFIX:line="234" PREFIX:column="38">(<argument><expr PREFIX:line="234" PREFIX:column="39">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then>
			<else PREFIX:line="236" PREFIX:column="25">else
			<block PREFIX:line="237" PREFIX:column="25">{
				<if PREFIX:line="238" PREFIX:column="33">if <condition PREFIX:line="238" PREFIX:column="36">(<expr PREFIX:line="238" PREFIX:column="37">++<name PREFIX:line="238" PREFIX:column="39">error_count</name> == <name PREFIX:line="238" PREFIX:column="54">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="238" PREFIX:column="70">
				    <expr_stmt><expr><call><name PREFIX:line="239" PREFIX:column="37">app_start</name><argument_list PREFIX:line="239" PREFIX:column="46">()</argument_list></call></expr>;</expr_stmt></then></if>
		    }</block></else></if>
		}</block></then>


		<comment type="block" PREFIX:line="244" PREFIX:column="17">/* AVR ISP/STK500 board commands  DON'T CARE so default nothing_response */</comment>
		<else PREFIX:line="245" PREFIX:column="17">else <if PREFIX:line="245" PREFIX:column="22">if<condition PREFIX:line="245" PREFIX:column="24">(<expr><name PREFIX:line="245" PREFIX:column="25">ch</name>=='@'</expr>)</condition><then PREFIX:line="245" PREFIX:column="33">
		<block PREFIX:line="246" PREFIX:column="17">{
		    <expr_stmt><expr><name PREFIX:line="247" PREFIX:column="21">ch2</name> = <call><name PREFIX:line="247" PREFIX:column="27">getch</name><argument_list PREFIX:line="247" PREFIX:column="32">()</argument_list></call></expr>;</expr_stmt>
		    <if PREFIX:line="248" PREFIX:column="21">if <condition PREFIX:line="248" PREFIX:column="24">(<expr><name PREFIX:line="248" PREFIX:column="25">ch2</name> &gt; 0x85</expr>)</condition><then PREFIX:line="248" PREFIX:column="36">
				<expr_stmt><expr><call><name PREFIX:line="249" PREFIX:column="33">getch</name><argument_list PREFIX:line="249" PREFIX:column="38">()</argument_list></call></expr>;</expr_stmt></then></if>
		    <expr_stmt><expr><call><name PREFIX:line="250" PREFIX:column="21">nothing_response</name><argument_list PREFIX:line="250" PREFIX:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>


		<comment type="block" PREFIX:line="254" PREFIX:column="17">/* AVR ISP/STK500 board requests */</comment>
		<else PREFIX:line="255" PREFIX:column="17">else <if PREFIX:line="255" PREFIX:column="22">if<condition PREFIX:line="255" PREFIX:column="24">(<expr><name PREFIX:line="255" PREFIX:column="25">ch</name>=='A'</expr>)</condition><then PREFIX:line="255" PREFIX:column="33">
		<block PREFIX:line="256" PREFIX:column="17">{
		    <expr_stmt><expr><name PREFIX:line="257" PREFIX:column="21">ch2</name> = <call><name PREFIX:line="257" PREFIX:column="27">getch</name><argument_list PREFIX:line="257" PREFIX:column="32">()</argument_list></call></expr>;</expr_stmt>
		    <if PREFIX:line="258" PREFIX:column="21">if<condition PREFIX:line="258" PREFIX:column="23">(<expr><name PREFIX:line="258" PREFIX:column="24">ch2</name> == 0x80</expr>)</condition><then PREFIX:line="258" PREFIX:column="36">
				<expr_stmt><expr><call><name PREFIX:line="259" PREFIX:column="33">byte_response</name><argument_list PREFIX:line="259" PREFIX:column="46">(<argument><expr><name PREFIX:line="259" PREFIX:column="47">HW_VER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>		<comment type="line" PREFIX:line="259" PREFIX:column="65">// Hardware version</comment>
		    <else PREFIX:line="260" PREFIX:column="21">else <if PREFIX:line="260" PREFIX:column="26">if<condition PREFIX:line="260" PREFIX:column="28">(<expr><name PREFIX:line="260" PREFIX:column="29">ch2</name>==0x81</expr>)</condition><then PREFIX:line="260" PREFIX:column="39">
				<expr_stmt><expr><call><name PREFIX:line="261" PREFIX:column="33">byte_response</name><argument_list PREFIX:line="261" PREFIX:column="46">(<argument><expr><name PREFIX:line="261" PREFIX:column="47">SW_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>	<comment type="line" PREFIX:line="261" PREFIX:column="65">// Software major version</comment>
		    <else PREFIX:line="262" PREFIX:column="21">else <if PREFIX:line="262" PREFIX:column="26">if<condition PREFIX:line="262" PREFIX:column="28">(<expr><name PREFIX:line="262" PREFIX:column="29">ch2</name>==0x82</expr>)</condition><then PREFIX:line="262" PREFIX:column="39">
				<expr_stmt><expr><call><name PREFIX:line="263" PREFIX:column="33">byte_response</name><argument_list PREFIX:line="263" PREFIX:column="46">(<argument><expr><name PREFIX:line="263" PREFIX:column="47">SW_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>	<comment type="line" PREFIX:line="263" PREFIX:column="65">// Software minor version</comment>
		    <else PREFIX:line="264" PREFIX:column="21">else <if PREFIX:line="264" PREFIX:column="26">if<condition PREFIX:line="264" PREFIX:column="28">(<expr><name PREFIX:line="264" PREFIX:column="29">ch2</name>==0x98</expr>)</condition><then PREFIX:line="264" PREFIX:column="39">
				<expr_stmt><expr><call><name PREFIX:line="265" PREFIX:column="33">byte_response</name><argument_list PREFIX:line="265" PREFIX:column="46">(<argument><expr PREFIX:line="265" PREFIX:column="47">0x03</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>		<comment type="line" PREFIX:line="265" PREFIX:column="65">// Unknown but seems to be required by avr studio 3.56</comment>
		    <else PREFIX:line="266" PREFIX:column="21">else
				<expr_stmt><expr><call><name PREFIX:line="267" PREFIX:column="33">byte_response</name><argument_list PREFIX:line="267" PREFIX:column="46">(<argument><expr PREFIX:line="267" PREFIX:column="47">0x00</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if>		<comment type="line" PREFIX:line="267" PREFIX:column="65">// Covers various unnecessary responses we don't care about</comment>
		}</block></then>


		<comment type="block" PREFIX:line="271" PREFIX:column="17">/* Device Parameters  DON'T CARE, DEVICE IS FIXED  */</comment>
		<else PREFIX:line="272" PREFIX:column="17">else <if PREFIX:line="272" PREFIX:column="22">if<condition PREFIX:line="272" PREFIX:column="24">(<expr><name PREFIX:line="272" PREFIX:column="25">ch</name>=='B'</expr>)</condition><then PREFIX:line="272" PREFIX:column="33">
		<block PREFIX:line="273" PREFIX:column="17">{
		    <expr_stmt><expr><call><name PREFIX:line="274" PREFIX:column="21">getNch</name><argument_list PREFIX:line="274" PREFIX:column="27">(<argument><expr PREFIX:line="274" PREFIX:column="28">20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name PREFIX:line="275" PREFIX:column="21">nothing_response</name><argument_list PREFIX:line="275" PREFIX:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>


		<comment type="block" PREFIX:line="279" PREFIX:column="17">/* Parallel programming stuff  DON'T CARE  */</comment>
		<else PREFIX:line="280" PREFIX:column="17">else <if PREFIX:line="280" PREFIX:column="22">if<condition PREFIX:line="280" PREFIX:column="24">(<expr><name PREFIX:line="280" PREFIX:column="25">ch</name>=='E'</expr>)</condition><then PREFIX:line="280" PREFIX:column="33">
		<block PREFIX:line="281" PREFIX:column="17">{
		    <expr_stmt><expr><call><name PREFIX:line="282" PREFIX:column="21">getNch</name><argument_list PREFIX:line="282" PREFIX:column="27">(<argument><expr PREFIX:line="282" PREFIX:column="28">5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name PREFIX:line="283" PREFIX:column="21">nothing_response</name><argument_list PREFIX:line="283" PREFIX:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>


		<comment type="block" PREFIX:line="287" PREFIX:column="17">/* Enter programming mode  */</comment>
		<else PREFIX:line="288" PREFIX:column="17">else <if PREFIX:line="288" PREFIX:column="22">if<condition PREFIX:line="288" PREFIX:column="24">(<expr><name PREFIX:line="288" PREFIX:column="25">ch</name>=='P'</expr>)</condition><then PREFIX:line="288" PREFIX:column="33">
		<block PREFIX:line="289" PREFIX:column="17">{
		    <expr_stmt><expr><call><name PREFIX:line="290" PREFIX:column="21">nothing_response</name><argument_list PREFIX:line="290" PREFIX:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>


		<comment type="block" PREFIX:line="294" PREFIX:column="17">/* Leave programming mode  */</comment>
		<else PREFIX:line="295" PREFIX:column="17">else <if PREFIX:line="295" PREFIX:column="22">if<condition PREFIX:line="295" PREFIX:column="24">(<expr><name PREFIX:line="295" PREFIX:column="25">ch</name>=='Q'</expr>)</condition><then PREFIX:line="295" PREFIX:column="33">
		<block PREFIX:line="296" PREFIX:column="17">{
		    <expr_stmt><expr><call><name PREFIX:line="297" PREFIX:column="21">nothing_response</name><argument_list PREFIX:line="297" PREFIX:column="37">()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef PREFIX:line="298" PREFIX:column="1">#<cpp:directive PREFIX:line="298" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="298" PREFIX:column="8">ADABOOT</name></cpp:ifdef>		
			<comment type="line" PREFIX:line="299" PREFIX:column="25">// autoreset via watchdog (sneaky!) BBR/LF 9/13/2008</comment>
	  		<expr_stmt><expr><name PREFIX:line="300" PREFIX:column="25">WDTCSR</name> = <call><name PREFIX:line="300" PREFIX:column="34">_BV</name><argument_list PREFIX:line="300" PREFIX:column="37">(<argument><expr><name PREFIX:line="300" PREFIX:column="38">WDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  		<while PREFIX:line="301" PREFIX:column="25">while <condition PREFIX:line="301" PREFIX:column="31">(<expr PREFIX:line="301" PREFIX:column="32">1</expr>)</condition><empty_stmt PREFIX:line="301" PREFIX:column="34">;</empty_stmt></while> <comment type="line" PREFIX:line="301" PREFIX:column="36">// 16 ms</comment>
<cpp:endif PREFIX:line="302" PREFIX:column="1">#<cpp:directive PREFIX:line="302" PREFIX:column="2">endif</cpp:directive></cpp:endif>		
		}</block></then>


		<comment type="block" PREFIX:line="306" PREFIX:column="17">/* Erase device, don't care as we will erase one page at a time anyway.  */</comment>
		<else PREFIX:line="307" PREFIX:column="17">else <if PREFIX:line="307" PREFIX:column="22">if<condition PREFIX:line="307" PREFIX:column="24">(<expr><name PREFIX:line="307" PREFIX:column="25">ch</name>=='R'</expr>)</condition><then PREFIX:line="307" PREFIX:column="33">
		<block PREFIX:line="308" PREFIX:column="17">{
		    <expr_stmt><expr><call><name PREFIX:line="309" PREFIX:column="21">nothing_response</name><argument_list PREFIX:line="309" PREFIX:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>


		<comment type="block" PREFIX:line="313" PREFIX:column="17">/* Set address, little endian. EEPROM in bytes, FLASH in words  */</comment>
		<comment type="block" PREFIX:line="314" PREFIX:column="17">/* Perhaps extra address bytes may be added in future to support &gt; 128kB FLASH.  */</comment>
		<comment type="block" PREFIX:line="315" PREFIX:column="17">/* This might explain why little endian was used here, big endian used everywhere else.  */</comment>
		<else PREFIX:line="316" PREFIX:column="17">else <if PREFIX:line="316" PREFIX:column="22">if<condition PREFIX:line="316" PREFIX:column="24">(<expr><name PREFIX:line="316" PREFIX:column="25">ch</name>=='U'</expr>)</condition><then PREFIX:line="316" PREFIX:column="33">
		<block PREFIX:line="317" PREFIX:column="17">{
		    <expr_stmt><expr><name><name PREFIX:line="318" PREFIX:column="21">address</name>.<name PREFIX:line="318" PREFIX:column="29">byte</name><index PREFIX:line="318" PREFIX:column="33">[<expr PREFIX:line="318" PREFIX:column="34">0</expr>]</index></name> = <call><name PREFIX:line="318" PREFIX:column="39">getch</name><argument_list PREFIX:line="318" PREFIX:column="44">()</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name PREFIX:line="319" PREFIX:column="21">address</name>.<name PREFIX:line="319" PREFIX:column="29">byte</name><index PREFIX:line="319" PREFIX:column="33">[<expr PREFIX:line="319" PREFIX:column="34">1</expr>]</index></name> = <call><name PREFIX:line="319" PREFIX:column="39">getch</name><argument_list PREFIX:line="319" PREFIX:column="44">()</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name PREFIX:line="320" PREFIX:column="21">nothing_response</name><argument_list PREFIX:line="320" PREFIX:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>


		<comment type="block" PREFIX:line="324" PREFIX:column="17">/* Universal SPI programming command, disabled.  Would be used for fuses and lock bits.  */</comment>
		<else PREFIX:line="325" PREFIX:column="17">else <if PREFIX:line="325" PREFIX:column="22">if<condition PREFIX:line="325" PREFIX:column="24">(<expr><name PREFIX:line="325" PREFIX:column="25">ch</name>=='V'</expr>)</condition><then PREFIX:line="325" PREFIX:column="33">
		<block PREFIX:line="326" PREFIX:column="17">{
		    <expr_stmt><expr><call><name PREFIX:line="327" PREFIX:column="21">getNch</name><argument_list PREFIX:line="327" PREFIX:column="27">(<argument><expr PREFIX:line="327" PREFIX:column="28">4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name PREFIX:line="328" PREFIX:column="21">byte_response</name><argument_list PREFIX:line="328" PREFIX:column="34">(<argument><expr PREFIX:line="328" PREFIX:column="35">0x00</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>


		<comment type="block" PREFIX:line="332" PREFIX:column="17">/* Write memory, length is big endian and is in bytes  */</comment>
		<else PREFIX:line="333" PREFIX:column="17">else <if PREFIX:line="333" PREFIX:column="22">if<condition PREFIX:line="333" PREFIX:column="24">(<expr><name PREFIX:line="333" PREFIX:column="25">ch</name>=='d'</expr>)</condition><then PREFIX:line="333" PREFIX:column="33">
		<block PREFIX:line="334" PREFIX:column="17">{
		    <expr_stmt><expr><name><name PREFIX:line="335" PREFIX:column="21">length</name>.<name PREFIX:line="335" PREFIX:column="28">byte</name><index PREFIX:line="335" PREFIX:column="32">[<expr PREFIX:line="335" PREFIX:column="33">1</expr>]</index></name> = <call><name PREFIX:line="335" PREFIX:column="38">getch</name><argument_list PREFIX:line="335" PREFIX:column="43">()</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name PREFIX:line="336" PREFIX:column="21">length</name>.<name PREFIX:line="336" PREFIX:column="28">byte</name><index PREFIX:line="336" PREFIX:column="32">[<expr PREFIX:line="336" PREFIX:column="33">0</expr>]</index></name> = <call><name PREFIX:line="336" PREFIX:column="38">getch</name><argument_list PREFIX:line="336" PREFIX:column="43">()</argument_list></call></expr>;</expr_stmt>
	
		    <expr_stmt><expr><name><name PREFIX:line="338" PREFIX:column="21">flags</name>.<name PREFIX:line="338" PREFIX:column="27">eeprom</name></name> = 0</expr>;</expr_stmt>
		    <if PREFIX:line="339" PREFIX:column="21">if <condition PREFIX:line="339" PREFIX:column="24">(<expr><call><name PREFIX:line="339" PREFIX:column="25">getch</name><argument_list PREFIX:line="339" PREFIX:column="30">()</argument_list></call> == 'E'</expr>)</condition><then PREFIX:line="339" PREFIX:column="40">
				<expr_stmt><expr><name><name PREFIX:line="340" PREFIX:column="33">flags</name>.<name PREFIX:line="340" PREFIX:column="39">eeprom</name></name> = 1</expr>;</expr_stmt></then></if>

			<for PREFIX:line="342" PREFIX:column="25">for (<init><expr><name PREFIX:line="342" PREFIX:column="30">i</name>=0</expr>;</init> <condition><expr><name PREFIX:line="342" PREFIX:column="35">i</name>&lt;<name PREFIX:line="342" PREFIX:column="37">PAGE_SIZE</name></expr>;</condition> <incr><expr><name PREFIX:line="342" PREFIX:column="48">i</name>++</expr></incr>)
				<expr_stmt><expr><name><name PREFIX:line="343" PREFIX:column="33">buff</name><index PREFIX:line="343" PREFIX:column="37">[<expr><name PREFIX:line="343" PREFIX:column="38">i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
		
		    <for PREFIX:line="345" PREFIX:column="21">for (<init><expr><name PREFIX:line="345" PREFIX:column="26">w</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="345" PREFIX:column="33">w</name> &lt; <name><name PREFIX:line="345" PREFIX:column="37">length</name>.<name PREFIX:line="345" PREFIX:column="44">word</name></name></expr>;</condition> <incr><expr><name PREFIX:line="345" PREFIX:column="50">w</name>++</expr></incr>)
			<block PREFIX:line="346" PREFIX:column="25">{
				<comment type="line" PREFIX:line="347" PREFIX:column="33">// Store data in buffer, can't keep up with serial data stream whilst programming pages</comment>
				<expr_stmt><expr><name><name PREFIX:line="348" PREFIX:column="33">buff</name><index PREFIX:line="348" PREFIX:column="37">[<expr><name PREFIX:line="348" PREFIX:column="38">w</name></expr>]</index></name> = <call><name PREFIX:line="348" PREFIX:column="43">getch</name><argument_list PREFIX:line="348" PREFIX:column="48">()</argument_list></call></expr>;</expr_stmt>
		    }</block></for>
	
		    <if PREFIX:line="351" PREFIX:column="21">if <condition PREFIX:line="351" PREFIX:column="24">(<expr><call><name PREFIX:line="351" PREFIX:column="25">getch</name><argument_list PREFIX:line="351" PREFIX:column="30">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="351" PREFIX:column="40">
			<block PREFIX:line="352" PREFIX:column="25">{
				<if PREFIX:line="353" PREFIX:column="33">if <condition PREFIX:line="353" PREFIX:column="36">(<expr><name><name PREFIX:line="353" PREFIX:column="37">flags</name>.<name PREFIX:line="353" PREFIX:column="43">eeprom</name></name></expr>)</condition><then PREFIX:line="353" PREFIX:column="50">
				<block PREFIX:line="354" PREFIX:column="33">{		                
					<comment type="line" PREFIX:line="355" PREFIX:column="41">//Write to EEPROM one byte at a time</comment>
				    <for PREFIX:line="356" PREFIX:column="37">for(<init><expr><name PREFIX:line="356" PREFIX:column="41">w</name>=0</expr>;</init><condition><expr><name PREFIX:line="356" PREFIX:column="45">w</name>&lt;<name><name PREFIX:line="356" PREFIX:column="47">length</name>.<name PREFIX:line="356" PREFIX:column="54">word</name></name></expr>;</condition><incr><expr><name PREFIX:line="356" PREFIX:column="59">w</name>++</expr></incr>)
					<block PREFIX:line="357" PREFIX:column="41">{
						<while PREFIX:line="358" PREFIX:column="49">while<condition PREFIX:line="358" PREFIX:column="54">(<expr><name PREFIX:line="358" PREFIX:column="55">EECR</name> &amp; (1&lt;&lt;<name PREFIX:line="358" PREFIX:column="66">EEPE</name>)</expr>)</condition><empty_stmt PREFIX:line="358" PREFIX:column="72">;</empty_stmt></while>
					
						<expr_stmt><expr><name PREFIX:line="360" PREFIX:column="49">EEAR</name> = (<name PREFIX:line="360" PREFIX:column="57">uint16_t</name>)<name><name PREFIX:line="360" PREFIX:column="66">address</name>.<name PREFIX:line="360" PREFIX:column="74">word</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name PREFIX:line="361" PREFIX:column="49">EEDR</name> = <name><name PREFIX:line="361" PREFIX:column="56">buff</name><index PREFIX:line="361" PREFIX:column="60">[<expr><name PREFIX:line="361" PREFIX:column="61">w</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name PREFIX:line="362" PREFIX:column="49">EECR</name> |= (1&lt;&lt;<name PREFIX:line="362" PREFIX:column="61">EEMPE</name>)</expr>;</expr_stmt>
						<expr_stmt><expr><name PREFIX:line="363" PREFIX:column="49">EECR</name> |= (1&lt;&lt;<name PREFIX:line="363" PREFIX:column="61">EEPE</name>)</expr>;</expr_stmt>

						<expr_stmt><expr><name><name PREFIX:line="365" PREFIX:column="49">address</name>.<name PREFIX:line="365" PREFIX:column="57">word</name></name>++</expr>;</expr_stmt>
				    }</block></for>			
				}</block></then>
				<else PREFIX:line="368" PREFIX:column="33">else
				<block PREFIX:line="369" PREFIX:column="33">{
					<comment type="line" PREFIX:line="370" PREFIX:column="41">//address * 2 -&gt; byte location</comment>
				    <expr_stmt><expr><name><name PREFIX:line="371" PREFIX:column="37">address</name>.<name PREFIX:line="371" PREFIX:column="45">word</name></name> = <name><name PREFIX:line="371" PREFIX:column="52">address</name>.<name PREFIX:line="371" PREFIX:column="60">word</name></name> &lt;&lt; 1</expr>;</expr_stmt>
			    
					<comment type="line" PREFIX:line="373" PREFIX:column="41">//Even up an odd number of bytes</comment>
					<if PREFIX:line="374" PREFIX:column="41">if <condition PREFIX:line="374" PREFIX:column="44">(<expr PREFIX:line="374" PREFIX:column="45">(<name><name PREFIX:line="374" PREFIX:column="46">length</name>.<name PREFIX:line="374" PREFIX:column="53">byte</name><index PREFIX:line="374" PREFIX:column="57">[<expr PREFIX:line="374" PREFIX:column="58">0</expr>]</index></name> &amp; 0x01)</expr>)</condition><then PREFIX:line="374" PREFIX:column="69">
						<expr_stmt><expr><name><name PREFIX:line="375" PREFIX:column="49">length</name>.<name PREFIX:line="375" PREFIX:column="56">word</name></name>++</expr>;</expr_stmt></then></if>
				
					<comment type="line" PREFIX:line="377" PREFIX:column="41">// HACKME: EEPE used to be EEWE</comment>
				    <comment type="line" PREFIX:line="378" PREFIX:column="37">//Wait for previous EEPROM writes to complete</comment>
					<comment type="line" PREFIX:line="379" PREFIX:column="41">//while(bit_is_set(EECR,EEPE));</comment>
					<while PREFIX:line="380" PREFIX:column="41">while<condition PREFIX:line="380" PREFIX:column="46">(<expr><name PREFIX:line="380" PREFIX:column="47">EECR</name> &amp; (1&lt;&lt;<name PREFIX:line="380" PREFIX:column="58">EEPE</name>)</expr>)</condition><empty_stmt PREFIX:line="380" PREFIX:column="64">;</empty_stmt></while>
				
				    <asm PREFIX:line="382" PREFIX:column="37">asm <specifier PREFIX:line="382" PREFIX:column="41">volatile</specifier>(
						 "clr	r17		\n\t"	<comment type="line" PREFIX:line="383" PREFIX:column="81">//page_word_count</comment>
						 "lds	r30,address	\n\t"	<comment type="line" PREFIX:line="384" PREFIX:column="81">//Address of FLASH location (in bytes)</comment>
						 "lds	r31,address+1	\n\t"
						 "ldi	r28,lo8(buff)	\n\t"	<comment type="line" PREFIX:line="386" PREFIX:column="81">//Start of buffer array in RAM</comment>
						 "ldi	r29,hi8(buff)	\n\t"
						 "lds	r24,length	\n\t"	<comment type="line" PREFIX:line="388" PREFIX:column="81">//Length of data to be written (in bytes)</comment>
						 "lds	r25,length+1	\n\t"
						 "length_loop:		\n\t"	<comment type="line" PREFIX:line="390" PREFIX:column="81">//Main loop, repeat for number of words in block							 							 </comment>
						 "cpi	r17,0x00	\n\t"	<comment type="line" PREFIX:line="391" PREFIX:column="81">//If page_word_count=0 then erase page</comment>
						 "brne	no_page_erase	\n\t"						 
						 "wait_spm1:		\n\t"
						 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="394" PREFIX:column="81">//Wait for previous spm to complete</comment>
						 "andi	r16,1           \n\t"
						 "cpi	r16,1           \n\t"
						 "breq	wait_spm1       \n\t"
						 "ldi	r16,0x03	\n\t"	<comment type="line" PREFIX:line="398" PREFIX:column="81">//Erase page pointed to by Z</comment>
						 "sts	%0,r16		\n\t"
						 "spm			\n\t"							 
						 "wait_spm2:		\n\t"
						 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="402" PREFIX:column="81">//Wait for previous spm to complete</comment>
						 "andi	r16,1           \n\t"
						 "cpi	r16,1           \n\t"
						 "breq	wait_spm2       \n\t"									 

						 "ldi	r16,0x11	\n\t"	<comment type="line" PREFIX:line="407" PREFIX:column="81">//Re-enable RWW section</comment>
						 "sts	%0,r16		\n\t"						 			 
						 "spm			\n\t"
						 "no_page_erase:		\n\t"							 
						 "ld	r0,Y+		\n\t"	<comment type="line" PREFIX:line="411" PREFIX:column="81">//Write 2 bytes into page buffer</comment>
						 "ld	r1,Y+		\n\t"							 
							 
						 "wait_spm3:		\n\t"
						 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="415" PREFIX:column="81">//Wait for previous spm to complete</comment>
						 "andi	r16,1           \n\t"
						 "cpi	r16,1           \n\t"
						 "breq	wait_spm3       \n\t"
						 "ldi	r16,0x01	\n\t"	<comment type="line" PREFIX:line="419" PREFIX:column="81">//Load r0,r1 into FLASH page buffer</comment>
						 "sts	%0,r16		\n\t"
						 "spm			\n\t"
							 
						 "inc	r17		\n\t"	<comment type="line" PREFIX:line="423" PREFIX:column="81">//page_word_count++</comment>
						 "cpi r17,%1	        \n\t"
						 "brlo	same_page	\n\t"	<comment type="line" PREFIX:line="425" PREFIX:column="81">//Still same page in FLASH</comment>
						 "write_page:		\n\t"
						 "clr	r17		\n\t"	<comment type="line" PREFIX:line="427" PREFIX:column="81">//New page, write current one first</comment>
						 "wait_spm4:		\n\t"
						 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="429" PREFIX:column="81">//Wait for previous spm to complete</comment>
						 "andi	r16,1           \n\t"
						 "cpi	r16,1           \n\t"
						 "breq	wait_spm4       \n\t"						 							 
						 "ldi	r16,0x05	\n\t"	<comment type="line" PREFIX:line="433" PREFIX:column="81">//Write page pointed to by Z</comment>
						 "sts	%0,r16		\n\t"
						 "spm			\n\t"
						 "wait_spm5:		\n\t"
						 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="437" PREFIX:column="81">//Wait for previous spm to complete</comment>
						 "andi	r16,1           \n\t"
						 "cpi	r16,1           \n\t"
						 "breq	wait_spm5       \n\t"									 
						 "ldi	r16,0x11	\n\t"	<comment type="line" PREFIX:line="441" PREFIX:column="81">//Re-enable RWW section</comment>
						 "sts	%0,r16		\n\t"						 			 
						 "spm			\n\t"					 		 
						 "same_page:		\n\t"							 
						 "adiw	r30,2		\n\t"	<comment type="line" PREFIX:line="445" PREFIX:column="81">//Next word in FLASH</comment>
						 "sbiw	r24,2		\n\t"	<comment type="line" PREFIX:line="446" PREFIX:column="81">//length-2</comment>
						 "breq	final_write	\n\t"	<comment type="line" PREFIX:line="447" PREFIX:column="81">//Finished</comment>
						 "rjmp	length_loop	\n\t"
						 "final_write:		\n\t"
						 "cpi	r17,0		\n\t"
						 "breq	block_done	\n\t"
						 "adiw	r24,2		\n\t"	<comment type="line" PREFIX:line="452" PREFIX:column="81">//length+2, fool above check on length after short page write</comment>
						 "rjmp	write_page	\n\t"
						 "block_done:		\n\t"
						 "clr	__zero_reg__	\n\t"	<comment type="line" PREFIX:line="455" PREFIX:column="81">//restore zero register</comment>
						 : "=m" (SPMCSR) : "M" (PAGE_SIZE) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"

						 );</asm>
				}</block></else></if>
				<expr_stmt><expr><call><name PREFIX:line="460" PREFIX:column="33">putch</name><argument_list PREFIX:line="460" PREFIX:column="38">(<argument><expr PREFIX:line="460" PREFIX:column="39">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="461" PREFIX:column="33">putch</name><argument_list PREFIX:line="461" PREFIX:column="38">(<argument><expr PREFIX:line="461" PREFIX:column="39">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then>
			<else PREFIX:line="463" PREFIX:column="25">else
			<block PREFIX:line="464" PREFIX:column="25">{
				<if PREFIX:line="465" PREFIX:column="33">if <condition PREFIX:line="465" PREFIX:column="36">(<expr PREFIX:line="465" PREFIX:column="37">++<name PREFIX:line="465" PREFIX:column="39">error_count</name> == <name PREFIX:line="465" PREFIX:column="54">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="465" PREFIX:column="70">
				    <expr_stmt><expr><call><name PREFIX:line="466" PREFIX:column="37">app_start</name><argument_list PREFIX:line="466" PREFIX:column="46">()</argument_list></call></expr>;</expr_stmt></then></if>
		    }</block></else></if>		
		}</block></then>
    
		<comment type="block" PREFIX:line="470" PREFIX:column="17">/* Read memory block mode, length is big endian.  */</comment>
		<else PREFIX:line="471" PREFIX:column="17">else <if PREFIX:line="471" PREFIX:column="22">if<condition PREFIX:line="471" PREFIX:column="24">(<expr><name PREFIX:line="471" PREFIX:column="25">ch</name>=='t'</expr>)</condition><then PREFIX:line="471" PREFIX:column="33">
		<block PREFIX:line="472" PREFIX:column="17">{
			<expr_stmt><expr><name><name PREFIX:line="473" PREFIX:column="25">length</name>.<name PREFIX:line="473" PREFIX:column="32">byte</name><index PREFIX:line="473" PREFIX:column="36">[<expr PREFIX:line="473" PREFIX:column="37">1</expr>]</index></name> = <call><name PREFIX:line="473" PREFIX:column="42">getch</name><argument_list PREFIX:line="473" PREFIX:column="47">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name PREFIX:line="474" PREFIX:column="25">length</name>.<name PREFIX:line="474" PREFIX:column="32">byte</name><index PREFIX:line="474" PREFIX:column="36">[<expr PREFIX:line="474" PREFIX:column="37">0</expr>]</index></name> = <call><name PREFIX:line="474" PREFIX:column="42">getch</name><argument_list PREFIX:line="474" PREFIX:column="47">()</argument_list></call></expr>;</expr_stmt>

			<if PREFIX:line="476" PREFIX:column="25">if <condition PREFIX:line="476" PREFIX:column="28">(<expr><call><name PREFIX:line="476" PREFIX:column="29">getch</name><argument_list PREFIX:line="476" PREFIX:column="34">()</argument_list></call> == 'E'</expr>)</condition><then PREFIX:line="476" PREFIX:column="44">
				<expr_stmt><expr><name><name PREFIX:line="477" PREFIX:column="33">flags</name>.<name PREFIX:line="477" PREFIX:column="39">eeprom</name></name> = 1</expr>;</expr_stmt></then>
			<else PREFIX:line="478" PREFIX:column="25">else
			<block PREFIX:line="479" PREFIX:column="25">{
				<expr_stmt><expr><name><name PREFIX:line="480" PREFIX:column="33">flags</name>.<name PREFIX:line="480" PREFIX:column="39">eeprom</name></name> = 0</expr>;</expr_stmt>
				<expr_stmt><expr><name><name PREFIX:line="481" PREFIX:column="33">address</name>.<name PREFIX:line="481" PREFIX:column="41">word</name></name> = <name><name PREFIX:line="481" PREFIX:column="48">address</name>.<name PREFIX:line="481" PREFIX:column="56">word</name></name> &lt;&lt; 1</expr>;</expr_stmt>	        <comment type="line" PREFIX:line="481" PREFIX:column="81">// address * 2 -&gt; byte location</comment>
			}</block></else></if>

			<comment type="line" PREFIX:line="484" PREFIX:column="25">// Command terminator</comment>
			<if PREFIX:line="485" PREFIX:column="25">if <condition PREFIX:line="485" PREFIX:column="28">(<expr><call><name PREFIX:line="485" PREFIX:column="29">getch</name><argument_list PREFIX:line="485" PREFIX:column="34">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="485" PREFIX:column="44">
			<block PREFIX:line="486" PREFIX:column="25">{
				<expr_stmt><expr><call><name PREFIX:line="487" PREFIX:column="33">putch</name><argument_list PREFIX:line="487" PREFIX:column="38">(<argument><expr PREFIX:line="487" PREFIX:column="39">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for PREFIX:line="488" PREFIX:column="33">for (<init><expr><name PREFIX:line="488" PREFIX:column="38">w</name>=0</expr>;</init> <condition><expr><name PREFIX:line="488" PREFIX:column="43">w</name>&lt;<name><name PREFIX:line="488" PREFIX:column="45">length</name>.<name PREFIX:line="488" PREFIX:column="52">word</name></name></expr>;</condition> <incr><expr><name PREFIX:line="488" PREFIX:column="58">w</name>++</expr></incr>)
				<block PREFIX:line="489" PREFIX:column="33">{
					<comment type="line" PREFIX:line="490" PREFIX:column="41">// Can handle odd and even lengths okay</comment>
				    <if PREFIX:line="491" PREFIX:column="37">if <condition PREFIX:line="491" PREFIX:column="40">(<expr><name><name PREFIX:line="491" PREFIX:column="41">flags</name>.<name PREFIX:line="491" PREFIX:column="47">eeprom</name></name></expr>)</condition><then PREFIX:line="491" PREFIX:column="54"> 
					<block PREFIX:line="492" PREFIX:column="41">{
						<comment type="line" PREFIX:line="493" PREFIX:column="49">// Byte access EEPROM read</comment>
						<while PREFIX:line="494" PREFIX:column="49">while<condition PREFIX:line="494" PREFIX:column="54">(<expr><name PREFIX:line="494" PREFIX:column="55">EECR</name> &amp; (1&lt;&lt;<name PREFIX:line="494" PREFIX:column="66">EEPE</name>)</expr>)</condition><empty_stmt PREFIX:line="494" PREFIX:column="72">;</empty_stmt></while>
						<expr_stmt><expr><name PREFIX:line="495" PREFIX:column="49">EEAR</name> = (<name PREFIX:line="495" PREFIX:column="57">uint16_t</name>)<name><name PREFIX:line="495" PREFIX:column="66">address</name>.<name PREFIX:line="495" PREFIX:column="74">word</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name PREFIX:line="496" PREFIX:column="49">EECR</name> |= (1&lt;&lt;<name PREFIX:line="496" PREFIX:column="61">EERE</name>)</expr>;</expr_stmt>
						<expr_stmt><expr><call><name PREFIX:line="497" PREFIX:column="49">putch</name><argument_list PREFIX:line="497" PREFIX:column="54">(<argument><expr><name PREFIX:line="497" PREFIX:column="55">EEDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name><name PREFIX:line="499" PREFIX:column="49">address</name>.<name PREFIX:line="499" PREFIX:column="57">word</name></name>++</expr>;</expr_stmt>
				    }</block></then>
				    <else PREFIX:line="501" PREFIX:column="37">else
					<block PREFIX:line="502" PREFIX:column="41">{
						<if PREFIX:line="503" PREFIX:column="49">if <condition PREFIX:line="503" PREFIX:column="52">(<expr PREFIX:line="503" PREFIX:column="53">!<name><name PREFIX:line="503" PREFIX:column="54">flags</name>.<name PREFIX:line="503" PREFIX:column="60">rampz</name></name></expr>)</condition><then PREFIX:line="503" PREFIX:column="66">
							<expr_stmt><expr><call><name PREFIX:line="504" PREFIX:column="57">putch</name><argument_list PREFIX:line="504" PREFIX:column="62">(<argument><expr><call><name PREFIX:line="504" PREFIX:column="63">pgm_read_byte_near</name><argument_list PREFIX:line="504" PREFIX:column="81">(<argument><expr><name><name PREFIX:line="504" PREFIX:column="82">address</name>.<name PREFIX:line="504" PREFIX:column="90">word</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

						<expr_stmt><expr><name><name PREFIX:line="506" PREFIX:column="49">address</name>.<name PREFIX:line="506" PREFIX:column="57">word</name></name>++</expr>;</expr_stmt>
				    }</block></else></if>
				}</block></for>
				<expr_stmt><expr><call><name PREFIX:line="509" PREFIX:column="33">putch</name><argument_list PREFIX:line="509" PREFIX:column="38">(<argument><expr PREFIX:line="509" PREFIX:column="39">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
		}</block></then>


		<comment type="block" PREFIX:line="514" PREFIX:column="17">/* Get device signature bytes  */</comment>
		<else PREFIX:line="515" PREFIX:column="17">else <if PREFIX:line="515" PREFIX:column="22">if<condition PREFIX:line="515" PREFIX:column="24">(<expr><name PREFIX:line="515" PREFIX:column="25">ch</name>=='u'</expr>)</condition><then PREFIX:line="515" PREFIX:column="33">
		<block PREFIX:line="516" PREFIX:column="17">{
			<if PREFIX:line="517" PREFIX:column="25">if <condition PREFIX:line="517" PREFIX:column="28">(<expr><call><name PREFIX:line="517" PREFIX:column="29">getch</name><argument_list PREFIX:line="517" PREFIX:column="34">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="517" PREFIX:column="44">
			<block PREFIX:line="518" PREFIX:column="25">{
				<expr_stmt><expr><call><name PREFIX:line="519" PREFIX:column="33">putch</name><argument_list PREFIX:line="519" PREFIX:column="38">(<argument><expr PREFIX:line="519" PREFIX:column="39">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="520" PREFIX:column="33">putch</name><argument_list PREFIX:line="520" PREFIX:column="38">(<argument><expr><name PREFIX:line="520" PREFIX:column="39">SIG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="521" PREFIX:column="33">putch</name><argument_list PREFIX:line="521" PREFIX:column="38">(<argument><expr><name PREFIX:line="521" PREFIX:column="39">SIG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="522" PREFIX:column="33">putch</name><argument_list PREFIX:line="522" PREFIX:column="38">(<argument><expr><name PREFIX:line="522" PREFIX:column="39">SIG3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="523" PREFIX:column="33">putch</name><argument_list PREFIX:line="523" PREFIX:column="38">(<argument><expr PREFIX:line="523" PREFIX:column="39">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else PREFIX:line="525" PREFIX:column="25">else
			<block PREFIX:line="526" PREFIX:column="25">{
				<if PREFIX:line="527" PREFIX:column="33">if <condition PREFIX:line="527" PREFIX:column="36">(<expr PREFIX:line="527" PREFIX:column="37">++<name PREFIX:line="527" PREFIX:column="39">error_count</name> == <name PREFIX:line="527" PREFIX:column="54">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="527" PREFIX:column="70">
					<expr_stmt><expr><call><name PREFIX:line="528" PREFIX:column="41">app_start</name><argument_list PREFIX:line="528" PREFIX:column="50">()</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></else></if>
		}</block></then>


		<comment type="block" PREFIX:line="533" PREFIX:column="17">/* Read oscillator calibration byte */</comment>
		<else PREFIX:line="534" PREFIX:column="17">else <if PREFIX:line="534" PREFIX:column="22">if<condition PREFIX:line="534" PREFIX:column="24">(<expr><name PREFIX:line="534" PREFIX:column="25">ch</name>=='v'</expr>)</condition><then PREFIX:line="534" PREFIX:column="33">
			<expr_stmt><expr><call><name PREFIX:line="535" PREFIX:column="25">byte_response</name><argument_list PREFIX:line="535" PREFIX:column="38">(<argument><expr PREFIX:line="535" PREFIX:column="39">0x00</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

		<else PREFIX:line="537" PREFIX:column="17">else <if PREFIX:line="537" PREFIX:column="22">if <condition PREFIX:line="537" PREFIX:column="25">(<expr PREFIX:line="537" PREFIX:column="26">++<name PREFIX:line="537" PREFIX:column="28">error_count</name> == <name PREFIX:line="537" PREFIX:column="43">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="537" PREFIX:column="59">
		    <expr_stmt><expr><call><name PREFIX:line="538" PREFIX:column="21">app_start</name><argument_list PREFIX:line="538" PREFIX:column="30">()</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

	}</block></for>
    <comment type="block" PREFIX:line="541" PREFIX:column="5">/* end of forever loop */</comment>
}</block></function>


<function><type><name PREFIX:line="545" PREFIX:column="1">char</name></type> <name PREFIX:line="545" PREFIX:column="6">gethex</name><parameter_list PREFIX:line="545" PREFIX:column="12">(<param><decl><type><name PREFIX:line="545" PREFIX:column="13">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="546" PREFIX:column="1">{
    <decl_stmt><decl><type><name PREFIX:line="547" PREFIX:column="5">char</name></type> <name PREFIX:line="547" PREFIX:column="10">ah</name></decl>,<decl><type ref="prev"/><name PREFIX:line="547" PREFIX:column="13">al</name></decl>;</decl_stmt>

    <expr_stmt><expr><name PREFIX:line="549" PREFIX:column="5">ah</name> = <call><name PREFIX:line="549" PREFIX:column="10">getch</name><argument_list PREFIX:line="549" PREFIX:column="15">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="550" PREFIX:column="9">putch</name><argument_list PREFIX:line="550" PREFIX:column="14">(<argument><expr><name PREFIX:line="550" PREFIX:column="15">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="551" PREFIX:column="5">al</name> = <call><name PREFIX:line="551" PREFIX:column="10">getch</name><argument_list PREFIX:line="551" PREFIX:column="15">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="552" PREFIX:column="9">putch</name><argument_list PREFIX:line="552" PREFIX:column="14">(<argument><expr><name PREFIX:line="552" PREFIX:column="15">al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
	<if PREFIX:line="554" PREFIX:column="9">if<condition PREFIX:line="554" PREFIX:column="11">(<expr><name PREFIX:line="554" PREFIX:column="12">ah</name> &gt;= 'a'</expr>)</condition><then PREFIX:line="554" PREFIX:column="22">
		<expr_stmt><expr><name PREFIX:line="555" PREFIX:column="17">ah</name> = <name PREFIX:line="555" PREFIX:column="22">ah</name> - 'a' + 0x0a</expr>;</expr_stmt></then>
	<else PREFIX:line="556" PREFIX:column="9">else <if PREFIX:line="556" PREFIX:column="14">if<condition PREFIX:line="556" PREFIX:column="16">(<expr><name PREFIX:line="556" PREFIX:column="17">ah</name> &gt;= '0'</expr>)</condition><then PREFIX:line="556" PREFIX:column="27">
		<expr_stmt><expr><name PREFIX:line="557" PREFIX:column="17">ah</name> -= '0'</expr>;</expr_stmt></then></if></else></if>
    <if PREFIX:line="558" PREFIX:column="5">if<condition PREFIX:line="558" PREFIX:column="7">(<expr><name PREFIX:line="558" PREFIX:column="8">al</name> &gt;= 'a'</expr>)</condition><then PREFIX:line="558" PREFIX:column="18">
		<expr_stmt><expr><name PREFIX:line="559" PREFIX:column="17">al</name> = <name PREFIX:line="559" PREFIX:column="22">al</name> - 'a' + 0x0a</expr>;</expr_stmt></then>
	<else PREFIX:line="560" PREFIX:column="9">else <if PREFIX:line="560" PREFIX:column="14">if<condition PREFIX:line="560" PREFIX:column="16">(<expr><name PREFIX:line="560" PREFIX:column="17">al</name> &gt;= '0'</expr>)</condition><then PREFIX:line="560" PREFIX:column="27">
		<expr_stmt><expr><name PREFIX:line="561" PREFIX:column="17">al</name> -= '0'</expr>;</expr_stmt></then></if></else></if>

    <return PREFIX:line="563" PREFIX:column="5">return <expr PREFIX:line="563" PREFIX:column="12">(<name PREFIX:line="563" PREFIX:column="13">ah</name> &lt;&lt; 4) + <name PREFIX:line="563" PREFIX:column="24">al</name></expr>;</return>
}</block></function>


<function><type><name PREFIX:line="567" PREFIX:column="1">void</name></type> <name PREFIX:line="567" PREFIX:column="6">puthex</name><parameter_list PREFIX:line="567" PREFIX:column="12">(<param><decl><type><name PREFIX:line="567" PREFIX:column="13">char</name></type> <name PREFIX:line="567" PREFIX:column="18">ch</name></decl></param>)</parameter_list>
<block PREFIX:line="568" PREFIX:column="1">{
    <decl_stmt><decl><type><name PREFIX:line="569" PREFIX:column="5">char</name></type> <name PREFIX:line="569" PREFIX:column="10">ah</name></decl>,<decl><type ref="prev"/><name PREFIX:line="569" PREFIX:column="13">al</name></decl>;</decl_stmt>

    <expr_stmt><expr><name PREFIX:line="571" PREFIX:column="5">ah</name> = (<name PREFIX:line="571" PREFIX:column="11">ch</name> &amp; 0xf0) &gt;&gt; 4</expr>;</expr_stmt>
	<if PREFIX:line="572" PREFIX:column="9">if<condition PREFIX:line="572" PREFIX:column="11">(<expr><name PREFIX:line="572" PREFIX:column="12">ah</name> &gt;= 0x0a</expr>)</condition><then PREFIX:line="572" PREFIX:column="23">
		<expr_stmt><expr><name PREFIX:line="573" PREFIX:column="17">ah</name> = <name PREFIX:line="573" PREFIX:column="22">ah</name> - 0x0a + 'a'</expr>;</expr_stmt></then>
	<else PREFIX:line="574" PREFIX:column="9">else
		<expr_stmt><expr><name PREFIX:line="575" PREFIX:column="17">ah</name> += '0'</expr>;</expr_stmt></else></if>

    <expr_stmt><expr><name PREFIX:line="577" PREFIX:column="5">al</name> = (<name PREFIX:line="577" PREFIX:column="11">ch</name> &amp; 0x0f)</expr>;</expr_stmt>
	<if PREFIX:line="578" PREFIX:column="9">if<condition PREFIX:line="578" PREFIX:column="11">(<expr><name PREFIX:line="578" PREFIX:column="12">al</name> &gt;= 0x0a</expr>)</condition><then PREFIX:line="578" PREFIX:column="23">
		<expr_stmt><expr><name PREFIX:line="579" PREFIX:column="17">al</name> = <name PREFIX:line="579" PREFIX:column="22">al</name> - 0x0a + 'a'</expr>;</expr_stmt></then>
	<else PREFIX:line="580" PREFIX:column="9">else
		<expr_stmt><expr><name PREFIX:line="581" PREFIX:column="17">al</name> += '0'</expr>;</expr_stmt></else></if>

    <expr_stmt><expr><call><name PREFIX:line="583" PREFIX:column="5">putch</name><argument_list PREFIX:line="583" PREFIX:column="10">(<argument><expr><name PREFIX:line="583" PREFIX:column="11">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name PREFIX:line="584" PREFIX:column="5">putch</name><argument_list PREFIX:line="584" PREFIX:column="10">(<argument><expr><name PREFIX:line="584" PREFIX:column="11">al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name PREFIX:line="588" PREFIX:column="1">void</name></type> <name PREFIX:line="588" PREFIX:column="6">putch</name><parameter_list PREFIX:line="588" PREFIX:column="11">(<param><decl><type><name PREFIX:line="588" PREFIX:column="12">char</name></type> <name PREFIX:line="588" PREFIX:column="17">ch</name></decl></param>)</parameter_list>
<block PREFIX:line="589" PREFIX:column="1">{
    <while PREFIX:line="590" PREFIX:column="5">while <condition PREFIX:line="590" PREFIX:column="11">(<expr PREFIX:line="590" PREFIX:column="12">!(<name PREFIX:line="590" PREFIX:column="14">UCSR0A</name> &amp; <call><name PREFIX:line="590" PREFIX:column="23">_BV</name><argument_list PREFIX:line="590" PREFIX:column="26">(<argument><expr><name PREFIX:line="590" PREFIX:column="27">UDRE0</name></expr></argument>)</argument_list></call>)</expr>)</condition><empty_stmt PREFIX:line="590" PREFIX:column="35">;</empty_stmt></while>
    <expr_stmt><expr><name PREFIX:line="591" PREFIX:column="5">UDR0</name> = <name PREFIX:line="591" PREFIX:column="12">ch</name></expr>;</expr_stmt>
}</block></function>




<function><type><name PREFIX:line="597" PREFIX:column="1">char</name></type> <name PREFIX:line="597" PREFIX:column="6">getch</name><parameter_list PREFIX:line="597" PREFIX:column="11">(<param><decl><type><name PREFIX:line="597" PREFIX:column="12">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="598" PREFIX:column="1">{
    <decl_stmt><decl><type><name PREFIX:line="599" PREFIX:column="5">uint32_t</name></type> <name PREFIX:line="599" PREFIX:column="14">count</name> <init PREFIX:line="599" PREFIX:column="20">= <expr PREFIX:line="599" PREFIX:column="22">0</expr></init></decl>;</decl_stmt>

<cpp:ifdef PREFIX:line="601" PREFIX:column="1">#<cpp:directive PREFIX:line="601" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="601" PREFIX:column="8">ADABOOT</name></cpp:ifdef>
	<expr_stmt><expr><name PREFIX:line="602" PREFIX:column="9">LED_PORT</name> &amp;= ~<call><name PREFIX:line="602" PREFIX:column="22">_BV</name><argument_list PREFIX:line="602" PREFIX:column="25">(<argument><expr><name PREFIX:line="602" PREFIX:column="26">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="line" PREFIX:line="602" PREFIX:column="41">// toggle LED to show activity - BBR/LF 10/3/2007 &amp; 9/13/2008</comment>
<cpp:endif PREFIX:line="603" PREFIX:column="1">#<cpp:directive PREFIX:line="603" PREFIX:column="2">endif</cpp:directive></cpp:endif>

    <while PREFIX:line="605" PREFIX:column="5">while<condition PREFIX:line="605" PREFIX:column="10">(<expr PREFIX:line="605" PREFIX:column="11">!(<name PREFIX:line="605" PREFIX:column="13">UCSR0A</name> &amp; <call><name PREFIX:line="605" PREFIX:column="22">_BV</name><argument_list PREFIX:line="605" PREFIX:column="25">(<argument><expr><name PREFIX:line="605" PREFIX:column="26">RXC0</name></expr></argument>)</argument_list></call>)</expr>)</condition>
	<block PREFIX:line="606" PREFIX:column="9">{
    	<comment type="block" PREFIX:line="607" PREFIX:column="9">/* 20060803 DojoCorp:: Addon coming from the previous Bootloader*/</comment>               
    	<comment type="block" PREFIX:line="608" PREFIX:column="9">/* HACKME:: here is a good place to count times*/</comment>
    	<expr_stmt><expr><name PREFIX:line="609" PREFIX:column="9">count</name>++</expr>;</expr_stmt>
    	<if PREFIX:line="610" PREFIX:column="9">if <condition PREFIX:line="610" PREFIX:column="12">(<expr><name PREFIX:line="610" PREFIX:column="13">count</name> &gt; <name PREFIX:line="610" PREFIX:column="21">MAX_TIME_COUNT</name></expr>)</condition><then PREFIX:line="610" PREFIX:column="36">
    		<expr_stmt><expr><call><name PREFIX:line="611" PREFIX:column="17">app_start</name><argument_list PREFIX:line="611" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt></then></if>
     }</block></while>

<cpp:ifdef PREFIX:line="614" PREFIX:column="1">#<cpp:directive PREFIX:line="614" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="614" PREFIX:column="8">ADABOOT</name></cpp:ifdef>
	<expr_stmt><expr><name PREFIX:line="615" PREFIX:column="9">LED_PORT</name> |= <call><name PREFIX:line="615" PREFIX:column="21">_BV</name><argument_list PREFIX:line="615" PREFIX:column="24">(<argument><expr><name PREFIX:line="615" PREFIX:column="25">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="line" PREFIX:line="615" PREFIX:column="40">// toggle LED to show activity - BBR/LF 10/3/2007 &amp; 9/13/2008</comment>
<cpp:endif PREFIX:line="616" PREFIX:column="1">#<cpp:directive PREFIX:line="616" PREFIX:column="2">endif</cpp:directive></cpp:endif>

    <return PREFIX:line="618" PREFIX:column="5">return <expr><name PREFIX:line="618" PREFIX:column="12">UDR0</name></expr>;</return>
}</block></function>


<function><type><name PREFIX:line="622" PREFIX:column="1">void</name></type> <name PREFIX:line="622" PREFIX:column="6">getNch</name><parameter_list PREFIX:line="622" PREFIX:column="12">(<param><decl><type><name PREFIX:line="622" PREFIX:column="13">uint8_t</name></type> <name PREFIX:line="622" PREFIX:column="21">count</name></decl></param>)</parameter_list>
<block PREFIX:line="623" PREFIX:column="1">{
    <decl_stmt><decl><type><name PREFIX:line="624" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="624" PREFIX:column="13">i</name></decl>;</decl_stmt>
    <for PREFIX:line="625" PREFIX:column="5">for(<init><expr><name PREFIX:line="625" PREFIX:column="9">i</name>=0</expr>;</init><condition><expr><name PREFIX:line="625" PREFIX:column="13">i</name>&lt;<name PREFIX:line="625" PREFIX:column="15">count</name></expr>;</condition><incr><expr><name PREFIX:line="625" PREFIX:column="21">i</name>++</expr></incr>)
	<block PREFIX:line="626" PREFIX:column="9">{
		<while PREFIX:line="627" PREFIX:column="17">while<condition PREFIX:line="627" PREFIX:column="22">(<expr PREFIX:line="627" PREFIX:column="23">!(<name PREFIX:line="627" PREFIX:column="25">UCSR0A</name> &amp; <call><name PREFIX:line="627" PREFIX:column="34">_BV</name><argument_list PREFIX:line="627" PREFIX:column="37">(<argument><expr><name PREFIX:line="627" PREFIX:column="38">RXC0</name></expr></argument>)</argument_list></call>)</expr>)</condition><empty_stmt PREFIX:line="627" PREFIX:column="45">;</empty_stmt></while>
		<expr_stmt><expr><name PREFIX:line="628" PREFIX:column="17">UDR0</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>


<function><type><name PREFIX:line="633" PREFIX:column="1">void</name></type> <name PREFIX:line="633" PREFIX:column="6">byte_response</name><parameter_list PREFIX:line="633" PREFIX:column="19">(<param><decl><type><name PREFIX:line="633" PREFIX:column="20">uint8_t</name></type> <name PREFIX:line="633" PREFIX:column="28">val</name></decl></param>)</parameter_list>
<block PREFIX:line="634" PREFIX:column="1">{
    <if PREFIX:line="635" PREFIX:column="5">if <condition PREFIX:line="635" PREFIX:column="8">(<expr><call><name PREFIX:line="635" PREFIX:column="9">getch</name><argument_list PREFIX:line="635" PREFIX:column="14">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="635" PREFIX:column="24">
	<block PREFIX:line="636" PREFIX:column="9">{
		<expr_stmt><expr><call><name PREFIX:line="637" PREFIX:column="17">putch</name><argument_list PREFIX:line="637" PREFIX:column="22">(<argument><expr PREFIX:line="637" PREFIX:column="23">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="638" PREFIX:column="17">putch</name><argument_list PREFIX:line="638" PREFIX:column="22">(<argument><expr><name PREFIX:line="638" PREFIX:column="23">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="639" PREFIX:column="17">putch</name><argument_list PREFIX:line="639" PREFIX:column="22">(<argument><expr PREFIX:line="639" PREFIX:column="23">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
	<else PREFIX:line="641" PREFIX:column="9">else
	<block PREFIX:line="642" PREFIX:column="9">{
		<if PREFIX:line="643" PREFIX:column="17">if <condition PREFIX:line="643" PREFIX:column="20">(<expr PREFIX:line="643" PREFIX:column="21">++<name PREFIX:line="643" PREFIX:column="23">error_count</name> == <name PREFIX:line="643" PREFIX:column="38">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="643" PREFIX:column="54">
		    <expr_stmt><expr><call><name PREFIX:line="644" PREFIX:column="21">app_start</name><argument_list PREFIX:line="644" PREFIX:column="30">()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>
}</block></function>


<function><type><name PREFIX:line="649" PREFIX:column="1">void</name></type> <name PREFIX:line="649" PREFIX:column="6">nothing_response</name><parameter_list PREFIX:line="649" PREFIX:column="22">(<param><decl><type><name PREFIX:line="649" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="650" PREFIX:column="1">{
    <if PREFIX:line="651" PREFIX:column="5">if <condition PREFIX:line="651" PREFIX:column="8">(<expr><call><name PREFIX:line="651" PREFIX:column="9">getch</name><argument_list PREFIX:line="651" PREFIX:column="14">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="651" PREFIX:column="24">
	<block PREFIX:line="652" PREFIX:column="9">{
		<expr_stmt><expr><call><name PREFIX:line="653" PREFIX:column="17">putch</name><argument_list PREFIX:line="653" PREFIX:column="22">(<argument><expr PREFIX:line="653" PREFIX:column="23">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="654" PREFIX:column="17">putch</name><argument_list PREFIX:line="654" PREFIX:column="22">(<argument><expr PREFIX:line="654" PREFIX:column="23">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
	<else PREFIX:line="656" PREFIX:column="9">else
	<block PREFIX:line="657" PREFIX:column="9">{
		<if PREFIX:line="658" PREFIX:column="17">if <condition PREFIX:line="658" PREFIX:column="20">(<expr PREFIX:line="658" PREFIX:column="21">++<name PREFIX:line="658" PREFIX:column="23">error_count</name> == <name PREFIX:line="658" PREFIX:column="38">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="658" PREFIX:column="54">
		    <expr_stmt><expr><call><name PREFIX:line="659" PREFIX:column="21">app_start</name><argument_list PREFIX:line="659" PREFIX:column="30">()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>
}</block></function>

<cpp:ifdef PREFIX:line="663" PREFIX:column="1">#<cpp:directive PREFIX:line="663" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="663" PREFIX:column="8">ADABOOT</name></cpp:ifdef>

<function><type><name PREFIX:line="665" PREFIX:column="1">void</name></type> <name PREFIX:line="665" PREFIX:column="6">flash_led</name><parameter_list PREFIX:line="665" PREFIX:column="15">(<param><decl><type><name PREFIX:line="665" PREFIX:column="16">uint8_t</name></type> <name PREFIX:line="665" PREFIX:column="24">count</name></decl></param>)</parameter_list>
<block PREFIX:line="666" PREFIX:column="1">{
    <comment type="block" PREFIX:line="667" PREFIX:column="5">/* flash onboard LED count times to signal entering of bootloader */</comment>
	<comment type="block" PREFIX:line="668" PREFIX:column="9">/* l needs to be volatile or the delay loops below might get      */</comment>
	<comment type="block" PREFIX:line="669" PREFIX:column="9">/* optimized away if compiling with optimizations (DAM).          */</comment>
	
    <decl_stmt><decl><type><specifier PREFIX:line="671" PREFIX:column="5">volatile</specifier> <name PREFIX:line="671" PREFIX:column="14">uint32_t</name></type> <name PREFIX:line="671" PREFIX:column="23">l</name></decl>;</decl_stmt>

    <if PREFIX:line="673" PREFIX:column="5">if <condition PREFIX:line="673" PREFIX:column="8">(<expr><name PREFIX:line="673" PREFIX:column="9">count</name> == 0</expr>)</condition><then PREFIX:line="673" PREFIX:column="20"> <block PREFIX:line="673" PREFIX:column="21">{
      <expr_stmt><expr><name PREFIX:line="674" PREFIX:column="7">count</name> = <name PREFIX:line="674" PREFIX:column="15">ADABOOT</name></expr>;</expr_stmt>
    }</block></then></if>
    

	<decl_stmt><decl><type><name PREFIX:line="678" PREFIX:column="9">int8_t</name></type> <name PREFIX:line="678" PREFIX:column="16">i</name></decl>;</decl_stmt>
    <for PREFIX:line="679" PREFIX:column="5">for (<init><expr><name PREFIX:line="679" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="679" PREFIX:column="17">i</name> &lt; <name PREFIX:line="679" PREFIX:column="21">count</name></expr>;</condition> <incr><expr PREFIX:line="679" PREFIX:column="28">++<name PREFIX:line="679" PREFIX:column="30">i</name></expr></incr>) <block PREFIX:line="679" PREFIX:column="33">{
		<expr_stmt><expr><name PREFIX:line="680" PREFIX:column="17">LED_PORT</name> |= <call><name PREFIX:line="680" PREFIX:column="29">_BV</name><argument_list PREFIX:line="680" PREFIX:column="32">(<argument><expr><name PREFIX:line="680" PREFIX:column="33">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>					<comment type="line" PREFIX:line="680" PREFIX:column="73">// LED on</comment>
		<for PREFIX:line="681" PREFIX:column="17">for(<init><expr><name PREFIX:line="681" PREFIX:column="21">l</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="681" PREFIX:column="28">l</name> &lt; (<name PREFIX:line="681" PREFIX:column="33">F_CPU</name> / 1000)</expr>;</condition> <incr><expr PREFIX:line="681" PREFIX:column="48">++<name PREFIX:line="681" PREFIX:column="50">l</name></expr></incr>)<empty_stmt PREFIX:line="681" PREFIX:column="52">;</empty_stmt></for>		<comment type="line" PREFIX:line="681" PREFIX:column="65">// delay NGvalue was 1000 for both loops - BBR</comment>
		<expr_stmt><expr><name PREFIX:line="682" PREFIX:column="17">LED_PORT</name> &amp;= ~<call><name PREFIX:line="682" PREFIX:column="30">_BV</name><argument_list PREFIX:line="682" PREFIX:column="33">(<argument><expr><name PREFIX:line="682" PREFIX:column="34">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>					<comment type="line" PREFIX:line="682" PREFIX:column="73">// LED off</comment>
		<for PREFIX:line="683" PREFIX:column="17">for(<init><expr><name PREFIX:line="683" PREFIX:column="21">l</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="683" PREFIX:column="28">l</name> &lt; (<name PREFIX:line="683" PREFIX:column="33">F_CPU</name> / 250)</expr>;</condition> <incr><expr PREFIX:line="683" PREFIX:column="47">++<name PREFIX:line="683" PREFIX:column="49">l</name></expr></incr>)<empty_stmt PREFIX:line="683" PREFIX:column="51">;</empty_stmt></for>		<comment type="line" PREFIX:line="683" PREFIX:column="65">// delay asymmteric for ADA BOOT BBR </comment>
	}</block></for>

	<for PREFIX:line="686" PREFIX:column="9">for(<init><expr><name PREFIX:line="686" PREFIX:column="13">l</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="686" PREFIX:column="20">l</name> &lt; (<name PREFIX:line="686" PREFIX:column="25">F_CPU</name> / 100)</expr>;</condition> <incr><expr PREFIX:line="686" PREFIX:column="39">++<name PREFIX:line="686" PREFIX:column="41">l</name></expr></incr>)<empty_stmt PREFIX:line="686" PREFIX:column="43">;</empty_stmt></for>		    <comment type="line" PREFIX:line="686" PREFIX:column="61">// pause ADA BOOT BBR </comment>
		
}</block></function>

<cpp:else PREFIX:line="690" PREFIX:column="1">#<cpp:directive PREFIX:line="690" PREFIX:column="2">else</cpp:directive></cpp:else>

<function><type><name PREFIX:line="692" PREFIX:column="1">void</name></type> <name PREFIX:line="692" PREFIX:column="6">flash_led</name><parameter_list PREFIX:line="692" PREFIX:column="15">(<param><decl><type><name PREFIX:line="692" PREFIX:column="16">uint8_t</name></type> <name PREFIX:line="692" PREFIX:column="24">count</name></decl></param>)</parameter_list>
<block PREFIX:line="693" PREFIX:column="1">{
    <comment type="block" PREFIX:line="694" PREFIX:column="5">/* flash onboard LED three times to signal entering of bootloader */</comment>
	<comment type="block" PREFIX:line="695" PREFIX:column="9">/* l needs to be volatile or the delay loops below might get
	optimized away if compiling with optimizations (DAM). */</comment>
    <decl_stmt><decl><type><specifier PREFIX:line="697" PREFIX:column="5">volatile</specifier> <name PREFIX:line="697" PREFIX:column="14">uint32_t</name></type> <name PREFIX:line="697" PREFIX:column="23">l</name></decl>;</decl_stmt>

    <if PREFIX:line="699" PREFIX:column="5">if <condition PREFIX:line="699" PREFIX:column="8">(<expr><name PREFIX:line="699" PREFIX:column="9">count</name> == 0</expr>)</condition><then PREFIX:line="699" PREFIX:column="20"> <block PREFIX:line="699" PREFIX:column="21">{
      <expr_stmt><expr><name PREFIX:line="700" PREFIX:column="7">count</name> = 3</expr>;</expr_stmt>
    }</block></then></if>
    
	<decl_stmt><decl><type><name PREFIX:line="703" PREFIX:column="9">int8_t</name></type> <name PREFIX:line="703" PREFIX:column="16">i</name></decl>;</decl_stmt>
    <for PREFIX:line="704" PREFIX:column="5">for (<init><expr><name PREFIX:line="704" PREFIX:column="10">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="704" PREFIX:column="17">i</name> &lt; <name PREFIX:line="704" PREFIX:column="21">count</name></expr>;</condition> <incr><expr PREFIX:line="704" PREFIX:column="28">++<name PREFIX:line="704" PREFIX:column="30">i</name></expr></incr>) <block PREFIX:line="704" PREFIX:column="33">{
		<expr_stmt><expr><name PREFIX:line="705" PREFIX:column="17">LED_PORT</name> |= <call><name PREFIX:line="705" PREFIX:column="29">_BV</name><argument_list PREFIX:line="705" PREFIX:column="32">(<argument><expr><name PREFIX:line="705" PREFIX:column="33">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for PREFIX:line="706" PREFIX:column="17">for(<init><expr><name PREFIX:line="706" PREFIX:column="21">l</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="706" PREFIX:column="28">l</name> &lt; (<name PREFIX:line="706" PREFIX:column="33">F_CPU</name> / 1000)</expr>;</condition> <incr><expr PREFIX:line="706" PREFIX:column="48">++<name PREFIX:line="706" PREFIX:column="50">l</name></expr></incr>)<empty_stmt PREFIX:line="706" PREFIX:column="52">;</empty_stmt></for>
		<expr_stmt><expr><name PREFIX:line="707" PREFIX:column="17">LED_PORT</name> &amp;= ~<call><name PREFIX:line="707" PREFIX:column="30">_BV</name><argument_list PREFIX:line="707" PREFIX:column="33">(<argument><expr><name PREFIX:line="707" PREFIX:column="34">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for PREFIX:line="708" PREFIX:column="17">for(<init><expr><name PREFIX:line="708" PREFIX:column="21">l</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="708" PREFIX:column="28">l</name> &lt; (<name PREFIX:line="708" PREFIX:column="33">F_CPU</name> / 1000)</expr>;</condition> <incr><expr PREFIX:line="708" PREFIX:column="48">++<name PREFIX:line="708" PREFIX:column="50">l</name></expr></incr>)<empty_stmt PREFIX:line="708" PREFIX:column="52">;</empty_stmt></for> 
	}</block></for>
		
}</block></function>


<cpp:endif PREFIX:line="714" PREFIX:column="1">#<cpp:directive PREFIX:line="714" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="717" PREFIX:column="1">/* end of file ATmegaBOOT.c */</comment>
</unit>
