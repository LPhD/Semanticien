<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/arduino/HardwareSerial.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  HardwareSerial.h - Hardware serial library for Wiring
  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Modified 28 September 2010 by Mark Sproul
  Modified 14 August 2012 by Alarus
  Modified 3 December 2013 by Matthijs Kooijman
*/</comment>

<cpp:ifndef PREFIX:line="24" PREFIX:column="1">#<cpp:directive PREFIX:line="24" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="24" PREFIX:column="9">HardwareSerial_h</name></cpp:ifndef>
<cpp:define PREFIX:line="25" PREFIX:column="1">#<cpp:directive PREFIX:line="25" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="25" PREFIX:column="9">HardwareSerial_h</name></cpp:macro></cpp:define>

<cpp:include PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include PREFIX:line="29" PREFIX:column="1">#<cpp:directive PREFIX:line="29" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="29" PREFIX:column="10">"Stream.h"</cpp:file></cpp:include>

<comment type="line" PREFIX:line="31" PREFIX:column="1">// Define ants and variables for buffering incoming serial data.  We're</comment>
<comment type="line" PREFIX:line="32" PREFIX:column="1">// using a ring buffer (I think), in which head is the index of the location</comment>
<comment type="line" PREFIX:line="33" PREFIX:column="1">// to which to write the next incoming character and tail is the index of the</comment>
<comment type="line" PREFIX:line="34" PREFIX:column="1">// location from which to read.</comment>
<comment type="line" PREFIX:line="35" PREFIX:column="1">// NOTE: a "power of 2" buffer size is reccomended to dramatically</comment>
<comment type="line" PREFIX:line="36" PREFIX:column="1">//       optimize all the modulo operations for ring buffers.</comment>
<cpp:if PREFIX:line="37" PREFIX:column="1">#<cpp:directive PREFIX:line="37" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="37" PREFIX:column="5">!(<call><name PREFIX:line="37" PREFIX:column="7">defined</name><argument_list PREFIX:line="37" PREFIX:column="14">(<argument><expr><name PREFIX:line="37" PREFIX:column="15">SERIAL_TX_BUFFER_SIZE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="37" PREFIX:column="41">defined</name><argument_list PREFIX:line="37" PREFIX:column="48">(<argument><expr><name PREFIX:line="37" PREFIX:column="49">SERIAL_RX_BUFFER_SIZE</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:if PREFIX:line="38" PREFIX:column="1">#<cpp:directive PREFIX:line="38" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="38" PREFIX:column="5">(<name PREFIX:line="38" PREFIX:column="6">RAMEND</name> &lt; 1000)</expr></cpp:if>
<cpp:define PREFIX:line="39" PREFIX:column="1">#<cpp:directive PREFIX:line="39" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="39" PREFIX:column="9">SERIAL_TX_BUFFER_SIZE</name></cpp:macro> <cpp:value PREFIX:line="39" PREFIX:column="31">16</cpp:value></cpp:define>
<cpp:define PREFIX:line="40" PREFIX:column="1">#<cpp:directive PREFIX:line="40" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="40" PREFIX:column="9">SERIAL_RX_BUFFER_SIZE</name></cpp:macro> <cpp:value PREFIX:line="40" PREFIX:column="31">16</cpp:value></cpp:define>
<cpp:else PREFIX:line="41" PREFIX:column="1">#<cpp:directive PREFIX:line="41" PREFIX:column="2">else</cpp:directive></cpp:else>
<cpp:define PREFIX:line="42" PREFIX:column="1">#<cpp:directive PREFIX:line="42" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="42" PREFIX:column="9">SERIAL_TX_BUFFER_SIZE</name></cpp:macro> <cpp:value PREFIX:line="42" PREFIX:column="31">64</cpp:value></cpp:define>
<cpp:define PREFIX:line="43" PREFIX:column="1">#<cpp:directive PREFIX:line="43" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="43" PREFIX:column="9">SERIAL_RX_BUFFER_SIZE</name></cpp:macro> <cpp:value PREFIX:line="43" PREFIX:column="31">64</cpp:value></cpp:define>
<cpp:endif PREFIX:line="44" PREFIX:column="1">#<cpp:directive PREFIX:line="44" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif PREFIX:line="45" PREFIX:column="1">#<cpp:directive PREFIX:line="45" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="46" PREFIX:column="1">#<cpp:directive PREFIX:line="46" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="46" PREFIX:column="5">(<name PREFIX:line="46" PREFIX:column="6">SERIAL_TX_BUFFER_SIZE</name>&gt;256)</expr></cpp:if>
<typedef PREFIX:line="47" PREFIX:column="1">typedef <type><name PREFIX:line="47" PREFIX:column="9">uint16_t</name></type> <name PREFIX:line="47" PREFIX:column="18">tx_buffer_index_t</name>;</typedef>
<cpp:else PREFIX:line="48" PREFIX:column="1">#<cpp:directive PREFIX:line="48" PREFIX:column="2">else</cpp:directive></cpp:else>
<typedef PREFIX:line="49" PREFIX:column="1">typedef <type><name PREFIX:line="49" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="49" PREFIX:column="17">tx_buffer_index_t</name>;</typedef>
<cpp:endif PREFIX:line="50" PREFIX:column="1">#<cpp:directive PREFIX:line="50" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="51" PREFIX:column="1">#<cpp:directive PREFIX:line="51" PREFIX:column="2">if</cpp:directive>  <expr PREFIX:line="51" PREFIX:column="6">(<name PREFIX:line="51" PREFIX:column="7">SERIAL_RX_BUFFER_SIZE</name>&gt;256)</expr></cpp:if>
<typedef PREFIX:line="52" PREFIX:column="1">typedef <type><name PREFIX:line="52" PREFIX:column="9">uint16_t</name></type> <name PREFIX:line="52" PREFIX:column="18">rx_buffer_index_t</name>;</typedef>
<cpp:else PREFIX:line="53" PREFIX:column="1">#<cpp:directive PREFIX:line="53" PREFIX:column="2">else</cpp:directive></cpp:else>
<typedef PREFIX:line="54" PREFIX:column="1">typedef <type><name PREFIX:line="54" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="54" PREFIX:column="17">rx_buffer_index_t</name>;</typedef>
<cpp:endif PREFIX:line="55" PREFIX:column="1">#<cpp:directive PREFIX:line="55" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" PREFIX:line="57" PREFIX:column="1">// Define config for Serial.begin(baud, config);</comment>
<cpp:define PREFIX:line="58" PREFIX:column="1">#<cpp:directive PREFIX:line="58" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="58" PREFIX:column="9">SERIAL_5N1</name></cpp:macro> <cpp:value PREFIX:line="58" PREFIX:column="20">0x00</cpp:value></cpp:define>
<cpp:define PREFIX:line="59" PREFIX:column="1">#<cpp:directive PREFIX:line="59" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="59" PREFIX:column="9">SERIAL_6N1</name></cpp:macro> <cpp:value PREFIX:line="59" PREFIX:column="20">0x02</cpp:value></cpp:define>
<cpp:define PREFIX:line="60" PREFIX:column="1">#<cpp:directive PREFIX:line="60" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="60" PREFIX:column="9">SERIAL_7N1</name></cpp:macro> <cpp:value PREFIX:line="60" PREFIX:column="20">0x04</cpp:value></cpp:define>
<cpp:define PREFIX:line="61" PREFIX:column="1">#<cpp:directive PREFIX:line="61" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="61" PREFIX:column="9">SERIAL_8N1</name></cpp:macro> <cpp:value PREFIX:line="61" PREFIX:column="20">0x06</cpp:value></cpp:define>
<cpp:define PREFIX:line="62" PREFIX:column="1">#<cpp:directive PREFIX:line="62" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="62" PREFIX:column="9">SERIAL_5N2</name></cpp:macro> <cpp:value PREFIX:line="62" PREFIX:column="20">0x08</cpp:value></cpp:define>
<cpp:define PREFIX:line="63" PREFIX:column="1">#<cpp:directive PREFIX:line="63" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="63" PREFIX:column="9">SERIAL_6N2</name></cpp:macro> <cpp:value PREFIX:line="63" PREFIX:column="20">0x0A</cpp:value></cpp:define>
<cpp:define PREFIX:line="64" PREFIX:column="1">#<cpp:directive PREFIX:line="64" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="64" PREFIX:column="9">SERIAL_7N2</name></cpp:macro> <cpp:value PREFIX:line="64" PREFIX:column="20">0x0C</cpp:value></cpp:define>
<cpp:define PREFIX:line="65" PREFIX:column="1">#<cpp:directive PREFIX:line="65" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="65" PREFIX:column="9">SERIAL_8N2</name></cpp:macro> <cpp:value PREFIX:line="65" PREFIX:column="20">0x0E</cpp:value></cpp:define>
<cpp:define PREFIX:line="66" PREFIX:column="1">#<cpp:directive PREFIX:line="66" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="66" PREFIX:column="9">SERIAL_5E1</name></cpp:macro> <cpp:value PREFIX:line="66" PREFIX:column="20">0x20</cpp:value></cpp:define>
<cpp:define PREFIX:line="67" PREFIX:column="1">#<cpp:directive PREFIX:line="67" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="67" PREFIX:column="9">SERIAL_6E1</name></cpp:macro> <cpp:value PREFIX:line="67" PREFIX:column="20">0x22</cpp:value></cpp:define>
<cpp:define PREFIX:line="68" PREFIX:column="1">#<cpp:directive PREFIX:line="68" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="68" PREFIX:column="9">SERIAL_7E1</name></cpp:macro> <cpp:value PREFIX:line="68" PREFIX:column="20">0x24</cpp:value></cpp:define>
<cpp:define PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="69" PREFIX:column="9">SERIAL_8E1</name></cpp:macro> <cpp:value PREFIX:line="69" PREFIX:column="20">0x26</cpp:value></cpp:define>
<cpp:define PREFIX:line="70" PREFIX:column="1">#<cpp:directive PREFIX:line="70" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="70" PREFIX:column="9">SERIAL_5E2</name></cpp:macro> <cpp:value PREFIX:line="70" PREFIX:column="20">0x28</cpp:value></cpp:define>
<cpp:define PREFIX:line="71" PREFIX:column="1">#<cpp:directive PREFIX:line="71" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="71" PREFIX:column="9">SERIAL_6E2</name></cpp:macro> <cpp:value PREFIX:line="71" PREFIX:column="20">0x2A</cpp:value></cpp:define>
<cpp:define PREFIX:line="72" PREFIX:column="1">#<cpp:directive PREFIX:line="72" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="72" PREFIX:column="9">SERIAL_7E2</name></cpp:macro> <cpp:value PREFIX:line="72" PREFIX:column="20">0x2C</cpp:value></cpp:define>
<cpp:define PREFIX:line="73" PREFIX:column="1">#<cpp:directive PREFIX:line="73" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="73" PREFIX:column="9">SERIAL_8E2</name></cpp:macro> <cpp:value PREFIX:line="73" PREFIX:column="20">0x2E</cpp:value></cpp:define>
<cpp:define PREFIX:line="74" PREFIX:column="1">#<cpp:directive PREFIX:line="74" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="74" PREFIX:column="9">SERIAL_5O1</name></cpp:macro> <cpp:value PREFIX:line="74" PREFIX:column="20">0x30</cpp:value></cpp:define>
<cpp:define PREFIX:line="75" PREFIX:column="1">#<cpp:directive PREFIX:line="75" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="75" PREFIX:column="9">SERIAL_6O1</name></cpp:macro> <cpp:value PREFIX:line="75" PREFIX:column="20">0x32</cpp:value></cpp:define>
<cpp:define PREFIX:line="76" PREFIX:column="1">#<cpp:directive PREFIX:line="76" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="76" PREFIX:column="9">SERIAL_7O1</name></cpp:macro> <cpp:value PREFIX:line="76" PREFIX:column="20">0x34</cpp:value></cpp:define>
<cpp:define PREFIX:line="77" PREFIX:column="1">#<cpp:directive PREFIX:line="77" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="77" PREFIX:column="9">SERIAL_8O1</name></cpp:macro> <cpp:value PREFIX:line="77" PREFIX:column="20">0x36</cpp:value></cpp:define>
<cpp:define PREFIX:line="78" PREFIX:column="1">#<cpp:directive PREFIX:line="78" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="78" PREFIX:column="9">SERIAL_5O2</name></cpp:macro> <cpp:value PREFIX:line="78" PREFIX:column="20">0x38</cpp:value></cpp:define>
<cpp:define PREFIX:line="79" PREFIX:column="1">#<cpp:directive PREFIX:line="79" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="79" PREFIX:column="9">SERIAL_6O2</name></cpp:macro> <cpp:value PREFIX:line="79" PREFIX:column="20">0x3A</cpp:value></cpp:define>
<cpp:define PREFIX:line="80" PREFIX:column="1">#<cpp:directive PREFIX:line="80" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="80" PREFIX:column="9">SERIAL_7O2</name></cpp:macro> <cpp:value PREFIX:line="80" PREFIX:column="20">0x3C</cpp:value></cpp:define>
<cpp:define PREFIX:line="81" PREFIX:column="1">#<cpp:directive PREFIX:line="81" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="81" PREFIX:column="9">SERIAL_8O2</name></cpp:macro> <cpp:value PREFIX:line="81" PREFIX:column="20">0x3E</cpp:value></cpp:define>

<class PREFIX:line="83" PREFIX:column="1">class <name PREFIX:line="83" PREFIX:column="7">HardwareSerial</name> <super PREFIX:line="83" PREFIX:column="22">: <specifier PREFIX:line="83" PREFIX:column="24">public</specifier> <name PREFIX:line="83" PREFIX:column="31">Stream</name></super>
<block PREFIX:line="84" PREFIX:column="1">{<private type="default" PREFIX:line="84" PREFIX:column="2">
  </private><protected PREFIX:line="85" PREFIX:column="3">protected:
    <decl_stmt><decl><type><specifier PREFIX:line="86" PREFIX:column="5">volatile</specifier> <name PREFIX:line="86" PREFIX:column="14">uint8_t</name> *</type>  <name PREFIX:line="86" PREFIX:column="25">_ubrrh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="87" PREFIX:column="5">volatile</specifier> <name PREFIX:line="87" PREFIX:column="14">uint8_t</name> *</type>  <name PREFIX:line="87" PREFIX:column="25">_ubrrl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="88" PREFIX:column="5">volatile</specifier> <name PREFIX:line="88" PREFIX:column="14">uint8_t</name> *</type>  <name PREFIX:line="88" PREFIX:column="25">_ucsra</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="89" PREFIX:column="5">volatile</specifier> <name PREFIX:line="89" PREFIX:column="14">uint8_t</name> *</type>  <name PREFIX:line="89" PREFIX:column="25">_ucsrb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="90" PREFIX:column="5">volatile</specifier> <name PREFIX:line="90" PREFIX:column="14">uint8_t</name> *</type>  <name PREFIX:line="90" PREFIX:column="25">_ucsrc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="91" PREFIX:column="5">volatile</specifier> <name PREFIX:line="91" PREFIX:column="14">uint8_t</name> *</type>  <name PREFIX:line="91" PREFIX:column="25">_udr</name></decl>;</decl_stmt>
    <comment type="line" PREFIX:line="92" PREFIX:column="5">// Has any byte been written to the UART since begin()</comment>
    <decl_stmt><decl><type><name PREFIX:line="93" PREFIX:column="5">bool</name></type> <name PREFIX:line="93" PREFIX:column="10">_written</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier PREFIX:line="95" PREFIX:column="5">volatile</specifier> <name PREFIX:line="95" PREFIX:column="14">rx_buffer_index_t</name></type> <name PREFIX:line="95" PREFIX:column="32">_rx_buffer_head</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="96" PREFIX:column="5">volatile</specifier> <name PREFIX:line="96" PREFIX:column="14">rx_buffer_index_t</name></type> <name PREFIX:line="96" PREFIX:column="32">_rx_buffer_tail</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="97" PREFIX:column="5">volatile</specifier> <name PREFIX:line="97" PREFIX:column="14">tx_buffer_index_t</name></type> <name PREFIX:line="97" PREFIX:column="32">_tx_buffer_head</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier PREFIX:line="98" PREFIX:column="5">volatile</specifier> <name PREFIX:line="98" PREFIX:column="14">tx_buffer_index_t</name></type> <name PREFIX:line="98" PREFIX:column="32">_tx_buffer_tail</name></decl>;</decl_stmt>

    <comment type="line" PREFIX:line="100" PREFIX:column="5">// Don't put any members after these buffers, since only the first</comment>
    <comment type="line" PREFIX:line="101" PREFIX:column="5">// 32 bytes of this struct can be accessed quickly using the ldd</comment>
    <comment type="line" PREFIX:line="102" PREFIX:column="5">// instruction.</comment>
    <decl_stmt><decl><type><name PREFIX:line="103" PREFIX:column="5">unknowntype</name> <name PREFIX:line="103" PREFIX:column="17">char</name></type> <name><name PREFIX:line="103" PREFIX:column="22">_rx_buffer</name><index PREFIX:line="103" PREFIX:column="32">[<expr><name PREFIX:line="103" PREFIX:column="33">SERIAL_RX_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="104" PREFIX:column="5">unknowntype</name> <name PREFIX:line="104" PREFIX:column="17">char</name></type> <name><name PREFIX:line="104" PREFIX:column="22">_tx_buffer</name><index PREFIX:line="104" PREFIX:column="32">[<expr><name PREFIX:line="104" PREFIX:column="33">SERIAL_TX_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  </protected><public PREFIX:line="106" PREFIX:column="3">public:
    <constructor_decl><specifier PREFIX:line="107" PREFIX:column="5">inline</specifier> <name PREFIX:line="107" PREFIX:column="12">HardwareSerial</name><parameter_list PREFIX:line="107" PREFIX:column="26">(
      <param><decl><type><specifier PREFIX:line="108" PREFIX:column="7">volatile</specifier> <name PREFIX:line="108" PREFIX:column="16">uint8_t</name> *</type><name PREFIX:line="108" PREFIX:column="25">ubrrh</name></decl></param>, <param><decl><type><specifier PREFIX:line="108" PREFIX:column="32">volatile</specifier> <name PREFIX:line="108" PREFIX:column="41">uint8_t</name> *</type><name PREFIX:line="108" PREFIX:column="50">ubrrl</name></decl></param>,
      <param><decl><type><specifier PREFIX:line="109" PREFIX:column="7">volatile</specifier> <name PREFIX:line="109" PREFIX:column="16">uint8_t</name> *</type><name PREFIX:line="109" PREFIX:column="25">ucsra</name></decl></param>, <param><decl><type><specifier PREFIX:line="109" PREFIX:column="32">volatile</specifier> <name PREFIX:line="109" PREFIX:column="41">uint8_t</name> *</type><name PREFIX:line="109" PREFIX:column="50">ucsrb</name></decl></param>,
      <param><decl><type><specifier PREFIX:line="110" PREFIX:column="7">volatile</specifier> <name PREFIX:line="110" PREFIX:column="16">uint8_t</name> *</type><name PREFIX:line="110" PREFIX:column="25">ucsrc</name></decl></param>, <param><decl><type><specifier PREFIX:line="110" PREFIX:column="32">volatile</specifier> <name PREFIX:line="110" PREFIX:column="41">uint8_t</name> *</type><name PREFIX:line="110" PREFIX:column="50">udr</name></decl></param>)</parameter_list>;</constructor_decl>
    <function><type><name PREFIX:line="111" PREFIX:column="5">void</name></type> <name PREFIX:line="111" PREFIX:column="10">begin</name><parameter_list PREFIX:line="111" PREFIX:column="15">(<param><decl><type><name PREFIX:line="111" PREFIX:column="16">unknowntype</name> <name PREFIX:line="111" PREFIX:column="28">long</name></type> <name PREFIX:line="111" PREFIX:column="33">baud</name></decl></param>)</parameter_list> <block PREFIX:line="111" PREFIX:column="39">{ <expr_stmt><expr><call><name PREFIX:line="111" PREFIX:column="41">begin</name><argument_list PREFIX:line="111" PREFIX:column="46">(<argument><expr><name PREFIX:line="111" PREFIX:column="47">baud</name></expr></argument>, <argument><expr><name PREFIX:line="111" PREFIX:column="53">SERIAL_8N1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function_decl><type><name PREFIX:line="112" PREFIX:column="5">void</name></type> <name PREFIX:line="112" PREFIX:column="10">begin</name><parameter_list PREFIX:line="112" PREFIX:column="15">(<param><decl><type><name PREFIX:line="112" PREFIX:column="16">unknowntype</name></type> <name PREFIX:line="112" PREFIX:column="28">long</name></decl></param>, <param><decl><type><name PREFIX:line="112" PREFIX:column="34">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="113" PREFIX:column="5">void</name></type> <name PREFIX:line="113" PREFIX:column="10">end</name><parameter_list PREFIX:line="113" PREFIX:column="13">()</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="114" PREFIX:column="5">virtual</specifier> <name PREFIX:line="114" PREFIX:column="13">int</name></type> <name PREFIX:line="114" PREFIX:column="17">available</name><parameter_list PREFIX:line="114" PREFIX:column="26">(<param><decl><type><name PREFIX:line="114" PREFIX:column="27">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="115" PREFIX:column="5">virtual</specifier> <name PREFIX:line="115" PREFIX:column="13">int</name></type> <name PREFIX:line="115" PREFIX:column="17">peek</name><parameter_list PREFIX:line="115" PREFIX:column="21">(<param><decl><type><name PREFIX:line="115" PREFIX:column="22">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="116" PREFIX:column="5">virtual</specifier> <name PREFIX:line="116" PREFIX:column="13">int</name></type> <name PREFIX:line="116" PREFIX:column="17">read</name><parameter_list PREFIX:line="116" PREFIX:column="21">(<param><decl><type><name PREFIX:line="116" PREFIX:column="22">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="117" PREFIX:column="5">int</name></type> <name PREFIX:line="117" PREFIX:column="9">availableForWrite</name><parameter_list PREFIX:line="117" PREFIX:column="26">(<param><decl><type><name PREFIX:line="117" PREFIX:column="27">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="118" PREFIX:column="5">virtual</specifier> <name PREFIX:line="118" PREFIX:column="13">void</name></type> <name PREFIX:line="118" PREFIX:column="18">flush</name><parameter_list PREFIX:line="118" PREFIX:column="23">(<param><decl><type><name PREFIX:line="118" PREFIX:column="24">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier PREFIX:line="119" PREFIX:column="5">virtual</specifier> <name PREFIX:line="119" PREFIX:column="13">size_t</name></type> <name PREFIX:line="119" PREFIX:column="20">write</name><parameter_list PREFIX:line="119" PREFIX:column="25">(<param><decl><type><name PREFIX:line="119" PREFIX:column="26">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
    <function><type><specifier PREFIX:line="120" PREFIX:column="5">inline</specifier> <name PREFIX:line="120" PREFIX:column="12">size_t</name></type> <name PREFIX:line="120" PREFIX:column="19">write</name><parameter_list PREFIX:line="120" PREFIX:column="24">(<param><decl><type><name PREFIX:line="120" PREFIX:column="25">unknowntype</name> <name PREFIX:line="120" PREFIX:column="37">long</name></type> <name PREFIX:line="120" PREFIX:column="42">n</name></decl></param>)</parameter_list> <block PREFIX:line="120" PREFIX:column="45">{ <return PREFIX:line="120" PREFIX:column="47">return <expr><call><name PREFIX:line="120" PREFIX:column="54">write</name><argument_list PREFIX:line="120" PREFIX:column="59">(<argument><expr PREFIX:line="120" PREFIX:column="60">(<name PREFIX:line="120" PREFIX:column="61">uint8_t</name>)<name PREFIX:line="120" PREFIX:column="69">n</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><specifier PREFIX:line="121" PREFIX:column="5">inline</specifier> <name PREFIX:line="121" PREFIX:column="12">size_t</name></type> <name PREFIX:line="121" PREFIX:column="19">write</name><parameter_list PREFIX:line="121" PREFIX:column="24">(<param><decl><type><name PREFIX:line="121" PREFIX:column="25">long</name></type> <name PREFIX:line="121" PREFIX:column="30">n</name></decl></param>)</parameter_list> <block PREFIX:line="121" PREFIX:column="33">{ <return PREFIX:line="121" PREFIX:column="35">return <expr><call><name PREFIX:line="121" PREFIX:column="42">write</name><argument_list PREFIX:line="121" PREFIX:column="47">(<argument><expr PREFIX:line="121" PREFIX:column="48">(<name PREFIX:line="121" PREFIX:column="49">uint8_t</name>)<name PREFIX:line="121" PREFIX:column="57">n</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><specifier PREFIX:line="122" PREFIX:column="5">inline</specifier> <name PREFIX:line="122" PREFIX:column="12">size_t</name></type> <name PREFIX:line="122" PREFIX:column="19">write</name><parameter_list PREFIX:line="122" PREFIX:column="24">(<param><decl><type><name PREFIX:line="122" PREFIX:column="25">unknowntype</name> <name PREFIX:line="122" PREFIX:column="37">int</name></type> <name PREFIX:line="122" PREFIX:column="41">n</name></decl></param>)</parameter_list> <block PREFIX:line="122" PREFIX:column="44">{ <return PREFIX:line="122" PREFIX:column="46">return <expr><call><name PREFIX:line="122" PREFIX:column="53">write</name><argument_list PREFIX:line="122" PREFIX:column="58">(<argument><expr PREFIX:line="122" PREFIX:column="59">(<name PREFIX:line="122" PREFIX:column="60">uint8_t</name>)<name PREFIX:line="122" PREFIX:column="68">n</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><specifier PREFIX:line="123" PREFIX:column="5">inline</specifier> <name PREFIX:line="123" PREFIX:column="12">size_t</name></type> <name PREFIX:line="123" PREFIX:column="19">write</name><parameter_list PREFIX:line="123" PREFIX:column="24">(<param><decl><type><name PREFIX:line="123" PREFIX:column="25">int</name></type> <name PREFIX:line="123" PREFIX:column="29">n</name></decl></param>)</parameter_list> <block PREFIX:line="123" PREFIX:column="32">{ <return PREFIX:line="123" PREFIX:column="34">return <expr><call><name PREFIX:line="123" PREFIX:column="41">write</name><argument_list PREFIX:line="123" PREFIX:column="46">(<argument><expr PREFIX:line="123" PREFIX:column="47">(<name PREFIX:line="123" PREFIX:column="48">uint8_t</name>)<name PREFIX:line="123" PREFIX:column="56">n</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <using PREFIX:line="124" PREFIX:column="5">using <name><name PREFIX:line="124" PREFIX:column="11">Print</name>::<name PREFIX:line="124" PREFIX:column="18">write</name></name>;</using> <comment type="line" PREFIX:line="124" PREFIX:column="25">// pull in write(str) and write(buf, size) from Print</comment>
    <function><name PREFIX:line="125" PREFIX:column="5">operator bool</name><parameter_list PREFIX:line="125" PREFIX:column="18">()</parameter_list> <block PREFIX:line="125" PREFIX:column="21">{ <return PREFIX:line="125" PREFIX:column="23">return <expr PREFIX:line="125" PREFIX:column="30">true</expr>;</return> }</block></function>

    <comment type="line" PREFIX:line="127" PREFIX:column="5">// Interrupt handlers - Not intended to be called ally</comment>
    <function_decl><type><specifier PREFIX:line="128" PREFIX:column="5">inline</specifier> <name PREFIX:line="128" PREFIX:column="12">void</name></type> <name PREFIX:line="128" PREFIX:column="17">_rx_complete_irq</name><parameter_list PREFIX:line="128" PREFIX:column="33">(<param><decl><type><name PREFIX:line="128" PREFIX:column="34">void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="129" PREFIX:column="5">void</name></type> <name PREFIX:line="129" PREFIX:column="10">_tx_udr_empty_irq</name><parameter_list PREFIX:line="129" PREFIX:column="27">(<param><decl><type><name PREFIX:line="129" PREFIX:column="28">void</name></type></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<cpp:if PREFIX:line="132" PREFIX:column="1">#<cpp:directive PREFIX:line="132" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="132" PREFIX:column="5">defined</name><argument_list PREFIX:line="132" PREFIX:column="12">(<argument><expr><name PREFIX:line="132" PREFIX:column="13">UBRRH</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="132" PREFIX:column="23">defined</name><argument_list PREFIX:line="132" PREFIX:column="30">(<argument><expr><name PREFIX:line="132" PREFIX:column="31">UBRR0H</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <decl_stmt><decl><type><name PREFIX:line="133" PREFIX:column="4">HardwareSerial</name></type> <name PREFIX:line="133" PREFIX:column="19">Serial</name></decl>;</decl_stmt>
  <cpp:define PREFIX:line="134" PREFIX:column="3">#<cpp:directive PREFIX:line="134" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="134" PREFIX:column="11">HAVE_HWSERIAL0</name></cpp:macro></cpp:define>
<cpp:endif PREFIX:line="135" PREFIX:column="1">#<cpp:directive PREFIX:line="135" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="136" PREFIX:column="1">#<cpp:directive PREFIX:line="136" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="136" PREFIX:column="5">defined</name><argument_list PREFIX:line="136" PREFIX:column="12">(<argument><expr><name PREFIX:line="136" PREFIX:column="13">UBRR1H</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <decl_stmt><decl><type><name PREFIX:line="137" PREFIX:column="4">HardwareSerial</name></type> <name PREFIX:line="137" PREFIX:column="19">Serial1</name></decl>;</decl_stmt>
  <cpp:define PREFIX:line="138" PREFIX:column="3">#<cpp:directive PREFIX:line="138" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="138" PREFIX:column="11">HAVE_HWSERIAL1</name></cpp:macro></cpp:define>
<cpp:endif PREFIX:line="139" PREFIX:column="1">#<cpp:directive PREFIX:line="139" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="140" PREFIX:column="1">#<cpp:directive PREFIX:line="140" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="140" PREFIX:column="5">defined</name><argument_list PREFIX:line="140" PREFIX:column="12">(<argument><expr><name PREFIX:line="140" PREFIX:column="13">UBRR2H</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <decl_stmt><decl><type><name PREFIX:line="141" PREFIX:column="4">HardwareSerial</name></type> <name PREFIX:line="141" PREFIX:column="19">Serial2</name></decl>;</decl_stmt>
  <cpp:define PREFIX:line="142" PREFIX:column="3">#<cpp:directive PREFIX:line="142" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="142" PREFIX:column="11">HAVE_HWSERIAL2</name></cpp:macro></cpp:define>
<cpp:endif PREFIX:line="143" PREFIX:column="1">#<cpp:directive PREFIX:line="143" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="144" PREFIX:column="1">#<cpp:directive PREFIX:line="144" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="144" PREFIX:column="5">defined</name><argument_list PREFIX:line="144" PREFIX:column="12">(<argument><expr><name PREFIX:line="144" PREFIX:column="13">UBRR3H</name></expr></argument>)</argument_list></call></expr></cpp:if>
   <decl_stmt><decl><type><name PREFIX:line="145" PREFIX:column="4">HardwareSerial</name></type> <name PREFIX:line="145" PREFIX:column="19">Serial3</name></decl>;</decl_stmt>
  <cpp:define PREFIX:line="146" PREFIX:column="3">#<cpp:directive PREFIX:line="146" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="146" PREFIX:column="11">HAVE_HWSERIAL3</name></cpp:macro></cpp:define>
<cpp:endif PREFIX:line="147" PREFIX:column="1">#<cpp:directive PREFIX:line="147" PREFIX:column="2">endif</cpp:directive></cpp:endif>

 <decl_stmt><decl><type><name PREFIX:line="149" PREFIX:column="2">void</name></type> <name PREFIX:line="149" PREFIX:column="7">serialEventRun</name><argument_list PREFIX:line="149" PREFIX:column="21">(<argument><expr><name PREFIX:line="149" PREFIX:column="22">void</name></expr></argument>)</argument_list> <name PREFIX:line="149" PREFIX:column="28">__attribute__</name><argument_list PREFIX:line="149" PREFIX:column="41">(<argument><expr PREFIX:line="149" PREFIX:column="42">(<name PREFIX:line="149" PREFIX:column="43">weak</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif PREFIX:line="151" PREFIX:column="1">#<cpp:directive PREFIX:line="151" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
