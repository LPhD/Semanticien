<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/at90usb/IPAddress.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
 *
 * MIT License:
 * Copyright (c) 2011 Adrian McEwen
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * adrianm@mcqn.com 1/1/2011
 */</comment>

<cpp:ifndef PREFIX:line="26" PREFIX:column="1">#<cpp:directive PREFIX:line="26" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="26" PREFIX:column="9">IPAddress_h</name></cpp:ifndef>
<cpp:define PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="27" PREFIX:column="9">IPAddress_h</name></cpp:macro></cpp:define>

<cpp:include PREFIX:line="29" PREFIX:column="1">#<cpp:directive PREFIX:line="29" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="29" PREFIX:column="10">&lt;Printable.h&gt;</cpp:file></cpp:include>

<comment type="line" PREFIX:line="31" PREFIX:column="1">// A class to make it easier to handle and pass around IP addresses</comment>

<class PREFIX:line="33" PREFIX:column="1">class <name PREFIX:line="33" PREFIX:column="7">IPAddress</name> <super PREFIX:line="33" PREFIX:column="17">: <specifier PREFIX:line="33" PREFIX:column="19">public</specifier> <name PREFIX:line="33" PREFIX:column="26">Printable</name></super> <block PREFIX:line="33" PREFIX:column="36">{<private type="default" PREFIX:line="33" PREFIX:column="37">
</private><private PREFIX:line="34" PREFIX:column="1">private:
    <decl_stmt><decl><type><name PREFIX:line="35" PREFIX:column="5">uint8_t</name></type> <name><name PREFIX:line="35" PREFIX:column="13">_address</name><index PREFIX:line="35" PREFIX:column="21">[<expr PREFIX:line="35" PREFIX:column="22">4</expr>]</index></name></decl>;</decl_stmt>  <comment type="line" PREFIX:line="35" PREFIX:column="27">// IPv4 address</comment>
    <comment type="line" PREFIX:line="36" PREFIX:column="5">// Access the raw byte array containing the address.  Because this returns a pointer</comment>
    <comment type="line" PREFIX:line="37" PREFIX:column="5">// to the internal structure rather than a copy of the address this function should only</comment>
    <comment type="line" PREFIX:line="38" PREFIX:column="5">// be used when you know that the usage of the returned uint8_t* will be transient and not</comment>
    <comment type="line" PREFIX:line="39" PREFIX:column="5">// stored.</comment>
    <function><type><name PREFIX:line="40" PREFIX:column="5">uint8_t</name>*</type> <name PREFIX:line="40" PREFIX:column="14">raw_address</name><parameter_list PREFIX:line="40" PREFIX:column="25">()</parameter_list> <block PREFIX:line="40" PREFIX:column="28">{ <return PREFIX:line="40" PREFIX:column="30">return <expr><name PREFIX:line="40" PREFIX:column="37">_address</name></expr>;</return> }</block></function><empty_stmt PREFIX:line="40" PREFIX:column="48">;</empty_stmt>

</private><public PREFIX:line="42" PREFIX:column="1">public:
    <comment type="line" PREFIX:line="43" PREFIX:column="5">// Constructors</comment>
    <constructor_decl><name PREFIX:line="44" PREFIX:column="5">IPAddress</name><parameter_list PREFIX:line="44" PREFIX:column="14">()</parameter_list>;</constructor_decl>
    <constructor_decl><name PREFIX:line="45" PREFIX:column="5">IPAddress</name><parameter_list PREFIX:line="45" PREFIX:column="14">(<param><decl><type><name PREFIX:line="45" PREFIX:column="15">uint8_t</name></type> <name PREFIX:line="45" PREFIX:column="23">first_octet</name></decl></param>, <param><decl><type><name PREFIX:line="45" PREFIX:column="36">uint8_t</name></type> <name PREFIX:line="45" PREFIX:column="44">second_octet</name></decl></param>, <param><decl><type><name PREFIX:line="45" PREFIX:column="58">uint8_t</name></type> <name PREFIX:line="45" PREFIX:column="66">third_octet</name></decl></param>, <param><decl><type><name PREFIX:line="45" PREFIX:column="79">uint8_t</name></type> <name PREFIX:line="45" PREFIX:column="87">fourth_octet</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name PREFIX:line="46" PREFIX:column="5">IPAddress</name><parameter_list PREFIX:line="46" PREFIX:column="14">(<param><decl><type><name PREFIX:line="46" PREFIX:column="15">uint32_t</name></type> <name PREFIX:line="46" PREFIX:column="24">address</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name PREFIX:line="47" PREFIX:column="5">IPAddress</name><parameter_list PREFIX:line="47" PREFIX:column="14">( <param><decl><type><name PREFIX:line="47" PREFIX:column="16">uint8_t</name> *</type><name PREFIX:line="47" PREFIX:column="25">address</name></decl></param>)</parameter_list>;</constructor_decl>

    <comment type="line" PREFIX:line="49" PREFIX:column="5">// Overloaded cast operator to allow IPAddress objects to be used where a pointer</comment>
    <comment type="line" PREFIX:line="50" PREFIX:column="5">// to a four-byte uint8_t array is expected</comment>
    <function><name PREFIX:line="51" PREFIX:column="5">operator uint32_t</name><parameter_list PREFIX:line="51" PREFIX:column="22">()</parameter_list> <block PREFIX:line="51" PREFIX:column="25">{ <return PREFIX:line="51" PREFIX:column="27">return <expr PREFIX:line="51" PREFIX:column="34">*((<name PREFIX:line="51" PREFIX:column="37">uint32_t</name>*)<name PREFIX:line="51" PREFIX:column="47">_address</name>)</expr>;</return> }</block></function><empty_stmt PREFIX:line="51" PREFIX:column="59">;</empty_stmt>
    <function><type><name PREFIX:line="52" PREFIX:column="5">bool</name></type> <name PREFIX:line="52" PREFIX:column="10">operator==</name><parameter_list PREFIX:line="52" PREFIX:column="20">( <param><decl><type><name PREFIX:line="52" PREFIX:column="22">IPAddress</name>&amp;</type> <name PREFIX:line="52" PREFIX:column="33">addr</name></decl></param>)</parameter_list> <block PREFIX:line="52" PREFIX:column="39">{ <return PREFIX:line="52" PREFIX:column="41">return <expr PREFIX:line="52" PREFIX:column="48">(*((<name PREFIX:line="52" PREFIX:column="52">uint32_t</name>*)<name PREFIX:line="52" PREFIX:column="62">_address</name>)) == (*((<name PREFIX:line="52" PREFIX:column="80">uint32_t</name>*)<name><name PREFIX:line="52" PREFIX:column="90">addr</name>.<name PREFIX:line="52" PREFIX:column="95">_address</name></name>))</expr>;</return> }</block></function><empty_stmt PREFIX:line="52" PREFIX:column="108">;</empty_stmt>
    <function_decl><type><name PREFIX:line="53" PREFIX:column="5">bool</name></type> <name PREFIX:line="53" PREFIX:column="10">operator==</name><parameter_list PREFIX:line="53" PREFIX:column="20">( <param><decl><type><name PREFIX:line="53" PREFIX:column="22">uint8_t</name>*</type> <name PREFIX:line="53" PREFIX:column="31">addr</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line" PREFIX:line="55" PREFIX:column="5">// Overloaded index operator to allow getting and setting individual octets of the address</comment>
    <function><type><name PREFIX:line="56" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="56" PREFIX:column="13">operator[]</name><parameter_list PREFIX:line="56" PREFIX:column="23">(<param><decl><type><name PREFIX:line="56" PREFIX:column="24">int</name></type> <name PREFIX:line="56" PREFIX:column="28">index</name></decl></param>)</parameter_list>  <block PREFIX:line="56" PREFIX:column="36">{ <return PREFIX:line="56" PREFIX:column="38">return <expr><name><name PREFIX:line="56" PREFIX:column="45">_address</name><index PREFIX:line="56" PREFIX:column="53">[<expr><name PREFIX:line="56" PREFIX:column="54">index</name></expr>]</index></name></expr>;</return> }</block></function><empty_stmt PREFIX:line="56" PREFIX:column="63">;</empty_stmt>
    <function><type><name PREFIX:line="57" PREFIX:column="5">uint8_t</name>&amp;</type> <name PREFIX:line="57" PREFIX:column="14">operator[]</name><parameter_list PREFIX:line="57" PREFIX:column="24">(<param><decl><type><name PREFIX:line="57" PREFIX:column="25">int</name></type> <name PREFIX:line="57" PREFIX:column="29">index</name></decl></param>)</parameter_list> <block PREFIX:line="57" PREFIX:column="36">{ <return PREFIX:line="57" PREFIX:column="38">return <expr><name><name PREFIX:line="57" PREFIX:column="45">_address</name><index PREFIX:line="57" PREFIX:column="53">[<expr><name PREFIX:line="57" PREFIX:column="54">index</name></expr>]</index></name></expr>;</return> }</block></function><empty_stmt PREFIX:line="57" PREFIX:column="63">;</empty_stmt>

    <comment type="line" PREFIX:line="59" PREFIX:column="5">// Overloaded copy operators to allow initialisation of IPAddress objects from other types</comment>
    <function_decl><type><name PREFIX:line="60" PREFIX:column="5">IPAddress</name>&amp;</type> <name PREFIX:line="60" PREFIX:column="16">operator=</name><parameter_list PREFIX:line="60" PREFIX:column="25">( <param><decl><type><name PREFIX:line="60" PREFIX:column="27">uint8_t</name> *</type><name PREFIX:line="60" PREFIX:column="36">address</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="61" PREFIX:column="5">IPAddress</name>&amp;</type> <name PREFIX:line="61" PREFIX:column="16">operator=</name><parameter_list PREFIX:line="61" PREFIX:column="25">(<param><decl><type><name PREFIX:line="61" PREFIX:column="26">uint32_t</name></type> <name PREFIX:line="61" PREFIX:column="35">address</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier PREFIX:line="63" PREFIX:column="5">virtual</specifier> <name PREFIX:line="63" PREFIX:column="13">size_t</name></type> <name PREFIX:line="63" PREFIX:column="20">printTo</name><parameter_list PREFIX:line="63" PREFIX:column="27">(<param><decl><type><name PREFIX:line="63" PREFIX:column="28">Print</name>&amp;</type> <name PREFIX:line="63" PREFIX:column="35">p</name></decl></param>)</parameter_list> ;</function_decl>

    <class_decl><specifier PREFIX:line="65" PREFIX:column="5">friend</specifier> class <name PREFIX:line="65" PREFIX:column="18">EthernetClass</name>;</class_decl>
    <class_decl><specifier PREFIX:line="66" PREFIX:column="5">friend</specifier> class <name PREFIX:line="66" PREFIX:column="18">UDP</name>;</class_decl>
    <class_decl><specifier PREFIX:line="67" PREFIX:column="5">friend</specifier> class <name PREFIX:line="67" PREFIX:column="18">Client</name>;</class_decl>
    <class_decl><specifier PREFIX:line="68" PREFIX:column="5">friend</specifier> class <name PREFIX:line="68" PREFIX:column="18">Server</name>;</class_decl>
    <class_decl><specifier PREFIX:line="69" PREFIX:column="5">friend</specifier> class <name PREFIX:line="69" PREFIX:column="18">DhcpClass</name>;</class_decl>
    <class_decl><specifier PREFIX:line="70" PREFIX:column="5">friend</specifier> class <name PREFIX:line="70" PREFIX:column="18">DNSClient</name>;</class_decl>
</public>}</block>;</class>

 <decl_stmt><decl><type><name PREFIX:line="73" PREFIX:column="2">IPAddress</name></type> <name PREFIX:line="73" PREFIX:column="12">INADDR_NONE</name><argument_list PREFIX:line="73" PREFIX:column="23">(<argument><expr PREFIX:line="73" PREFIX:column="24">0</expr></argument>,<argument><expr PREFIX:line="73" PREFIX:column="26">0</expr></argument>,<argument><expr PREFIX:line="73" PREFIX:column="28">0</expr></argument>,<argument><expr PREFIX:line="73" PREFIX:column="30">0</expr></argument>)</argument_list></decl>;</decl_stmt>


<cpp:endif PREFIX:line="76" PREFIX:column="1">#<cpp:directive PREFIX:line="76" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
