<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/arduino/IPAddress.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  IPAddress.h - Base class that provides IPAddress
  Copyright (c) 2011 Adrian McEwen.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/</comment>

<cpp:ifndef PREFIX:line="20" PREFIX:column="1">#<cpp:directive PREFIX:line="20" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="20" PREFIX:column="9">IPAddress_h</name></cpp:ifndef>
<cpp:define PREFIX:line="21" PREFIX:column="1">#<cpp:directive PREFIX:line="21" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="21" PREFIX:column="9">IPAddress_h</name></cpp:macro></cpp:define>

<cpp:include PREFIX:line="23" PREFIX:column="1">#<cpp:directive PREFIX:line="23" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="23" PREFIX:column="10">&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="24" PREFIX:column="1">#<cpp:directive PREFIX:line="24" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="24" PREFIX:column="10">&lt;Printable.h&gt;</cpp:file></cpp:include>

<comment type="line" PREFIX:line="26" PREFIX:column="1">// A class to make it easier to handle and pass around IP addresses</comment>

<class PREFIX:line="28" PREFIX:column="1">class <name PREFIX:line="28" PREFIX:column="7">IPAddress</name> <super PREFIX:line="28" PREFIX:column="17">: <specifier PREFIX:line="28" PREFIX:column="19">public</specifier> <name PREFIX:line="28" PREFIX:column="26">Printable</name></super> <block PREFIX:line="28" PREFIX:column="36">{<private type="default" PREFIX:line="28" PREFIX:column="37">
</private><private PREFIX:line="29" PREFIX:column="1">private:
    <union PREFIX:line="30" PREFIX:column="5">union <block PREFIX:line="30" PREFIX:column="11">{<public type="default" PREFIX:line="30" PREFIX:column="12">
	<decl_stmt><decl><type><name PREFIX:line="31" PREFIX:column="9">uint8_t</name></type> <name><name PREFIX:line="31" PREFIX:column="17">bytes</name><index PREFIX:line="31" PREFIX:column="22">[<expr PREFIX:line="31" PREFIX:column="23">4</expr>]</index></name></decl>;</decl_stmt>  <comment type="line" PREFIX:line="31" PREFIX:column="28">// IPv4 address</comment>
	<decl_stmt><decl><type><name PREFIX:line="32" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="32" PREFIX:column="18">dword</name></decl>;</decl_stmt>
    </public>}</block> <decl><name PREFIX:line="33" PREFIX:column="7">_address</name></decl>;</union>

    <comment type="line" PREFIX:line="35" PREFIX:column="5">// Access the raw byte array containing the address.  Because this returns a pointer</comment>
    <comment type="line" PREFIX:line="36" PREFIX:column="5">// to the internal structure rather than a copy of the address this function should only</comment>
    <comment type="line" PREFIX:line="37" PREFIX:column="5">// be used when you know that the usage of the returned uint8_t* will be transient and not</comment>
    <comment type="line" PREFIX:line="38" PREFIX:column="5">// stored.</comment>
    <function><type><name PREFIX:line="39" PREFIX:column="5">uint8_t</name>*</type> <name PREFIX:line="39" PREFIX:column="14">raw_address</name><parameter_list PREFIX:line="39" PREFIX:column="25">()</parameter_list> <block PREFIX:line="39" PREFIX:column="28">{ <return PREFIX:line="39" PREFIX:column="30">return <expr><name><name PREFIX:line="39" PREFIX:column="37">_address</name>.<name PREFIX:line="39" PREFIX:column="46">bytes</name></name></expr>;</return> }</block></function><empty_stmt PREFIX:line="39" PREFIX:column="54">;</empty_stmt>

</private><public PREFIX:line="41" PREFIX:column="1">public:
    <comment type="line" PREFIX:line="42" PREFIX:column="5">// Constructors</comment>
    <constructor_decl><name PREFIX:line="43" PREFIX:column="5">IPAddress</name><parameter_list PREFIX:line="43" PREFIX:column="14">()</parameter_list>;</constructor_decl>
    <constructor_decl><name PREFIX:line="44" PREFIX:column="5">IPAddress</name><parameter_list PREFIX:line="44" PREFIX:column="14">(<param><decl><type><name PREFIX:line="44" PREFIX:column="15">uint8_t</name></type> <name PREFIX:line="44" PREFIX:column="23">first_octet</name></decl></param>, <param><decl><type><name PREFIX:line="44" PREFIX:column="36">uint8_t</name></type> <name PREFIX:line="44" PREFIX:column="44">second_octet</name></decl></param>, <param><decl><type><name PREFIX:line="44" PREFIX:column="58">uint8_t</name></type> <name PREFIX:line="44" PREFIX:column="66">third_octet</name></decl></param>, <param><decl><type><name PREFIX:line="44" PREFIX:column="79">uint8_t</name></type> <name PREFIX:line="44" PREFIX:column="87">fourth_octet</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name PREFIX:line="45" PREFIX:column="5">IPAddress</name><parameter_list PREFIX:line="45" PREFIX:column="14">(<param><decl><type><name PREFIX:line="45" PREFIX:column="15">uint32_t</name></type> <name PREFIX:line="45" PREFIX:column="24">address</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name PREFIX:line="46" PREFIX:column="5">IPAddress</name><parameter_list PREFIX:line="46" PREFIX:column="14">( <param><decl><type><name PREFIX:line="46" PREFIX:column="16">uint8_t</name> *</type><name PREFIX:line="46" PREFIX:column="25">address</name></decl></param>)</parameter_list>;</constructor_decl>

    <comment type="line" PREFIX:line="48" PREFIX:column="5">// Overloaded cast operator to allow IPAddress objects to be used where a pointer</comment>
    <comment type="line" PREFIX:line="49" PREFIX:column="5">// to a four-byte uint8_t array is expected</comment>
    <function><name PREFIX:line="50" PREFIX:column="5">operator uint32_t</name><parameter_list PREFIX:line="50" PREFIX:column="22">()</parameter_list>  <block PREFIX:line="50" PREFIX:column="26">{ <return PREFIX:line="50" PREFIX:column="28">return <expr><name><name PREFIX:line="50" PREFIX:column="35">_address</name>.<name PREFIX:line="50" PREFIX:column="44">dword</name></name></expr>;</return> }</block></function><empty_stmt PREFIX:line="50" PREFIX:column="52">;</empty_stmt>
    <function><type><name PREFIX:line="51" PREFIX:column="5">bool</name></type> <name PREFIX:line="51" PREFIX:column="10">operator==</name><parameter_list PREFIX:line="51" PREFIX:column="20">( <param><decl><type><name PREFIX:line="51" PREFIX:column="22">IPAddress</name>&amp;</type> <name PREFIX:line="51" PREFIX:column="33">addr</name></decl></param>)</parameter_list>  <block PREFIX:line="51" PREFIX:column="40">{ <return PREFIX:line="51" PREFIX:column="42">return <expr><name><name PREFIX:line="51" PREFIX:column="49">_address</name>.<name PREFIX:line="51" PREFIX:column="58">dword</name></name> == <name><name PREFIX:line="51" PREFIX:column="67">addr</name>.<name PREFIX:line="51" PREFIX:column="72">_address</name>.<name PREFIX:line="51" PREFIX:column="81">dword</name></name></expr>;</return> }</block></function><empty_stmt PREFIX:line="51" PREFIX:column="89">;</empty_stmt>
    <function_decl><type><name PREFIX:line="52" PREFIX:column="5">bool</name></type> <name PREFIX:line="52" PREFIX:column="10">operator==</name><parameter_list PREFIX:line="52" PREFIX:column="20">( <param><decl><type><name PREFIX:line="52" PREFIX:column="22">uint8_t</name>*</type> <name PREFIX:line="52" PREFIX:column="31">addr</name></decl></param>)</parameter_list> ;</function_decl>

    <comment type="line" PREFIX:line="54" PREFIX:column="5">// Overloaded index operator to allow getting and setting individual octets of the address</comment>
    <function><type><name PREFIX:line="55" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="55" PREFIX:column="13">operator[]</name><parameter_list PREFIX:line="55" PREFIX:column="23">(<param><decl><type><name PREFIX:line="55" PREFIX:column="24">int</name></type> <name PREFIX:line="55" PREFIX:column="28">index</name></decl></param>)</parameter_list>  <block PREFIX:line="55" PREFIX:column="36">{ <return PREFIX:line="55" PREFIX:column="38">return <expr><name><name PREFIX:line="55" PREFIX:column="45">_address</name>.<name PREFIX:line="55" PREFIX:column="54">bytes</name><index PREFIX:line="55" PREFIX:column="59">[<expr><name PREFIX:line="55" PREFIX:column="60">index</name></expr>]</index></name></expr>;</return> }</block></function><empty_stmt PREFIX:line="55" PREFIX:column="69">;</empty_stmt>
    <function><type><name PREFIX:line="56" PREFIX:column="5">uint8_t</name>&amp;</type> <name PREFIX:line="56" PREFIX:column="14">operator[]</name><parameter_list PREFIX:line="56" PREFIX:column="24">(<param><decl><type><name PREFIX:line="56" PREFIX:column="25">int</name></type> <name PREFIX:line="56" PREFIX:column="29">index</name></decl></param>)</parameter_list> <block PREFIX:line="56" PREFIX:column="36">{ <return PREFIX:line="56" PREFIX:column="38">return <expr><name><name PREFIX:line="56" PREFIX:column="45">_address</name>.<name PREFIX:line="56" PREFIX:column="54">bytes</name><index PREFIX:line="56" PREFIX:column="59">[<expr><name PREFIX:line="56" PREFIX:column="60">index</name></expr>]</index></name></expr>;</return> }</block></function><empty_stmt PREFIX:line="56" PREFIX:column="69">;</empty_stmt>

    <comment type="line" PREFIX:line="58" PREFIX:column="5">// Overloaded copy operators to allow initialisation of IPAddress objects from other types</comment>
    <function_decl><type><name PREFIX:line="59" PREFIX:column="5">IPAddress</name>&amp;</type> <name PREFIX:line="59" PREFIX:column="16">operator=</name><parameter_list PREFIX:line="59" PREFIX:column="25">( <param><decl><type><name PREFIX:line="59" PREFIX:column="27">uint8_t</name> *</type><name PREFIX:line="59" PREFIX:column="36">address</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="60" PREFIX:column="5">IPAddress</name>&amp;</type> <name PREFIX:line="60" PREFIX:column="16">operator=</name><parameter_list PREFIX:line="60" PREFIX:column="25">(<param><decl><type><name PREFIX:line="60" PREFIX:column="26">uint32_t</name></type> <name PREFIX:line="60" PREFIX:column="35">address</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><specifier PREFIX:line="62" PREFIX:column="5">virtual</specifier> <name PREFIX:line="62" PREFIX:column="13">size_t</name></type> <name PREFIX:line="62" PREFIX:column="20">printTo</name><parameter_list PREFIX:line="62" PREFIX:column="27">(<param><decl><type><name PREFIX:line="62" PREFIX:column="28">Print</name>&amp;</type> <name PREFIX:line="62" PREFIX:column="35">p</name></decl></param>)</parameter_list> ;</function_decl>

    <class_decl><specifier PREFIX:line="64" PREFIX:column="5">friend</specifier> class <name PREFIX:line="64" PREFIX:column="18">EthernetClass</name>;</class_decl>
    <class_decl><specifier PREFIX:line="65" PREFIX:column="5">friend</specifier> class <name PREFIX:line="65" PREFIX:column="18">UDP</name>;</class_decl>
    <class_decl><specifier PREFIX:line="66" PREFIX:column="5">friend</specifier> class <name PREFIX:line="66" PREFIX:column="18">Client</name>;</class_decl>
    <class_decl><specifier PREFIX:line="67" PREFIX:column="5">friend</specifier> class <name PREFIX:line="67" PREFIX:column="18">Server</name>;</class_decl>
    <class_decl><specifier PREFIX:line="68" PREFIX:column="5">friend</specifier> class <name PREFIX:line="68" PREFIX:column="18">DhcpClass</name>;</class_decl>
    <class_decl><specifier PREFIX:line="69" PREFIX:column="5">friend</specifier> class <name PREFIX:line="69" PREFIX:column="18">DNSClient</name>;</class_decl>
</public>}</block>;</class>

 <decl_stmt><decl><type><name PREFIX:line="72" PREFIX:column="2">IPAddress</name></type> <name PREFIX:line="72" PREFIX:column="12">INADDR_NONE</name><argument_list PREFIX:line="72" PREFIX:column="23">(<argument><expr PREFIX:line="72" PREFIX:column="24">0</expr></argument>,<argument><expr PREFIX:line="72" PREFIX:column="26">0</expr></argument>,<argument><expr PREFIX:line="72" PREFIX:column="28">0</expr></argument>,<argument><expr PREFIX:line="72" PREFIX:column="30">0</expr></argument>)</argument_list></decl>;</decl_stmt>


<cpp:endif PREFIX:line="75" PREFIX:column="1">#<cpp:directive PREFIX:line="75" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
