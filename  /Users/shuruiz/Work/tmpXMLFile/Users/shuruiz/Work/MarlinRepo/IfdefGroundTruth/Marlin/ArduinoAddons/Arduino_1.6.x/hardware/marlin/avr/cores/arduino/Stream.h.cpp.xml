<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/arduino/Stream.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  Stream.h - base class for character-based streams.
  Copyright (c) 2010 David A. Mellis.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  parsing functions based on TextFinder library by Michael Margolis
*/</comment>

<cpp:ifndef PREFIX:line="22" PREFIX:column="1">#<cpp:directive PREFIX:line="22" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="22" PREFIX:column="9">Stream_h</name></cpp:ifndef>
<cpp:define PREFIX:line="23" PREFIX:column="1">#<cpp:directive PREFIX:line="23" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="23" PREFIX:column="9">Stream_h</name></cpp:macro></cpp:define>

<cpp:include PREFIX:line="25" PREFIX:column="1">#<cpp:directive PREFIX:line="25" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="25" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="26" PREFIX:column="1">#<cpp:directive PREFIX:line="26" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="26" PREFIX:column="10">"Print.h"</cpp:file></cpp:include>

<comment type="line" PREFIX:line="28" PREFIX:column="1">// compatability macros for testing</comment>
<comment type="block" PREFIX:line="29" PREFIX:column="1">/*
#define   getInt()            parseInt()
#define   getInt(skipChar)    parseInt(skipchar)
#define   getFloat()          parseFloat()
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/</comment>

<class PREFIX:line="38" PREFIX:column="1">class <name PREFIX:line="38" PREFIX:column="7">Stream</name> <super PREFIX:line="38" PREFIX:column="14">: <specifier PREFIX:line="38" PREFIX:column="16">public</specifier> <name PREFIX:line="38" PREFIX:column="23">Print</name></super>
<block PREFIX:line="39" PREFIX:column="1">{<private type="default" PREFIX:line="39" PREFIX:column="2">
  </private><protected PREFIX:line="40" PREFIX:column="3">protected:
    <decl_stmt><decl><type><name PREFIX:line="41" PREFIX:column="5">unknowntype</name> <name PREFIX:line="41" PREFIX:column="17">long</name></type> <name PREFIX:line="41" PREFIX:column="22">_timeout</name></decl>;</decl_stmt>      <comment type="line" PREFIX:line="41" PREFIX:column="37">// number of milliseconds to wait for the next char before aborting timed read</comment>
    <decl_stmt><decl><type><name PREFIX:line="42" PREFIX:column="5">unknowntype</name> <name PREFIX:line="42" PREFIX:column="17">long</name></type> <name PREFIX:line="42" PREFIX:column="22">_startMillis</name></decl>;</decl_stmt>  <comment type="line" PREFIX:line="42" PREFIX:column="37">// used for timeout measurement</comment>
    <function_decl><type><name PREFIX:line="43" PREFIX:column="5">int</name></type> <name PREFIX:line="43" PREFIX:column="9">timedRead</name><parameter_list PREFIX:line="43" PREFIX:column="18">()</parameter_list>;</function_decl>    <comment type="line" PREFIX:line="43" PREFIX:column="25">// private method to read stream with timeout</comment>
    <function_decl><type><name PREFIX:line="44" PREFIX:column="5">int</name></type> <name PREFIX:line="44" PREFIX:column="9">timedPeek</name><parameter_list PREFIX:line="44" PREFIX:column="18">()</parameter_list>;</function_decl>    <comment type="line" PREFIX:line="44" PREFIX:column="25">// private method to peek stream with timeout</comment>
    <function_decl><type><name PREFIX:line="45" PREFIX:column="5">int</name></type> <name PREFIX:line="45" PREFIX:column="9">peekNextDigit</name><parameter_list PREFIX:line="45" PREFIX:column="22">()</parameter_list>;</function_decl> <comment type="line" PREFIX:line="45" PREFIX:column="26">// returns the next numeric digit in the stream or -1 if timeout</comment>

  </protected><public PREFIX:line="47" PREFIX:column="3">public:
    <function_decl><type><specifier PREFIX:line="48" PREFIX:column="5">virtual</specifier> <name PREFIX:line="48" PREFIX:column="13">int</name></type> <name PREFIX:line="48" PREFIX:column="17">available</name><parameter_list PREFIX:line="48" PREFIX:column="26">()</parameter_list> = 0;</function_decl>
    <function_decl><type><specifier PREFIX:line="49" PREFIX:column="5">virtual</specifier> <name PREFIX:line="49" PREFIX:column="13">int</name></type> <name PREFIX:line="49" PREFIX:column="17">read</name><parameter_list PREFIX:line="49" PREFIX:column="21">()</parameter_list> = 0;</function_decl>
    <function_decl><type><specifier PREFIX:line="50" PREFIX:column="5">virtual</specifier> <name PREFIX:line="50" PREFIX:column="13">int</name></type> <name PREFIX:line="50" PREFIX:column="17">peek</name><parameter_list PREFIX:line="50" PREFIX:column="21">()</parameter_list> = 0;</function_decl>
    <function_decl><type><specifier PREFIX:line="51" PREFIX:column="5">virtual</specifier> <name PREFIX:line="51" PREFIX:column="13">void</name></type> <name PREFIX:line="51" PREFIX:column="18">flush</name><parameter_list PREFIX:line="51" PREFIX:column="23">()</parameter_list> = 0;</function_decl>

    <constructor><name PREFIX:line="53" PREFIX:column="5">Stream</name><parameter_list PREFIX:line="53" PREFIX:column="11">()</parameter_list> <block PREFIX:line="53" PREFIX:column="14">{<expr_stmt><expr><name PREFIX:line="53" PREFIX:column="15">_timeout</name>=1000</expr>;</expr_stmt>}</block></constructor>

<comment type="line" PREFIX:line="55" PREFIX:column="1">// parsing methods</comment>

  <function_decl><type><name PREFIX:line="57" PREFIX:column="3">void</name></type> <name PREFIX:line="57" PREFIX:column="8">setTimeout</name><parameter_list PREFIX:line="57" PREFIX:column="18">(<param><decl><type><name PREFIX:line="57" PREFIX:column="19">unknowntype</name> <name PREFIX:line="57" PREFIX:column="31">long</name></type> <name PREFIX:line="57" PREFIX:column="36">timeout</name></decl></param>)</parameter_list>;</function_decl>  <comment type="line" PREFIX:line="57" PREFIX:column="47">// sets maximum milliseconds to wait for stream data, default is 1 second</comment>

  <function_decl><type><name PREFIX:line="59" PREFIX:column="3">bool</name></type> <name PREFIX:line="59" PREFIX:column="8">find</name><parameter_list PREFIX:line="59" PREFIX:column="12">(<param><decl><type><name PREFIX:line="59" PREFIX:column="13">char</name> *</type><name PREFIX:line="59" PREFIX:column="19">target</name></decl></param>)</parameter_list>;</function_decl>   <comment type="line" PREFIX:line="59" PREFIX:column="30">// reads data from the stream until the target string is found</comment>
  <function><type><name PREFIX:line="60" PREFIX:column="3">bool</name></type> <name PREFIX:line="60" PREFIX:column="8">find</name><parameter_list PREFIX:line="60" PREFIX:column="12">(<param><decl><type><name PREFIX:line="60" PREFIX:column="13">uint8_t</name> *</type><name PREFIX:line="60" PREFIX:column="22">target</name></decl></param>)</parameter_list> <block PREFIX:line="60" PREFIX:column="30">{ <return PREFIX:line="60" PREFIX:column="32">return <expr><call><name PREFIX:line="60" PREFIX:column="39">find</name> <argument_list PREFIX:line="60" PREFIX:column="44">(<argument><expr PREFIX:line="60" PREFIX:column="45">(<name PREFIX:line="60" PREFIX:column="46">char</name> *)<name PREFIX:line="60" PREFIX:column="53">target</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <comment type="line" PREFIX:line="61" PREFIX:column="3">// returns true if target string is found, false if timed out (see setTimeout)</comment>

  <function_decl><type><name PREFIX:line="63" PREFIX:column="3">bool</name></type> <name PREFIX:line="63" PREFIX:column="8">find</name><parameter_list PREFIX:line="63" PREFIX:column="12">(<param><decl><type><name PREFIX:line="63" PREFIX:column="13">char</name> *</type><name PREFIX:line="63" PREFIX:column="19">target</name></decl></param>, <param><decl><type><name PREFIX:line="63" PREFIX:column="27">size_t</name></type> <name PREFIX:line="63" PREFIX:column="34">length</name></decl></param>)</parameter_list>;</function_decl>   <comment type="line" PREFIX:line="63" PREFIX:column="45">// reads data from the stream until the target string of given length is found</comment>
  <function><type><name PREFIX:line="64" PREFIX:column="3">bool</name></type> <name PREFIX:line="64" PREFIX:column="8">find</name><parameter_list PREFIX:line="64" PREFIX:column="12">(<param><decl><type><name PREFIX:line="64" PREFIX:column="13">uint8_t</name> *</type><name PREFIX:line="64" PREFIX:column="22">target</name></decl></param>, <param><decl><type><name PREFIX:line="64" PREFIX:column="30">size_t</name></type> <name PREFIX:line="64" PREFIX:column="37">length</name></decl></param>)</parameter_list> <block PREFIX:line="64" PREFIX:column="45">{ <return PREFIX:line="64" PREFIX:column="47">return <expr><call><name PREFIX:line="64" PREFIX:column="54">find</name> <argument_list PREFIX:line="64" PREFIX:column="59">(<argument><expr PREFIX:line="64" PREFIX:column="60">(<name PREFIX:line="64" PREFIX:column="61">char</name> *)<name PREFIX:line="64" PREFIX:column="68">target</name></expr></argument>, <argument><expr><name PREFIX:line="64" PREFIX:column="76">length</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <comment type="line" PREFIX:line="65" PREFIX:column="3">// returns true if target string is found, false if timed out</comment>

  <function_decl><type><name PREFIX:line="67" PREFIX:column="3">bool</name></type> <name PREFIX:line="67" PREFIX:column="8">findUntil</name><parameter_list PREFIX:line="67" PREFIX:column="17">(<param><decl><type><name PREFIX:line="67" PREFIX:column="18">char</name> *</type><name PREFIX:line="67" PREFIX:column="24">target</name></decl></param>, <param><decl><type><name PREFIX:line="67" PREFIX:column="32">char</name> *</type><name PREFIX:line="67" PREFIX:column="38">terminator</name></decl></param>)</parameter_list>;</function_decl>   <comment type="line" PREFIX:line="67" PREFIX:column="53">// as find but search ends if the terminator string is found</comment>
  <function><type><name PREFIX:line="68" PREFIX:column="3">bool</name></type> <name PREFIX:line="68" PREFIX:column="8">findUntil</name><parameter_list PREFIX:line="68" PREFIX:column="17">(<param><decl><type><name PREFIX:line="68" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="68" PREFIX:column="27">target</name></decl></param>, <param><decl><type><name PREFIX:line="68" PREFIX:column="35">char</name> *</type><name PREFIX:line="68" PREFIX:column="41">terminator</name></decl></param>)</parameter_list> <block PREFIX:line="68" PREFIX:column="53">{ <return PREFIX:line="68" PREFIX:column="55">return <expr><call><name PREFIX:line="68" PREFIX:column="62">findUntil</name><argument_list PREFIX:line="68" PREFIX:column="71">(<argument><expr PREFIX:line="68" PREFIX:column="72">(<name PREFIX:line="68" PREFIX:column="73">char</name> *)<name PREFIX:line="68" PREFIX:column="80">target</name></expr></argument>, <argument><expr><name PREFIX:line="68" PREFIX:column="88">terminator</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function_decl><type><name PREFIX:line="70" PREFIX:column="3">bool</name></type> <name PREFIX:line="70" PREFIX:column="8">findUntil</name><parameter_list PREFIX:line="70" PREFIX:column="17">(<param><decl><type><name PREFIX:line="70" PREFIX:column="18">char</name> *</type><name PREFIX:line="70" PREFIX:column="24">target</name></decl></param>, <param><decl><type><name PREFIX:line="70" PREFIX:column="32">size_t</name></type> <name PREFIX:line="70" PREFIX:column="39">targetLen</name></decl></param>, <param><decl><type><name PREFIX:line="70" PREFIX:column="50">char</name> *</type><name PREFIX:line="70" PREFIX:column="56">terminate</name></decl></param>, <param><decl><type><name PREFIX:line="70" PREFIX:column="67">size_t</name></type> <name PREFIX:line="70" PREFIX:column="74">termLen</name></decl></param>)</parameter_list>;</function_decl>   <comment type="line" PREFIX:line="70" PREFIX:column="86">// as above but search ends if the terminate string is found</comment>
  <function><type><name PREFIX:line="71" PREFIX:column="3">bool</name></type> <name PREFIX:line="71" PREFIX:column="8">findUntil</name><parameter_list PREFIX:line="71" PREFIX:column="17">(<param><decl><type><name PREFIX:line="71" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="71" PREFIX:column="27">target</name></decl></param>, <param><decl><type><name PREFIX:line="71" PREFIX:column="35">size_t</name></type> <name PREFIX:line="71" PREFIX:column="42">targetLen</name></decl></param>, <param><decl><type><name PREFIX:line="71" PREFIX:column="53">char</name> *</type><name PREFIX:line="71" PREFIX:column="59">terminate</name></decl></param>, <param><decl><type><name PREFIX:line="71" PREFIX:column="70">size_t</name></type> <name PREFIX:line="71" PREFIX:column="77">termLen</name></decl></param>)</parameter_list> <block PREFIX:line="71" PREFIX:column="86">{<return PREFIX:line="71" PREFIX:column="87">return <expr><call><name PREFIX:line="71" PREFIX:column="94">findUntil</name><argument_list PREFIX:line="71" PREFIX:column="103">(<argument><expr PREFIX:line="71" PREFIX:column="104">(<name PREFIX:line="71" PREFIX:column="105">char</name> *)<name PREFIX:line="71" PREFIX:column="112">target</name></expr></argument>, <argument><expr><name PREFIX:line="71" PREFIX:column="120">targetLen</name></expr></argument>, <argument><expr><name PREFIX:line="71" PREFIX:column="131">terminate</name></expr></argument>, <argument><expr><name PREFIX:line="71" PREFIX:column="142">termLen</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>


  <function_decl><type><name PREFIX:line="74" PREFIX:column="3">long</name></type> <name PREFIX:line="74" PREFIX:column="8">parseInt</name><parameter_list PREFIX:line="74" PREFIX:column="16">()</parameter_list>;</function_decl> <comment type="line" PREFIX:line="74" PREFIX:column="20">// returns the first valid (long) integer value from the current position.</comment>
  <comment type="line" PREFIX:line="75" PREFIX:column="3">// initial characters that are not digits (or the minus sign) are skipped</comment>
  <comment type="line" PREFIX:line="76" PREFIX:column="3">// integer is terminated by the first character that is not a digit.</comment>

  <function_decl><type><name PREFIX:line="78" PREFIX:column="3">float</name></type> <name PREFIX:line="78" PREFIX:column="9">parseFloat</name><parameter_list PREFIX:line="78" PREFIX:column="19">()</parameter_list>;</function_decl>               <comment type="line" PREFIX:line="78" PREFIX:column="37">// float version of parseInt</comment>

  <function_decl><type><name PREFIX:line="80" PREFIX:column="3">size_t</name></type> <name PREFIX:line="80" PREFIX:column="10">readBytes</name><parameter_list PREFIX:line="80" PREFIX:column="19">( <param><decl><type><name PREFIX:line="80" PREFIX:column="21">char</name> *</type><name PREFIX:line="80" PREFIX:column="27">buffer</name></decl></param>, <param><decl><type><name PREFIX:line="80" PREFIX:column="35">size_t</name></type> <name PREFIX:line="80" PREFIX:column="42">length</name></decl></param>)</parameter_list>;</function_decl> <comment type="line" PREFIX:line="80" PREFIX:column="51">// read chars from stream into buffer</comment>
  <function><type><name PREFIX:line="81" PREFIX:column="3">size_t</name></type> <name PREFIX:line="81" PREFIX:column="10">readBytes</name><parameter_list PREFIX:line="81" PREFIX:column="19">( <param><decl><type><name PREFIX:line="81" PREFIX:column="21">uint8_t</name> *</type><name PREFIX:line="81" PREFIX:column="30">buffer</name></decl></param>, <param><decl><type><name PREFIX:line="81" PREFIX:column="38">size_t</name></type> <name PREFIX:line="81" PREFIX:column="45">length</name></decl></param>)</parameter_list> <block PREFIX:line="81" PREFIX:column="53">{ <return PREFIX:line="81" PREFIX:column="55">return <expr><call><name PREFIX:line="81" PREFIX:column="62">readBytes</name><argument_list PREFIX:line="81" PREFIX:column="71">(<argument><expr PREFIX:line="81" PREFIX:column="72">(<name PREFIX:line="81" PREFIX:column="73">char</name> *)<name PREFIX:line="81" PREFIX:column="80">buffer</name></expr></argument>, <argument><expr><name PREFIX:line="81" PREFIX:column="88">length</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <comment type="line" PREFIX:line="82" PREFIX:column="3">// terminates if length characters have been read or timeout (see setTimeout)</comment>
  <comment type="line" PREFIX:line="83" PREFIX:column="3">// returns the number of characters placed in the buffer (0 means no valid data found)</comment>

  <function_decl><type><name PREFIX:line="85" PREFIX:column="3">size_t</name></type> <name PREFIX:line="85" PREFIX:column="10">readBytesUntil</name><parameter_list PREFIX:line="85" PREFIX:column="24">( <param><decl><type><name PREFIX:line="85" PREFIX:column="26">char</name></type> <name PREFIX:line="85" PREFIX:column="31">terminator</name></decl></param>, <param><decl><type><name PREFIX:line="85" PREFIX:column="43">char</name> *</type><name PREFIX:line="85" PREFIX:column="49">buffer</name></decl></param>, <param><decl><type><name PREFIX:line="85" PREFIX:column="57">size_t</name></type> <name PREFIX:line="85" PREFIX:column="64">length</name></decl></param>)</parameter_list>;</function_decl> <comment type="line" PREFIX:line="85" PREFIX:column="73">// as readBytes with terminator character</comment>
  <function><type><name PREFIX:line="86" PREFIX:column="3">size_t</name></type> <name PREFIX:line="86" PREFIX:column="10">readBytesUntil</name><parameter_list PREFIX:line="86" PREFIX:column="24">( <param><decl><type><name PREFIX:line="86" PREFIX:column="26">char</name></type> <name PREFIX:line="86" PREFIX:column="31">terminator</name></decl></param>, <param><decl><type><name PREFIX:line="86" PREFIX:column="43">uint8_t</name> *</type><name PREFIX:line="86" PREFIX:column="52">buffer</name></decl></param>, <param><decl><type><name PREFIX:line="86" PREFIX:column="60">size_t</name></type> <name PREFIX:line="86" PREFIX:column="67">length</name></decl></param>)</parameter_list> <block PREFIX:line="86" PREFIX:column="75">{ <return PREFIX:line="86" PREFIX:column="77">return <expr><call><name PREFIX:line="86" PREFIX:column="84">readBytesUntil</name><argument_list PREFIX:line="86" PREFIX:column="98">(<argument><expr><name PREFIX:line="86" PREFIX:column="99">terminator</name></expr></argument>, <argument><expr PREFIX:line="86" PREFIX:column="111">(<name PREFIX:line="86" PREFIX:column="112">char</name> *)<name PREFIX:line="86" PREFIX:column="119">buffer</name></expr></argument>, <argument><expr><name PREFIX:line="86" PREFIX:column="127">length</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <comment type="line" PREFIX:line="87" PREFIX:column="3">// terminates if length characters have been read, timeout, or if the terminator character  detected</comment>
  <comment type="line" PREFIX:line="88" PREFIX:column="3">// returns the number of characters placed in the buffer (0 means no valid data found)</comment>

  <comment type="line" PREFIX:line="90" PREFIX:column="3">// Arduino String functions to be added here</comment>
  <function_decl><type><name PREFIX:line="91" PREFIX:column="3">String</name></type> <name PREFIX:line="91" PREFIX:column="10">readString</name><parameter_list PREFIX:line="91" PREFIX:column="20">()</parameter_list>;</function_decl>
  <function_decl><type><name PREFIX:line="92" PREFIX:column="3">String</name></type> <name PREFIX:line="92" PREFIX:column="10">readStringUntil</name><parameter_list PREFIX:line="92" PREFIX:column="25">(<param><decl><type><name PREFIX:line="92" PREFIX:column="26">char</name></type> <name PREFIX:line="92" PREFIX:column="31">terminator</name></decl></param>)</parameter_list>;</function_decl>

  </public><protected PREFIX:line="94" PREFIX:column="3">protected:
  <function_decl><type><name PREFIX:line="95" PREFIX:column="3">long</name></type> <name PREFIX:line="95" PREFIX:column="8">parseInt</name><parameter_list PREFIX:line="95" PREFIX:column="16">(<param><decl><type><name PREFIX:line="95" PREFIX:column="17">char</name></type> <name PREFIX:line="95" PREFIX:column="22">skipChar</name></decl></param>)</parameter_list>;</function_decl> <comment type="line" PREFIX:line="95" PREFIX:column="33">// as above but the given skipChar is ignored</comment>
  <comment type="line" PREFIX:line="96" PREFIX:column="3">// as above but the given skipChar is ignored</comment>
  <comment type="line" PREFIX:line="97" PREFIX:column="3">// this allows format characters (typically commas) in values to be ignored</comment>

  <function_decl><type><name PREFIX:line="99" PREFIX:column="3">float</name></type> <name PREFIX:line="99" PREFIX:column="9">parseFloat</name><parameter_list PREFIX:line="99" PREFIX:column="19">(<param><decl><type><name PREFIX:line="99" PREFIX:column="20">char</name></type> <name PREFIX:line="99" PREFIX:column="25">skipChar</name></decl></param>)</parameter_list>;</function_decl>  <comment type="line" PREFIX:line="99" PREFIX:column="37">// as above but the given skipChar is ignored</comment>

  <struct PREFIX:line="101" PREFIX:column="3">struct <name PREFIX:line="101" PREFIX:column="10">MultiTarget</name> <block PREFIX:line="101" PREFIX:column="22">{<public type="default" PREFIX:line="101" PREFIX:column="23">
     <decl_stmt><decl><type><name PREFIX:line="102" PREFIX:column="6">char</name> *</type><name PREFIX:line="102" PREFIX:column="12">str</name></decl>;</decl_stmt>  <comment type="line" PREFIX:line="102" PREFIX:column="18">// string you're searching for</comment>
    <decl_stmt><decl><type><name PREFIX:line="103" PREFIX:column="5">size_t</name></type> <name PREFIX:line="103" PREFIX:column="12">len</name></decl>;</decl_stmt>       <comment type="line" PREFIX:line="103" PREFIX:column="23">// length of string you're searching for</comment>
    <decl_stmt><decl><type><name PREFIX:line="104" PREFIX:column="5">size_t</name></type> <name PREFIX:line="104" PREFIX:column="12">index</name></decl>;</decl_stmt>     <comment type="line" PREFIX:line="104" PREFIX:column="23">// index used by the search routine.</comment>
  </public>}</block>;</struct>

  <comment type="line" PREFIX:line="107" PREFIX:column="3">// This allows you to search for an arbitrary number of strings.</comment>
  <comment type="line" PREFIX:line="108" PREFIX:column="3">// Returns index of the target that is found first or -1 if timeout occurs.</comment>
  <function_decl><type><name PREFIX:line="109" PREFIX:column="3">int</name></type> <name PREFIX:line="109" PREFIX:column="7">findMulti</name><parameter_list PREFIX:line="109" PREFIX:column="16">(<param><decl><type PREFIX:line="109" PREFIX:column="17">struct <name PREFIX:line="109" PREFIX:column="24">MultiTarget</name> *</type><name PREFIX:line="109" PREFIX:column="37">targets</name></decl></param>, <param><decl><type><name PREFIX:line="109" PREFIX:column="46">int</name></type> <name PREFIX:line="109" PREFIX:column="50">tCount</name></decl></param>)</parameter_list>;</function_decl>
</protected>}</block>;</class>


<cpp:endif PREFIX:line="113" PREFIX:column="1">#<cpp:directive PREFIX:line="113" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
