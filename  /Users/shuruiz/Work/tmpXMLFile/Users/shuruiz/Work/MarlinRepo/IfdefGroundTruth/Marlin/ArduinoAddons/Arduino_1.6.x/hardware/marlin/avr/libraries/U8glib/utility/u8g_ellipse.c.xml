<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_ellipse.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*

  u8g_ellipse.c

  Utility to draw empty and filled ellipses.
  
  Universal 8bit Graphics Library
  
  Copyright (c) 2011, bjthom@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  
  Addition to the U8G Library as of 02/29/12
  Adapted from Bresenham's Algorithm and the following websites:
	http://free.pages.at/easyfilter/bresenham.html
	http://homepage.smc.edu/kennedy_john/belipse.pdf
  
*/</comment>

<cpp:include PREFIX:line="43" PREFIX:column="1">#<cpp:directive PREFIX:line="43" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="43" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>


<cpp:ifdef PREFIX:line="46" PREFIX:column="1">#<cpp:directive PREFIX:line="46" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="46" PREFIX:column="8">WORK_IN_PROGRESS</name></cpp:ifdef>

<function><type><name PREFIX:line="48" PREFIX:column="1">void</name></type> <name PREFIX:line="48" PREFIX:column="6">u8g_DrawEllipseRect</name><parameter_list PREFIX:line="48" PREFIX:column="25">(<param><decl><type><name PREFIX:line="48" PREFIX:column="26">u8g_t</name> *</type><name PREFIX:line="48" PREFIX:column="33">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="48" PREFIX:column="38">u8g_uint_t</name></type> <name PREFIX:line="48" PREFIX:column="49">x0</name></decl></param>, <param><decl><type><name PREFIX:line="48" PREFIX:column="53">u8g_uint_t</name></type> <name PREFIX:line="48" PREFIX:column="64">y0</name></decl></param>, <param><decl><type><name PREFIX:line="48" PREFIX:column="68">u8g_uint_t</name></type> <name PREFIX:line="48" PREFIX:column="79">x1</name></decl></param>, <param><decl><type><name PREFIX:line="48" PREFIX:column="83">u8g_uint_t</name></type> <name PREFIX:line="48" PREFIX:column="94">y1</name></decl></param>)</parameter_list>
<block PREFIX:line="49" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="50" PREFIX:column="9">int</name></type> <name PREFIX:line="50" PREFIX:column="13">a</name> <init PREFIX:line="50" PREFIX:column="15">= <expr><call><name PREFIX:line="50" PREFIX:column="17">abs</name><argument_list PREFIX:line="50" PREFIX:column="20">(<argument><expr><name PREFIX:line="50" PREFIX:column="21">x1</name> - <name PREFIX:line="50" PREFIX:column="26">x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="51" PREFIX:column="9">int</name></type> <name PREFIX:line="51" PREFIX:column="13">b</name> <init PREFIX:line="51" PREFIX:column="15">= <expr><call><name PREFIX:line="51" PREFIX:column="17">abs</name><argument_list PREFIX:line="51" PREFIX:column="20">(<argument><expr><name PREFIX:line="51" PREFIX:column="21">y1</name> - <name PREFIX:line="51" PREFIX:column="26">y0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" PREFIX:line="51" PREFIX:column="33">//get diameters</comment>
	<decl_stmt><decl><type><name PREFIX:line="52" PREFIX:column="9">int</name></type> <name PREFIX:line="52" PREFIX:column="13">b1</name> <init PREFIX:line="52" PREFIX:column="16">= <expr><name PREFIX:line="52" PREFIX:column="18">b</name>&amp;1</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="53" PREFIX:column="9">long</name></type> <name PREFIX:line="53" PREFIX:column="14">dx</name> <init PREFIX:line="53" PREFIX:column="17">= <expr PREFIX:line="53" PREFIX:column="19">4*(1-<name PREFIX:line="53" PREFIX:column="24">a</name>)*<name PREFIX:line="53" PREFIX:column="27">b</name>*<name PREFIX:line="53" PREFIX:column="29">b</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="54" PREFIX:column="9">long</name></type> <name PREFIX:line="54" PREFIX:column="14">dy</name> <init PREFIX:line="54" PREFIX:column="17">= <expr PREFIX:line="54" PREFIX:column="19">4*(<name PREFIX:line="54" PREFIX:column="22">b1</name>+1)*<name PREFIX:line="54" PREFIX:column="28">a</name>*<name PREFIX:line="54" PREFIX:column="30">a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="55" PREFIX:column="9">long</name></type> <name PREFIX:line="55" PREFIX:column="14">err</name> <init PREFIX:line="55" PREFIX:column="18">= <expr><name PREFIX:line="55" PREFIX:column="20">dx</name>+<name PREFIX:line="55" PREFIX:column="23">dy</name>+<name PREFIX:line="55" PREFIX:column="26">b1</name>*<name PREFIX:line="55" PREFIX:column="29">a</name>*<name PREFIX:line="55" PREFIX:column="31">a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="56" PREFIX:column="9">long</name></type> <name PREFIX:line="56" PREFIX:column="14">e2</name></decl>;</decl_stmt>
	
	<if PREFIX:line="58" PREFIX:column="9">if <condition PREFIX:line="58" PREFIX:column="12">(<expr><name PREFIX:line="58" PREFIX:column="13">x0</name> &gt; <name PREFIX:line="58" PREFIX:column="18">x1</name></expr>)</condition><then PREFIX:line="58" PREFIX:column="21"> <block PREFIX:line="58" PREFIX:column="22">{ <expr_stmt><expr><name PREFIX:line="58" PREFIX:column="24">x0</name> = <name PREFIX:line="58" PREFIX:column="29">x1</name></expr>;</expr_stmt> <expr_stmt><expr><name PREFIX:line="58" PREFIX:column="33">x1</name> += <name PREFIX:line="58" PREFIX:column="39">a</name></expr>;</expr_stmt> }</block></then></if>
	<if PREFIX:line="59" PREFIX:column="9">if <condition PREFIX:line="59" PREFIX:column="12">(<expr><name PREFIX:line="59" PREFIX:column="13">y0</name> &gt; <name PREFIX:line="59" PREFIX:column="18">y1</name></expr>)</condition><then PREFIX:line="59" PREFIX:column="21"> <block PREFIX:line="59" PREFIX:column="22">{ <expr_stmt><expr><name PREFIX:line="59" PREFIX:column="24">y0</name> = <name PREFIX:line="59" PREFIX:column="29">y1</name></expr>;</expr_stmt> }</block></then></if> 
	<expr_stmt><expr><name PREFIX:line="60" PREFIX:column="9">y0</name> += (<name PREFIX:line="60" PREFIX:column="16">b</name>+1)/2</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="61" PREFIX:column="9">y1</name> = <name PREFIX:line="61" PREFIX:column="14">y0</name>-<name PREFIX:line="61" PREFIX:column="17">b1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="62" PREFIX:column="9">a</name> *= 8*<name PREFIX:line="62" PREFIX:column="16">a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="63" PREFIX:column="9">b1</name> = 8*<name PREFIX:line="63" PREFIX:column="16">b</name>*<name PREFIX:line="63" PREFIX:column="18">b</name></expr>;</expr_stmt>
	
	<do PREFIX:line="65" PREFIX:column="9">do <block PREFIX:line="65" PREFIX:column="12">{
		<expr_stmt><expr><call><name PREFIX:line="66" PREFIX:column="17">u8g_DrawPixel</name><argument_list PREFIX:line="66" PREFIX:column="30">(<argument><expr><name PREFIX:line="66" PREFIX:column="31">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="66" PREFIX:column="36">x1</name></expr></argument>, <argument><expr><name PREFIX:line="66" PREFIX:column="40">y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="67" PREFIX:column="17">u8g_DrawPixel</name><argument_list PREFIX:line="67" PREFIX:column="30">(<argument><expr><name PREFIX:line="67" PREFIX:column="31">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="67" PREFIX:column="36">x0</name></expr></argument>, <argument><expr><name PREFIX:line="67" PREFIX:column="40">y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="68" PREFIX:column="17">u8g_DrawPixel</name><argument_list PREFIX:line="68" PREFIX:column="30">(<argument><expr><name PREFIX:line="68" PREFIX:column="31">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="68" PREFIX:column="36">x0</name></expr></argument>, <argument><expr><name PREFIX:line="68" PREFIX:column="40">y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="69" PREFIX:column="17">u8g_DrawPixel</name><argument_list PREFIX:line="69" PREFIX:column="30">(<argument><expr><name PREFIX:line="69" PREFIX:column="31">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="69" PREFIX:column="36">x1</name></expr></argument>, <argument><expr><name PREFIX:line="69" PREFIX:column="40">y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="70" PREFIX:column="17">e2</name> = 2*<name PREFIX:line="70" PREFIX:column="24">err</name></expr>;</expr_stmt>
		<if PREFIX:line="71" PREFIX:column="17">if <condition PREFIX:line="71" PREFIX:column="20">(<expr><name PREFIX:line="71" PREFIX:column="21">e2</name> &gt;= <name PREFIX:line="71" PREFIX:column="27">dx</name></expr>)</condition><then PREFIX:line="71" PREFIX:column="30"> <block PREFIX:line="71" PREFIX:column="31">{
			<expr_stmt><expr><name PREFIX:line="72" PREFIX:column="25">x0</name>++</expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="73" PREFIX:column="25">x1</name>--</expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="74" PREFIX:column="25">err</name> += <name PREFIX:line="74" PREFIX:column="32">dx</name> += <name PREFIX:line="74" PREFIX:column="38">b1</name></expr>;</expr_stmt>
		}</block></then></if>
		<if PREFIX:line="76" PREFIX:column="17">if <condition PREFIX:line="76" PREFIX:column="20">(<expr><name PREFIX:line="76" PREFIX:column="21">e2</name> &lt;= <name PREFIX:line="76" PREFIX:column="27">dy</name></expr>)</condition><then PREFIX:line="76" PREFIX:column="30"> <block PREFIX:line="76" PREFIX:column="31">{
			<expr_stmt><expr><name PREFIX:line="77" PREFIX:column="25">y0</name>++</expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="78" PREFIX:column="25">y1</name>--</expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="79" PREFIX:column="25">err</name> += <name PREFIX:line="79" PREFIX:column="32">dy</name> += <name PREFIX:line="79" PREFIX:column="38">a</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block> while <condition PREFIX:line="81" PREFIX:column="17">(<expr><name PREFIX:line="81" PREFIX:column="18">x0</name> &lt;= <name PREFIX:line="81" PREFIX:column="24">x1</name></expr>)</condition>;</do>
	
	<while PREFIX:line="83" PREFIX:column="9">while <condition PREFIX:line="83" PREFIX:column="15">(<expr><name PREFIX:line="83" PREFIX:column="16">y0</name>-<name PREFIX:line="83" PREFIX:column="19">y1</name> &lt; <name PREFIX:line="83" PREFIX:column="24">b</name></expr>)</condition> <block PREFIX:line="83" PREFIX:column="27">{
		<expr_stmt><expr><call><name PREFIX:line="84" PREFIX:column="17">u8g_DrawPixel</name><argument_list PREFIX:line="84" PREFIX:column="30">(<argument><expr><name PREFIX:line="84" PREFIX:column="31">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="84" PREFIX:column="36">x0</name>-1</expr></argument>, <argument><expr><name PREFIX:line="84" PREFIX:column="42">y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="85" PREFIX:column="17">u8g_DrawPixel</name><argument_list PREFIX:line="85" PREFIX:column="30">(<argument><expr><name PREFIX:line="85" PREFIX:column="31">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="85" PREFIX:column="36">x1</name>+1</expr></argument>, <argument><expr><name PREFIX:line="85" PREFIX:column="42">y0</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="86" PREFIX:column="17">u8g_DrawPixel</name><argument_list PREFIX:line="86" PREFIX:column="30">(<argument><expr><name PREFIX:line="86" PREFIX:column="31">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="86" PREFIX:column="36">x0</name>-1</expr></argument>, <argument><expr><name PREFIX:line="86" PREFIX:column="42">y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="87" PREFIX:column="17">u8g_DrawPixel</name><argument_list PREFIX:line="87" PREFIX:column="30">(<argument><expr><name PREFIX:line="87" PREFIX:column="31">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="87" PREFIX:column="36">x1</name>+1</expr></argument>, <argument><expr><name PREFIX:line="87" PREFIX:column="42">y1</name>--</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name PREFIX:line="91" PREFIX:column="1">void</name></type> <name PREFIX:line="91" PREFIX:column="6">u8g_DrawEllipse</name><parameter_list PREFIX:line="91" PREFIX:column="21">(<param><decl><type><name PREFIX:line="91" PREFIX:column="22">u8g_t</name> *</type><name PREFIX:line="91" PREFIX:column="29">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="91" PREFIX:column="34">u8g_uint_t</name></type> <name PREFIX:line="91" PREFIX:column="45">x0</name></decl></param>, <param><decl><type><name PREFIX:line="91" PREFIX:column="49">u8g_uint_t</name></type> <name PREFIX:line="91" PREFIX:column="60">y0</name></decl></param>, <param><decl><type><name PREFIX:line="91" PREFIX:column="64">u8g_uint_t</name></type> <name PREFIX:line="91" PREFIX:column="75">xr</name></decl></param>, <param><decl><type><name PREFIX:line="91" PREFIX:column="79">u8g_uint_t</name></type> <name PREFIX:line="91" PREFIX:column="90">yr</name></decl></param>)</parameter_list>
<block PREFIX:line="92" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="93" PREFIX:column="9">u8g_DrawPixel</name><argument_list PREFIX:line="93" PREFIX:column="22">(<argument><expr><name PREFIX:line="93" PREFIX:column="23">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="93" PREFIX:column="28">x0</name></expr></argument>, <argument><expr><name PREFIX:line="93" PREFIX:column="32">y0</name>+<name PREFIX:line="93" PREFIX:column="35">yr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="94" PREFIX:column="9">u8g_DrawPixel</name><argument_list PREFIX:line="94" PREFIX:column="22">(<argument><expr><name PREFIX:line="94" PREFIX:column="23">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="94" PREFIX:column="28">x0</name></expr></argument>, <argument><expr><name PREFIX:line="94" PREFIX:column="32">y0</name>-<name PREFIX:line="94" PREFIX:column="35">yr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="95" PREFIX:column="9">u8g_DrawPixel</name><argument_list PREFIX:line="95" PREFIX:column="22">(<argument><expr><name PREFIX:line="95" PREFIX:column="23">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="95" PREFIX:column="28">x0</name>+<name PREFIX:line="95" PREFIX:column="31">xr</name></expr></argument>, <argument><expr><name PREFIX:line="95" PREFIX:column="35">y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="96" PREFIX:column="9">u8g_DrawPixel</name><argument_list PREFIX:line="96" PREFIX:column="22">(<argument><expr><name PREFIX:line="96" PREFIX:column="23">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="96" PREFIX:column="28">x0</name>-<name PREFIX:line="96" PREFIX:column="31">xr</name></expr></argument>, <argument><expr><name PREFIX:line="96" PREFIX:column="35">y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:endif PREFIX:line="99" PREFIX:column="1">#<cpp:directive PREFIX:line="99" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="101" PREFIX:column="1">#<cpp:directive PREFIX:line="101" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="101" PREFIX:column="5">defined</name><argument_list PREFIX:line="101" PREFIX:column="12">(<argument><expr><name PREFIX:line="101" PREFIX:column="13">U8G_16BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef PREFIX:line="102" PREFIX:column="1">typedef  <type><name PREFIX:line="102" PREFIX:column="10">int32_t</name></type> <name PREFIX:line="102" PREFIX:column="18">u8g_long_t</name>;</typedef>
<cpp:else PREFIX:line="103" PREFIX:column="1">#<cpp:directive PREFIX:line="103" PREFIX:column="2">else</cpp:directive></cpp:else>
<typedef PREFIX:line="104" PREFIX:column="1">typedef  <type><name PREFIX:line="104" PREFIX:column="10">int16_t</name></type> <name PREFIX:line="104" PREFIX:column="18">u8g_long_t</name>;</typedef>
<cpp:endif PREFIX:line="105" PREFIX:column="1">#<cpp:directive PREFIX:line="105" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="108" PREFIX:column="1">/*
  Source: 
    ftp://pc.fk0.name/pub/books/programming/bezier-ellipse.pdf
    Foley, Computer Graphics, p 90
*/</comment>
<decl_stmt><decl><type><specifier PREFIX:line="113" PREFIX:column="1">static</specifier> <name PREFIX:line="113" PREFIX:column="8">void</name></type> <name PREFIX:line="113" PREFIX:column="13">u8g_draw_ellipse_section</name><argument_list PREFIX:line="113" PREFIX:column="37">(<argument><expr><name PREFIX:line="113" PREFIX:column="38">u8g_t</name> *<name PREFIX:line="113" PREFIX:column="45">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="113" PREFIX:column="50">u8g_uint_t</name> <name PREFIX:line="113" PREFIX:column="61">x</name></expr></argument>, <argument><expr><name PREFIX:line="113" PREFIX:column="64">u8g_uint_t</name> <name PREFIX:line="113" PREFIX:column="75">y</name></expr></argument>, <argument><expr><name PREFIX:line="113" PREFIX:column="78">u8g_uint_t</name> <name PREFIX:line="113" PREFIX:column="89">x0</name></expr></argument>, <argument><expr><name PREFIX:line="113" PREFIX:column="93">u8g_uint_t</name> <name PREFIX:line="113" PREFIX:column="104">y0</name></expr></argument>, <argument><expr><name PREFIX:line="113" PREFIX:column="108">uint8_t</name> <name PREFIX:line="113" PREFIX:column="116">option</name></expr></argument>)</argument_list> <name PREFIX:line="113" PREFIX:column="124">U8G_NOINLINE</name></decl>;</decl_stmt>
<function><type><specifier PREFIX:line="114" PREFIX:column="1">static</specifier> <name PREFIX:line="114" PREFIX:column="8">void</name></type> <name PREFIX:line="114" PREFIX:column="13">u8g_draw_ellipse_section</name><parameter_list PREFIX:line="114" PREFIX:column="37">(<param><decl><type><name PREFIX:line="114" PREFIX:column="38">u8g_t</name> *</type><name PREFIX:line="114" PREFIX:column="45">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="114" PREFIX:column="50">u8g_uint_t</name></type> <name PREFIX:line="114" PREFIX:column="61">x</name></decl></param>, <param><decl><type><name PREFIX:line="114" PREFIX:column="64">u8g_uint_t</name></type> <name PREFIX:line="114" PREFIX:column="75">y</name></decl></param>, <param><decl><type><name PREFIX:line="114" PREFIX:column="78">u8g_uint_t</name></type> <name PREFIX:line="114" PREFIX:column="89">x0</name></decl></param>, <param><decl><type><name PREFIX:line="114" PREFIX:column="93">u8g_uint_t</name></type> <name PREFIX:line="114" PREFIX:column="104">y0</name></decl></param>, <param><decl><type><name PREFIX:line="114" PREFIX:column="108">uint8_t</name></type> <name PREFIX:line="114" PREFIX:column="116">option</name></decl></param>)</parameter_list>
<block PREFIX:line="115" PREFIX:column="1">{
    <comment type="block" PREFIX:line="116" PREFIX:column="5">/* upper right */</comment>
    <if PREFIX:line="117" PREFIX:column="5">if <condition PREFIX:line="117" PREFIX:column="8">( <expr><name PREFIX:line="117" PREFIX:column="10">option</name> &amp; <name PREFIX:line="117" PREFIX:column="19">U8G_DRAW_UPPER_RIGHT</name></expr> )</condition><then PREFIX:line="117" PREFIX:column="41">
    <block PREFIX:line="118" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="119" PREFIX:column="7">u8g_DrawPixel</name><argument_list PREFIX:line="119" PREFIX:column="20">(<argument><expr><name PREFIX:line="119" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="119" PREFIX:column="26">x0</name> + <name PREFIX:line="119" PREFIX:column="31">x</name></expr></argument>, <argument><expr><name PREFIX:line="119" PREFIX:column="34">y0</name> - <name PREFIX:line="119" PREFIX:column="39">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <comment type="block" PREFIX:line="122" PREFIX:column="5">/* upper left */</comment>
    <if PREFIX:line="123" PREFIX:column="5">if <condition PREFIX:line="123" PREFIX:column="8">( <expr><name PREFIX:line="123" PREFIX:column="10">option</name> &amp; <name PREFIX:line="123" PREFIX:column="19">U8G_DRAW_UPPER_LEFT</name></expr> )</condition><then PREFIX:line="123" PREFIX:column="40">
    <block PREFIX:line="124" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="125" PREFIX:column="7">u8g_DrawPixel</name><argument_list PREFIX:line="125" PREFIX:column="20">(<argument><expr><name PREFIX:line="125" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="125" PREFIX:column="26">x0</name> - <name PREFIX:line="125" PREFIX:column="31">x</name></expr></argument>, <argument><expr><name PREFIX:line="125" PREFIX:column="34">y0</name> - <name PREFIX:line="125" PREFIX:column="39">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <comment type="block" PREFIX:line="128" PREFIX:column="5">/* lower right */</comment>
    <if PREFIX:line="129" PREFIX:column="5">if <condition PREFIX:line="129" PREFIX:column="8">( <expr><name PREFIX:line="129" PREFIX:column="10">option</name> &amp; <name PREFIX:line="129" PREFIX:column="19">U8G_DRAW_LOWER_RIGHT</name></expr> )</condition><then PREFIX:line="129" PREFIX:column="41">
    <block PREFIX:line="130" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="131" PREFIX:column="7">u8g_DrawPixel</name><argument_list PREFIX:line="131" PREFIX:column="20">(<argument><expr><name PREFIX:line="131" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="131" PREFIX:column="26">x0</name> + <name PREFIX:line="131" PREFIX:column="31">x</name></expr></argument>, <argument><expr><name PREFIX:line="131" PREFIX:column="34">y0</name> + <name PREFIX:line="131" PREFIX:column="39">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <comment type="block" PREFIX:line="134" PREFIX:column="5">/* lower left */</comment>
    <if PREFIX:line="135" PREFIX:column="5">if <condition PREFIX:line="135" PREFIX:column="8">( <expr><name PREFIX:line="135" PREFIX:column="10">option</name> &amp; <name PREFIX:line="135" PREFIX:column="19">U8G_DRAW_LOWER_LEFT</name></expr> )</condition><then PREFIX:line="135" PREFIX:column="40">
    <block PREFIX:line="136" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="137" PREFIX:column="7">u8g_DrawPixel</name><argument_list PREFIX:line="137" PREFIX:column="20">(<argument><expr><name PREFIX:line="137" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="137" PREFIX:column="26">x0</name> - <name PREFIX:line="137" PREFIX:column="31">x</name></expr></argument>, <argument><expr><name PREFIX:line="137" PREFIX:column="34">y0</name> + <name PREFIX:line="137" PREFIX:column="39">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="141" PREFIX:column="1">void</name></type> <name PREFIX:line="141" PREFIX:column="6">u8g_draw_ellipse</name><parameter_list PREFIX:line="141" PREFIX:column="22">(<param><decl><type><name PREFIX:line="141" PREFIX:column="23">u8g_t</name> *</type><name PREFIX:line="141" PREFIX:column="30">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="141" PREFIX:column="35">u8g_uint_t</name></type> <name PREFIX:line="141" PREFIX:column="46">x0</name></decl></param>, <param><decl><type><name PREFIX:line="141" PREFIX:column="50">u8g_uint_t</name></type> <name PREFIX:line="141" PREFIX:column="61">y0</name></decl></param>, <param><decl><type><name PREFIX:line="141" PREFIX:column="65">u8g_uint_t</name></type> <name PREFIX:line="141" PREFIX:column="76">rx</name></decl></param>, <param><decl><type><name PREFIX:line="141" PREFIX:column="80">u8g_uint_t</name></type> <name PREFIX:line="141" PREFIX:column="91">ry</name></decl></param>, <param><decl><type><name PREFIX:line="141" PREFIX:column="95">uint8_t</name></type> <name PREFIX:line="141" PREFIX:column="103">option</name></decl></param>)</parameter_list>
<block PREFIX:line="142" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="143" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="143" PREFIX:column="14">x</name></decl>, <decl><type ref="prev"/><name PREFIX:line="143" PREFIX:column="17">y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="144" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="144" PREFIX:column="14">xchg</name></decl>, <decl><type ref="prev"/><name PREFIX:line="144" PREFIX:column="20">ychg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="145" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="145" PREFIX:column="14">err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="146" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="146" PREFIX:column="14">rxrx2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="147" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="147" PREFIX:column="14">ryry2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="148" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="148" PREFIX:column="14">stopx</name></decl>, <decl><type ref="prev"/><name PREFIX:line="148" PREFIX:column="21">stopy</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name PREFIX:line="150" PREFIX:column="3">rxrx2</name> = <name PREFIX:line="150" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="151" PREFIX:column="3">rxrx2</name> *= <name PREFIX:line="151" PREFIX:column="12">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="152" PREFIX:column="3">rxrx2</name> *= 2</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="154" PREFIX:column="3">ryry2</name> = <name PREFIX:line="154" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="155" PREFIX:column="3">ryry2</name> *= <name PREFIX:line="155" PREFIX:column="12">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="156" PREFIX:column="3">ryry2</name> *= 2</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="158" PREFIX:column="3">x</name> = <name PREFIX:line="158" PREFIX:column="7">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="159" PREFIX:column="3">y</name> = 0</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="161" PREFIX:column="3">xchg</name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="162" PREFIX:column="3">xchg</name> -= <name PREFIX:line="162" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="163" PREFIX:column="3">xchg</name> -= <name PREFIX:line="163" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="164" PREFIX:column="3">xchg</name> *= <name PREFIX:line="164" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="165" PREFIX:column="3">xchg</name> *= <name PREFIX:line="165" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="167" PREFIX:column="3">ychg</name> = <name PREFIX:line="167" PREFIX:column="10">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="168" PREFIX:column="3">ychg</name> *= <name PREFIX:line="168" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="170" PREFIX:column="3">err</name> = 0</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="172" PREFIX:column="3">stopx</name> = <name PREFIX:line="172" PREFIX:column="11">ryry2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="173" PREFIX:column="3">stopx</name> *= <name PREFIX:line="173" PREFIX:column="12">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="174" PREFIX:column="3">stopy</name> = 0</expr>;</expr_stmt>
  
  <while PREFIX:line="176" PREFIX:column="3">while<condition PREFIX:line="176" PREFIX:column="8">( <expr><name PREFIX:line="176" PREFIX:column="10">stopx</name> &gt;= <name PREFIX:line="176" PREFIX:column="19">stopy</name></expr> )</condition>
  <block PREFIX:line="177" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="178" PREFIX:column="5">u8g_draw_ellipse_section</name><argument_list PREFIX:line="178" PREFIX:column="29">(<argument><expr><name PREFIX:line="178" PREFIX:column="30">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="178" PREFIX:column="35">x</name></expr></argument>, <argument><expr><name PREFIX:line="178" PREFIX:column="38">y</name></expr></argument>, <argument><expr><name PREFIX:line="178" PREFIX:column="41">x0</name></expr></argument>, <argument><expr><name PREFIX:line="178" PREFIX:column="45">y0</name></expr></argument>, <argument><expr><name PREFIX:line="178" PREFIX:column="49">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="179" PREFIX:column="5">y</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="180" PREFIX:column="5">stopy</name> += <name PREFIX:line="180" PREFIX:column="14">rxrx2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="181" PREFIX:column="5">err</name> += <name PREFIX:line="181" PREFIX:column="12">ychg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="182" PREFIX:column="5">ychg</name> += <name PREFIX:line="182" PREFIX:column="13">rxrx2</name></expr>;</expr_stmt>
    <if PREFIX:line="183" PREFIX:column="5">if <condition PREFIX:line="183" PREFIX:column="8">( <expr PREFIX:line="183" PREFIX:column="10">2*<name PREFIX:line="183" PREFIX:column="12">err</name>+<name PREFIX:line="183" PREFIX:column="16">xchg</name> &gt; 0</expr> )</condition><then PREFIX:line="183" PREFIX:column="26">
    <block PREFIX:line="184" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="185" PREFIX:column="7">x</name>--</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="186" PREFIX:column="7">stopx</name> -= <name PREFIX:line="186" PREFIX:column="16">ryry2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="187" PREFIX:column="7">err</name> += <name PREFIX:line="187" PREFIX:column="14">xchg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="188" PREFIX:column="7">xchg</name> += <name PREFIX:line="188" PREFIX:column="15">ryry2</name></expr>;</expr_stmt>      
    }</block></then></if>
  }</block></while>

  <expr_stmt><expr><name PREFIX:line="192" PREFIX:column="3">x</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="193" PREFIX:column="3">y</name> = <name PREFIX:line="193" PREFIX:column="7">ry</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="195" PREFIX:column="3">xchg</name> = <name PREFIX:line="195" PREFIX:column="10">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="196" PREFIX:column="3">xchg</name> *= <name PREFIX:line="196" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="198" PREFIX:column="3">ychg</name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="199" PREFIX:column="3">ychg</name> -= <name PREFIX:line="199" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="200" PREFIX:column="3">ychg</name> -= <name PREFIX:line="200" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="201" PREFIX:column="3">ychg</name> *= <name PREFIX:line="201" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="202" PREFIX:column="3">ychg</name> *= <name PREFIX:line="202" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="204" PREFIX:column="3">err</name> = 0</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="206" PREFIX:column="3">stopx</name> = 0</expr>;</expr_stmt>

  <expr_stmt><expr><name PREFIX:line="208" PREFIX:column="3">stopy</name> = <name PREFIX:line="208" PREFIX:column="11">rxrx2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="209" PREFIX:column="3">stopy</name> *= <name PREFIX:line="209" PREFIX:column="12">ry</name></expr>;</expr_stmt>
  

  <while PREFIX:line="212" PREFIX:column="3">while<condition PREFIX:line="212" PREFIX:column="8">( <expr><name PREFIX:line="212" PREFIX:column="10">stopx</name> &lt;= <name PREFIX:line="212" PREFIX:column="19">stopy</name></expr> )</condition>
  <block PREFIX:line="213" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="214" PREFIX:column="5">u8g_draw_ellipse_section</name><argument_list PREFIX:line="214" PREFIX:column="29">(<argument><expr><name PREFIX:line="214" PREFIX:column="30">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="214" PREFIX:column="35">x</name></expr></argument>, <argument><expr><name PREFIX:line="214" PREFIX:column="38">y</name></expr></argument>, <argument><expr><name PREFIX:line="214" PREFIX:column="41">x0</name></expr></argument>, <argument><expr><name PREFIX:line="214" PREFIX:column="45">y0</name></expr></argument>, <argument><expr><name PREFIX:line="214" PREFIX:column="49">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="215" PREFIX:column="5">x</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="216" PREFIX:column="5">stopx</name> += <name PREFIX:line="216" PREFIX:column="14">ryry2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="217" PREFIX:column="5">err</name> += <name PREFIX:line="217" PREFIX:column="12">xchg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="218" PREFIX:column="5">xchg</name> += <name PREFIX:line="218" PREFIX:column="13">ryry2</name></expr>;</expr_stmt>
    <if PREFIX:line="219" PREFIX:column="5">if <condition PREFIX:line="219" PREFIX:column="8">( <expr PREFIX:line="219" PREFIX:column="10">2*<name PREFIX:line="219" PREFIX:column="12">err</name>+<name PREFIX:line="219" PREFIX:column="16">ychg</name> &gt; 0</expr> )</condition><then PREFIX:line="219" PREFIX:column="26">
    <block PREFIX:line="220" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="221" PREFIX:column="7">y</name>--</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="222" PREFIX:column="7">stopy</name> -= <name PREFIX:line="222" PREFIX:column="16">rxrx2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="223" PREFIX:column="7">err</name> += <name PREFIX:line="223" PREFIX:column="14">ychg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="224" PREFIX:column="7">ychg</name> += <name PREFIX:line="224" PREFIX:column="15">rxrx2</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></while>
  
}</block></function>

<function><type><name PREFIX:line="230" PREFIX:column="1">void</name></type> <name PREFIX:line="230" PREFIX:column="6">u8g_DrawEllipse</name><parameter_list PREFIX:line="230" PREFIX:column="21">(<param><decl><type><name PREFIX:line="230" PREFIX:column="22">u8g_t</name> *</type><name PREFIX:line="230" PREFIX:column="29">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="230" PREFIX:column="34">u8g_uint_t</name></type> <name PREFIX:line="230" PREFIX:column="45">x0</name></decl></param>, <param><decl><type><name PREFIX:line="230" PREFIX:column="49">u8g_uint_t</name></type> <name PREFIX:line="230" PREFIX:column="60">y0</name></decl></param>, <param><decl><type><name PREFIX:line="230" PREFIX:column="64">u8g_uint_t</name></type> <name PREFIX:line="230" PREFIX:column="75">rx</name></decl></param>, <param><decl><type><name PREFIX:line="230" PREFIX:column="79">u8g_uint_t</name></type> <name PREFIX:line="230" PREFIX:column="90">ry</name></decl></param>, <param><decl><type><name PREFIX:line="230" PREFIX:column="94">uint8_t</name></type> <name PREFIX:line="230" PREFIX:column="102">option</name></decl></param>)</parameter_list>
<block PREFIX:line="231" PREFIX:column="1">{
  <comment type="block" PREFIX:line="232" PREFIX:column="3">/* check for bounding box */</comment>
  <block PREFIX:line="233" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="234" PREFIX:column="5">u8g_uint_t</name></type> <name PREFIX:line="234" PREFIX:column="16">rxp</name></decl>, <decl><type ref="prev"/><name PREFIX:line="234" PREFIX:column="21">rxp2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="235" PREFIX:column="5">u8g_uint_t</name></type> <name PREFIX:line="235" PREFIX:column="16">ryp</name></decl>, <decl><type ref="prev"/><name PREFIX:line="235" PREFIX:column="21">ryp2</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name PREFIX:line="237" PREFIX:column="5">rxp</name> = <name PREFIX:line="237" PREFIX:column="11">rx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="238" PREFIX:column="5">rxp</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="239" PREFIX:column="5">rxp2</name> = <name PREFIX:line="239" PREFIX:column="12">rxp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="240" PREFIX:column="5">rxp2</name> *= 2</expr>;</expr_stmt>

    <expr_stmt><expr><name PREFIX:line="242" PREFIX:column="5">ryp</name> = <name PREFIX:line="242" PREFIX:column="11">ry</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="243" PREFIX:column="5">ryp</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="244" PREFIX:column="5">ryp2</name> = <name PREFIX:line="244" PREFIX:column="12">ryp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="245" PREFIX:column="5">ryp2</name> *= 2</expr>;</expr_stmt>
    
    <if PREFIX:line="247" PREFIX:column="5">if <condition PREFIX:line="247" PREFIX:column="8">( <expr><call><name PREFIX:line="247" PREFIX:column="10">u8g_IsBBXIntersection</name><argument_list PREFIX:line="247" PREFIX:column="31">(<argument><expr><name PREFIX:line="247" PREFIX:column="32">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="247" PREFIX:column="37">x0</name>-<name PREFIX:line="247" PREFIX:column="40">rxp</name></expr></argument>, <argument><expr><name PREFIX:line="247" PREFIX:column="45">y0</name>-<name PREFIX:line="247" PREFIX:column="48">ryp</name></expr></argument>, <argument><expr><name PREFIX:line="247" PREFIX:column="53">rxp2</name></expr></argument>, <argument><expr><name PREFIX:line="247" PREFIX:column="59">ryp2</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then PREFIX:line="247" PREFIX:column="70">
      <return PREFIX:line="248" PREFIX:column="7">return;</return></then></if>    
  }</block>
  
  <expr_stmt><expr><call><name PREFIX:line="251" PREFIX:column="3">u8g_draw_ellipse</name><argument_list PREFIX:line="251" PREFIX:column="19">(<argument><expr><name PREFIX:line="251" PREFIX:column="20">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="251" PREFIX:column="25">x0</name></expr></argument>, <argument><expr><name PREFIX:line="251" PREFIX:column="29">y0</name></expr></argument>, <argument><expr><name PREFIX:line="251" PREFIX:column="33">rx</name></expr></argument>, <argument><expr><name PREFIX:line="251" PREFIX:column="37">ry</name></expr></argument>, <argument><expr><name PREFIX:line="251" PREFIX:column="41">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier PREFIX:line="254" PREFIX:column="1">static</specifier> <name PREFIX:line="254" PREFIX:column="8">void</name></type> <name PREFIX:line="254" PREFIX:column="13">u8g_draw_filled_ellipse_section</name><argument_list PREFIX:line="254" PREFIX:column="44">(<argument><expr><name PREFIX:line="254" PREFIX:column="45">u8g_t</name> *<name PREFIX:line="254" PREFIX:column="52">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="254" PREFIX:column="57">u8g_uint_t</name> <name PREFIX:line="254" PREFIX:column="68">x</name></expr></argument>, <argument><expr><name PREFIX:line="254" PREFIX:column="71">u8g_uint_t</name> <name PREFIX:line="254" PREFIX:column="82">y</name></expr></argument>, <argument><expr><name PREFIX:line="254" PREFIX:column="85">u8g_uint_t</name> <name PREFIX:line="254" PREFIX:column="96">x0</name></expr></argument>, <argument><expr><name PREFIX:line="254" PREFIX:column="100">u8g_uint_t</name> <name PREFIX:line="254" PREFIX:column="111">y0</name></expr></argument>, <argument><expr><name PREFIX:line="254" PREFIX:column="115">uint8_t</name> <name PREFIX:line="254" PREFIX:column="123">option</name></expr></argument>)</argument_list> <name PREFIX:line="254" PREFIX:column="131">U8G_NOINLINE</name></decl>;</decl_stmt>
<function><type><specifier PREFIX:line="255" PREFIX:column="1">static</specifier> <name PREFIX:line="255" PREFIX:column="8">void</name></type> <name PREFIX:line="255" PREFIX:column="13">u8g_draw_filled_ellipse_section</name><parameter_list PREFIX:line="255" PREFIX:column="44">(<param><decl><type><name PREFIX:line="255" PREFIX:column="45">u8g_t</name> *</type><name PREFIX:line="255" PREFIX:column="52">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="255" PREFIX:column="57">u8g_uint_t</name></type> <name PREFIX:line="255" PREFIX:column="68">x</name></decl></param>, <param><decl><type><name PREFIX:line="255" PREFIX:column="71">u8g_uint_t</name></type> <name PREFIX:line="255" PREFIX:column="82">y</name></decl></param>, <param><decl><type><name PREFIX:line="255" PREFIX:column="85">u8g_uint_t</name></type> <name PREFIX:line="255" PREFIX:column="96">x0</name></decl></param>, <param><decl><type><name PREFIX:line="255" PREFIX:column="100">u8g_uint_t</name></type> <name PREFIX:line="255" PREFIX:column="111">y0</name></decl></param>, <param><decl><type><name PREFIX:line="255" PREFIX:column="115">uint8_t</name></type> <name PREFIX:line="255" PREFIX:column="123">option</name></decl></param>)</parameter_list>
<block PREFIX:line="256" PREFIX:column="1">{
    <comment type="block" PREFIX:line="257" PREFIX:column="5">/* upper right */</comment>
    <if PREFIX:line="258" PREFIX:column="5">if <condition PREFIX:line="258" PREFIX:column="8">( <expr><name PREFIX:line="258" PREFIX:column="10">option</name> &amp; <name PREFIX:line="258" PREFIX:column="19">U8G_DRAW_UPPER_RIGHT</name></expr> )</condition><then PREFIX:line="258" PREFIX:column="41">
    <block PREFIX:line="259" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="260" PREFIX:column="7">u8g_DrawVLine</name><argument_list PREFIX:line="260" PREFIX:column="20">(<argument><expr><name PREFIX:line="260" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="260" PREFIX:column="26">x0</name>+<name PREFIX:line="260" PREFIX:column="29">x</name></expr></argument>, <argument><expr><name PREFIX:line="260" PREFIX:column="32">y0</name>-<name PREFIX:line="260" PREFIX:column="35">y</name></expr></argument>, <argument><expr><name PREFIX:line="260" PREFIX:column="38">y</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <comment type="block" PREFIX:line="263" PREFIX:column="5">/* upper left */</comment>
    <if PREFIX:line="264" PREFIX:column="5">if <condition PREFIX:line="264" PREFIX:column="8">( <expr><name PREFIX:line="264" PREFIX:column="10">option</name> &amp; <name PREFIX:line="264" PREFIX:column="19">U8G_DRAW_UPPER_LEFT</name></expr> )</condition><then PREFIX:line="264" PREFIX:column="40">
    <block PREFIX:line="265" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="266" PREFIX:column="7">u8g_DrawVLine</name><argument_list PREFIX:line="266" PREFIX:column="20">(<argument><expr><name PREFIX:line="266" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="266" PREFIX:column="26">x0</name>-<name PREFIX:line="266" PREFIX:column="29">x</name></expr></argument>, <argument><expr><name PREFIX:line="266" PREFIX:column="32">y0</name>-<name PREFIX:line="266" PREFIX:column="35">y</name></expr></argument>, <argument><expr><name PREFIX:line="266" PREFIX:column="38">y</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <comment type="block" PREFIX:line="269" PREFIX:column="5">/* lower right */</comment>
    <if PREFIX:line="270" PREFIX:column="5">if <condition PREFIX:line="270" PREFIX:column="8">( <expr><name PREFIX:line="270" PREFIX:column="10">option</name> &amp; <name PREFIX:line="270" PREFIX:column="19">U8G_DRAW_LOWER_RIGHT</name></expr> )</condition><then PREFIX:line="270" PREFIX:column="41">
    <block PREFIX:line="271" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="272" PREFIX:column="7">u8g_DrawVLine</name><argument_list PREFIX:line="272" PREFIX:column="20">(<argument><expr><name PREFIX:line="272" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="272" PREFIX:column="26">x0</name>+<name PREFIX:line="272" PREFIX:column="29">x</name></expr></argument>, <argument><expr><name PREFIX:line="272" PREFIX:column="32">y0</name></expr></argument>, <argument><expr><name PREFIX:line="272" PREFIX:column="36">y</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <comment type="block" PREFIX:line="275" PREFIX:column="5">/* lower left */</comment>
    <if PREFIX:line="276" PREFIX:column="5">if <condition PREFIX:line="276" PREFIX:column="8">( <expr><name PREFIX:line="276" PREFIX:column="10">option</name> &amp; <name PREFIX:line="276" PREFIX:column="19">U8G_DRAW_LOWER_LEFT</name></expr> )</condition><then PREFIX:line="276" PREFIX:column="40">
    <block PREFIX:line="277" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="278" PREFIX:column="7">u8g_DrawVLine</name><argument_list PREFIX:line="278" PREFIX:column="20">(<argument><expr><name PREFIX:line="278" PREFIX:column="21">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="278" PREFIX:column="26">x0</name>-<name PREFIX:line="278" PREFIX:column="29">x</name></expr></argument>, <argument><expr><name PREFIX:line="278" PREFIX:column="32">y0</name></expr></argument>, <argument><expr><name PREFIX:line="278" PREFIX:column="36">y</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="282" PREFIX:column="1">void</name></type> <name PREFIX:line="282" PREFIX:column="6">u8g_draw_filled_ellipse</name><parameter_list PREFIX:line="282" PREFIX:column="29">(<param><decl><type><name PREFIX:line="282" PREFIX:column="30">u8g_t</name> *</type><name PREFIX:line="282" PREFIX:column="37">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="282" PREFIX:column="42">u8g_uint_t</name></type> <name PREFIX:line="282" PREFIX:column="53">x0</name></decl></param>, <param><decl><type><name PREFIX:line="282" PREFIX:column="57">u8g_uint_t</name></type> <name PREFIX:line="282" PREFIX:column="68">y0</name></decl></param>, <param><decl><type><name PREFIX:line="282" PREFIX:column="72">u8g_uint_t</name></type> <name PREFIX:line="282" PREFIX:column="83">rx</name></decl></param>, <param><decl><type><name PREFIX:line="282" PREFIX:column="87">u8g_uint_t</name></type> <name PREFIX:line="282" PREFIX:column="98">ry</name></decl></param>, <param><decl><type><name PREFIX:line="282" PREFIX:column="102">uint8_t</name></type> <name PREFIX:line="282" PREFIX:column="110">option</name></decl></param>)</parameter_list>
<block PREFIX:line="283" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="284" PREFIX:column="3">u8g_uint_t</name></type> <name PREFIX:line="284" PREFIX:column="14">x</name></decl>, <decl><type ref="prev"/><name PREFIX:line="284" PREFIX:column="17">y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="285" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="285" PREFIX:column="14">xchg</name></decl>, <decl><type ref="prev"/><name PREFIX:line="285" PREFIX:column="20">ychg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="286" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="286" PREFIX:column="14">err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="287" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="287" PREFIX:column="14">rxrx2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="288" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="288" PREFIX:column="14">ryry2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="289" PREFIX:column="3">u8g_long_t</name></type> <name PREFIX:line="289" PREFIX:column="14">stopx</name></decl>, <decl><type ref="prev"/><name PREFIX:line="289" PREFIX:column="21">stopy</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name PREFIX:line="291" PREFIX:column="3">rxrx2</name> = <name PREFIX:line="291" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="292" PREFIX:column="3">rxrx2</name> *= <name PREFIX:line="292" PREFIX:column="12">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="293" PREFIX:column="3">rxrx2</name> *= 2</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="295" PREFIX:column="3">ryry2</name> = <name PREFIX:line="295" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="296" PREFIX:column="3">ryry2</name> *= <name PREFIX:line="296" PREFIX:column="12">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="297" PREFIX:column="3">ryry2</name> *= 2</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="299" PREFIX:column="3">x</name> = <name PREFIX:line="299" PREFIX:column="7">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="300" PREFIX:column="3">y</name> = 0</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="302" PREFIX:column="3">xchg</name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="303" PREFIX:column="3">xchg</name> -= <name PREFIX:line="303" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="304" PREFIX:column="3">xchg</name> -= <name PREFIX:line="304" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="305" PREFIX:column="3">xchg</name> *= <name PREFIX:line="305" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="306" PREFIX:column="3">xchg</name> *= <name PREFIX:line="306" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="308" PREFIX:column="3">ychg</name> = <name PREFIX:line="308" PREFIX:column="10">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="309" PREFIX:column="3">ychg</name> *= <name PREFIX:line="309" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="311" PREFIX:column="3">err</name> = 0</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="313" PREFIX:column="3">stopx</name> = <name PREFIX:line="313" PREFIX:column="11">ryry2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="314" PREFIX:column="3">stopx</name> *= <name PREFIX:line="314" PREFIX:column="12">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="315" PREFIX:column="3">stopy</name> = 0</expr>;</expr_stmt>
  
  <while PREFIX:line="317" PREFIX:column="3">while<condition PREFIX:line="317" PREFIX:column="8">( <expr><name PREFIX:line="317" PREFIX:column="10">stopx</name> &gt;= <name PREFIX:line="317" PREFIX:column="19">stopy</name></expr> )</condition>
  <block PREFIX:line="318" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="319" PREFIX:column="5">u8g_draw_filled_ellipse_section</name><argument_list PREFIX:line="319" PREFIX:column="36">(<argument><expr><name PREFIX:line="319" PREFIX:column="37">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="319" PREFIX:column="42">x</name></expr></argument>, <argument><expr><name PREFIX:line="319" PREFIX:column="45">y</name></expr></argument>, <argument><expr><name PREFIX:line="319" PREFIX:column="48">x0</name></expr></argument>, <argument><expr><name PREFIX:line="319" PREFIX:column="52">y0</name></expr></argument>, <argument><expr><name PREFIX:line="319" PREFIX:column="56">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="320" PREFIX:column="5">y</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="321" PREFIX:column="5">stopy</name> += <name PREFIX:line="321" PREFIX:column="14">rxrx2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="322" PREFIX:column="5">err</name> += <name PREFIX:line="322" PREFIX:column="12">ychg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="323" PREFIX:column="5">ychg</name> += <name PREFIX:line="323" PREFIX:column="13">rxrx2</name></expr>;</expr_stmt>
    <if PREFIX:line="324" PREFIX:column="5">if <condition PREFIX:line="324" PREFIX:column="8">( <expr PREFIX:line="324" PREFIX:column="10">2*<name PREFIX:line="324" PREFIX:column="12">err</name>+<name PREFIX:line="324" PREFIX:column="16">xchg</name> &gt; 0</expr> )</condition><then PREFIX:line="324" PREFIX:column="26">
    <block PREFIX:line="325" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="326" PREFIX:column="7">x</name>--</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="327" PREFIX:column="7">stopx</name> -= <name PREFIX:line="327" PREFIX:column="16">ryry2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="328" PREFIX:column="7">err</name> += <name PREFIX:line="328" PREFIX:column="14">xchg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="329" PREFIX:column="7">xchg</name> += <name PREFIX:line="329" PREFIX:column="15">ryry2</name></expr>;</expr_stmt>      
    }</block></then></if>
  }</block></while>

  <expr_stmt><expr><name PREFIX:line="333" PREFIX:column="3">x</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="334" PREFIX:column="3">y</name> = <name PREFIX:line="334" PREFIX:column="7">ry</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="336" PREFIX:column="3">xchg</name> = <name PREFIX:line="336" PREFIX:column="10">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="337" PREFIX:column="3">xchg</name> *= <name PREFIX:line="337" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="339" PREFIX:column="3">ychg</name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="340" PREFIX:column="3">ychg</name> -= <name PREFIX:line="340" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="341" PREFIX:column="3">ychg</name> -= <name PREFIX:line="341" PREFIX:column="11">ry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="342" PREFIX:column="3">ychg</name> *= <name PREFIX:line="342" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="343" PREFIX:column="3">ychg</name> *= <name PREFIX:line="343" PREFIX:column="11">rx</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="345" PREFIX:column="3">err</name> = 0</expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="347" PREFIX:column="3">stopx</name> = 0</expr>;</expr_stmt>

  <expr_stmt><expr><name PREFIX:line="349" PREFIX:column="3">stopy</name> = <name PREFIX:line="349" PREFIX:column="11">rxrx2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="350" PREFIX:column="3">stopy</name> *= <name PREFIX:line="350" PREFIX:column="12">ry</name></expr>;</expr_stmt>
  

  <while PREFIX:line="353" PREFIX:column="3">while<condition PREFIX:line="353" PREFIX:column="8">( <expr><name PREFIX:line="353" PREFIX:column="10">stopx</name> &lt;= <name PREFIX:line="353" PREFIX:column="19">stopy</name></expr> )</condition>
  <block PREFIX:line="354" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="355" PREFIX:column="5">u8g_draw_filled_ellipse_section</name><argument_list PREFIX:line="355" PREFIX:column="36">(<argument><expr><name PREFIX:line="355" PREFIX:column="37">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="355" PREFIX:column="42">x</name></expr></argument>, <argument><expr><name PREFIX:line="355" PREFIX:column="45">y</name></expr></argument>, <argument><expr><name PREFIX:line="355" PREFIX:column="48">x0</name></expr></argument>, <argument><expr><name PREFIX:line="355" PREFIX:column="52">y0</name></expr></argument>, <argument><expr><name PREFIX:line="355" PREFIX:column="56">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="356" PREFIX:column="5">x</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="357" PREFIX:column="5">stopx</name> += <name PREFIX:line="357" PREFIX:column="14">ryry2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="358" PREFIX:column="5">err</name> += <name PREFIX:line="358" PREFIX:column="12">xchg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="359" PREFIX:column="5">xchg</name> += <name PREFIX:line="359" PREFIX:column="13">ryry2</name></expr>;</expr_stmt>
    <if PREFIX:line="360" PREFIX:column="5">if <condition PREFIX:line="360" PREFIX:column="8">( <expr PREFIX:line="360" PREFIX:column="10">2*<name PREFIX:line="360" PREFIX:column="12">err</name>+<name PREFIX:line="360" PREFIX:column="16">ychg</name> &gt; 0</expr> )</condition><then PREFIX:line="360" PREFIX:column="26">
    <block PREFIX:line="361" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="362" PREFIX:column="7">y</name>--</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="363" PREFIX:column="7">stopy</name> -= <name PREFIX:line="363" PREFIX:column="16">rxrx2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="364" PREFIX:column="7">err</name> += <name PREFIX:line="364" PREFIX:column="14">ychg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="365" PREFIX:column="7">ychg</name> += <name PREFIX:line="365" PREFIX:column="15">rxrx2</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></while>
  
}</block></function>

<function><type><name PREFIX:line="371" PREFIX:column="1">void</name></type> <name PREFIX:line="371" PREFIX:column="6">u8g_DrawFilledEllipse</name><parameter_list PREFIX:line="371" PREFIX:column="27">(<param><decl><type><name PREFIX:line="371" PREFIX:column="28">u8g_t</name> *</type><name PREFIX:line="371" PREFIX:column="35">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="371" PREFIX:column="40">u8g_uint_t</name></type> <name PREFIX:line="371" PREFIX:column="51">x0</name></decl></param>, <param><decl><type><name PREFIX:line="371" PREFIX:column="55">u8g_uint_t</name></type> <name PREFIX:line="371" PREFIX:column="66">y0</name></decl></param>, <param><decl><type><name PREFIX:line="371" PREFIX:column="70">u8g_uint_t</name></type> <name PREFIX:line="371" PREFIX:column="81">rx</name></decl></param>, <param><decl><type><name PREFIX:line="371" PREFIX:column="85">u8g_uint_t</name></type> <name PREFIX:line="371" PREFIX:column="96">ry</name></decl></param>, <param><decl><type><name PREFIX:line="371" PREFIX:column="100">uint8_t</name></type> <name PREFIX:line="371" PREFIX:column="108">option</name></decl></param>)</parameter_list>
<block PREFIX:line="372" PREFIX:column="1">{
  <comment type="block" PREFIX:line="373" PREFIX:column="3">/* check for bounding box */</comment>
  <block PREFIX:line="374" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="375" PREFIX:column="5">u8g_uint_t</name></type> <name PREFIX:line="375" PREFIX:column="16">rxp</name></decl>, <decl><type ref="prev"/><name PREFIX:line="375" PREFIX:column="21">rxp2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="376" PREFIX:column="5">u8g_uint_t</name></type> <name PREFIX:line="376" PREFIX:column="16">ryp</name></decl>, <decl><type ref="prev"/><name PREFIX:line="376" PREFIX:column="21">ryp2</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name PREFIX:line="378" PREFIX:column="5">rxp</name> = <name PREFIX:line="378" PREFIX:column="11">rx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="379" PREFIX:column="5">rxp</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="380" PREFIX:column="5">rxp2</name> = <name PREFIX:line="380" PREFIX:column="12">rxp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="381" PREFIX:column="5">rxp2</name> *= 2</expr>;</expr_stmt>

    <expr_stmt><expr><name PREFIX:line="383" PREFIX:column="5">ryp</name> = <name PREFIX:line="383" PREFIX:column="11">ry</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="384" PREFIX:column="5">ryp</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="385" PREFIX:column="5">ryp2</name> = <name PREFIX:line="385" PREFIX:column="12">ryp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="386" PREFIX:column="5">ryp2</name> *= 2</expr>;</expr_stmt>
    
    <if PREFIX:line="388" PREFIX:column="5">if <condition PREFIX:line="388" PREFIX:column="8">( <expr><call><name PREFIX:line="388" PREFIX:column="10">u8g_IsBBXIntersection</name><argument_list PREFIX:line="388" PREFIX:column="31">(<argument><expr><name PREFIX:line="388" PREFIX:column="32">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="388" PREFIX:column="37">x0</name>-<name PREFIX:line="388" PREFIX:column="40">rxp</name></expr></argument>, <argument><expr><name PREFIX:line="388" PREFIX:column="45">y0</name>-<name PREFIX:line="388" PREFIX:column="48">ryp</name></expr></argument>, <argument><expr><name PREFIX:line="388" PREFIX:column="53">rxp2</name></expr></argument>, <argument><expr><name PREFIX:line="388" PREFIX:column="59">ryp2</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then PREFIX:line="388" PREFIX:column="70">
      <return PREFIX:line="389" PREFIX:column="7">return;</return></then></if>    
  }</block>
  
  <expr_stmt><expr><call><name PREFIX:line="392" PREFIX:column="3">u8g_draw_filled_ellipse</name><argument_list PREFIX:line="392" PREFIX:column="26">(<argument><expr><name PREFIX:line="392" PREFIX:column="27">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="392" PREFIX:column="32">x0</name></expr></argument>, <argument><expr><name PREFIX:line="392" PREFIX:column="36">y0</name></expr></argument>, <argument><expr><name PREFIX:line="392" PREFIX:column="40">rx</name></expr></argument>, <argument><expr><name PREFIX:line="392" PREFIX:column="44">ry</name></expr></argument>, <argument><expr><name PREFIX:line="392" PREFIX:column="48">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
