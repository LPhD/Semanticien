<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WString.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  WString.cpp - String library for Wiring &amp; Arduino
  ...mostly rewritten by Paul Stoffregen...
  Copyright (c) 2009-10 Hernando Barragan.  All rights reserved.
  Copyright 2011, Paul Stoffregen, paul@pjrc.com

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/</comment>

<cpp:include PREFIX:line="22" PREFIX:column="1">#<cpp:directive PREFIX:line="22" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="22" PREFIX:column="10">"WString.h"</cpp:file></cpp:include>


<comment type="block" format="doxygen" PREFIX:line="25" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="26" PREFIX:column="1">/*  Constructors                             */</comment>
<comment type="block" format="doxygen" PREFIX:line="27" PREFIX:column="1">/*********************************************/</comment>

<constructor><name><name PREFIX:line="29" PREFIX:column="1">String</name>::<name PREFIX:line="29" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="29" PREFIX:column="15">( <param><decl><type><name PREFIX:line="29" PREFIX:column="17">char</name> *</type><name PREFIX:line="29" PREFIX:column="23">cstr</name></decl></param>)</parameter_list>
<block PREFIX:line="30" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="31" PREFIX:column="9">init</name><argument_list PREFIX:line="31" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<if PREFIX:line="32" PREFIX:column="9">if <condition PREFIX:line="32" PREFIX:column="12">(<expr><name PREFIX:line="32" PREFIX:column="13">cstr</name></expr>)</condition><then PREFIX:line="32" PREFIX:column="18"> <expr_stmt><expr><call><name PREFIX:line="32" PREFIX:column="19">copy</name><argument_list PREFIX:line="32" PREFIX:column="23">(<argument><expr><name PREFIX:line="32" PREFIX:column="24">cstr</name></expr></argument>, <argument><expr><call><name PREFIX:line="32" PREFIX:column="30">strlen</name><argument_list PREFIX:line="32" PREFIX:column="36">(<argument><expr><name PREFIX:line="32" PREFIX:column="37">cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></constructor>

<constructor><name><name PREFIX:line="35" PREFIX:column="1">String</name>::<name PREFIX:line="35" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="35" PREFIX:column="15">( <param><decl><type><name PREFIX:line="35" PREFIX:column="17">String</name> &amp;</type><name PREFIX:line="35" PREFIX:column="25">value</name></decl></param>)</parameter_list>
<block PREFIX:line="36" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="37" PREFIX:column="9">init</name><argument_list PREFIX:line="37" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr PREFIX:line="38" PREFIX:column="9">*<name PREFIX:line="38" PREFIX:column="10">this</name> = <name PREFIX:line="38" PREFIX:column="17">value</name></expr>;</expr_stmt>
}</block></constructor>

<cpp:ifdef PREFIX:line="41" PREFIX:column="1">#<cpp:directive PREFIX:line="41" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="41" PREFIX:column="8">__GXX_EXPERIMENTAL_CXX0X__</name></cpp:ifdef>
<constructor><name><name PREFIX:line="42" PREFIX:column="1">String</name>::<name PREFIX:line="42" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="42" PREFIX:column="15">(<param><decl><type><name PREFIX:line="42" PREFIX:column="16">String</name> &amp;&amp;</type><name PREFIX:line="42" PREFIX:column="25">rval</name></decl></param>)</parameter_list>
<block PREFIX:line="43" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="44" PREFIX:column="9">init</name><argument_list PREFIX:line="44" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="45" PREFIX:column="9">move</name><argument_list PREFIX:line="45" PREFIX:column="13">(<argument><expr><name PREFIX:line="45" PREFIX:column="14">rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>
<constructor><name><name PREFIX:line="47" PREFIX:column="1">String</name>::<name PREFIX:line="47" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="47" PREFIX:column="15">(<param><decl><type><name PREFIX:line="47" PREFIX:column="16">StringSumHelper</name> &amp;&amp;</type><name PREFIX:line="47" PREFIX:column="34">rval</name></decl></param>)</parameter_list>
<block PREFIX:line="48" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="49" PREFIX:column="9">init</name><argument_list PREFIX:line="49" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="50" PREFIX:column="9">move</name><argument_list PREFIX:line="50" PREFIX:column="13">(<argument><expr><name PREFIX:line="50" PREFIX:column="14">rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>
<cpp:endif PREFIX:line="52" PREFIX:column="1">#<cpp:directive PREFIX:line="52" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name PREFIX:line="54" PREFIX:column="1">String</name>::<name PREFIX:line="54" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="54" PREFIX:column="15">(<param><decl><type><name PREFIX:line="54" PREFIX:column="16">char</name></type> <name PREFIX:line="54" PREFIX:column="21">c</name></decl></param>)</parameter_list>
<block PREFIX:line="55" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="56" PREFIX:column="9">init</name><argument_list PREFIX:line="56" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name PREFIX:line="57" PREFIX:column="9">char</name></type> <name><name PREFIX:line="57" PREFIX:column="14">buf</name><index PREFIX:line="57" PREFIX:column="17">[<expr PREFIX:line="57" PREFIX:column="18">2</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name PREFIX:line="58" PREFIX:column="9">buf</name><index PREFIX:line="58" PREFIX:column="12">[<expr PREFIX:line="58" PREFIX:column="13">0</expr>]</index></name> = <name PREFIX:line="58" PREFIX:column="18">c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="59" PREFIX:column="9">buf</name><index PREFIX:line="59" PREFIX:column="12">[<expr PREFIX:line="59" PREFIX:column="13">1</expr>]</index></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr PREFIX:line="60" PREFIX:column="9">*<name PREFIX:line="60" PREFIX:column="10">this</name> = <name PREFIX:line="60" PREFIX:column="17">buf</name></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name PREFIX:line="63" PREFIX:column="1">String</name>::<name PREFIX:line="63" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="63" PREFIX:column="15">(<param><decl><type><name PREFIX:line="63" PREFIX:column="16">unknowntype</name> <name PREFIX:line="63" PREFIX:column="28">char</name></type> <name PREFIX:line="63" PREFIX:column="33">value</name></decl></param>, <param><decl><type><name PREFIX:line="63" PREFIX:column="40">unknowntype</name> <name PREFIX:line="63" PREFIX:column="52">char</name></type> <name PREFIX:line="63" PREFIX:column="57">base</name></decl></param>)</parameter_list>
<block PREFIX:line="64" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="65" PREFIX:column="9">init</name><argument_list PREFIX:line="65" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name PREFIX:line="66" PREFIX:column="9">char</name></type> <name><name PREFIX:line="66" PREFIX:column="14">buf</name><index PREFIX:line="66" PREFIX:column="17">[<expr PREFIX:line="66" PREFIX:column="18">9</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="67" PREFIX:column="9">utoa</name><argument_list PREFIX:line="67" PREFIX:column="13">(<argument><expr><name PREFIX:line="67" PREFIX:column="14">value</name></expr></argument>, <argument><expr><name PREFIX:line="67" PREFIX:column="21">buf</name></expr></argument>, <argument><expr><name PREFIX:line="67" PREFIX:column="26">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr PREFIX:line="68" PREFIX:column="9">*<name PREFIX:line="68" PREFIX:column="10">this</name> = <name PREFIX:line="68" PREFIX:column="17">buf</name></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name PREFIX:line="71" PREFIX:column="1">String</name>::<name PREFIX:line="71" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="71" PREFIX:column="15">(<param><decl><type><name PREFIX:line="71" PREFIX:column="16">int</name></type> <name PREFIX:line="71" PREFIX:column="20">value</name></decl></param>, <param><decl><type><name PREFIX:line="71" PREFIX:column="27">unknowntype</name> <name PREFIX:line="71" PREFIX:column="39">char</name></type> <name PREFIX:line="71" PREFIX:column="44">base</name></decl></param>)</parameter_list>
<block PREFIX:line="72" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="73" PREFIX:column="9">init</name><argument_list PREFIX:line="73" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name PREFIX:line="74" PREFIX:column="9">char</name></type> <name><name PREFIX:line="74" PREFIX:column="14">buf</name><index PREFIX:line="74" PREFIX:column="17">[<expr PREFIX:line="74" PREFIX:column="18">18</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="75" PREFIX:column="9">itoa</name><argument_list PREFIX:line="75" PREFIX:column="13">(<argument><expr><name PREFIX:line="75" PREFIX:column="14">value</name></expr></argument>, <argument><expr><name PREFIX:line="75" PREFIX:column="21">buf</name></expr></argument>, <argument><expr><name PREFIX:line="75" PREFIX:column="26">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr PREFIX:line="76" PREFIX:column="9">*<name PREFIX:line="76" PREFIX:column="10">this</name> = <name PREFIX:line="76" PREFIX:column="17">buf</name></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name PREFIX:line="79" PREFIX:column="1">String</name>::<name PREFIX:line="79" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="79" PREFIX:column="15">(<param><decl><type><name PREFIX:line="79" PREFIX:column="16">unknowntype</name> <name PREFIX:line="79" PREFIX:column="28">int</name></type> <name PREFIX:line="79" PREFIX:column="32">value</name></decl></param>, <param><decl><type><name PREFIX:line="79" PREFIX:column="39">unknowntype</name> <name PREFIX:line="79" PREFIX:column="51">char</name></type> <name PREFIX:line="79" PREFIX:column="56">base</name></decl></param>)</parameter_list>
<block PREFIX:line="80" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="81" PREFIX:column="9">init</name><argument_list PREFIX:line="81" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name PREFIX:line="82" PREFIX:column="9">char</name></type> <name><name PREFIX:line="82" PREFIX:column="14">buf</name><index PREFIX:line="82" PREFIX:column="17">[<expr PREFIX:line="82" PREFIX:column="18">17</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="83" PREFIX:column="9">utoa</name><argument_list PREFIX:line="83" PREFIX:column="13">(<argument><expr><name PREFIX:line="83" PREFIX:column="14">value</name></expr></argument>, <argument><expr><name PREFIX:line="83" PREFIX:column="21">buf</name></expr></argument>, <argument><expr><name PREFIX:line="83" PREFIX:column="26">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr PREFIX:line="84" PREFIX:column="9">*<name PREFIX:line="84" PREFIX:column="10">this</name> = <name PREFIX:line="84" PREFIX:column="17">buf</name></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name PREFIX:line="87" PREFIX:column="1">String</name>::<name PREFIX:line="87" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="87" PREFIX:column="15">(<param><decl><type><name PREFIX:line="87" PREFIX:column="16">long</name></type> <name PREFIX:line="87" PREFIX:column="21">value</name></decl></param>, <param><decl><type><name PREFIX:line="87" PREFIX:column="28">unknowntype</name> <name PREFIX:line="87" PREFIX:column="40">char</name></type> <name PREFIX:line="87" PREFIX:column="45">base</name></decl></param>)</parameter_list>
<block PREFIX:line="88" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="89" PREFIX:column="9">init</name><argument_list PREFIX:line="89" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name PREFIX:line="90" PREFIX:column="9">char</name></type> <name><name PREFIX:line="90" PREFIX:column="14">buf</name><index PREFIX:line="90" PREFIX:column="17">[<expr PREFIX:line="90" PREFIX:column="18">34</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="91" PREFIX:column="9">ltoa</name><argument_list PREFIX:line="91" PREFIX:column="13">(<argument><expr><name PREFIX:line="91" PREFIX:column="14">value</name></expr></argument>, <argument><expr><name PREFIX:line="91" PREFIX:column="21">buf</name></expr></argument>, <argument><expr><name PREFIX:line="91" PREFIX:column="26">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr PREFIX:line="92" PREFIX:column="9">*<name PREFIX:line="92" PREFIX:column="10">this</name> = <name PREFIX:line="92" PREFIX:column="17">buf</name></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name PREFIX:line="95" PREFIX:column="1">String</name>::<name PREFIX:line="95" PREFIX:column="9">String</name></name><parameter_list PREFIX:line="95" PREFIX:column="15">(<param><decl><type><name PREFIX:line="95" PREFIX:column="16">unknowntype</name> <name PREFIX:line="95" PREFIX:column="28">long</name></type> <name PREFIX:line="95" PREFIX:column="33">value</name></decl></param>, <param><decl><type><name PREFIX:line="95" PREFIX:column="40">unknowntype</name> <name PREFIX:line="95" PREFIX:column="52">char</name></type> <name PREFIX:line="95" PREFIX:column="57">base</name></decl></param>)</parameter_list>
<block PREFIX:line="96" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="97" PREFIX:column="9">init</name><argument_list PREFIX:line="97" PREFIX:column="13">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name PREFIX:line="98" PREFIX:column="9">char</name></type> <name><name PREFIX:line="98" PREFIX:column="14">buf</name><index PREFIX:line="98" PREFIX:column="17">[<expr PREFIX:line="98" PREFIX:column="18">33</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="99" PREFIX:column="9">ultoa</name><argument_list PREFIX:line="99" PREFIX:column="14">(<argument><expr><name PREFIX:line="99" PREFIX:column="15">value</name></expr></argument>, <argument><expr><name PREFIX:line="99" PREFIX:column="22">buf</name></expr></argument>, <argument><expr><name PREFIX:line="99" PREFIX:column="27">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr PREFIX:line="100" PREFIX:column="9">*<name PREFIX:line="100" PREFIX:column="10">this</name> = <name PREFIX:line="100" PREFIX:column="17">buf</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name PREFIX:line="103" PREFIX:column="1">String</name>::~<name PREFIX:line="103" PREFIX:column="10">String</name></name><parameter_list PREFIX:line="103" PREFIX:column="16">()</parameter_list>
<block PREFIX:line="104" PREFIX:column="1">{
	<expr_stmt><expr><call><name PREFIX:line="105" PREFIX:column="9">free</name><argument_list PREFIX:line="105" PREFIX:column="13">(<argument><expr><name PREFIX:line="105" PREFIX:column="14">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<comment type="block" format="doxygen" PREFIX:line="108" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="109" PREFIX:column="1">/*  Memory Management                        */</comment>
<comment type="block" format="doxygen" PREFIX:line="110" PREFIX:column="1">/*********************************************/</comment>

<function><type><specifier PREFIX:line="112" PREFIX:column="1">inline</specifier> <name PREFIX:line="112" PREFIX:column="8">void</name></type> <name><name PREFIX:line="112" PREFIX:column="13">String</name>::<name PREFIX:line="112" PREFIX:column="21">init</name></name><parameter_list PREFIX:line="112" PREFIX:column="25">(<param><decl><type><name PREFIX:line="112" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="113" PREFIX:column="1">{
	<expr_stmt><expr><name PREFIX:line="114" PREFIX:column="9">buffer</name> = <name PREFIX:line="114" PREFIX:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="115" PREFIX:column="9">capacity</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="116" PREFIX:column="9">len</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="117" PREFIX:column="9">flags</name> = 0</expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="120" PREFIX:column="1">void</name></type> <name><name PREFIX:line="120" PREFIX:column="6">String</name>::<name PREFIX:line="120" PREFIX:column="14">invalidate</name></name><parameter_list PREFIX:line="120" PREFIX:column="24">(<param><decl><type><name PREFIX:line="120" PREFIX:column="25">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="121" PREFIX:column="1">{
	<if PREFIX:line="122" PREFIX:column="9">if <condition PREFIX:line="122" PREFIX:column="12">(<expr><name PREFIX:line="122" PREFIX:column="13">buffer</name></expr>)</condition><then PREFIX:line="122" PREFIX:column="20"> <expr_stmt><expr><call><name PREFIX:line="122" PREFIX:column="21">free</name><argument_list PREFIX:line="122" PREFIX:column="25">(<argument><expr><name PREFIX:line="122" PREFIX:column="26">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name PREFIX:line="123" PREFIX:column="9">buffer</name> = <name PREFIX:line="123" PREFIX:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="124" PREFIX:column="9">capacity</name> = <name PREFIX:line="124" PREFIX:column="20">len</name> = 0</expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="127" PREFIX:column="1">unknowntype</name> <name PREFIX:line="127" PREFIX:column="13">char</name></type> <name><name PREFIX:line="127" PREFIX:column="18">String</name>::<name PREFIX:line="127" PREFIX:column="26">reserve</name></name><parameter_list PREFIX:line="127" PREFIX:column="33">(<param><decl><type><name PREFIX:line="127" PREFIX:column="34">unknowntype</name> <name PREFIX:line="127" PREFIX:column="46">int</name></type> <name PREFIX:line="127" PREFIX:column="50">size</name></decl></param>)</parameter_list>
<block PREFIX:line="128" PREFIX:column="1">{
	<if PREFIX:line="129" PREFIX:column="9">if <condition PREFIX:line="129" PREFIX:column="12">(<expr><name PREFIX:line="129" PREFIX:column="13">buffer</name> &amp;&amp; <name PREFIX:line="129" PREFIX:column="23">capacity</name> &gt;= <name PREFIX:line="129" PREFIX:column="35">size</name></expr>)</condition><then PREFIX:line="129" PREFIX:column="40"> <return PREFIX:line="129" PREFIX:column="41">return <expr PREFIX:line="129" PREFIX:column="48">1</expr>;</return></then></if>
	<if PREFIX:line="130" PREFIX:column="9">if <condition PREFIX:line="130" PREFIX:column="12">(<expr><call><name PREFIX:line="130" PREFIX:column="13">changeBuffer</name><argument_list PREFIX:line="130" PREFIX:column="25">(<argument><expr><name PREFIX:line="130" PREFIX:column="26">size</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="130" PREFIX:column="32"> <block PREFIX:line="130" PREFIX:column="33">{
		<if PREFIX:line="131" PREFIX:column="17">if <condition PREFIX:line="131" PREFIX:column="20">(<expr><name PREFIX:line="131" PREFIX:column="21">len</name> == 0</expr>)</condition><then PREFIX:line="131" PREFIX:column="30"> <expr_stmt><expr><name><name PREFIX:line="131" PREFIX:column="31">buffer</name><index PREFIX:line="131" PREFIX:column="37">[<expr PREFIX:line="131" PREFIX:column="38">0</expr>]</index></name> = 0</expr>;</expr_stmt></then></if>
		<return PREFIX:line="132" PREFIX:column="17">return <expr PREFIX:line="132" PREFIX:column="24">1</expr>;</return>
	}</block></then></if>
	<return PREFIX:line="134" PREFIX:column="9">return <expr PREFIX:line="134" PREFIX:column="16">0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="137" PREFIX:column="1">unknowntype</name> <name PREFIX:line="137" PREFIX:column="13">char</name></type> <name><name PREFIX:line="137" PREFIX:column="18">String</name>::<name PREFIX:line="137" PREFIX:column="26">changeBuffer</name></name><parameter_list PREFIX:line="137" PREFIX:column="38">(<param><decl><type><name PREFIX:line="137" PREFIX:column="39">unknowntype</name> <name PREFIX:line="137" PREFIX:column="51">int</name></type> <name PREFIX:line="137" PREFIX:column="55">maxStrLen</name></decl></param>)</parameter_list>
<block PREFIX:line="138" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="139" PREFIX:column="9">char</name> *</type><name PREFIX:line="139" PREFIX:column="15">newbuffer</name> <init PREFIX:line="139" PREFIX:column="25">= <expr PREFIX:line="139" PREFIX:column="27">(<name PREFIX:line="139" PREFIX:column="28">char</name> *)<call><name PREFIX:line="139" PREFIX:column="35">realloc</name><argument_list PREFIX:line="139" PREFIX:column="42">(<argument><expr><name PREFIX:line="139" PREFIX:column="43">buffer</name></expr></argument>, <argument><expr><name PREFIX:line="139" PREFIX:column="51">maxStrLen</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="140" PREFIX:column="9">if <condition PREFIX:line="140" PREFIX:column="12">(<expr><name PREFIX:line="140" PREFIX:column="13">newbuffer</name></expr>)</condition><then PREFIX:line="140" PREFIX:column="23"> <block PREFIX:line="140" PREFIX:column="24">{
		<expr_stmt><expr><name PREFIX:line="141" PREFIX:column="17">buffer</name> = <name PREFIX:line="141" PREFIX:column="26">newbuffer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="142" PREFIX:column="17">capacity</name> = <name PREFIX:line="142" PREFIX:column="28">maxStrLen</name></expr>;</expr_stmt>
		<return PREFIX:line="143" PREFIX:column="17">return <expr PREFIX:line="143" PREFIX:column="24">1</expr>;</return>
	}</block></then></if>
	<return PREFIX:line="145" PREFIX:column="9">return <expr PREFIX:line="145" PREFIX:column="16">0</expr>;</return>
}</block></function>

<comment type="block" format="doxygen" PREFIX:line="148" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="149" PREFIX:column="1">/*  Copy and Move                            */</comment>
<comment type="block" format="doxygen" PREFIX:line="150" PREFIX:column="1">/*********************************************/</comment>

<function><type><name PREFIX:line="152" PREFIX:column="1">String</name> &amp;</type> <name><name PREFIX:line="152" PREFIX:column="10">String</name>::<name PREFIX:line="152" PREFIX:column="18">copy</name></name><parameter_list PREFIX:line="152" PREFIX:column="22">( <param><decl><type><name PREFIX:line="152" PREFIX:column="24">char</name> *</type><name PREFIX:line="152" PREFIX:column="30">cstr</name></decl></param>, <param><decl><type><name PREFIX:line="152" PREFIX:column="36">unknowntype</name> <name PREFIX:line="152" PREFIX:column="48">int</name></type> <name PREFIX:line="152" PREFIX:column="52">length</name></decl></param>)</parameter_list>
<block PREFIX:line="153" PREFIX:column="1">{
	<if PREFIX:line="154" PREFIX:column="9">if <condition PREFIX:line="154" PREFIX:column="12">(<expr PREFIX:line="154" PREFIX:column="13">!<call><name PREFIX:line="154" PREFIX:column="14">reserve</name><argument_list PREFIX:line="154" PREFIX:column="21">(<argument><expr><name PREFIX:line="154" PREFIX:column="22">length</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="154" PREFIX:column="30"> <block PREFIX:line="154" PREFIX:column="31">{
		<expr_stmt><expr><call><name PREFIX:line="155" PREFIX:column="17">invalidate</name><argument_list PREFIX:line="155" PREFIX:column="27">()</argument_list></call></expr>;</expr_stmt>
		<return PREFIX:line="156" PREFIX:column="17">return <expr PREFIX:line="156" PREFIX:column="24">*<name PREFIX:line="156" PREFIX:column="25">this</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name PREFIX:line="158" PREFIX:column="9">len</name> = <name PREFIX:line="158" PREFIX:column="15">length</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="159" PREFIX:column="9">strcpy</name><argument_list PREFIX:line="159" PREFIX:column="15">(<argument><expr><name PREFIX:line="159" PREFIX:column="16">buffer</name></expr></argument>, <argument><expr><name PREFIX:line="159" PREFIX:column="24">cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return PREFIX:line="160" PREFIX:column="9">return <expr PREFIX:line="160" PREFIX:column="16">*<name PREFIX:line="160" PREFIX:column="17">this</name></expr>;</return>
}</block></function>

<cpp:ifdef PREFIX:line="163" PREFIX:column="1">#<cpp:directive PREFIX:line="163" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="163" PREFIX:column="8">__GXX_EXPERIMENTAL_CXX0X__</name></cpp:ifdef>
<function><type><name PREFIX:line="164" PREFIX:column="1">void</name></type> <name><name PREFIX:line="164" PREFIX:column="6">String</name>::<name PREFIX:line="164" PREFIX:column="14">move</name></name><parameter_list PREFIX:line="164" PREFIX:column="18">(<param><decl><type><name PREFIX:line="164" PREFIX:column="19">String</name> &amp;</type><name PREFIX:line="164" PREFIX:column="27">rhs</name></decl></param>)</parameter_list>
<block PREFIX:line="165" PREFIX:column="1">{
	<if PREFIX:line="166" PREFIX:column="9">if <condition PREFIX:line="166" PREFIX:column="12">(<expr><name PREFIX:line="166" PREFIX:column="13">buffer</name></expr>)</condition><then PREFIX:line="166" PREFIX:column="20"> <block PREFIX:line="166" PREFIX:column="21">{
		<if PREFIX:line="167" PREFIX:column="17">if <condition PREFIX:line="167" PREFIX:column="20">(<expr><name PREFIX:line="167" PREFIX:column="21">capacity</name> &gt;= <name><name PREFIX:line="167" PREFIX:column="33">rhs</name>.<name PREFIX:line="167" PREFIX:column="37">len</name></name></expr>)</condition><then PREFIX:line="167" PREFIX:column="41"> <block PREFIX:line="167" PREFIX:column="42">{
			<expr_stmt><expr><call><name PREFIX:line="168" PREFIX:column="25">strcpy</name><argument_list PREFIX:line="168" PREFIX:column="31">(<argument><expr><name PREFIX:line="168" PREFIX:column="32">buffer</name></expr></argument>, <argument><expr><name><name PREFIX:line="168" PREFIX:column="40">rhs</name>.<name PREFIX:line="168" PREFIX:column="44">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="169" PREFIX:column="25">len</name> = <name><name PREFIX:line="169" PREFIX:column="31">rhs</name>.<name PREFIX:line="169" PREFIX:column="35">len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name PREFIX:line="170" PREFIX:column="25">rhs</name>.<name PREFIX:line="170" PREFIX:column="29">len</name></name> = 0</expr>;</expr_stmt>
			<return PREFIX:line="171" PREFIX:column="25">return;</return>
		}</block></then> <else PREFIX:line="172" PREFIX:column="19">else <block PREFIX:line="172" PREFIX:column="24">{
			<expr_stmt><expr><call><name PREFIX:line="173" PREFIX:column="25">free</name><argument_list PREFIX:line="173" PREFIX:column="29">(<argument><expr><name PREFIX:line="173" PREFIX:column="30">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>
	<expr_stmt><expr><name PREFIX:line="176" PREFIX:column="9">buffer</name> = <name><name PREFIX:line="176" PREFIX:column="18">rhs</name>.<name PREFIX:line="176" PREFIX:column="22">buffer</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="177" PREFIX:column="9">capacity</name> = <name><name PREFIX:line="177" PREFIX:column="20">rhs</name>.<name PREFIX:line="177" PREFIX:column="24">capacity</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="178" PREFIX:column="9">len</name> = <name><name PREFIX:line="178" PREFIX:column="15">rhs</name>.<name PREFIX:line="178" PREFIX:column="19">len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="179" PREFIX:column="9">rhs</name>.<name PREFIX:line="179" PREFIX:column="13">buffer</name></name> = <name PREFIX:line="179" PREFIX:column="22">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="180" PREFIX:column="9">rhs</name>.<name PREFIX:line="180" PREFIX:column="13">capacity</name></name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="181" PREFIX:column="9">rhs</name>.<name PREFIX:line="181" PREFIX:column="13">len</name></name> = 0</expr>;</expr_stmt>
}</block></function>
<cpp:endif PREFIX:line="183" PREFIX:column="1">#<cpp:directive PREFIX:line="183" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<function><type><name PREFIX:line="185" PREFIX:column="1">String</name> &amp;</type> <name><name PREFIX:line="185" PREFIX:column="10">String</name>::<name PREFIX:line="185" PREFIX:column="18">operator =</name></name> <parameter_list PREFIX:line="185" PREFIX:column="29">( <param><decl><type><name PREFIX:line="185" PREFIX:column="31">String</name> &amp;</type><name PREFIX:line="185" PREFIX:column="39">rhs</name></decl></param>)</parameter_list>
<block PREFIX:line="186" PREFIX:column="1">{
	<if PREFIX:line="187" PREFIX:column="9">if <condition PREFIX:line="187" PREFIX:column="12">(<expr><name PREFIX:line="187" PREFIX:column="13">this</name> == &amp;<name PREFIX:line="187" PREFIX:column="22">rhs</name></expr>)</condition><then PREFIX:line="187" PREFIX:column="26"> <return PREFIX:line="187" PREFIX:column="27">return <expr PREFIX:line="187" PREFIX:column="34">*<name PREFIX:line="187" PREFIX:column="35">this</name></expr>;</return></then></if>
	
	<if PREFIX:line="189" PREFIX:column="9">if <condition PREFIX:line="189" PREFIX:column="12">(<expr><name><name PREFIX:line="189" PREFIX:column="13">rhs</name>.<name PREFIX:line="189" PREFIX:column="17">buffer</name></name></expr>)</condition><then PREFIX:line="189" PREFIX:column="24"> <expr_stmt><expr><call><name PREFIX:line="189" PREFIX:column="25">copy</name><argument_list PREFIX:line="189" PREFIX:column="29">(<argument><expr><name><name PREFIX:line="189" PREFIX:column="30">rhs</name>.<name PREFIX:line="189" PREFIX:column="34">buffer</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="189" PREFIX:column="42">rhs</name>.<name PREFIX:line="189" PREFIX:column="46">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else PREFIX:line="190" PREFIX:column="9">else <expr_stmt><expr><call><name PREFIX:line="190" PREFIX:column="14">invalidate</name><argument_list PREFIX:line="190" PREFIX:column="24">()</argument_list></call></expr>;</expr_stmt></else></if>
	
	<return PREFIX:line="192" PREFIX:column="9">return <expr PREFIX:line="192" PREFIX:column="16">*<name PREFIX:line="192" PREFIX:column="17">this</name></expr>;</return>
}</block></function>

<cpp:ifdef PREFIX:line="195" PREFIX:column="1">#<cpp:directive PREFIX:line="195" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="195" PREFIX:column="8">__GXX_EXPERIMENTAL_CXX0X__</name></cpp:ifdef>
<function><type><name PREFIX:line="196" PREFIX:column="1">String</name> &amp;</type> <name><name PREFIX:line="196" PREFIX:column="10">String</name>::<name PREFIX:line="196" PREFIX:column="18">operator =</name></name> <parameter_list PREFIX:line="196" PREFIX:column="29">(<param><decl><type><name PREFIX:line="196" PREFIX:column="30">String</name> &amp;&amp;</type><name PREFIX:line="196" PREFIX:column="39">rval</name></decl></param>)</parameter_list>
<block PREFIX:line="197" PREFIX:column="1">{
	<if PREFIX:line="198" PREFIX:column="9">if <condition PREFIX:line="198" PREFIX:column="12">(<expr><name PREFIX:line="198" PREFIX:column="13">this</name> != &amp;<name PREFIX:line="198" PREFIX:column="22">rval</name></expr>)</condition><then PREFIX:line="198" PREFIX:column="27"> <expr_stmt><expr><call><name PREFIX:line="198" PREFIX:column="28">move</name><argument_list PREFIX:line="198" PREFIX:column="32">(<argument><expr><name PREFIX:line="198" PREFIX:column="33">rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="199" PREFIX:column="9">return <expr PREFIX:line="199" PREFIX:column="16">*<name PREFIX:line="199" PREFIX:column="17">this</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="202" PREFIX:column="1">String</name> &amp;</type> <name><name PREFIX:line="202" PREFIX:column="10">String</name>::<name PREFIX:line="202" PREFIX:column="18">operator =</name></name> <parameter_list PREFIX:line="202" PREFIX:column="29">(<param><decl><type><name PREFIX:line="202" PREFIX:column="30">StringSumHelper</name> &amp;&amp;</type><name PREFIX:line="202" PREFIX:column="48">rval</name></decl></param>)</parameter_list>
<block PREFIX:line="203" PREFIX:column="1">{
	<if PREFIX:line="204" PREFIX:column="9">if <condition PREFIX:line="204" PREFIX:column="12">(<expr><name PREFIX:line="204" PREFIX:column="13">this</name> != &amp;<name PREFIX:line="204" PREFIX:column="22">rval</name></expr>)</condition><then PREFIX:line="204" PREFIX:column="27"> <expr_stmt><expr><call><name PREFIX:line="204" PREFIX:column="28">move</name><argument_list PREFIX:line="204" PREFIX:column="32">(<argument><expr><name PREFIX:line="204" PREFIX:column="33">rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="205" PREFIX:column="9">return <expr PREFIX:line="205" PREFIX:column="16">*<name PREFIX:line="205" PREFIX:column="17">this</name></expr>;</return>
}</block></function>
<cpp:endif PREFIX:line="207" PREFIX:column="1">#<cpp:directive PREFIX:line="207" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<function><type><name PREFIX:line="209" PREFIX:column="1">String</name> &amp;</type> <name><name PREFIX:line="209" PREFIX:column="10">String</name>::<name PREFIX:line="209" PREFIX:column="18">operator =</name></name> <parameter_list PREFIX:line="209" PREFIX:column="29">( <param><decl><type><name PREFIX:line="209" PREFIX:column="31">char</name> *</type><name PREFIX:line="209" PREFIX:column="37">cstr</name></decl></param>)</parameter_list>
<block PREFIX:line="210" PREFIX:column="1">{
	<if PREFIX:line="211" PREFIX:column="9">if <condition PREFIX:line="211" PREFIX:column="12">(<expr><name PREFIX:line="211" PREFIX:column="13">cstr</name></expr>)</condition><then PREFIX:line="211" PREFIX:column="18"> <expr_stmt><expr><call><name PREFIX:line="211" PREFIX:column="19">copy</name><argument_list PREFIX:line="211" PREFIX:column="23">(<argument><expr><name PREFIX:line="211" PREFIX:column="24">cstr</name></expr></argument>, <argument><expr><call><name PREFIX:line="211" PREFIX:column="30">strlen</name><argument_list PREFIX:line="211" PREFIX:column="36">(<argument><expr><name PREFIX:line="211" PREFIX:column="37">cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else PREFIX:line="212" PREFIX:column="9">else <expr_stmt><expr><call><name PREFIX:line="212" PREFIX:column="14">invalidate</name><argument_list PREFIX:line="212" PREFIX:column="24">()</argument_list></call></expr>;</expr_stmt></else></if>
	
	<return PREFIX:line="214" PREFIX:column="9">return <expr PREFIX:line="214" PREFIX:column="16">*<name PREFIX:line="214" PREFIX:column="17">this</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" PREFIX:line="217" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="218" PREFIX:column="1">/*  concat                                   */</comment>
<comment type="block" format="doxygen" PREFIX:line="219" PREFIX:column="1">/*********************************************/</comment>

<function><type><name PREFIX:line="221" PREFIX:column="1">unknowntype</name> <name PREFIX:line="221" PREFIX:column="13">char</name></type> <name><name PREFIX:line="221" PREFIX:column="18">String</name>::<name PREFIX:line="221" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="221" PREFIX:column="32">( <param><decl><type><name PREFIX:line="221" PREFIX:column="34">String</name> &amp;</type><name PREFIX:line="221" PREFIX:column="42">s</name></decl></param>)</parameter_list>
<block PREFIX:line="222" PREFIX:column="1">{
	<return PREFIX:line="223" PREFIX:column="9">return <expr><call><name PREFIX:line="223" PREFIX:column="16">concat</name><argument_list PREFIX:line="223" PREFIX:column="22">(<argument><expr><name><name PREFIX:line="223" PREFIX:column="23">s</name>.<name PREFIX:line="223" PREFIX:column="25">buffer</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="223" PREFIX:column="33">s</name>.<name PREFIX:line="223" PREFIX:column="35">len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="226" PREFIX:column="1">unknowntype</name> <name PREFIX:line="226" PREFIX:column="13">char</name></type> <name><name PREFIX:line="226" PREFIX:column="18">String</name>::<name PREFIX:line="226" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="226" PREFIX:column="32">( <param><decl><type><name PREFIX:line="226" PREFIX:column="34">char</name> *</type><name PREFIX:line="226" PREFIX:column="40">cstr</name></decl></param>, <param><decl><type><name PREFIX:line="226" PREFIX:column="46">unknowntype</name> <name PREFIX:line="226" PREFIX:column="58">int</name></type> <name PREFIX:line="226" PREFIX:column="62">length</name></decl></param>)</parameter_list>
<block PREFIX:line="227" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="228" PREFIX:column="9">unknowntype</name> <name PREFIX:line="228" PREFIX:column="21">int</name></type> <name PREFIX:line="228" PREFIX:column="25">newlen</name> <init PREFIX:line="228" PREFIX:column="32">= <expr><name PREFIX:line="228" PREFIX:column="34">len</name> + <name PREFIX:line="228" PREFIX:column="40">length</name></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="229" PREFIX:column="9">if <condition PREFIX:line="229" PREFIX:column="12">(<expr PREFIX:line="229" PREFIX:column="13">!<name PREFIX:line="229" PREFIX:column="14">cstr</name></expr>)</condition><then PREFIX:line="229" PREFIX:column="19"> <return PREFIX:line="229" PREFIX:column="20">return <expr PREFIX:line="229" PREFIX:column="27">0</expr>;</return></then></if>
	<if PREFIX:line="230" PREFIX:column="9">if <condition PREFIX:line="230" PREFIX:column="12">(<expr><name PREFIX:line="230" PREFIX:column="13">length</name> == 0</expr>)</condition><then PREFIX:line="230" PREFIX:column="25"> <return PREFIX:line="230" PREFIX:column="26">return <expr PREFIX:line="230" PREFIX:column="33">1</expr>;</return></then></if>
	<if PREFIX:line="231" PREFIX:column="9">if <condition PREFIX:line="231" PREFIX:column="12">(<expr PREFIX:line="231" PREFIX:column="13">!<call><name PREFIX:line="231" PREFIX:column="14">reserve</name><argument_list PREFIX:line="231" PREFIX:column="21">(<argument><expr><name PREFIX:line="231" PREFIX:column="22">newlen</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="231" PREFIX:column="30"> <return PREFIX:line="231" PREFIX:column="31">return <expr PREFIX:line="231" PREFIX:column="38">0</expr>;</return></then></if>
	<expr_stmt><expr><call><name PREFIX:line="232" PREFIX:column="9">strcpy</name><argument_list PREFIX:line="232" PREFIX:column="15">(<argument><expr><name PREFIX:line="232" PREFIX:column="16">buffer</name> + <name PREFIX:line="232" PREFIX:column="25">len</name></expr></argument>, <argument><expr><name PREFIX:line="232" PREFIX:column="30">cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="233" PREFIX:column="9">len</name> = <name PREFIX:line="233" PREFIX:column="15">newlen</name></expr>;</expr_stmt>
	<return PREFIX:line="234" PREFIX:column="9">return <expr PREFIX:line="234" PREFIX:column="16">1</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="237" PREFIX:column="1">unknowntype</name> <name PREFIX:line="237" PREFIX:column="13">char</name></type> <name><name PREFIX:line="237" PREFIX:column="18">String</name>::<name PREFIX:line="237" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="237" PREFIX:column="32">( <param><decl><type><name PREFIX:line="237" PREFIX:column="34">char</name> *</type><name PREFIX:line="237" PREFIX:column="40">cstr</name></decl></param>)</parameter_list>
<block PREFIX:line="238" PREFIX:column="1">{
	<if PREFIX:line="239" PREFIX:column="9">if <condition PREFIX:line="239" PREFIX:column="12">(<expr PREFIX:line="239" PREFIX:column="13">!<name PREFIX:line="239" PREFIX:column="14">cstr</name></expr>)</condition><then PREFIX:line="239" PREFIX:column="19"> <return PREFIX:line="239" PREFIX:column="20">return <expr PREFIX:line="239" PREFIX:column="27">0</expr>;</return></then></if>
	<return PREFIX:line="240" PREFIX:column="9">return <expr><call><name PREFIX:line="240" PREFIX:column="16">concat</name><argument_list PREFIX:line="240" PREFIX:column="22">(<argument><expr><name PREFIX:line="240" PREFIX:column="23">cstr</name></expr></argument>, <argument><expr><call><name PREFIX:line="240" PREFIX:column="29">strlen</name><argument_list PREFIX:line="240" PREFIX:column="35">(<argument><expr><name PREFIX:line="240" PREFIX:column="36">cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="243" PREFIX:column="1">unknowntype</name> <name PREFIX:line="243" PREFIX:column="13">char</name></type> <name><name PREFIX:line="243" PREFIX:column="18">String</name>::<name PREFIX:line="243" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="243" PREFIX:column="32">(<param><decl><type><name PREFIX:line="243" PREFIX:column="33">char</name></type> <name PREFIX:line="243" PREFIX:column="38">c</name></decl></param>)</parameter_list>
<block PREFIX:line="244" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="245" PREFIX:column="9">char</name></type> <name><name PREFIX:line="245" PREFIX:column="14">buf</name><index PREFIX:line="245" PREFIX:column="17">[<expr PREFIX:line="245" PREFIX:column="18">2</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name PREFIX:line="246" PREFIX:column="9">buf</name><index PREFIX:line="246" PREFIX:column="12">[<expr PREFIX:line="246" PREFIX:column="13">0</expr>]</index></name> = <name PREFIX:line="246" PREFIX:column="18">c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="247" PREFIX:column="9">buf</name><index PREFIX:line="247" PREFIX:column="12">[<expr PREFIX:line="247" PREFIX:column="13">1</expr>]</index></name> = 0</expr>;</expr_stmt>
	<return PREFIX:line="248" PREFIX:column="9">return <expr><call><name PREFIX:line="248" PREFIX:column="16">concat</name><argument_list PREFIX:line="248" PREFIX:column="22">(<argument><expr><name PREFIX:line="248" PREFIX:column="23">buf</name></expr></argument>, <argument><expr PREFIX:line="248" PREFIX:column="28">1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="251" PREFIX:column="1">unknowntype</name> <name PREFIX:line="251" PREFIX:column="13">char</name></type> <name><name PREFIX:line="251" PREFIX:column="18">String</name>::<name PREFIX:line="251" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="251" PREFIX:column="32">(<param><decl><type><name PREFIX:line="251" PREFIX:column="33">unknowntype</name> <name PREFIX:line="251" PREFIX:column="45">char</name></type> <name PREFIX:line="251" PREFIX:column="50">num</name></decl></param>)</parameter_list>
<block PREFIX:line="252" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="253" PREFIX:column="9">char</name></type> <name><name PREFIX:line="253" PREFIX:column="14">buf</name><index PREFIX:line="253" PREFIX:column="17">[<expr PREFIX:line="253" PREFIX:column="18">4</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="254" PREFIX:column="9">itoa</name><argument_list PREFIX:line="254" PREFIX:column="13">(<argument><expr><name PREFIX:line="254" PREFIX:column="14">num</name></expr></argument>, <argument><expr><name PREFIX:line="254" PREFIX:column="19">buf</name></expr></argument>, <argument><expr PREFIX:line="254" PREFIX:column="24">10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return PREFIX:line="255" PREFIX:column="9">return <expr><call><name PREFIX:line="255" PREFIX:column="16">concat</name><argument_list PREFIX:line="255" PREFIX:column="22">(<argument><expr><name PREFIX:line="255" PREFIX:column="23">buf</name></expr></argument>, <argument><expr><call><name PREFIX:line="255" PREFIX:column="28">strlen</name><argument_list PREFIX:line="255" PREFIX:column="34">(<argument><expr><name PREFIX:line="255" PREFIX:column="35">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="258" PREFIX:column="1">unknowntype</name> <name PREFIX:line="258" PREFIX:column="13">char</name></type> <name><name PREFIX:line="258" PREFIX:column="18">String</name>::<name PREFIX:line="258" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="258" PREFIX:column="32">(<param><decl><type><name PREFIX:line="258" PREFIX:column="33">int</name></type> <name PREFIX:line="258" PREFIX:column="37">num</name></decl></param>)</parameter_list>
<block PREFIX:line="259" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="260" PREFIX:column="9">char</name></type> <name><name PREFIX:line="260" PREFIX:column="14">buf</name><index PREFIX:line="260" PREFIX:column="17">[<expr PREFIX:line="260" PREFIX:column="18">7</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="261" PREFIX:column="9">itoa</name><argument_list PREFIX:line="261" PREFIX:column="13">(<argument><expr><name PREFIX:line="261" PREFIX:column="14">num</name></expr></argument>, <argument><expr><name PREFIX:line="261" PREFIX:column="19">buf</name></expr></argument>, <argument><expr PREFIX:line="261" PREFIX:column="24">10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return PREFIX:line="262" PREFIX:column="9">return <expr><call><name PREFIX:line="262" PREFIX:column="16">concat</name><argument_list PREFIX:line="262" PREFIX:column="22">(<argument><expr><name PREFIX:line="262" PREFIX:column="23">buf</name></expr></argument>, <argument><expr><call><name PREFIX:line="262" PREFIX:column="28">strlen</name><argument_list PREFIX:line="262" PREFIX:column="34">(<argument><expr><name PREFIX:line="262" PREFIX:column="35">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="265" PREFIX:column="1">unknowntype</name> <name PREFIX:line="265" PREFIX:column="13">char</name></type> <name><name PREFIX:line="265" PREFIX:column="18">String</name>::<name PREFIX:line="265" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="265" PREFIX:column="32">(<param><decl><type><name PREFIX:line="265" PREFIX:column="33">unknowntype</name> <name PREFIX:line="265" PREFIX:column="45">int</name></type> <name PREFIX:line="265" PREFIX:column="49">num</name></decl></param>)</parameter_list>
<block PREFIX:line="266" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="267" PREFIX:column="9">char</name></type> <name><name PREFIX:line="267" PREFIX:column="14">buf</name><index PREFIX:line="267" PREFIX:column="17">[<expr PREFIX:line="267" PREFIX:column="18">6</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="268" PREFIX:column="9">utoa</name><argument_list PREFIX:line="268" PREFIX:column="13">(<argument><expr><name PREFIX:line="268" PREFIX:column="14">num</name></expr></argument>, <argument><expr><name PREFIX:line="268" PREFIX:column="19">buf</name></expr></argument>, <argument><expr PREFIX:line="268" PREFIX:column="24">10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return PREFIX:line="269" PREFIX:column="9">return <expr><call><name PREFIX:line="269" PREFIX:column="16">concat</name><argument_list PREFIX:line="269" PREFIX:column="22">(<argument><expr><name PREFIX:line="269" PREFIX:column="23">buf</name></expr></argument>, <argument><expr><call><name PREFIX:line="269" PREFIX:column="28">strlen</name><argument_list PREFIX:line="269" PREFIX:column="34">(<argument><expr><name PREFIX:line="269" PREFIX:column="35">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="272" PREFIX:column="1">unknowntype</name> <name PREFIX:line="272" PREFIX:column="13">char</name></type> <name><name PREFIX:line="272" PREFIX:column="18">String</name>::<name PREFIX:line="272" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="272" PREFIX:column="32">(<param><decl><type><name PREFIX:line="272" PREFIX:column="33">long</name></type> <name PREFIX:line="272" PREFIX:column="38">num</name></decl></param>)</parameter_list>
<block PREFIX:line="273" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="274" PREFIX:column="9">char</name></type> <name><name PREFIX:line="274" PREFIX:column="14">buf</name><index PREFIX:line="274" PREFIX:column="17">[<expr PREFIX:line="274" PREFIX:column="18">12</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="275" PREFIX:column="9">ltoa</name><argument_list PREFIX:line="275" PREFIX:column="13">(<argument><expr><name PREFIX:line="275" PREFIX:column="14">num</name></expr></argument>, <argument><expr><name PREFIX:line="275" PREFIX:column="19">buf</name></expr></argument>, <argument><expr PREFIX:line="275" PREFIX:column="24">10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return PREFIX:line="276" PREFIX:column="9">return <expr><call><name PREFIX:line="276" PREFIX:column="16">concat</name><argument_list PREFIX:line="276" PREFIX:column="22">(<argument><expr><name PREFIX:line="276" PREFIX:column="23">buf</name></expr></argument>, <argument><expr><call><name PREFIX:line="276" PREFIX:column="28">strlen</name><argument_list PREFIX:line="276" PREFIX:column="34">(<argument><expr><name PREFIX:line="276" PREFIX:column="35">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="279" PREFIX:column="1">unknowntype</name> <name PREFIX:line="279" PREFIX:column="13">char</name></type> <name><name PREFIX:line="279" PREFIX:column="18">String</name>::<name PREFIX:line="279" PREFIX:column="26">concat</name></name><parameter_list PREFIX:line="279" PREFIX:column="32">(<param><decl><type><name PREFIX:line="279" PREFIX:column="33">unknowntype</name> <name PREFIX:line="279" PREFIX:column="45">long</name></type> <name PREFIX:line="279" PREFIX:column="50">num</name></decl></param>)</parameter_list>
<block PREFIX:line="280" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="281" PREFIX:column="9">char</name></type> <name><name PREFIX:line="281" PREFIX:column="14">buf</name><index PREFIX:line="281" PREFIX:column="17">[<expr PREFIX:line="281" PREFIX:column="18">11</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="282" PREFIX:column="9">ultoa</name><argument_list PREFIX:line="282" PREFIX:column="14">(<argument><expr><name PREFIX:line="282" PREFIX:column="15">num</name></expr></argument>, <argument><expr><name PREFIX:line="282" PREFIX:column="20">buf</name></expr></argument>, <argument><expr PREFIX:line="282" PREFIX:column="25">10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return PREFIX:line="283" PREFIX:column="9">return <expr><call><name PREFIX:line="283" PREFIX:column="16">concat</name><argument_list PREFIX:line="283" PREFIX:column="22">(<argument><expr><name PREFIX:line="283" PREFIX:column="23">buf</name></expr></argument>, <argument><expr><call><name PREFIX:line="283" PREFIX:column="28">strlen</name><argument_list PREFIX:line="283" PREFIX:column="34">(<argument><expr><name PREFIX:line="283" PREFIX:column="35">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" PREFIX:line="286" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="287" PREFIX:column="1">/*  Concatenate                              */</comment>
<comment type="block" format="doxygen" PREFIX:line="288" PREFIX:column="1">/*********************************************/</comment>

<function><type><name PREFIX:line="290" PREFIX:column="1">StringSumHelper</name> &amp;</type> <name PREFIX:line="290" PREFIX:column="19">operator +</name> <parameter_list PREFIX:line="290" PREFIX:column="30">( <param><decl><type><name PREFIX:line="290" PREFIX:column="32">StringSumHelper</name> &amp;</type><name PREFIX:line="290" PREFIX:column="49">lhs</name></decl></param>,  <param><decl><type><name PREFIX:line="290" PREFIX:column="55">String</name> &amp;</type><name PREFIX:line="290" PREFIX:column="63">rhs</name></decl></param>)</parameter_list>
<block PREFIX:line="291" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="292" PREFIX:column="9">StringSumHelper</name> &amp;</type><name PREFIX:line="292" PREFIX:column="26">a</name> <init PREFIX:line="292" PREFIX:column="28">= <expr><call><name><name PREFIX:line="292" PREFIX:column="30">_cast</name><argument_list PREFIX:line="292" PREFIX:column="35">&lt;<argument><expr><name PREFIX:line="292" PREFIX:column="36">StringSumHelper</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list PREFIX:line="292" PREFIX:column="53">(<argument><expr><name PREFIX:line="292" PREFIX:column="54">lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="293" PREFIX:column="9">if <condition PREFIX:line="293" PREFIX:column="12">(<expr PREFIX:line="293" PREFIX:column="13">!<call><name><name PREFIX:line="293" PREFIX:column="14">a</name>.<name PREFIX:line="293" PREFIX:column="16">concat</name></name><argument_list PREFIX:line="293" PREFIX:column="22">(<argument><expr><name><name PREFIX:line="293" PREFIX:column="23">rhs</name>.<name PREFIX:line="293" PREFIX:column="27">buffer</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="293" PREFIX:column="35">rhs</name>.<name PREFIX:line="293" PREFIX:column="39">len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="293" PREFIX:column="44"> <expr_stmt><expr><call><name><name PREFIX:line="293" PREFIX:column="45">a</name>.<name PREFIX:line="293" PREFIX:column="47">invalidate</name></name><argument_list PREFIX:line="293" PREFIX:column="57">()</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="294" PREFIX:column="9">return <expr><name PREFIX:line="294" PREFIX:column="16">a</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="297" PREFIX:column="1">StringSumHelper</name> &amp;</type> <name PREFIX:line="297" PREFIX:column="19">operator +</name> <parameter_list PREFIX:line="297" PREFIX:column="30">( <param><decl><type><name PREFIX:line="297" PREFIX:column="32">StringSumHelper</name> &amp;</type><name PREFIX:line="297" PREFIX:column="49">lhs</name></decl></param>,  <param><decl><type><name PREFIX:line="297" PREFIX:column="55">char</name> *</type><name PREFIX:line="297" PREFIX:column="61">cstr</name></decl></param>)</parameter_list>
<block PREFIX:line="298" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="299" PREFIX:column="9">StringSumHelper</name> &amp;</type><name PREFIX:line="299" PREFIX:column="26">a</name> <init PREFIX:line="299" PREFIX:column="28">= <expr><call><name><name PREFIX:line="299" PREFIX:column="30">_cast</name><argument_list PREFIX:line="299" PREFIX:column="35">&lt;<argument><expr><name PREFIX:line="299" PREFIX:column="36">StringSumHelper</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list PREFIX:line="299" PREFIX:column="53">(<argument><expr><name PREFIX:line="299" PREFIX:column="54">lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="300" PREFIX:column="9">if <condition PREFIX:line="300" PREFIX:column="12">(<expr PREFIX:line="300" PREFIX:column="13">!<name PREFIX:line="300" PREFIX:column="14">cstr</name> || !<call><name><name PREFIX:line="300" PREFIX:column="23">a</name>.<name PREFIX:line="300" PREFIX:column="25">concat</name></name><argument_list PREFIX:line="300" PREFIX:column="31">(<argument><expr><name PREFIX:line="300" PREFIX:column="32">cstr</name></expr></argument>, <argument><expr><call><name PREFIX:line="300" PREFIX:column="38">strlen</name><argument_list PREFIX:line="300" PREFIX:column="44">(<argument><expr><name PREFIX:line="300" PREFIX:column="45">cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="300" PREFIX:column="52"> <expr_stmt><expr><call><name><name PREFIX:line="300" PREFIX:column="53">a</name>.<name PREFIX:line="300" PREFIX:column="55">invalidate</name></name><argument_list PREFIX:line="300" PREFIX:column="65">()</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="301" PREFIX:column="9">return <expr><name PREFIX:line="301" PREFIX:column="16">a</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="304" PREFIX:column="1">StringSumHelper</name> &amp;</type> <name PREFIX:line="304" PREFIX:column="19">operator +</name> <parameter_list PREFIX:line="304" PREFIX:column="30">( <param><decl><type><name PREFIX:line="304" PREFIX:column="32">StringSumHelper</name> &amp;</type><name PREFIX:line="304" PREFIX:column="49">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="304" PREFIX:column="54">char</name></type> <name PREFIX:line="304" PREFIX:column="59">c</name></decl></param>)</parameter_list>
<block PREFIX:line="305" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="306" PREFIX:column="9">StringSumHelper</name> &amp;</type><name PREFIX:line="306" PREFIX:column="26">a</name> <init PREFIX:line="306" PREFIX:column="28">= <expr><call><name><name PREFIX:line="306" PREFIX:column="30">_cast</name><argument_list PREFIX:line="306" PREFIX:column="35">&lt;<argument><expr><name PREFIX:line="306" PREFIX:column="36">StringSumHelper</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list PREFIX:line="306" PREFIX:column="53">(<argument><expr><name PREFIX:line="306" PREFIX:column="54">lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="307" PREFIX:column="9">if <condition PREFIX:line="307" PREFIX:column="12">(<expr PREFIX:line="307" PREFIX:column="13">!<call><name><name PREFIX:line="307" PREFIX:column="14">a</name>.<name PREFIX:line="307" PREFIX:column="16">concat</name></name><argument_list PREFIX:line="307" PREFIX:column="22">(<argument><expr><name PREFIX:line="307" PREFIX:column="23">c</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="307" PREFIX:column="26"> <expr_stmt><expr><call><name><name PREFIX:line="307" PREFIX:column="27">a</name>.<name PREFIX:line="307" PREFIX:column="29">invalidate</name></name><argument_list PREFIX:line="307" PREFIX:column="39">()</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="308" PREFIX:column="9">return <expr><name PREFIX:line="308" PREFIX:column="16">a</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="311" PREFIX:column="1">StringSumHelper</name> &amp;</type> <name PREFIX:line="311" PREFIX:column="19">operator +</name> <parameter_list PREFIX:line="311" PREFIX:column="30">( <param><decl><type><name PREFIX:line="311" PREFIX:column="32">StringSumHelper</name> &amp;</type><name PREFIX:line="311" PREFIX:column="49">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="311" PREFIX:column="54">unknowntype</name> <name PREFIX:line="311" PREFIX:column="66">char</name></type> <name PREFIX:line="311" PREFIX:column="71">num</name></decl></param>)</parameter_list>
<block PREFIX:line="312" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="313" PREFIX:column="9">StringSumHelper</name> &amp;</type><name PREFIX:line="313" PREFIX:column="26">a</name> <init PREFIX:line="313" PREFIX:column="28">= <expr><call><name><name PREFIX:line="313" PREFIX:column="30">_cast</name><argument_list PREFIX:line="313" PREFIX:column="35">&lt;<argument><expr><name PREFIX:line="313" PREFIX:column="36">StringSumHelper</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list PREFIX:line="313" PREFIX:column="53">(<argument><expr><name PREFIX:line="313" PREFIX:column="54">lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="314" PREFIX:column="9">if <condition PREFIX:line="314" PREFIX:column="12">(<expr PREFIX:line="314" PREFIX:column="13">!<call><name><name PREFIX:line="314" PREFIX:column="14">a</name>.<name PREFIX:line="314" PREFIX:column="16">concat</name></name><argument_list PREFIX:line="314" PREFIX:column="22">(<argument><expr><name PREFIX:line="314" PREFIX:column="23">num</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="314" PREFIX:column="28"> <expr_stmt><expr><call><name><name PREFIX:line="314" PREFIX:column="29">a</name>.<name PREFIX:line="314" PREFIX:column="31">invalidate</name></name><argument_list PREFIX:line="314" PREFIX:column="41">()</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="315" PREFIX:column="9">return <expr><name PREFIX:line="315" PREFIX:column="16">a</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="318" PREFIX:column="1">StringSumHelper</name> &amp;</type> <name PREFIX:line="318" PREFIX:column="19">operator +</name> <parameter_list PREFIX:line="318" PREFIX:column="30">( <param><decl><type><name PREFIX:line="318" PREFIX:column="32">StringSumHelper</name> &amp;</type><name PREFIX:line="318" PREFIX:column="49">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="318" PREFIX:column="54">int</name></type> <name PREFIX:line="318" PREFIX:column="58">num</name></decl></param>)</parameter_list>
<block PREFIX:line="319" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="320" PREFIX:column="9">StringSumHelper</name> &amp;</type><name PREFIX:line="320" PREFIX:column="26">a</name> <init PREFIX:line="320" PREFIX:column="28">= <expr><call><name><name PREFIX:line="320" PREFIX:column="30">_cast</name><argument_list PREFIX:line="320" PREFIX:column="35">&lt;<argument><expr><name PREFIX:line="320" PREFIX:column="36">StringSumHelper</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list PREFIX:line="320" PREFIX:column="53">(<argument><expr><name PREFIX:line="320" PREFIX:column="54">lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="321" PREFIX:column="9">if <condition PREFIX:line="321" PREFIX:column="12">(<expr PREFIX:line="321" PREFIX:column="13">!<call><name><name PREFIX:line="321" PREFIX:column="14">a</name>.<name PREFIX:line="321" PREFIX:column="16">concat</name></name><argument_list PREFIX:line="321" PREFIX:column="22">(<argument><expr><name PREFIX:line="321" PREFIX:column="23">num</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="321" PREFIX:column="28"> <expr_stmt><expr><call><name><name PREFIX:line="321" PREFIX:column="29">a</name>.<name PREFIX:line="321" PREFIX:column="31">invalidate</name></name><argument_list PREFIX:line="321" PREFIX:column="41">()</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="322" PREFIX:column="9">return <expr><name PREFIX:line="322" PREFIX:column="16">a</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="325" PREFIX:column="1">StringSumHelper</name> &amp;</type> <name PREFIX:line="325" PREFIX:column="19">operator +</name> <parameter_list PREFIX:line="325" PREFIX:column="30">( <param><decl><type><name PREFIX:line="325" PREFIX:column="32">StringSumHelper</name> &amp;</type><name PREFIX:line="325" PREFIX:column="49">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="325" PREFIX:column="54">unknowntype</name> <name PREFIX:line="325" PREFIX:column="66">int</name></type> <name PREFIX:line="325" PREFIX:column="70">num</name></decl></param>)</parameter_list>
<block PREFIX:line="326" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="327" PREFIX:column="9">StringSumHelper</name> &amp;</type><name PREFIX:line="327" PREFIX:column="26">a</name> <init PREFIX:line="327" PREFIX:column="28">= <expr><call><name><name PREFIX:line="327" PREFIX:column="30">_cast</name><argument_list PREFIX:line="327" PREFIX:column="35">&lt;<argument><expr><name PREFIX:line="327" PREFIX:column="36">StringSumHelper</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list PREFIX:line="327" PREFIX:column="53">(<argument><expr><name PREFIX:line="327" PREFIX:column="54">lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="328" PREFIX:column="9">if <condition PREFIX:line="328" PREFIX:column="12">(<expr PREFIX:line="328" PREFIX:column="13">!<call><name><name PREFIX:line="328" PREFIX:column="14">a</name>.<name PREFIX:line="328" PREFIX:column="16">concat</name></name><argument_list PREFIX:line="328" PREFIX:column="22">(<argument><expr><name PREFIX:line="328" PREFIX:column="23">num</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="328" PREFIX:column="28"> <expr_stmt><expr><call><name><name PREFIX:line="328" PREFIX:column="29">a</name>.<name PREFIX:line="328" PREFIX:column="31">invalidate</name></name><argument_list PREFIX:line="328" PREFIX:column="41">()</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="329" PREFIX:column="9">return <expr><name PREFIX:line="329" PREFIX:column="16">a</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="332" PREFIX:column="1">StringSumHelper</name> &amp;</type> <name PREFIX:line="332" PREFIX:column="19">operator +</name> <parameter_list PREFIX:line="332" PREFIX:column="30">( <param><decl><type><name PREFIX:line="332" PREFIX:column="32">StringSumHelper</name> &amp;</type><name PREFIX:line="332" PREFIX:column="49">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="332" PREFIX:column="54">long</name></type> <name PREFIX:line="332" PREFIX:column="59">num</name></decl></param>)</parameter_list>
<block PREFIX:line="333" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="334" PREFIX:column="9">StringSumHelper</name> &amp;</type><name PREFIX:line="334" PREFIX:column="26">a</name> <init PREFIX:line="334" PREFIX:column="28">= <expr><call><name><name PREFIX:line="334" PREFIX:column="30">_cast</name><argument_list PREFIX:line="334" PREFIX:column="35">&lt;<argument><expr><name PREFIX:line="334" PREFIX:column="36">StringSumHelper</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list PREFIX:line="334" PREFIX:column="53">(<argument><expr><name PREFIX:line="334" PREFIX:column="54">lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="335" PREFIX:column="9">if <condition PREFIX:line="335" PREFIX:column="12">(<expr PREFIX:line="335" PREFIX:column="13">!<call><name><name PREFIX:line="335" PREFIX:column="14">a</name>.<name PREFIX:line="335" PREFIX:column="16">concat</name></name><argument_list PREFIX:line="335" PREFIX:column="22">(<argument><expr><name PREFIX:line="335" PREFIX:column="23">num</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="335" PREFIX:column="28"> <expr_stmt><expr><call><name><name PREFIX:line="335" PREFIX:column="29">a</name>.<name PREFIX:line="335" PREFIX:column="31">invalidate</name></name><argument_list PREFIX:line="335" PREFIX:column="41">()</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="336" PREFIX:column="9">return <expr><name PREFIX:line="336" PREFIX:column="16">a</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="339" PREFIX:column="1">StringSumHelper</name> &amp;</type> <name PREFIX:line="339" PREFIX:column="19">operator +</name> <parameter_list PREFIX:line="339" PREFIX:column="30">( <param><decl><type><name PREFIX:line="339" PREFIX:column="32">StringSumHelper</name> &amp;</type><name PREFIX:line="339" PREFIX:column="49">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="339" PREFIX:column="54">unknowntype</name> <name PREFIX:line="339" PREFIX:column="66">long</name></type> <name PREFIX:line="339" PREFIX:column="71">num</name></decl></param>)</parameter_list>
<block PREFIX:line="340" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="341" PREFIX:column="9">StringSumHelper</name> &amp;</type><name PREFIX:line="341" PREFIX:column="26">a</name> <init PREFIX:line="341" PREFIX:column="28">= <expr><call><name><name PREFIX:line="341" PREFIX:column="30">_cast</name><argument_list PREFIX:line="341" PREFIX:column="35">&lt;<argument><expr><name PREFIX:line="341" PREFIX:column="36">StringSumHelper</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list PREFIX:line="341" PREFIX:column="53">(<argument><expr><name PREFIX:line="341" PREFIX:column="54">lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="342" PREFIX:column="9">if <condition PREFIX:line="342" PREFIX:column="12">(<expr PREFIX:line="342" PREFIX:column="13">!<call><name><name PREFIX:line="342" PREFIX:column="14">a</name>.<name PREFIX:line="342" PREFIX:column="16">concat</name></name><argument_list PREFIX:line="342" PREFIX:column="22">(<argument><expr><name PREFIX:line="342" PREFIX:column="23">num</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="342" PREFIX:column="28"> <expr_stmt><expr><call><name><name PREFIX:line="342" PREFIX:column="29">a</name>.<name PREFIX:line="342" PREFIX:column="31">invalidate</name></name><argument_list PREFIX:line="342" PREFIX:column="41">()</argument_list></call></expr>;</expr_stmt></then></if>
	<return PREFIX:line="343" PREFIX:column="9">return <expr><name PREFIX:line="343" PREFIX:column="16">a</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" PREFIX:line="346" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="347" PREFIX:column="1">/*  Comparison                               */</comment>
<comment type="block" format="doxygen" PREFIX:line="348" PREFIX:column="1">/*********************************************/</comment>

<function><type><name PREFIX:line="350" PREFIX:column="1">int</name></type> <name><name PREFIX:line="350" PREFIX:column="5">String</name>::<name PREFIX:line="350" PREFIX:column="13">compareTo</name></name><parameter_list PREFIX:line="350" PREFIX:column="22">( <param><decl><type><name PREFIX:line="350" PREFIX:column="24">String</name> &amp;</type><name PREFIX:line="350" PREFIX:column="32">s</name></decl></param>)</parameter_list> 
<block PREFIX:line="351" PREFIX:column="1">{
	<if PREFIX:line="352" PREFIX:column="9">if <condition PREFIX:line="352" PREFIX:column="12">(<expr PREFIX:line="352" PREFIX:column="13">!<name PREFIX:line="352" PREFIX:column="14">buffer</name> || !<name><name PREFIX:line="352" PREFIX:column="25">s</name>.<name PREFIX:line="352" PREFIX:column="27">buffer</name></name></expr>)</condition><then PREFIX:line="352" PREFIX:column="34"> <block PREFIX:line="352" PREFIX:column="35">{
		<if PREFIX:line="353" PREFIX:column="17">if <condition PREFIX:line="353" PREFIX:column="20">(<expr><name><name PREFIX:line="353" PREFIX:column="21">s</name>.<name PREFIX:line="353" PREFIX:column="23">buffer</name></name> &amp;&amp; <name><name PREFIX:line="353" PREFIX:column="33">s</name>.<name PREFIX:line="353" PREFIX:column="35">len</name></name> &gt; 0</expr>)</condition><then PREFIX:line="353" PREFIX:column="43"> <return PREFIX:line="353" PREFIX:column="44">return <expr PREFIX:line="353" PREFIX:column="51">0 - *(<name PREFIX:line="353" PREFIX:column="57">unknowntype</name> <name PREFIX:line="353" PREFIX:column="69">char</name> *)<name><name PREFIX:line="353" PREFIX:column="76">s</name>.<name PREFIX:line="353" PREFIX:column="78">buffer</name></name></expr>;</return></then></if>
		<if PREFIX:line="354" PREFIX:column="17">if <condition PREFIX:line="354" PREFIX:column="20">(<expr><name PREFIX:line="354" PREFIX:column="21">buffer</name> &amp;&amp; <name PREFIX:line="354" PREFIX:column="31">len</name> &gt; 0</expr>)</condition><then PREFIX:line="354" PREFIX:column="39"> <return PREFIX:line="354" PREFIX:column="40">return <expr PREFIX:line="354" PREFIX:column="47">*(<name PREFIX:line="354" PREFIX:column="49">unknowntype</name> <name PREFIX:line="354" PREFIX:column="61">char</name> *)<name PREFIX:line="354" PREFIX:column="68">buffer</name></expr>;</return></then></if>
		<return PREFIX:line="355" PREFIX:column="17">return <expr PREFIX:line="355" PREFIX:column="24">0</expr>;</return>
	}</block></then></if>
	<return PREFIX:line="357" PREFIX:column="9">return <expr><call><name PREFIX:line="357" PREFIX:column="16">strcmp</name><argument_list PREFIX:line="357" PREFIX:column="22">(<argument><expr><name PREFIX:line="357" PREFIX:column="23">buffer</name></expr></argument>, <argument><expr><name><name PREFIX:line="357" PREFIX:column="31">s</name>.<name PREFIX:line="357" PREFIX:column="33">buffer</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="360" PREFIX:column="1">unknowntype</name> <name PREFIX:line="360" PREFIX:column="13">char</name></type> <name><name PREFIX:line="360" PREFIX:column="18">String</name>::<name PREFIX:line="360" PREFIX:column="26">equals</name></name><parameter_list PREFIX:line="360" PREFIX:column="32">( <param><decl><type><name PREFIX:line="360" PREFIX:column="34">String</name> &amp;</type><name PREFIX:line="360" PREFIX:column="42">s2</name></decl></param>)</parameter_list> 
<block PREFIX:line="361" PREFIX:column="1">{
	<return PREFIX:line="362" PREFIX:column="9">return <expr PREFIX:line="362" PREFIX:column="16">(<name PREFIX:line="362" PREFIX:column="17">len</name> == <name><name PREFIX:line="362" PREFIX:column="24">s2</name>.<name PREFIX:line="362" PREFIX:column="27">len</name></name> &amp;&amp; <call><name PREFIX:line="362" PREFIX:column="34">compareTo</name><argument_list PREFIX:line="362" PREFIX:column="43">(<argument><expr><name PREFIX:line="362" PREFIX:column="44">s2</name></expr></argument>)</argument_list></call> == 0)</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="365" PREFIX:column="1">unknowntype</name> <name PREFIX:line="365" PREFIX:column="13">char</name></type> <name><name PREFIX:line="365" PREFIX:column="18">String</name>::<name PREFIX:line="365" PREFIX:column="26">equals</name></name><parameter_list PREFIX:line="365" PREFIX:column="32">( <param><decl><type><name PREFIX:line="365" PREFIX:column="34">char</name> *</type><name PREFIX:line="365" PREFIX:column="40">cstr</name></decl></param>)</parameter_list> 
<block PREFIX:line="366" PREFIX:column="1">{
	<if PREFIX:line="367" PREFIX:column="9">if <condition PREFIX:line="367" PREFIX:column="12">(<expr><name PREFIX:line="367" PREFIX:column="13">len</name> == 0</expr>)</condition><then PREFIX:line="367" PREFIX:column="22"> <return PREFIX:line="367" PREFIX:column="23">return <expr PREFIX:line="367" PREFIX:column="30">(<name PREFIX:line="367" PREFIX:column="31">cstr</name> == <name PREFIX:line="367" PREFIX:column="39">NULL</name> || *<name PREFIX:line="367" PREFIX:column="48">cstr</name> == 0)</expr>;</return></then></if>
	<if PREFIX:line="368" PREFIX:column="9">if <condition PREFIX:line="368" PREFIX:column="12">(<expr><name PREFIX:line="368" PREFIX:column="13">cstr</name> == <name PREFIX:line="368" PREFIX:column="21">NULL</name></expr>)</condition><then PREFIX:line="368" PREFIX:column="26"> <return PREFIX:line="368" PREFIX:column="27">return <expr><name><name PREFIX:line="368" PREFIX:column="34">buffer</name><index PREFIX:line="368" PREFIX:column="40">[<expr PREFIX:line="368" PREFIX:column="41">0</expr>]</index></name> == 0</expr>;</return></then></if>
	<return PREFIX:line="369" PREFIX:column="9">return <expr><call><name PREFIX:line="369" PREFIX:column="16">strcmp</name><argument_list PREFIX:line="369" PREFIX:column="22">(<argument><expr><name PREFIX:line="369" PREFIX:column="23">buffer</name></expr></argument>, <argument><expr><name PREFIX:line="369" PREFIX:column="31">cstr</name></expr></argument>)</argument_list></call> == 0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="372" PREFIX:column="1">unknowntype</name> <name PREFIX:line="372" PREFIX:column="13">char</name></type> <name><name PREFIX:line="372" PREFIX:column="18">String</name>::<name PREFIX:line="372" PREFIX:column="26">operator&lt;</name></name><parameter_list PREFIX:line="372" PREFIX:column="35">( <param><decl><type><name PREFIX:line="372" PREFIX:column="37">String</name> &amp;</type><name PREFIX:line="372" PREFIX:column="45">rhs</name></decl></param>)</parameter_list> 
<block PREFIX:line="373" PREFIX:column="1">{
	<return PREFIX:line="374" PREFIX:column="9">return <expr><call><name PREFIX:line="374" PREFIX:column="16">compareTo</name><argument_list PREFIX:line="374" PREFIX:column="25">(<argument><expr><name PREFIX:line="374" PREFIX:column="26">rhs</name></expr></argument>)</argument_list></call> &lt; 0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="377" PREFIX:column="1">unknowntype</name> <name PREFIX:line="377" PREFIX:column="13">char</name></type> <name><name PREFIX:line="377" PREFIX:column="18">String</name>::<name PREFIX:line="377" PREFIX:column="26">operator&gt;</name></name><parameter_list PREFIX:line="377" PREFIX:column="35">( <param><decl><type><name PREFIX:line="377" PREFIX:column="37">String</name> &amp;</type><name PREFIX:line="377" PREFIX:column="45">rhs</name></decl></param>)</parameter_list> 
<block PREFIX:line="378" PREFIX:column="1">{
	<return PREFIX:line="379" PREFIX:column="9">return <expr><call><name PREFIX:line="379" PREFIX:column="16">compareTo</name><argument_list PREFIX:line="379" PREFIX:column="25">(<argument><expr><name PREFIX:line="379" PREFIX:column="26">rhs</name></expr></argument>)</argument_list></call> &gt; 0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="382" PREFIX:column="1">unknowntype</name> <name PREFIX:line="382" PREFIX:column="13">char</name></type> <name><name PREFIX:line="382" PREFIX:column="18">String</name>::<name PREFIX:line="382" PREFIX:column="26">operator&lt;=</name></name><parameter_list PREFIX:line="382" PREFIX:column="36">( <param><decl><type><name PREFIX:line="382" PREFIX:column="38">String</name> &amp;</type><name PREFIX:line="382" PREFIX:column="46">rhs</name></decl></param>)</parameter_list> 
<block PREFIX:line="383" PREFIX:column="1">{
	<return PREFIX:line="384" PREFIX:column="9">return <expr><call><name PREFIX:line="384" PREFIX:column="16">compareTo</name><argument_list PREFIX:line="384" PREFIX:column="25">(<argument><expr><name PREFIX:line="384" PREFIX:column="26">rhs</name></expr></argument>)</argument_list></call> &lt;= 0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="387" PREFIX:column="1">unknowntype</name> <name PREFIX:line="387" PREFIX:column="13">char</name></type> <name><name PREFIX:line="387" PREFIX:column="18">String</name>::<name PREFIX:line="387" PREFIX:column="26">operator&gt;=</name></name><parameter_list PREFIX:line="387" PREFIX:column="36">( <param><decl><type><name PREFIX:line="387" PREFIX:column="38">String</name> &amp;</type><name PREFIX:line="387" PREFIX:column="46">rhs</name></decl></param>)</parameter_list> 
<block PREFIX:line="388" PREFIX:column="1">{
	<return PREFIX:line="389" PREFIX:column="9">return <expr><call><name PREFIX:line="389" PREFIX:column="16">compareTo</name><argument_list PREFIX:line="389" PREFIX:column="25">(<argument><expr><name PREFIX:line="389" PREFIX:column="26">rhs</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="392" PREFIX:column="1">unknowntype</name> <name PREFIX:line="392" PREFIX:column="13">char</name></type> <name><name PREFIX:line="392" PREFIX:column="18">String</name>::<name PREFIX:line="392" PREFIX:column="26">equalsIgnoreCase</name></name><parameter_list PREFIX:line="392" PREFIX:column="42">(  <param><decl><type><name PREFIX:line="392" PREFIX:column="45">String</name> &amp;</type><name PREFIX:line="392" PREFIX:column="53">s2</name></decl></param> )</parameter_list> 
<block PREFIX:line="393" PREFIX:column="1">{
	<if PREFIX:line="394" PREFIX:column="9">if <condition PREFIX:line="394" PREFIX:column="12">(<expr><name PREFIX:line="394" PREFIX:column="13">this</name> == &amp;<name PREFIX:line="394" PREFIX:column="22">s2</name></expr>)</condition><then PREFIX:line="394" PREFIX:column="25"> <return PREFIX:line="394" PREFIX:column="26">return <expr PREFIX:line="394" PREFIX:column="33">1</expr>;</return></then></if>
	<if PREFIX:line="395" PREFIX:column="9">if <condition PREFIX:line="395" PREFIX:column="12">(<expr><name PREFIX:line="395" PREFIX:column="13">len</name> != <name><name PREFIX:line="395" PREFIX:column="20">s2</name>.<name PREFIX:line="395" PREFIX:column="23">len</name></name></expr>)</condition><then PREFIX:line="395" PREFIX:column="27"> <return PREFIX:line="395" PREFIX:column="28">return <expr PREFIX:line="395" PREFIX:column="35">0</expr>;</return></then></if>
	<if PREFIX:line="396" PREFIX:column="9">if <condition PREFIX:line="396" PREFIX:column="12">(<expr><name PREFIX:line="396" PREFIX:column="13">len</name> == 0</expr>)</condition><then PREFIX:line="396" PREFIX:column="22"> <return PREFIX:line="396" PREFIX:column="23">return <expr PREFIX:line="396" PREFIX:column="30">1</expr>;</return></then></if>
	 <decl_stmt><decl><type><name PREFIX:line="397" PREFIX:column="10">char</name> *</type><name PREFIX:line="397" PREFIX:column="16">p1</name> <init PREFIX:line="397" PREFIX:column="19">= <expr><name PREFIX:line="397" PREFIX:column="21">buffer</name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name PREFIX:line="398" PREFIX:column="10">char</name> *</type><name PREFIX:line="398" PREFIX:column="16">p2</name> <init PREFIX:line="398" PREFIX:column="19">= <expr><name><name PREFIX:line="398" PREFIX:column="21">s2</name>.<name PREFIX:line="398" PREFIX:column="24">buffer</name></name></expr></init></decl>;</decl_stmt>
	<while PREFIX:line="399" PREFIX:column="9">while <condition PREFIX:line="399" PREFIX:column="15">(<expr PREFIX:line="399" PREFIX:column="16">*<name PREFIX:line="399" PREFIX:column="17">p1</name></expr>)</condition> <block PREFIX:line="399" PREFIX:column="21">{
		<if PREFIX:line="400" PREFIX:column="17">if <condition PREFIX:line="400" PREFIX:column="20">(<expr><call><name PREFIX:line="400" PREFIX:column="21">tolower</name><argument_list PREFIX:line="400" PREFIX:column="28">(<argument><expr PREFIX:line="400" PREFIX:column="29">*<name PREFIX:line="400" PREFIX:column="30">p1</name>++</expr></argument>)</argument_list></call> != <call><name PREFIX:line="400" PREFIX:column="39">tolower</name><argument_list PREFIX:line="400" PREFIX:column="46">(<argument><expr PREFIX:line="400" PREFIX:column="47">*<name PREFIX:line="400" PREFIX:column="48">p2</name>++</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="400" PREFIX:column="54"> <return PREFIX:line="400" PREFIX:column="55">return <expr PREFIX:line="400" PREFIX:column="62">0</expr>;</return></then></if>
	}</block></while> 
	<return PREFIX:line="402" PREFIX:column="9">return <expr PREFIX:line="402" PREFIX:column="16">1</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="405" PREFIX:column="1">unknowntype</name> <name PREFIX:line="405" PREFIX:column="13">char</name></type> <name><name PREFIX:line="405" PREFIX:column="18">String</name>::<name PREFIX:line="405" PREFIX:column="26">startsWith</name></name><parameter_list PREFIX:line="405" PREFIX:column="36">(  <param><decl><type><name PREFIX:line="405" PREFIX:column="39">String</name> &amp;</type><name PREFIX:line="405" PREFIX:column="47">s2</name></decl></param> )</parameter_list> 
<block PREFIX:line="406" PREFIX:column="1">{
	<if PREFIX:line="407" PREFIX:column="9">if <condition PREFIX:line="407" PREFIX:column="12">(<expr><name PREFIX:line="407" PREFIX:column="13">len</name> &lt; <name><name PREFIX:line="407" PREFIX:column="19">s2</name>.<name PREFIX:line="407" PREFIX:column="22">len</name></name></expr>)</condition><then PREFIX:line="407" PREFIX:column="26"> <return PREFIX:line="407" PREFIX:column="27">return <expr PREFIX:line="407" PREFIX:column="34">0</expr>;</return></then></if>
	<return PREFIX:line="408" PREFIX:column="9">return <expr><call><name PREFIX:line="408" PREFIX:column="16">startsWith</name><argument_list PREFIX:line="408" PREFIX:column="26">(<argument><expr><name PREFIX:line="408" PREFIX:column="27">s2</name></expr></argument>, <argument><expr PREFIX:line="408" PREFIX:column="31">0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="411" PREFIX:column="1">unknowntype</name> <name PREFIX:line="411" PREFIX:column="13">char</name></type> <name><name PREFIX:line="411" PREFIX:column="18">String</name>::<name PREFIX:line="411" PREFIX:column="26">startsWith</name></name><parameter_list PREFIX:line="411" PREFIX:column="36">(  <param><decl><type><name PREFIX:line="411" PREFIX:column="39">String</name> &amp;</type><name PREFIX:line="411" PREFIX:column="47">s2</name></decl></param>, <param><decl><type><name PREFIX:line="411" PREFIX:column="51">unknowntype</name> <name PREFIX:line="411" PREFIX:column="63">int</name></type> <name PREFIX:line="411" PREFIX:column="67">offset</name></decl></param> )</parameter_list> 
<block PREFIX:line="412" PREFIX:column="1">{
	<if PREFIX:line="413" PREFIX:column="9">if <condition PREFIX:line="413" PREFIX:column="12">(<expr><name PREFIX:line="413" PREFIX:column="13">offset</name> &gt; <name PREFIX:line="413" PREFIX:column="22">len</name> - <name><name PREFIX:line="413" PREFIX:column="28">s2</name>.<name PREFIX:line="413" PREFIX:column="31">len</name></name> || !<name PREFIX:line="413" PREFIX:column="39">buffer</name> || !<name><name PREFIX:line="413" PREFIX:column="50">s2</name>.<name PREFIX:line="413" PREFIX:column="53">buffer</name></name></expr>)</condition><then PREFIX:line="413" PREFIX:column="60"> <return PREFIX:line="413" PREFIX:column="61">return <expr PREFIX:line="413" PREFIX:column="68">0</expr>;</return></then></if>
	<return PREFIX:line="414" PREFIX:column="9">return <expr><call><name PREFIX:line="414" PREFIX:column="16">strncmp</name><argument_list PREFIX:line="414" PREFIX:column="23">( <argument><expr PREFIX:line="414" PREFIX:column="25">&amp;<name><name PREFIX:line="414" PREFIX:column="26">buffer</name><index PREFIX:line="414" PREFIX:column="32">[<expr><name PREFIX:line="414" PREFIX:column="33">offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name PREFIX:line="414" PREFIX:column="42">s2</name>.<name PREFIX:line="414" PREFIX:column="45">buffer</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="414" PREFIX:column="53">s2</name>.<name PREFIX:line="414" PREFIX:column="56">len</name></name></expr></argument> )</argument_list></call> == 0</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="417" PREFIX:column="1">unknowntype</name> <name PREFIX:line="417" PREFIX:column="13">char</name></type> <name><name PREFIX:line="417" PREFIX:column="18">String</name>::<name PREFIX:line="417" PREFIX:column="26">endsWith</name></name><parameter_list PREFIX:line="417" PREFIX:column="34">(  <param><decl><type><name PREFIX:line="417" PREFIX:column="37">String</name> &amp;</type><name PREFIX:line="417" PREFIX:column="45">s2</name></decl></param> )</parameter_list> 
<block PREFIX:line="418" PREFIX:column="1">{
	<if PREFIX:line="419" PREFIX:column="9">if <condition PREFIX:line="419" PREFIX:column="12">( <expr><name PREFIX:line="419" PREFIX:column="14">len</name> &lt; <name><name PREFIX:line="419" PREFIX:column="20">s2</name>.<name PREFIX:line="419" PREFIX:column="23">len</name></name> || !<name PREFIX:line="419" PREFIX:column="31">buffer</name> || !<name><name PREFIX:line="419" PREFIX:column="42">s2</name>.<name PREFIX:line="419" PREFIX:column="45">buffer</name></name></expr>)</condition><then PREFIX:line="419" PREFIX:column="52"> <return PREFIX:line="419" PREFIX:column="53">return <expr PREFIX:line="419" PREFIX:column="60">0</expr>;</return></then></if>
	<return PREFIX:line="420" PREFIX:column="9">return <expr><call><name PREFIX:line="420" PREFIX:column="16">strcmp</name><argument_list PREFIX:line="420" PREFIX:column="22">(<argument><expr PREFIX:line="420" PREFIX:column="23">&amp;<name><name PREFIX:line="420" PREFIX:column="24">buffer</name><index PREFIX:line="420" PREFIX:column="30">[<expr><name PREFIX:line="420" PREFIX:column="31">len</name> - <name><name PREFIX:line="420" PREFIX:column="37">s2</name>.<name PREFIX:line="420" PREFIX:column="40">len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name PREFIX:line="420" PREFIX:column="46">s2</name>.<name PREFIX:line="420" PREFIX:column="49">buffer</name></name></expr></argument>)</argument_list></call> == 0</expr>;</return>
}</block></function>

<comment type="block" format="doxygen" PREFIX:line="423" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="424" PREFIX:column="1">/*  Character Access                         */</comment>
<comment type="block" format="doxygen" PREFIX:line="425" PREFIX:column="1">/*********************************************/</comment>

<function><type><name PREFIX:line="427" PREFIX:column="1">char</name></type> <name><name PREFIX:line="427" PREFIX:column="6">String</name>::<name PREFIX:line="427" PREFIX:column="14">charAt</name></name><parameter_list PREFIX:line="427" PREFIX:column="20">(<param><decl><type><name PREFIX:line="427" PREFIX:column="21">unknowntype</name> <name PREFIX:line="427" PREFIX:column="33">int</name></type> <name PREFIX:line="427" PREFIX:column="37">loc</name></decl></param>)</parameter_list> 
<block PREFIX:line="428" PREFIX:column="1">{
	<return PREFIX:line="429" PREFIX:column="9">return <expr><call><name PREFIX:line="429" PREFIX:column="16">operator[]</name><argument_list PREFIX:line="429" PREFIX:column="26">(<argument><expr><name PREFIX:line="429" PREFIX:column="27">loc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="432" PREFIX:column="1">void</name></type> <name><name PREFIX:line="432" PREFIX:column="6">String</name>::<name PREFIX:line="432" PREFIX:column="14">setCharAt</name></name><parameter_list PREFIX:line="432" PREFIX:column="23">(<param><decl><type><name PREFIX:line="432" PREFIX:column="24">unknowntype</name> <name PREFIX:line="432" PREFIX:column="36">int</name></type> <name PREFIX:line="432" PREFIX:column="40">loc</name></decl></param>, <param><decl><type><name PREFIX:line="432" PREFIX:column="45">char</name></type> <name PREFIX:line="432" PREFIX:column="50">c</name></decl></param>)</parameter_list> 
<block PREFIX:line="433" PREFIX:column="1">{
	<if PREFIX:line="434" PREFIX:column="9">if <condition PREFIX:line="434" PREFIX:column="12">(<expr><name PREFIX:line="434" PREFIX:column="13">loc</name> &lt; <name PREFIX:line="434" PREFIX:column="19">len</name></expr>)</condition><then PREFIX:line="434" PREFIX:column="23"> <expr_stmt><expr><name><name PREFIX:line="434" PREFIX:column="24">buffer</name><index PREFIX:line="434" PREFIX:column="30">[<expr><name PREFIX:line="434" PREFIX:column="31">loc</name></expr>]</index></name> = <name PREFIX:line="434" PREFIX:column="38">c</name></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name PREFIX:line="437" PREFIX:column="1">char</name> &amp;</type> <name><name PREFIX:line="437" PREFIX:column="8">String</name>::<name PREFIX:line="437" PREFIX:column="16">operator[]</name></name><parameter_list PREFIX:line="437" PREFIX:column="26">(<param><decl><type><name PREFIX:line="437" PREFIX:column="27">unknowntype</name> <name PREFIX:line="437" PREFIX:column="39">int</name></type> <name PREFIX:line="437" PREFIX:column="43">index</name></decl></param>)</parameter_list>
<block PREFIX:line="438" PREFIX:column="1">{
	<decl_stmt><decl><type><specifier PREFIX:line="439" PREFIX:column="9">static</specifier> <name PREFIX:line="439" PREFIX:column="16">char</name></type> <name PREFIX:line="439" PREFIX:column="21">dummy_writable_char</name></decl>;</decl_stmt>
	<if PREFIX:line="440" PREFIX:column="9">if <condition PREFIX:line="440" PREFIX:column="12">(<expr><name PREFIX:line="440" PREFIX:column="13">index</name> &gt;= <name PREFIX:line="440" PREFIX:column="22">len</name> || !<name PREFIX:line="440" PREFIX:column="30">buffer</name></expr>)</condition><then PREFIX:line="440" PREFIX:column="37"> <block PREFIX:line="440" PREFIX:column="38">{
		<expr_stmt><expr><name PREFIX:line="441" PREFIX:column="17">dummy_writable_char</name> = 0</expr>;</expr_stmt>
		<return PREFIX:line="442" PREFIX:column="17">return <expr><name PREFIX:line="442" PREFIX:column="24">dummy_writable_char</name></expr>;</return>
	}</block></then></if>
	<return PREFIX:line="444" PREFIX:column="9">return <expr><name><name PREFIX:line="444" PREFIX:column="16">buffer</name><index PREFIX:line="444" PREFIX:column="22">[<expr><name PREFIX:line="444" PREFIX:column="23">index</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="447" PREFIX:column="1">char</name></type> <name><name PREFIX:line="447" PREFIX:column="6">String</name>::<name PREFIX:line="447" PREFIX:column="14">operator[]</name></name><parameter_list PREFIX:line="447" PREFIX:column="24">( <param><decl><type><name PREFIX:line="447" PREFIX:column="26">unknowntype</name> <name PREFIX:line="447" PREFIX:column="38">int</name></type> <name PREFIX:line="447" PREFIX:column="42">index</name></decl></param> )</parameter_list> 
<block PREFIX:line="448" PREFIX:column="1">{
	<if PREFIX:line="449" PREFIX:column="9">if <condition PREFIX:line="449" PREFIX:column="12">(<expr><name PREFIX:line="449" PREFIX:column="13">index</name> &gt;= <name PREFIX:line="449" PREFIX:column="22">len</name> || !<name PREFIX:line="449" PREFIX:column="30">buffer</name></expr>)</condition><then PREFIX:line="449" PREFIX:column="37"> <return PREFIX:line="449" PREFIX:column="38">return <expr PREFIX:line="449" PREFIX:column="45">0</expr>;</return></then></if>
	<return PREFIX:line="450" PREFIX:column="9">return <expr><name><name PREFIX:line="450" PREFIX:column="16">buffer</name><index PREFIX:line="450" PREFIX:column="22">[<expr><name PREFIX:line="450" PREFIX:column="23">index</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="453" PREFIX:column="1">void</name></type> <name><name PREFIX:line="453" PREFIX:column="6">String</name>::<name PREFIX:line="453" PREFIX:column="14">getBytes</name></name><parameter_list PREFIX:line="453" PREFIX:column="22">(<param><decl><type><name PREFIX:line="453" PREFIX:column="23">unknowntype</name> <name PREFIX:line="453" PREFIX:column="35">char</name> *</type><name PREFIX:line="453" PREFIX:column="41">buf</name></decl></param>, <param><decl><type><name PREFIX:line="453" PREFIX:column="46">unknowntype</name> <name PREFIX:line="453" PREFIX:column="58">int</name></type> <name PREFIX:line="453" PREFIX:column="62">bufsize</name></decl></param>, <param><decl><type><name PREFIX:line="453" PREFIX:column="71">unknowntype</name> <name PREFIX:line="453" PREFIX:column="83">int</name></type> <name PREFIX:line="453" PREFIX:column="87">index</name></decl></param>)</parameter_list> 
<block PREFIX:line="454" PREFIX:column="1">{
	<if PREFIX:line="455" PREFIX:column="9">if <condition PREFIX:line="455" PREFIX:column="12">(<expr PREFIX:line="455" PREFIX:column="13">!<name PREFIX:line="455" PREFIX:column="14">bufsize</name> || !<name PREFIX:line="455" PREFIX:column="26">buf</name></expr>)</condition><then PREFIX:line="455" PREFIX:column="30"> <return PREFIX:line="455" PREFIX:column="31">return;</return></then></if>
	<if PREFIX:line="456" PREFIX:column="9">if <condition PREFIX:line="456" PREFIX:column="12">(<expr><name PREFIX:line="456" PREFIX:column="13">index</name> &gt;= <name PREFIX:line="456" PREFIX:column="22">len</name></expr>)</condition><then PREFIX:line="456" PREFIX:column="26"> <block PREFIX:line="456" PREFIX:column="27">{
		<expr_stmt><expr><name><name PREFIX:line="457" PREFIX:column="17">buf</name><index PREFIX:line="457" PREFIX:column="20">[<expr PREFIX:line="457" PREFIX:column="21">0</expr>]</index></name> = 0</expr>;</expr_stmt>
		<return PREFIX:line="458" PREFIX:column="17">return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name PREFIX:line="460" PREFIX:column="9">unknowntype</name> <name PREFIX:line="460" PREFIX:column="21">int</name></type> <name PREFIX:line="460" PREFIX:column="25">n</name> <init PREFIX:line="460" PREFIX:column="27">= <expr><name PREFIX:line="460" PREFIX:column="29">bufsize</name> - 1</expr></init></decl>;</decl_stmt>
	<if PREFIX:line="461" PREFIX:column="9">if <condition PREFIX:line="461" PREFIX:column="12">(<expr><name PREFIX:line="461" PREFIX:column="13">n</name> &gt; <name PREFIX:line="461" PREFIX:column="17">len</name> - <name PREFIX:line="461" PREFIX:column="23">index</name></expr>)</condition><then PREFIX:line="461" PREFIX:column="29"> <expr_stmt><expr><name PREFIX:line="461" PREFIX:column="30">n</name> = <name PREFIX:line="461" PREFIX:column="34">len</name> - <name PREFIX:line="461" PREFIX:column="40">index</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name PREFIX:line="462" PREFIX:column="9">strncpy</name><argument_list PREFIX:line="462" PREFIX:column="16">(<argument><expr PREFIX:line="462" PREFIX:column="17">(<name PREFIX:line="462" PREFIX:column="18">char</name> *)<name PREFIX:line="462" PREFIX:column="25">buf</name></expr></argument>, <argument><expr><name PREFIX:line="462" PREFIX:column="30">buffer</name> + <name PREFIX:line="462" PREFIX:column="39">index</name></expr></argument>, <argument><expr><name PREFIX:line="462" PREFIX:column="46">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name PREFIX:line="463" PREFIX:column="9">buf</name><index PREFIX:line="463" PREFIX:column="12">[<expr><name PREFIX:line="463" PREFIX:column="13">n</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" PREFIX:line="466" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="467" PREFIX:column="1">/*  Search                                   */</comment>
<comment type="block" format="doxygen" PREFIX:line="468" PREFIX:column="1">/*********************************************/</comment>

<function><type><name PREFIX:line="470" PREFIX:column="1">int</name></type> <name><name PREFIX:line="470" PREFIX:column="5">String</name>::<name PREFIX:line="470" PREFIX:column="13">indexOf</name></name><parameter_list PREFIX:line="470" PREFIX:column="20">(<param><decl><type><name PREFIX:line="470" PREFIX:column="21">char</name></type> <name PREFIX:line="470" PREFIX:column="26">c</name></decl></param>)</parameter_list> 
<block PREFIX:line="471" PREFIX:column="1">{
	<return PREFIX:line="472" PREFIX:column="9">return <expr><call><name PREFIX:line="472" PREFIX:column="16">indexOf</name><argument_list PREFIX:line="472" PREFIX:column="23">(<argument><expr><name PREFIX:line="472" PREFIX:column="24">c</name></expr></argument>, <argument><expr PREFIX:line="472" PREFIX:column="27">0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="475" PREFIX:column="1">int</name></type> <name><name PREFIX:line="475" PREFIX:column="5">String</name>::<name PREFIX:line="475" PREFIX:column="13">indexOf</name></name><parameter_list PREFIX:line="475" PREFIX:column="20">( <param><decl><type><name PREFIX:line="475" PREFIX:column="22">char</name></type> <name PREFIX:line="475" PREFIX:column="27">ch</name></decl></param>, <param><decl><type><name PREFIX:line="475" PREFIX:column="31">unknowntype</name> <name PREFIX:line="475" PREFIX:column="43">int</name></type> <name PREFIX:line="475" PREFIX:column="47">fromIndex</name></decl></param> )</parameter_list> 
<block PREFIX:line="476" PREFIX:column="1">{
	<if PREFIX:line="477" PREFIX:column="9">if <condition PREFIX:line="477" PREFIX:column="12">(<expr><name PREFIX:line="477" PREFIX:column="13">fromIndex</name> &gt;= <name PREFIX:line="477" PREFIX:column="26">len</name></expr>)</condition><then PREFIX:line="477" PREFIX:column="30"> <return PREFIX:line="477" PREFIX:column="31">return <expr PREFIX:line="477" PREFIX:column="38">-1</expr>;</return></then></if>
	 <decl_stmt><decl><type><name PREFIX:line="478" PREFIX:column="10">char</name>*</type> <name PREFIX:line="478" PREFIX:column="16">temp</name> <init PREFIX:line="478" PREFIX:column="21">= <expr><call><name PREFIX:line="478" PREFIX:column="23">strchr</name><argument_list PREFIX:line="478" PREFIX:column="29">(<argument><expr><name PREFIX:line="478" PREFIX:column="30">buffer</name> + <name PREFIX:line="478" PREFIX:column="39">fromIndex</name></expr></argument>, <argument><expr><name PREFIX:line="478" PREFIX:column="50">ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="479" PREFIX:column="9">if <condition PREFIX:line="479" PREFIX:column="12">(<expr><name PREFIX:line="479" PREFIX:column="13">temp</name> == <name PREFIX:line="479" PREFIX:column="21">NULL</name></expr>)</condition><then PREFIX:line="479" PREFIX:column="26"> <return PREFIX:line="479" PREFIX:column="27">return <expr PREFIX:line="479" PREFIX:column="34">-1</expr>;</return></then></if>
	<return PREFIX:line="480" PREFIX:column="9">return <expr><name PREFIX:line="480" PREFIX:column="16">temp</name> - <name PREFIX:line="480" PREFIX:column="23">buffer</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="483" PREFIX:column="1">int</name></type> <name><name PREFIX:line="483" PREFIX:column="5">String</name>::<name PREFIX:line="483" PREFIX:column="13">indexOf</name></name><parameter_list PREFIX:line="483" PREFIX:column="20">( <param><decl><type><name PREFIX:line="483" PREFIX:column="22">String</name> &amp;</type><name PREFIX:line="483" PREFIX:column="30">s2</name></decl></param>)</parameter_list> 
<block PREFIX:line="484" PREFIX:column="1">{
	<return PREFIX:line="485" PREFIX:column="9">return <expr><call><name PREFIX:line="485" PREFIX:column="16">indexOf</name><argument_list PREFIX:line="485" PREFIX:column="23">(<argument><expr><name PREFIX:line="485" PREFIX:column="24">s2</name></expr></argument>, <argument><expr PREFIX:line="485" PREFIX:column="28">0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="488" PREFIX:column="1">int</name></type> <name><name PREFIX:line="488" PREFIX:column="5">String</name>::<name PREFIX:line="488" PREFIX:column="13">indexOf</name></name><parameter_list PREFIX:line="488" PREFIX:column="20">( <param><decl><type><name PREFIX:line="488" PREFIX:column="22">String</name> &amp;</type><name PREFIX:line="488" PREFIX:column="30">s2</name></decl></param>, <param><decl><type><name PREFIX:line="488" PREFIX:column="34">unknowntype</name> <name PREFIX:line="488" PREFIX:column="46">int</name></type> <name PREFIX:line="488" PREFIX:column="50">fromIndex</name></decl></param>)</parameter_list> 
<block PREFIX:line="489" PREFIX:column="1">{
	<if PREFIX:line="490" PREFIX:column="9">if <condition PREFIX:line="490" PREFIX:column="12">(<expr><name PREFIX:line="490" PREFIX:column="13">fromIndex</name> &gt;= <name PREFIX:line="490" PREFIX:column="26">len</name></expr>)</condition><then PREFIX:line="490" PREFIX:column="30"> <return PREFIX:line="490" PREFIX:column="31">return <expr PREFIX:line="490" PREFIX:column="38">-1</expr>;</return></then></if>
	 <decl_stmt><decl><type><name PREFIX:line="491" PREFIX:column="10">char</name> *</type><name PREFIX:line="491" PREFIX:column="16">found</name> <init PREFIX:line="491" PREFIX:column="22">= <expr><call><name PREFIX:line="491" PREFIX:column="24">strstr</name><argument_list PREFIX:line="491" PREFIX:column="30">(<argument><expr><name PREFIX:line="491" PREFIX:column="31">buffer</name> + <name PREFIX:line="491" PREFIX:column="40">fromIndex</name></expr></argument>, <argument><expr><name><name PREFIX:line="491" PREFIX:column="51">s2</name>.<name PREFIX:line="491" PREFIX:column="54">buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if PREFIX:line="492" PREFIX:column="9">if <condition PREFIX:line="492" PREFIX:column="12">(<expr><name PREFIX:line="492" PREFIX:column="13">found</name> == <name PREFIX:line="492" PREFIX:column="22">NULL</name></expr>)</condition><then PREFIX:line="492" PREFIX:column="27"> <return PREFIX:line="492" PREFIX:column="28">return <expr PREFIX:line="492" PREFIX:column="35">-1</expr>;</return></then></if>
	<return PREFIX:line="493" PREFIX:column="9">return <expr><name PREFIX:line="493" PREFIX:column="16">found</name> - <name PREFIX:line="493" PREFIX:column="24">buffer</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="496" PREFIX:column="1">int</name></type> <name><name PREFIX:line="496" PREFIX:column="5">String</name>::<name PREFIX:line="496" PREFIX:column="13">lastIndexOf</name></name><parameter_list PREFIX:line="496" PREFIX:column="24">( <param><decl><type><name PREFIX:line="496" PREFIX:column="26">char</name></type> <name PREFIX:line="496" PREFIX:column="31">theChar</name></decl></param> )</parameter_list> 
<block PREFIX:line="497" PREFIX:column="1">{
	<return PREFIX:line="498" PREFIX:column="9">return <expr><call><name PREFIX:line="498" PREFIX:column="16">lastIndexOf</name><argument_list PREFIX:line="498" PREFIX:column="27">(<argument><expr><name PREFIX:line="498" PREFIX:column="28">theChar</name></expr></argument>, <argument><expr><name PREFIX:line="498" PREFIX:column="37">len</name> - 1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="501" PREFIX:column="1">int</name></type> <name><name PREFIX:line="501" PREFIX:column="5">String</name>::<name PREFIX:line="501" PREFIX:column="13">lastIndexOf</name></name><parameter_list PREFIX:line="501" PREFIX:column="24">(<param><decl><type><name PREFIX:line="501" PREFIX:column="25">char</name></type> <name PREFIX:line="501" PREFIX:column="30">ch</name></decl></param>, <param><decl><type><name PREFIX:line="501" PREFIX:column="34">unknowntype</name> <name PREFIX:line="501" PREFIX:column="46">int</name></type> <name PREFIX:line="501" PREFIX:column="50">fromIndex</name></decl></param>)</parameter_list> 
<block PREFIX:line="502" PREFIX:column="1">{
	<if PREFIX:line="503" PREFIX:column="9">if <condition PREFIX:line="503" PREFIX:column="12">(<expr><name PREFIX:line="503" PREFIX:column="13">fromIndex</name> &gt;= <name PREFIX:line="503" PREFIX:column="26">len</name></expr>)</condition><then PREFIX:line="503" PREFIX:column="30"> <return PREFIX:line="503" PREFIX:column="31">return <expr PREFIX:line="503" PREFIX:column="38">-1</expr>;</return></then></if>
	<decl_stmt><decl><type><name PREFIX:line="504" PREFIX:column="9">char</name></type> <name PREFIX:line="504" PREFIX:column="14">tempchar</name> <init PREFIX:line="504" PREFIX:column="23">= <expr><name><name PREFIX:line="504" PREFIX:column="25">buffer</name><index PREFIX:line="504" PREFIX:column="31">[<expr><name PREFIX:line="504" PREFIX:column="32">fromIndex</name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name PREFIX:line="505" PREFIX:column="9">buffer</name><index PREFIX:line="505" PREFIX:column="15">[<expr><name PREFIX:line="505" PREFIX:column="16">fromIndex</name> + 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
	<decl_stmt><decl><type><name PREFIX:line="506" PREFIX:column="9">char</name>*</type> <name PREFIX:line="506" PREFIX:column="15">temp</name> <init PREFIX:line="506" PREFIX:column="20">= <expr><call><name PREFIX:line="506" PREFIX:column="22">strrchr</name><argument_list PREFIX:line="506" PREFIX:column="29">( <argument><expr><name PREFIX:line="506" PREFIX:column="31">buffer</name></expr></argument>, <argument><expr><name PREFIX:line="506" PREFIX:column="39">ch</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name PREFIX:line="507" PREFIX:column="9">buffer</name><index PREFIX:line="507" PREFIX:column="15">[<expr><name PREFIX:line="507" PREFIX:column="16">fromIndex</name> + 1</expr>]</index></name> = <name PREFIX:line="507" PREFIX:column="33">tempchar</name></expr>;</expr_stmt>
	<if PREFIX:line="508" PREFIX:column="9">if <condition PREFIX:line="508" PREFIX:column="12">(<expr><name PREFIX:line="508" PREFIX:column="13">temp</name> == <name PREFIX:line="508" PREFIX:column="21">NULL</name></expr>)</condition><then PREFIX:line="508" PREFIX:column="26"> <return PREFIX:line="508" PREFIX:column="27">return <expr PREFIX:line="508" PREFIX:column="34">-1</expr>;</return></then></if>
	<return PREFIX:line="509" PREFIX:column="9">return <expr><name PREFIX:line="509" PREFIX:column="16">temp</name> - <name PREFIX:line="509" PREFIX:column="23">buffer</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="512" PREFIX:column="1">int</name></type> <name><name PREFIX:line="512" PREFIX:column="5">String</name>::<name PREFIX:line="512" PREFIX:column="13">lastIndexOf</name></name><parameter_list PREFIX:line="512" PREFIX:column="24">( <param><decl><type><name PREFIX:line="512" PREFIX:column="26">String</name> &amp;</type><name PREFIX:line="512" PREFIX:column="34">s2</name></decl></param>)</parameter_list> 
<block PREFIX:line="513" PREFIX:column="1">{
	<return PREFIX:line="514" PREFIX:column="9">return <expr><call><name PREFIX:line="514" PREFIX:column="16">lastIndexOf</name><argument_list PREFIX:line="514" PREFIX:column="27">(<argument><expr><name PREFIX:line="514" PREFIX:column="28">s2</name></expr></argument>, <argument><expr><name PREFIX:line="514" PREFIX:column="32">len</name> - <name><name PREFIX:line="514" PREFIX:column="38">s2</name>.<name PREFIX:line="514" PREFIX:column="41">len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="517" PREFIX:column="1">int</name></type> <name><name PREFIX:line="517" PREFIX:column="5">String</name>::<name PREFIX:line="517" PREFIX:column="13">lastIndexOf</name></name><parameter_list PREFIX:line="517" PREFIX:column="24">( <param><decl><type><name PREFIX:line="517" PREFIX:column="26">String</name> &amp;</type><name PREFIX:line="517" PREFIX:column="34">s2</name></decl></param>, <param><decl><type><name PREFIX:line="517" PREFIX:column="38">unknowntype</name> <name PREFIX:line="517" PREFIX:column="50">int</name></type> <name PREFIX:line="517" PREFIX:column="54">fromIndex</name></decl></param>)</parameter_list> 
<block PREFIX:line="518" PREFIX:column="1">{
  	<if PREFIX:line="519" PREFIX:column="9">if <condition PREFIX:line="519" PREFIX:column="12">(<expr><name><name PREFIX:line="519" PREFIX:column="13">s2</name>.<name PREFIX:line="519" PREFIX:column="16">len</name></name> == 0 || <name PREFIX:line="519" PREFIX:column="28">len</name> == 0 || <name><name PREFIX:line="519" PREFIX:column="40">s2</name>.<name PREFIX:line="519" PREFIX:column="43">len</name></name> &gt; <name PREFIX:line="519" PREFIX:column="49">len</name></expr>)</condition><then PREFIX:line="519" PREFIX:column="53"> <return PREFIX:line="519" PREFIX:column="54">return <expr PREFIX:line="519" PREFIX:column="61">-1</expr>;</return></then></if>
	<if PREFIX:line="520" PREFIX:column="9">if <condition PREFIX:line="520" PREFIX:column="12">(<expr><name PREFIX:line="520" PREFIX:column="13">fromIndex</name> &gt;= <name PREFIX:line="520" PREFIX:column="26">len</name></expr>)</condition><then PREFIX:line="520" PREFIX:column="30"> <expr_stmt><expr><name PREFIX:line="520" PREFIX:column="31">fromIndex</name> = <name PREFIX:line="520" PREFIX:column="43">len</name> - 1</expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name PREFIX:line="521" PREFIX:column="9">int</name></type> <name PREFIX:line="521" PREFIX:column="13">found</name> <init PREFIX:line="521" PREFIX:column="19">= <expr PREFIX:line="521" PREFIX:column="21">-1</expr></init></decl>;</decl_stmt>
	<for PREFIX:line="522" PREFIX:column="9">for (<init><decl><type><name PREFIX:line="522" PREFIX:column="14">char</name> *</type><name PREFIX:line="522" PREFIX:column="20">p</name> <init PREFIX:line="522" PREFIX:column="22">= <expr><name PREFIX:line="522" PREFIX:column="24">buffer</name></expr></init></decl>;</init> <condition><expr><name PREFIX:line="522" PREFIX:column="32">p</name> &lt;= <name PREFIX:line="522" PREFIX:column="37">buffer</name> + <name PREFIX:line="522" PREFIX:column="46">fromIndex</name></expr>;</condition> <incr><expr><name PREFIX:line="522" PREFIX:column="57">p</name>++</expr></incr>) <block PREFIX:line="522" PREFIX:column="62">{
		<expr_stmt><expr><name PREFIX:line="523" PREFIX:column="17">p</name> = <call><name PREFIX:line="523" PREFIX:column="21">strstr</name><argument_list PREFIX:line="523" PREFIX:column="27">(<argument><expr><name PREFIX:line="523" PREFIX:column="28">p</name></expr></argument>, <argument><expr><name><name PREFIX:line="523" PREFIX:column="31">s2</name>.<name PREFIX:line="523" PREFIX:column="34">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if PREFIX:line="524" PREFIX:column="17">if <condition PREFIX:line="524" PREFIX:column="20">(<expr PREFIX:line="524" PREFIX:column="21">!<name PREFIX:line="524" PREFIX:column="22">p</name></expr>)</condition><then PREFIX:line="524" PREFIX:column="24"> <break PREFIX:line="524" PREFIX:column="25">break;</break></then></if>
		<if PREFIX:line="525" PREFIX:column="17">if <condition PREFIX:line="525" PREFIX:column="20">(<expr><call PREFIX:line="525" PREFIX:column="21">(<name PREFIX:line="525" PREFIX:column="22">unknowntype</name> <name PREFIX:line="525" PREFIX:column="34">int</name>)<argument_list PREFIX:line="525" PREFIX:column="38">(<argument><expr><name PREFIX:line="525" PREFIX:column="39">p</name> - <name PREFIX:line="525" PREFIX:column="43">buffer</name></expr></argument>)</argument_list></call> &lt;= <name PREFIX:line="525" PREFIX:column="54">fromIndex</name></expr>)</condition><then PREFIX:line="525" PREFIX:column="64"> <expr_stmt><expr><name PREFIX:line="525" PREFIX:column="65">found</name> = <name PREFIX:line="525" PREFIX:column="73">p</name> - <name PREFIX:line="525" PREFIX:column="77">buffer</name></expr>;</expr_stmt></then></if>
	}</block></for>
	<return PREFIX:line="527" PREFIX:column="9">return <expr><name PREFIX:line="527" PREFIX:column="16">found</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="530" PREFIX:column="1">String</name></type> <name><name PREFIX:line="530" PREFIX:column="8">String</name>::<name PREFIX:line="530" PREFIX:column="16">substring</name></name><parameter_list PREFIX:line="530" PREFIX:column="25">( <param><decl><type><name PREFIX:line="530" PREFIX:column="27">unknowntype</name> <name PREFIX:line="530" PREFIX:column="39">int</name></type> <name PREFIX:line="530" PREFIX:column="43">left</name></decl></param> )</parameter_list> 
<block PREFIX:line="531" PREFIX:column="1">{
	<return PREFIX:line="532" PREFIX:column="9">return <expr><call><name PREFIX:line="532" PREFIX:column="16">substring</name><argument_list PREFIX:line="532" PREFIX:column="25">(<argument><expr><name PREFIX:line="532" PREFIX:column="26">left</name></expr></argument>, <argument><expr><name PREFIX:line="532" PREFIX:column="32">len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="535" PREFIX:column="1">String</name></type> <name><name PREFIX:line="535" PREFIX:column="8">String</name>::<name PREFIX:line="535" PREFIX:column="16">substring</name></name><parameter_list PREFIX:line="535" PREFIX:column="25">(<param><decl><type><name PREFIX:line="535" PREFIX:column="26">unknowntype</name> <name PREFIX:line="535" PREFIX:column="38">int</name></type> <name PREFIX:line="535" PREFIX:column="42">left</name></decl></param>, <param><decl><type><name PREFIX:line="535" PREFIX:column="48">unknowntype</name> <name PREFIX:line="535" PREFIX:column="60">int</name></type> <name PREFIX:line="535" PREFIX:column="64">right</name></decl></param>)</parameter_list> 
<block PREFIX:line="536" PREFIX:column="1">{
	<if PREFIX:line="537" PREFIX:column="9">if <condition PREFIX:line="537" PREFIX:column="12">(<expr><name PREFIX:line="537" PREFIX:column="13">left</name> &gt; <name PREFIX:line="537" PREFIX:column="20">right</name></expr>)</condition><then PREFIX:line="537" PREFIX:column="26"> <block PREFIX:line="537" PREFIX:column="27">{
		<decl_stmt><decl><type><name PREFIX:line="538" PREFIX:column="17">unknowntype</name> <name PREFIX:line="538" PREFIX:column="29">int</name></type> <name PREFIX:line="538" PREFIX:column="33">temp</name> <init PREFIX:line="538" PREFIX:column="38">= <expr><name PREFIX:line="538" PREFIX:column="40">right</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name PREFIX:line="539" PREFIX:column="17">right</name> = <name PREFIX:line="539" PREFIX:column="25">left</name></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="540" PREFIX:column="17">left</name> = <name PREFIX:line="540" PREFIX:column="24">temp</name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name PREFIX:line="542" PREFIX:column="9">String</name></type> <name PREFIX:line="542" PREFIX:column="16">out</name></decl>;</decl_stmt>
	<if PREFIX:line="543" PREFIX:column="9">if <condition PREFIX:line="543" PREFIX:column="12">(<expr><name PREFIX:line="543" PREFIX:column="13">left</name> &gt; <name PREFIX:line="543" PREFIX:column="20">len</name></expr>)</condition><then PREFIX:line="543" PREFIX:column="24"> <return PREFIX:line="543" PREFIX:column="25">return <expr><name PREFIX:line="543" PREFIX:column="32">out</name></expr>;</return></then></if>
	<if PREFIX:line="544" PREFIX:column="9">if <condition PREFIX:line="544" PREFIX:column="12">(<expr><name PREFIX:line="544" PREFIX:column="13">right</name> &gt; <name PREFIX:line="544" PREFIX:column="21">len</name></expr>)</condition><then PREFIX:line="544" PREFIX:column="25"> <expr_stmt><expr><name PREFIX:line="544" PREFIX:column="26">right</name> = <name PREFIX:line="544" PREFIX:column="34">len</name></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name PREFIX:line="545" PREFIX:column="9">char</name></type> <name PREFIX:line="545" PREFIX:column="14">temp</name> <init PREFIX:line="545" PREFIX:column="19">= <expr><name><name PREFIX:line="545" PREFIX:column="21">buffer</name><index PREFIX:line="545" PREFIX:column="27">[<expr><name PREFIX:line="545" PREFIX:column="28">right</name></expr>]</index></name></expr></init></decl>;</decl_stmt>  <comment type="line" PREFIX:line="545" PREFIX:column="37">// save the replaced character</comment>
	<expr_stmt><expr><name><name PREFIX:line="546" PREFIX:column="9">buffer</name><index PREFIX:line="546" PREFIX:column="15">[<expr><name PREFIX:line="546" PREFIX:column="16">right</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>	
	<expr_stmt><expr><name PREFIX:line="547" PREFIX:column="9">out</name> = <name PREFIX:line="547" PREFIX:column="15">buffer</name> + <name PREFIX:line="547" PREFIX:column="24">left</name></expr>;</expr_stmt>  <comment type="line" PREFIX:line="547" PREFIX:column="31">// pointer arithmetic</comment>
	<expr_stmt><expr><name><name PREFIX:line="548" PREFIX:column="9">buffer</name><index PREFIX:line="548" PREFIX:column="15">[<expr><name PREFIX:line="548" PREFIX:column="16">right</name></expr>]</index></name> = <name PREFIX:line="548" PREFIX:column="25">temp</name></expr>;</expr_stmt>  <comment type="line" PREFIX:line="548" PREFIX:column="32">//restore character</comment>
	<return PREFIX:line="549" PREFIX:column="9">return <expr><name PREFIX:line="549" PREFIX:column="16">out</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" PREFIX:line="552" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="553" PREFIX:column="1">/*  Modification                             */</comment>
<comment type="block" format="doxygen" PREFIX:line="554" PREFIX:column="1">/*********************************************/</comment>

<function><type><name PREFIX:line="556" PREFIX:column="1">void</name></type> <name><name PREFIX:line="556" PREFIX:column="6">String</name>::<name PREFIX:line="556" PREFIX:column="14">replace</name></name><parameter_list PREFIX:line="556" PREFIX:column="21">(<param><decl><type><name PREFIX:line="556" PREFIX:column="22">char</name></type> <name PREFIX:line="556" PREFIX:column="27">find</name></decl></param>, <param><decl><type><name PREFIX:line="556" PREFIX:column="33">char</name></type> <name PREFIX:line="556" PREFIX:column="38">replace</name></decl></param>)</parameter_list>
<block PREFIX:line="557" PREFIX:column="1">{
	<if PREFIX:line="558" PREFIX:column="9">if <condition PREFIX:line="558" PREFIX:column="12">(<expr PREFIX:line="558" PREFIX:column="13">!<name PREFIX:line="558" PREFIX:column="14">buffer</name></expr>)</condition><then PREFIX:line="558" PREFIX:column="21"> <return PREFIX:line="558" PREFIX:column="22">return;</return></then></if>
	<for PREFIX:line="559" PREFIX:column="9">for (<init><decl><type><name PREFIX:line="559" PREFIX:column="14">char</name> *</type><name PREFIX:line="559" PREFIX:column="20">p</name> <init PREFIX:line="559" PREFIX:column="22">= <expr><name PREFIX:line="559" PREFIX:column="24">buffer</name></expr></init></decl>;</init> <condition><expr PREFIX:line="559" PREFIX:column="32">*<name PREFIX:line="559" PREFIX:column="33">p</name></expr>;</condition> <incr><expr><name PREFIX:line="559" PREFIX:column="36">p</name>++</expr></incr>) <block PREFIX:line="559" PREFIX:column="41">{
		<if PREFIX:line="560" PREFIX:column="17">if <condition PREFIX:line="560" PREFIX:column="20">(<expr PREFIX:line="560" PREFIX:column="21">*<name PREFIX:line="560" PREFIX:column="22">p</name> == <name PREFIX:line="560" PREFIX:column="27">find</name></expr>)</condition><then PREFIX:line="560" PREFIX:column="32"> <expr_stmt><expr PREFIX:line="560" PREFIX:column="33">*<name PREFIX:line="560" PREFIX:column="34">p</name> = <name PREFIX:line="560" PREFIX:column="38">replace</name></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<function><type><name PREFIX:line="564" PREFIX:column="1">void</name></type> <name><name PREFIX:line="564" PREFIX:column="6">String</name>::<name PREFIX:line="564" PREFIX:column="14">replace</name></name><parameter_list PREFIX:line="564" PREFIX:column="21">( <param><decl><type><name PREFIX:line="564" PREFIX:column="23">String</name>&amp;</type> <name PREFIX:line="564" PREFIX:column="31">find</name></decl></param>,  <param><decl><type><name PREFIX:line="564" PREFIX:column="38">String</name>&amp;</type> <name PREFIX:line="564" PREFIX:column="46">replace</name></decl></param>)</parameter_list>
<block PREFIX:line="565" PREFIX:column="1">{
	<if PREFIX:line="566" PREFIX:column="9">if <condition PREFIX:line="566" PREFIX:column="12">(<expr><name PREFIX:line="566" PREFIX:column="13">len</name> == 0 || <name><name PREFIX:line="566" PREFIX:column="25">find</name>.<name PREFIX:line="566" PREFIX:column="30">len</name></name> == 0</expr>)</condition><then PREFIX:line="566" PREFIX:column="39"> <return PREFIX:line="566" PREFIX:column="40">return;</return></then></if>
	<decl_stmt><decl><type><name PREFIX:line="567" PREFIX:column="9">int</name></type> <name PREFIX:line="567" PREFIX:column="13">diff</name> <init PREFIX:line="567" PREFIX:column="18">= <expr><name><name PREFIX:line="567" PREFIX:column="20">replace</name>.<name PREFIX:line="567" PREFIX:column="28">len</name></name> - <name><name PREFIX:line="567" PREFIX:column="34">find</name>.<name PREFIX:line="567" PREFIX:column="39">len</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="568" PREFIX:column="9">char</name> *</type><name PREFIX:line="568" PREFIX:column="15">readFrom</name> <init PREFIX:line="568" PREFIX:column="24">= <expr><name PREFIX:line="568" PREFIX:column="26">buffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="569" PREFIX:column="9">char</name> *</type><name PREFIX:line="569" PREFIX:column="15">foundAt</name></decl>;</decl_stmt>
	<if PREFIX:line="570" PREFIX:column="9">if <condition PREFIX:line="570" PREFIX:column="12">(<expr><name PREFIX:line="570" PREFIX:column="13">diff</name> == 0</expr>)</condition><then PREFIX:line="570" PREFIX:column="23"> <block PREFIX:line="570" PREFIX:column="24">{
		<while PREFIX:line="571" PREFIX:column="17">while <condition PREFIX:line="571" PREFIX:column="23">(<expr PREFIX:line="571" PREFIX:column="24">(<name PREFIX:line="571" PREFIX:column="25">foundAt</name> = <call><name PREFIX:line="571" PREFIX:column="35">strstr</name><argument_list PREFIX:line="571" PREFIX:column="41">(<argument><expr><name PREFIX:line="571" PREFIX:column="42">readFrom</name></expr></argument>, <argument><expr><name><name PREFIX:line="571" PREFIX:column="52">find</name>.<name PREFIX:line="571" PREFIX:column="57">buffer</name></name></expr></argument>)</argument_list></call>) != <name PREFIX:line="571" PREFIX:column="69">NULL</name></expr>)</condition> <block PREFIX:line="571" PREFIX:column="75">{
			<expr_stmt><expr><call><name PREFIX:line="572" PREFIX:column="25">memcpy</name><argument_list PREFIX:line="572" PREFIX:column="31">(<argument><expr><name PREFIX:line="572" PREFIX:column="32">foundAt</name></expr></argument>, <argument><expr><name><name PREFIX:line="572" PREFIX:column="41">replace</name>.<name PREFIX:line="572" PREFIX:column="49">buffer</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="572" PREFIX:column="57">replace</name>.<name PREFIX:line="572" PREFIX:column="65">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="573" PREFIX:column="25">readFrom</name> = <name PREFIX:line="573" PREFIX:column="36">foundAt</name> + <name><name PREFIX:line="573" PREFIX:column="46">replace</name>.<name PREFIX:line="573" PREFIX:column="54">len</name></name></expr>;</expr_stmt>
		}</block></while>
	}</block></then> <else PREFIX:line="575" PREFIX:column="11">else <if PREFIX:line="575" PREFIX:column="16">if <condition PREFIX:line="575" PREFIX:column="19">(<expr><name PREFIX:line="575" PREFIX:column="20">diff</name> &lt; 0</expr>)</condition><then PREFIX:line="575" PREFIX:column="29"> <block PREFIX:line="575" PREFIX:column="30">{
		<decl_stmt><decl><type><name PREFIX:line="576" PREFIX:column="17">char</name> *</type><name PREFIX:line="576" PREFIX:column="23">writeTo</name> <init PREFIX:line="576" PREFIX:column="31">= <expr><name PREFIX:line="576" PREFIX:column="33">buffer</name></expr></init></decl>;</decl_stmt>
		<while PREFIX:line="577" PREFIX:column="17">while <condition PREFIX:line="577" PREFIX:column="23">(<expr PREFIX:line="577" PREFIX:column="24">(<name PREFIX:line="577" PREFIX:column="25">foundAt</name> = <call><name PREFIX:line="577" PREFIX:column="35">strstr</name><argument_list PREFIX:line="577" PREFIX:column="41">(<argument><expr><name PREFIX:line="577" PREFIX:column="42">readFrom</name></expr></argument>, <argument><expr><name><name PREFIX:line="577" PREFIX:column="52">find</name>.<name PREFIX:line="577" PREFIX:column="57">buffer</name></name></expr></argument>)</argument_list></call>) != <name PREFIX:line="577" PREFIX:column="69">NULL</name></expr>)</condition> <block PREFIX:line="577" PREFIX:column="75">{
			<decl_stmt><decl><type><name PREFIX:line="578" PREFIX:column="25">unknowntype</name> <name PREFIX:line="578" PREFIX:column="37">int</name></type> <name PREFIX:line="578" PREFIX:column="41">n</name> <init PREFIX:line="578" PREFIX:column="43">= <expr><name PREFIX:line="578" PREFIX:column="45">foundAt</name> - <name PREFIX:line="578" PREFIX:column="55">readFrom</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name PREFIX:line="579" PREFIX:column="25">memcpy</name><argument_list PREFIX:line="579" PREFIX:column="31">(<argument><expr><name PREFIX:line="579" PREFIX:column="32">writeTo</name></expr></argument>, <argument><expr><name PREFIX:line="579" PREFIX:column="41">readFrom</name></expr></argument>, <argument><expr><name PREFIX:line="579" PREFIX:column="51">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="580" PREFIX:column="25">writeTo</name> += <name PREFIX:line="580" PREFIX:column="36">n</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="581" PREFIX:column="25">memcpy</name><argument_list PREFIX:line="581" PREFIX:column="31">(<argument><expr><name PREFIX:line="581" PREFIX:column="32">writeTo</name></expr></argument>, <argument><expr><name><name PREFIX:line="581" PREFIX:column="41">replace</name>.<name PREFIX:line="581" PREFIX:column="49">buffer</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="581" PREFIX:column="57">replace</name>.<name PREFIX:line="581" PREFIX:column="65">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="582" PREFIX:column="25">writeTo</name> += <name><name PREFIX:line="582" PREFIX:column="36">replace</name>.<name PREFIX:line="582" PREFIX:column="44">len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="583" PREFIX:column="25">readFrom</name> = <name PREFIX:line="583" PREFIX:column="36">foundAt</name> + <name><name PREFIX:line="583" PREFIX:column="46">find</name>.<name PREFIX:line="583" PREFIX:column="51">len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="584" PREFIX:column="25">len</name> += <name PREFIX:line="584" PREFIX:column="32">diff</name></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name PREFIX:line="586" PREFIX:column="17">strcpy</name><argument_list PREFIX:line="586" PREFIX:column="23">(<argument><expr><name PREFIX:line="586" PREFIX:column="24">writeTo</name></expr></argument>, <argument><expr><name PREFIX:line="586" PREFIX:column="33">readFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else PREFIX:line="587" PREFIX:column="11">else <block PREFIX:line="587" PREFIX:column="16">{
		<decl_stmt><decl><type><name PREFIX:line="588" PREFIX:column="17">unknowntype</name> <name PREFIX:line="588" PREFIX:column="29">int</name></type> <name PREFIX:line="588" PREFIX:column="33">size</name> <init PREFIX:line="588" PREFIX:column="38">= <expr><name PREFIX:line="588" PREFIX:column="40">len</name></expr></init></decl>;</decl_stmt> <comment type="line" PREFIX:line="588" PREFIX:column="45">// compute size needed for result</comment>
		<while PREFIX:line="589" PREFIX:column="17">while <condition PREFIX:line="589" PREFIX:column="23">(<expr PREFIX:line="589" PREFIX:column="24">(<name PREFIX:line="589" PREFIX:column="25">foundAt</name> = <call><name PREFIX:line="589" PREFIX:column="35">strstr</name><argument_list PREFIX:line="589" PREFIX:column="41">(<argument><expr><name PREFIX:line="589" PREFIX:column="42">readFrom</name></expr></argument>, <argument><expr><name><name PREFIX:line="589" PREFIX:column="52">find</name>.<name PREFIX:line="589" PREFIX:column="57">buffer</name></name></expr></argument>)</argument_list></call>) != <name PREFIX:line="589" PREFIX:column="69">NULL</name></expr>)</condition> <block PREFIX:line="589" PREFIX:column="75">{
			<expr_stmt><expr><name PREFIX:line="590" PREFIX:column="25">readFrom</name> = <name PREFIX:line="590" PREFIX:column="36">foundAt</name> + <name><name PREFIX:line="590" PREFIX:column="46">find</name>.<name PREFIX:line="590" PREFIX:column="51">len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="591" PREFIX:column="25">size</name> += <name PREFIX:line="591" PREFIX:column="33">diff</name></expr>;</expr_stmt>
		}</block></while>
		<if PREFIX:line="593" PREFIX:column="17">if <condition PREFIX:line="593" PREFIX:column="20">(<expr><name PREFIX:line="593" PREFIX:column="21">size</name> == <name PREFIX:line="593" PREFIX:column="29">len</name></expr>)</condition><then PREFIX:line="593" PREFIX:column="33"> <return PREFIX:line="593" PREFIX:column="34">return;</return></then></if>
		<if PREFIX:line="594" PREFIX:column="17">if <condition PREFIX:line="594" PREFIX:column="20">(<expr><name PREFIX:line="594" PREFIX:column="21">size</name> &gt; <name PREFIX:line="594" PREFIX:column="28">capacity</name> &amp;&amp; !<call><name PREFIX:line="594" PREFIX:column="41">changeBuffer</name><argument_list PREFIX:line="594" PREFIX:column="53">(<argument><expr><name PREFIX:line="594" PREFIX:column="54">size</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="594" PREFIX:column="60"> <return PREFIX:line="594" PREFIX:column="61">return;</return></then></if> <comment type="line" PREFIX:line="594" PREFIX:column="69">// XXX: tell user!</comment>
		<decl_stmt><decl><type><name PREFIX:line="595" PREFIX:column="17">int</name></type> <name PREFIX:line="595" PREFIX:column="21">index</name> <init PREFIX:line="595" PREFIX:column="27">= <expr><name PREFIX:line="595" PREFIX:column="29">len</name> - 1</expr></init></decl>;</decl_stmt>
		<while PREFIX:line="596" PREFIX:column="17">while <condition PREFIX:line="596" PREFIX:column="23">(<expr><name PREFIX:line="596" PREFIX:column="24">index</name> &gt;= 0 &amp;&amp; (<name PREFIX:line="596" PREFIX:column="39">index</name> = <call><name PREFIX:line="596" PREFIX:column="47">lastIndexOf</name><argument_list PREFIX:line="596" PREFIX:column="58">(<argument><expr><name PREFIX:line="596" PREFIX:column="59">find</name></expr></argument>, <argument><expr><name PREFIX:line="596" PREFIX:column="65">index</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition> <block PREFIX:line="596" PREFIX:column="79">{
			<expr_stmt><expr><name PREFIX:line="597" PREFIX:column="25">readFrom</name> = <name PREFIX:line="597" PREFIX:column="36">buffer</name> + <name PREFIX:line="597" PREFIX:column="45">index</name> + <name><name PREFIX:line="597" PREFIX:column="53">find</name>.<name PREFIX:line="597" PREFIX:column="58">len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="598" PREFIX:column="25">memmove</name><argument_list PREFIX:line="598" PREFIX:column="32">(<argument><expr><name PREFIX:line="598" PREFIX:column="33">readFrom</name> + <name PREFIX:line="598" PREFIX:column="44">diff</name></expr></argument>, <argument><expr><name PREFIX:line="598" PREFIX:column="50">readFrom</name></expr></argument>, <argument><expr><name PREFIX:line="598" PREFIX:column="60">len</name> - (<name PREFIX:line="598" PREFIX:column="67">readFrom</name> - <name PREFIX:line="598" PREFIX:column="78">buffer</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="599" PREFIX:column="25">len</name> += <name PREFIX:line="599" PREFIX:column="32">diff</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name PREFIX:line="600" PREFIX:column="25">buffer</name><index PREFIX:line="600" PREFIX:column="31">[<expr><name PREFIX:line="600" PREFIX:column="32">len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="601" PREFIX:column="25">memcpy</name><argument_list PREFIX:line="601" PREFIX:column="31">(<argument><expr><name PREFIX:line="601" PREFIX:column="32">buffer</name> + <name PREFIX:line="601" PREFIX:column="41">index</name></expr></argument>, <argument><expr><name><name PREFIX:line="601" PREFIX:column="48">replace</name>.<name PREFIX:line="601" PREFIX:column="56">buffer</name></name></expr></argument>, <argument><expr><name><name PREFIX:line="601" PREFIX:column="64">replace</name>.<name PREFIX:line="601" PREFIX:column="72">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="602" PREFIX:column="25">index</name>--</expr>;</expr_stmt>
		}</block></while>
	}</block></else></if></else></if>
}</block></function>

<function><type><name PREFIX:line="607" PREFIX:column="1">void</name></type> <name><name PREFIX:line="607" PREFIX:column="6">String</name>::<name PREFIX:line="607" PREFIX:column="14">toLowerCase</name></name><parameter_list PREFIX:line="607" PREFIX:column="25">(<param><decl><type><name PREFIX:line="607" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="608" PREFIX:column="1">{
	<if PREFIX:line="609" PREFIX:column="9">if <condition PREFIX:line="609" PREFIX:column="12">(<expr PREFIX:line="609" PREFIX:column="13">!<name PREFIX:line="609" PREFIX:column="14">buffer</name></expr>)</condition><then PREFIX:line="609" PREFIX:column="21"> <return PREFIX:line="609" PREFIX:column="22">return;</return></then></if>
	<for PREFIX:line="610" PREFIX:column="9">for (<init><decl><type><name PREFIX:line="610" PREFIX:column="14">char</name> *</type><name PREFIX:line="610" PREFIX:column="20">p</name> <init PREFIX:line="610" PREFIX:column="22">= <expr><name PREFIX:line="610" PREFIX:column="24">buffer</name></expr></init></decl>;</init> <condition><expr PREFIX:line="610" PREFIX:column="32">*<name PREFIX:line="610" PREFIX:column="33">p</name></expr>;</condition> <incr><expr><name PREFIX:line="610" PREFIX:column="36">p</name>++</expr></incr>) <block PREFIX:line="610" PREFIX:column="41">{
		<expr_stmt><expr PREFIX:line="611" PREFIX:column="17">*<name PREFIX:line="611" PREFIX:column="18">p</name> = <call><name PREFIX:line="611" PREFIX:column="22">tolower</name><argument_list PREFIX:line="611" PREFIX:column="29">(<argument><expr PREFIX:line="611" PREFIX:column="30">*<name PREFIX:line="611" PREFIX:column="31">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name PREFIX:line="615" PREFIX:column="1">void</name></type> <name><name PREFIX:line="615" PREFIX:column="6">String</name>::<name PREFIX:line="615" PREFIX:column="14">toUpperCase</name></name><parameter_list PREFIX:line="615" PREFIX:column="25">(<param><decl><type><name PREFIX:line="615" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="616" PREFIX:column="1">{
	<if PREFIX:line="617" PREFIX:column="9">if <condition PREFIX:line="617" PREFIX:column="12">(<expr PREFIX:line="617" PREFIX:column="13">!<name PREFIX:line="617" PREFIX:column="14">buffer</name></expr>)</condition><then PREFIX:line="617" PREFIX:column="21"> <return PREFIX:line="617" PREFIX:column="22">return;</return></then></if>
	<for PREFIX:line="618" PREFIX:column="9">for (<init><decl><type><name PREFIX:line="618" PREFIX:column="14">char</name> *</type><name PREFIX:line="618" PREFIX:column="20">p</name> <init PREFIX:line="618" PREFIX:column="22">= <expr><name PREFIX:line="618" PREFIX:column="24">buffer</name></expr></init></decl>;</init> <condition><expr PREFIX:line="618" PREFIX:column="32">*<name PREFIX:line="618" PREFIX:column="33">p</name></expr>;</condition> <incr><expr><name PREFIX:line="618" PREFIX:column="36">p</name>++</expr></incr>) <block PREFIX:line="618" PREFIX:column="41">{
		<expr_stmt><expr PREFIX:line="619" PREFIX:column="17">*<name PREFIX:line="619" PREFIX:column="18">p</name> = <call><name PREFIX:line="619" PREFIX:column="22">toupper</name><argument_list PREFIX:line="619" PREFIX:column="29">(<argument><expr PREFIX:line="619" PREFIX:column="30">*<name PREFIX:line="619" PREFIX:column="31">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name PREFIX:line="623" PREFIX:column="1">void</name></type> <name><name PREFIX:line="623" PREFIX:column="6">String</name>::<name PREFIX:line="623" PREFIX:column="14">trim</name></name><parameter_list PREFIX:line="623" PREFIX:column="18">(<param><decl><type><name PREFIX:line="623" PREFIX:column="19">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="624" PREFIX:column="1">{
	<if PREFIX:line="625" PREFIX:column="9">if <condition PREFIX:line="625" PREFIX:column="12">(<expr PREFIX:line="625" PREFIX:column="13">!<name PREFIX:line="625" PREFIX:column="14">buffer</name> || <name PREFIX:line="625" PREFIX:column="24">len</name> == 0</expr>)</condition><then PREFIX:line="625" PREFIX:column="33"> <return PREFIX:line="625" PREFIX:column="34">return;</return></then></if>
	<decl_stmt><decl><type><name PREFIX:line="626" PREFIX:column="9">char</name> *</type><name PREFIX:line="626" PREFIX:column="15">begin</name> <init PREFIX:line="626" PREFIX:column="21">= <expr><name PREFIX:line="626" PREFIX:column="23">buffer</name></expr></init></decl>;</decl_stmt>
	<while PREFIX:line="627" PREFIX:column="9">while <condition PREFIX:line="627" PREFIX:column="15">(<expr><call><name PREFIX:line="627" PREFIX:column="16">isspace</name><argument_list PREFIX:line="627" PREFIX:column="23">(<argument><expr PREFIX:line="627" PREFIX:column="24">*<name PREFIX:line="627" PREFIX:column="25">begin</name></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><name PREFIX:line="627" PREFIX:column="33">begin</name>++</expr>;</expr_stmt></while>
	<decl_stmt><decl><type><name PREFIX:line="628" PREFIX:column="9">char</name> *</type><name PREFIX:line="628" PREFIX:column="15">end</name> <init PREFIX:line="628" PREFIX:column="19">= <expr><name PREFIX:line="628" PREFIX:column="21">buffer</name> + <name PREFIX:line="628" PREFIX:column="30">len</name> - 1</expr></init></decl>;</decl_stmt>
	<while PREFIX:line="629" PREFIX:column="9">while <condition PREFIX:line="629" PREFIX:column="15">(<expr><call><name PREFIX:line="629" PREFIX:column="16">isspace</name><argument_list PREFIX:line="629" PREFIX:column="23">(<argument><expr PREFIX:line="629" PREFIX:column="24">*<name PREFIX:line="629" PREFIX:column="25">end</name></expr></argument>)</argument_list></call> &amp;&amp; <name PREFIX:line="629" PREFIX:column="33">end</name> &gt;= <name PREFIX:line="629" PREFIX:column="40">begin</name></expr>)</condition> <expr_stmt><expr><name PREFIX:line="629" PREFIX:column="47">end</name>--</expr>;</expr_stmt></while>
	<expr_stmt><expr><name PREFIX:line="630" PREFIX:column="9">len</name> = <name PREFIX:line="630" PREFIX:column="15">end</name> + 1 - <name PREFIX:line="630" PREFIX:column="25">begin</name></expr>;</expr_stmt>
	<if PREFIX:line="631" PREFIX:column="9">if <condition PREFIX:line="631" PREFIX:column="12">(<expr><name PREFIX:line="631" PREFIX:column="13">begin</name> &gt; <name PREFIX:line="631" PREFIX:column="21">buffer</name></expr>)</condition><then PREFIX:line="631" PREFIX:column="28"> <expr_stmt><expr><call><name PREFIX:line="631" PREFIX:column="29">memcpy</name><argument_list PREFIX:line="631" PREFIX:column="35">(<argument><expr><name PREFIX:line="631" PREFIX:column="36">buffer</name></expr></argument>, <argument><expr><name PREFIX:line="631" PREFIX:column="44">begin</name></expr></argument>, <argument><expr><name PREFIX:line="631" PREFIX:column="51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name><name PREFIX:line="632" PREFIX:column="9">buffer</name><index PREFIX:line="632" PREFIX:column="15">[<expr><name PREFIX:line="632" PREFIX:column="16">len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" PREFIX:line="635" PREFIX:column="1">/*********************************************/</comment>
<comment type="block" PREFIX:line="636" PREFIX:column="1">/*  Parsing / Conversion                     */</comment>
<comment type="block" format="doxygen" PREFIX:line="637" PREFIX:column="1">/*********************************************/</comment>

<function><type><name PREFIX:line="639" PREFIX:column="1">long</name></type> <name><name PREFIX:line="639" PREFIX:column="6">String</name>::<name PREFIX:line="639" PREFIX:column="14">toInt</name></name><parameter_list PREFIX:line="639" PREFIX:column="19">(<param><decl><type><name PREFIX:line="639" PREFIX:column="20">void</name></type></decl></param>)</parameter_list> 
<block PREFIX:line="640" PREFIX:column="1">{
	<if PREFIX:line="641" PREFIX:column="9">if <condition PREFIX:line="641" PREFIX:column="12">(<expr><name PREFIX:line="641" PREFIX:column="13">buffer</name></expr>)</condition><then PREFIX:line="641" PREFIX:column="20"> <return PREFIX:line="641" PREFIX:column="21">return <expr><call><name PREFIX:line="641" PREFIX:column="28">atol</name><argument_list PREFIX:line="641" PREFIX:column="32">(<argument><expr><name PREFIX:line="641" PREFIX:column="33">buffer</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
	<return PREFIX:line="642" PREFIX:column="9">return <expr PREFIX:line="642" PREFIX:column="16">0</expr>;</return>
}</block></function>


</unit>
