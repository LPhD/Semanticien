<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/libraries/TMC26XStepper/examples/TMC26XMotorTester/processing/TMC26XMotorTest/Arduino.pde.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
 TMC26XMotorTest.pde - - TMC26X Stepper Tester for Processing
 
 Copyright (c) 2011, Interactive Matter, Marcus Nowotny
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 
 */</comment>

<decl_stmt><decl><type><name PREFIX:line="26" PREFIX:column="1">String</name></type> <name PREFIX:line="26" PREFIX:column="8">channelAStatus</name><init PREFIX:line="26" PREFIX:column="22">=<expr><name PREFIX:line="26" PREFIX:column="23">null</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="27" PREFIX:column="1">String</name></type> <name PREFIX:line="27" PREFIX:column="8">channelBStatus</name><init PREFIX:line="27" PREFIX:column="22">=<expr><name PREFIX:line="27" PREFIX:column="23">null</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="28" PREFIX:column="1">String</name></type> <name PREFIX:line="28" PREFIX:column="8">temperatureStatus</name><init PREFIX:line="28" PREFIX:column="25">=<expr><name PREFIX:line="28" PREFIX:column="26">null</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="29" PREFIX:column="1">boolean</name></type> <name PREFIX:line="29" PREFIX:column="9">motor_connected</name> <init PREFIX:line="29" PREFIX:column="25">= <expr PREFIX:line="29" PREFIX:column="27">false</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name PREFIX:line="31" PREFIX:column="1">RadioButton</name></type> <name PREFIX:line="31" PREFIX:column="13">serialButtons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="32" PREFIX:column="1">Button</name></type> <name PREFIX:line="32" PREFIX:column="8">serialOkButton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="33" PREFIX:column="1">Button</name></type> <name PREFIX:line="33" PREFIX:column="8">helpButton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="34" PREFIX:column="1">Textarea</name></type> <name PREFIX:line="34" PREFIX:column="10">statusArea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="35" PREFIX:column="1">String</name><index PREFIX:line="35" PREFIX:column="7">[]</index></type> <name PREFIX:line="35" PREFIX:column="10">ports</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="36" PREFIX:column="1">int</name></type> <name PREFIX:line="36" PREFIX:column="5">activePortIndex</name> <init PREFIX:line="36" PREFIX:column="21">= <expr PREFIX:line="36" PREFIX:column="23">-1</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name PREFIX:line="38" PREFIX:column="1">String</name></type> <name PREFIX:line="38" PREFIX:column="8">identString</name><init PREFIX:line="38" PREFIX:column="19">=<expr PREFIX:line="38" PREFIX:column="20">"TMC26X Stepper Driver Motor Tester"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="39" PREFIX:column="1">int</name></type> <name PREFIX:line="39" PREFIX:column="5">connectTimeout</name><init PREFIX:line="39" PREFIX:column="19">=<expr PREFIX:line="39" PREFIX:column="20">10*1000</expr></init></decl>;</decl_stmt> <comment type="line" PREFIX:line="39" PREFIX:column="29">//how long do we wait until the Arduino is connected</comment>

<decl_stmt><decl><type><name PREFIX:line="41" PREFIX:column="1">StringBuilder</name></type> <name PREFIX:line="41" PREFIX:column="15">serialStringBuilder</name> <init PREFIX:line="41" PREFIX:column="35">= <expr PREFIX:line="41" PREFIX:column="37">new <call><name PREFIX:line="41" PREFIX:column="41">StringBuilder</name><argument_list PREFIX:line="41" PREFIX:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name PREFIX:line="43" PREFIX:column="1">void</name></type> <name PREFIX:line="43" PREFIX:column="6">setupSerialConfig</name><parameter_list PREFIX:line="43" PREFIX:column="23">()</parameter_list> <block PREFIX:line="43" PREFIX:column="26">{
  <decl_stmt><decl><type><name PREFIX:line="44" PREFIX:column="3">Tab</name></type> <name PREFIX:line="44" PREFIX:column="7">defaultTab</name> <init PREFIX:line="44" PREFIX:column="18">= <expr><call><name><name PREFIX:line="44" PREFIX:column="20">controlP5</name>.<name PREFIX:line="44" PREFIX:column="30">getTab</name></name><argument_list PREFIX:line="44" PREFIX:column="36">(<argument><expr PREFIX:line="44" PREFIX:column="37">"default"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line" PREFIX:line="45" PREFIX:column="3">//add the list of serial interfaces - it get's populated later</comment>
  <expr_stmt><expr><name PREFIX:line="46" PREFIX:column="3">serialButtons</name> = <call><name><name PREFIX:line="46" PREFIX:column="19">controlP5</name>.<name PREFIX:line="46" PREFIX:column="29">addRadioButton</name></name><argument_list PREFIX:line="46" PREFIX:column="43">(<argument><expr PREFIX:line="46" PREFIX:column="44">"serialport"</expr></argument>, <argument><expr PREFIX:line="46" PREFIX:column="58">200</expr></argument>, <argument><expr PREFIX:line="46" PREFIX:column="63">100+<name><name PREFIX:line="46" PREFIX:column="67">TMCLogo</name>.<name PREFIX:line="46" PREFIX:column="75">height</name></name>*2+50</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="47" PREFIX:column="3">serialConfigElements</name>.<name PREFIX:line="47" PREFIX:column="24">add</name></name><argument_list PREFIX:line="47" PREFIX:column="27">(<argument><expr><name PREFIX:line="47" PREFIX:column="28">serialButtons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="48" PREFIX:column="3">serialButtons</name>.<name PREFIX:line="48" PREFIX:column="17">captionLabel</name></name><argument_list PREFIX:line="48" PREFIX:column="29">()</argument_list></call>.<call><name PREFIX:line="48" PREFIX:column="32">set</name><argument_list PREFIX:line="48" PREFIX:column="35">(<argument><expr PREFIX:line="48" PREFIX:column="36">"Select Serial Port"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="49" PREFIX:column="3">serialButtons</name>.<name PREFIX:line="49" PREFIX:column="17">showBar</name></name><argument_list PREFIX:line="49" PREFIX:column="24">()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="50" PREFIX:column="3">serialButtons</name>.<name PREFIX:line="50" PREFIX:column="17">moveTo</name></name><argument_list PREFIX:line="50" PREFIX:column="23">(<argument><expr><name PREFIX:line="50" PREFIX:column="24">defaultTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line" PREFIX:line="51" PREFIX:column="3">//ad the ok button</comment>
  <expr_stmt><expr><name PREFIX:line="52" PREFIX:column="3">serialOkButton</name> = <call><name><name PREFIX:line="52" PREFIX:column="20">controlP5</name>.<name PREFIX:line="52" PREFIX:column="30">addButton</name></name><argument_list PREFIX:line="52" PREFIX:column="39">(<argument><expr PREFIX:line="52" PREFIX:column="40">"serialOk"</expr></argument>, <argument><expr PREFIX:line="52" PREFIX:column="52">1</expr></argument>, <argument><expr PREFIX:line="52" PREFIX:column="55">200</expr></argument>, <argument><expr><name PREFIX:line="52" PREFIX:column="60">height</name>-300</expr></argument>, <argument><expr PREFIX:line="52" PREFIX:column="72">30</expr></argument>, <argument><expr PREFIX:line="52" PREFIX:column="76">30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="53" PREFIX:column="3">serialConfigElements</name>.<name PREFIX:line="53" PREFIX:column="24">add</name></name><argument_list PREFIX:line="53" PREFIX:column="27">(<argument><expr><name PREFIX:line="53" PREFIX:column="28">serialOkButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="54" PREFIX:column="3">serialOkButton</name>.<name PREFIX:line="54" PREFIX:column="18">setCaptionLabel</name></name><argument_list PREFIX:line="54" PREFIX:column="33">(<argument><expr PREFIX:line="54" PREFIX:column="34">"OK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="55" PREFIX:column="3">runToggle</name>.<name PREFIX:line="55" PREFIX:column="13">moveTo</name></name><argument_list PREFIX:line="55" PREFIX:column="19">(<argument><expr><name PREFIX:line="55" PREFIX:column="20">defaultTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line" PREFIX:line="56" PREFIX:column="3">//add the status area</comment>
  <expr_stmt><expr><name PREFIX:line="57" PREFIX:column="3">statusArea</name> = <call><name><name PREFIX:line="57" PREFIX:column="16">controlP5</name>.<name PREFIX:line="57" PREFIX:column="26">addTextarea</name></name><argument_list PREFIX:line="57" PREFIX:column="37">(<argument><expr PREFIX:line="57" PREFIX:column="38">"statusArea"</expr></argument>,<argument><expr PREFIX:line="57" PREFIX:column="51">""</expr></argument>,<argument><expr PREFIX:line="57" PREFIX:column="54">200</expr></argument>,<argument><expr><name PREFIX:line="57" PREFIX:column="58">height</name>-250</expr></argument>,<argument><expr PREFIX:line="57" PREFIX:column="69">300</expr></argument>,<argument><expr PREFIX:line="57" PREFIX:column="73">50</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="58" PREFIX:column="3">serialConfigElements</name>.<name PREFIX:line="58" PREFIX:column="24">add</name></name><argument_list PREFIX:line="58" PREFIX:column="27">(<argument><expr><name PREFIX:line="58" PREFIX:column="28">statusArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="59" PREFIX:column="3">statusArea</name>.<name PREFIX:line="59" PREFIX:column="14">moveTo</name></name><argument_list PREFIX:line="59" PREFIX:column="20">(<argument><expr><name PREFIX:line="59" PREFIX:column="21">defaultTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name PREFIX:line="61" PREFIX:column="3">helpButton</name> =  <call><name><name PREFIX:line="61" PREFIX:column="17">controlP5</name>.<name PREFIX:line="61" PREFIX:column="27">addButton</name></name><argument_list PREFIX:line="61" PREFIX:column="36">(<argument><expr PREFIX:line="61" PREFIX:column="37">"help"</expr></argument>, <argument><expr PREFIX:line="61" PREFIX:column="45">1</expr></argument>, <argument><expr PREFIX:line="61" PREFIX:column="48">200</expr></argument>, <argument><expr><name PREFIX:line="61" PREFIX:column="53">height</name>-250</expr></argument>, <argument><expr PREFIX:line="61" PREFIX:column="65">80</expr></argument>, <argument><expr PREFIX:line="61" PREFIX:column="69">30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="62" PREFIX:column="3">serialConfigElements</name>.<name PREFIX:line="62" PREFIX:column="24">add</name></name><argument_list PREFIX:line="62" PREFIX:column="27">(<argument><expr><name PREFIX:line="62" PREFIX:column="28">helpButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="63" PREFIX:column="3">helpButton</name>.<name PREFIX:line="63" PREFIX:column="14">moveTo</name></name><argument_list PREFIX:line="63" PREFIX:column="20">(<argument><expr><name PREFIX:line="63" PREFIX:column="21">defaultTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  

  <comment type="line" PREFIX:line="66" PREFIX:column="3">//finally update the list of serial ports</comment>
  <expr_stmt><expr><call><name PREFIX:line="67" PREFIX:column="3">updateSerialPortList</name><argument_list PREFIX:line="67" PREFIX:column="23">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="70" PREFIX:column="1">void</name></type> <name PREFIX:line="70" PREFIX:column="6">updateSerialPortList</name><parameter_list PREFIX:line="70" PREFIX:column="26">()</parameter_list> <block PREFIX:line="70" PREFIX:column="29">{
  <comment type="line" PREFIX:line="71" PREFIX:column="3">//first remove all present serial ports</comment>
  <decl_stmt><decl><type><name PREFIX:line="72" PREFIX:column="3">List</name></type> <name PREFIX:line="72" PREFIX:column="8">items</name> <init PREFIX:line="72" PREFIX:column="14">= <expr><call><name><name PREFIX:line="72" PREFIX:column="16">serialButtons</name>.<name PREFIX:line="72" PREFIX:column="30">getItems</name></name><argument_list PREFIX:line="72" PREFIX:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for PREFIX:line="73" PREFIX:column="3">for (<init><decl><type><name PREFIX:line="73" PREFIX:column="8">Object</name></type> <name PREFIX:line="73" PREFIX:column="15">i</name><range PREFIX:line="73" PREFIX:column="16">:<expr><name PREFIX:line="73" PREFIX:column="17">items</name></expr></range></decl></init>) <block PREFIX:line="73" PREFIX:column="24">{
    <decl_stmt><decl><type><name PREFIX:line="74" PREFIX:column="5">Toggle</name></type> <name PREFIX:line="74" PREFIX:column="12">item</name> <init PREFIX:line="74" PREFIX:column="17">= <expr PREFIX:line="74" PREFIX:column="19">(<name PREFIX:line="74" PREFIX:column="20">Toggle</name>) <name PREFIX:line="74" PREFIX:column="28">i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name PREFIX:line="75" PREFIX:column="5">serialButtons</name>.<name PREFIX:line="75" PREFIX:column="19">removeItem</name></name><argument_list PREFIX:line="75" PREFIX:column="29">(<argument><expr><call><name><name PREFIX:line="75" PREFIX:column="30">item</name>.<name PREFIX:line="75" PREFIX:column="35">getName</name></name><argument_list PREFIX:line="75" PREFIX:column="42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <comment type="line" PREFIX:line="77" PREFIX:column="3">//add the serial ports</comment>
  <expr_stmt><expr><name PREFIX:line="78" PREFIX:column="3">ports</name> = <call><name><name PREFIX:line="78" PREFIX:column="11">Serial</name>.<name PREFIX:line="78" PREFIX:column="18">list</name></name><argument_list PREFIX:line="78" PREFIX:column="22">()</argument_list></call></expr>;</expr_stmt>
  <for PREFIX:line="79" PREFIX:column="3">for (<init><decl><type><name PREFIX:line="79" PREFIX:column="8">int</name></type> <name PREFIX:line="79" PREFIX:column="12">i</name><init PREFIX:line="79" PREFIX:column="13">=<expr PREFIX:line="79" PREFIX:column="14">0</expr></init></decl>;</init> <condition><expr><name PREFIX:line="79" PREFIX:column="17">i</name>&lt; <name><name PREFIX:line="79" PREFIX:column="20">ports</name>.<name PREFIX:line="79" PREFIX:column="26">length</name></name></expr>;</condition> <incr><expr><name PREFIX:line="79" PREFIX:column="34">i</name>++</expr></incr>) <block PREFIX:line="79" PREFIX:column="39">{
    <expr_stmt><expr><call><name><name PREFIX:line="80" PREFIX:column="5">serialButtons</name>.<name PREFIX:line="80" PREFIX:column="19">addItem</name></name><argument_list PREFIX:line="80" PREFIX:column="26">(<argument><expr><name><name PREFIX:line="80" PREFIX:column="27">ports</name><index PREFIX:line="80" PREFIX:column="32">[<expr><name PREFIX:line="80" PREFIX:column="33">i</name></expr>]</index></name></expr></argument>,<argument><expr><name PREFIX:line="80" PREFIX:column="36">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name><name PREFIX:line="82" PREFIX:column="3">serialButtons</name>.<name PREFIX:line="82" PREFIX:column="17">setValue</name></name><argument_list PREFIX:line="82" PREFIX:column="25">(<argument><expr PREFIX:line="82" PREFIX:column="26">-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name PREFIX:line="83" PREFIX:column="3">serialOkButton</name>.<name PREFIX:line="83" PREFIX:column="18">setVisible</name></name><argument_list PREFIX:line="83" PREFIX:column="28">(<argument><expr PREFIX:line="83" PREFIX:column="29">false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="86" PREFIX:column="1">void</name></type> <name PREFIX:line="86" PREFIX:column="6">serialport</name><parameter_list PREFIX:line="86" PREFIX:column="16">(<param><decl><type><name PREFIX:line="86" PREFIX:column="17">int</name></type> <name PREFIX:line="86" PREFIX:column="21">value</name></decl></param>)</parameter_list> <block PREFIX:line="86" PREFIX:column="28">{
  <comment type="line" PREFIX:line="87" PREFIX:column="3">//ok button is only active if a serial port is selected</comment>
  <expr_stmt><expr><call><name><name PREFIX:line="88" PREFIX:column="3">serialOkButton</name>.<name PREFIX:line="88" PREFIX:column="18">setVisible</name></name><argument_list PREFIX:line="88" PREFIX:column="28">(<argument><expr><name PREFIX:line="88" PREFIX:column="29">value</name>&gt;-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if PREFIX:line="89" PREFIX:column="3">if <condition PREFIX:line="89" PREFIX:column="6">(<expr><name PREFIX:line="89" PREFIX:column="7">value</name>&gt;-1</expr>)</condition><then PREFIX:line="89" PREFIX:column="16"> <block PREFIX:line="89" PREFIX:column="17">{
    <expr_stmt><expr><call><name><name PREFIX:line="90" PREFIX:column="5">statusArea</name>.<name PREFIX:line="90" PREFIX:column="16">setText</name></name><argument_list PREFIX:line="90" PREFIX:column="23">(<argument><expr PREFIX:line="90" PREFIX:column="24">""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name PREFIX:line="92" PREFIX:column="3">activePortIndex</name> = <name PREFIX:line="92" PREFIX:column="21">value</name></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="95" PREFIX:column="1">void</name></type> <name PREFIX:line="95" PREFIX:column="6">serialOk</name><parameter_list PREFIX:line="95" PREFIX:column="14">(<param><decl><type><name PREFIX:line="95" PREFIX:column="15">int</name></type> <name PREFIX:line="95" PREFIX:column="19">value</name></decl></param>)</parameter_list> <block PREFIX:line="95" PREFIX:column="26">{
  <decl_stmt><decl><type><name PREFIX:line="96" PREFIX:column="3">String</name></type> <name PREFIX:line="96" PREFIX:column="10">error</name> <init PREFIX:line="96" PREFIX:column="16">= <expr><name PREFIX:line="96" PREFIX:column="18">null</name></expr></init></decl>;</decl_stmt>
  <if PREFIX:line="97" PREFIX:column="3">if <condition PREFIX:line="97" PREFIX:column="6">(<expr><name PREFIX:line="97" PREFIX:column="7">value</name>!=0 &amp;&amp; <name PREFIX:line="97" PREFIX:column="19">activePortIndex</name>&gt;-1</expr>)</condition><then PREFIX:line="97" PREFIX:column="38"> <block PREFIX:line="97" PREFIX:column="39">{
    <try PREFIX:line="98" PREFIX:column="5">try <block PREFIX:line="98" PREFIX:column="9">{
      <expr_stmt><expr><name PREFIX:line="99" PREFIX:column="7">arduinoPort</name> = new <call><name PREFIX:line="99" PREFIX:column="25">Serial</name><argument_list PREFIX:line="99" PREFIX:column="31">(<argument><expr><name PREFIX:line="99" PREFIX:column="32">this</name></expr></argument>, <argument><expr><name><name PREFIX:line="99" PREFIX:column="38">ports</name><index PREFIX:line="99" PREFIX:column="43">[<expr><name PREFIX:line="99" PREFIX:column="44">activePortIndex</name></expr>]</index></name></expr></argument>, <argument><expr PREFIX:line="99" PREFIX:column="62">115200</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name PREFIX:line="100" PREFIX:column="7">int</name></type> <name PREFIX:line="100" PREFIX:column="11">timeStarted</name> <init PREFIX:line="100" PREFIX:column="23">= <expr><call><name PREFIX:line="100" PREFIX:column="25">millis</name><argument_list PREFIX:line="100" PREFIX:column="31">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name PREFIX:line="101" PREFIX:column="7">StringBuilder</name></type> <name PREFIX:line="101" PREFIX:column="21">identBuffer</name> <init PREFIX:line="101" PREFIX:column="33">= <expr PREFIX:line="101" PREFIX:column="35">new <call><name PREFIX:line="101" PREFIX:column="39">StringBuilder</name><argument_list PREFIX:line="101" PREFIX:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while PREFIX:line="102" PREFIX:column="7">while <condition PREFIX:line="102" PREFIX:column="13">(<expr PREFIX:line="102" PREFIX:column="14">!<name PREFIX:line="102" PREFIX:column="15">motor_connected</name> &amp;&amp; (<call><name PREFIX:line="102" PREFIX:column="35">millis</name><argument_list PREFIX:line="102" PREFIX:column="41">()</argument_list></call>-<name PREFIX:line="102" PREFIX:column="44">timeStarted</name>)&lt;<name PREFIX:line="102" PREFIX:column="57">connectTimeout</name></expr>)</condition> <block PREFIX:line="102" PREFIX:column="73">{
        <if PREFIX:line="103" PREFIX:column="9">if <condition PREFIX:line="103" PREFIX:column="12">(<expr><call><name><name PREFIX:line="103" PREFIX:column="13">arduinoPort</name>.<name PREFIX:line="103" PREFIX:column="25">available</name></name> <argument_list PREFIX:line="103" PREFIX:column="35">()</argument_list></call>&gt;0</expr>)</condition><then PREFIX:line="103" PREFIX:column="40"> <block PREFIX:line="103" PREFIX:column="41">{
          <decl_stmt><decl><type><name PREFIX:line="104" PREFIX:column="11">char</name></type> <name PREFIX:line="104" PREFIX:column="16">c</name> <init PREFIX:line="104" PREFIX:column="18">= <expr><call><name><name PREFIX:line="104" PREFIX:column="20">arduinoPort</name>.<name PREFIX:line="104" PREFIX:column="32">readChar</name></name><argument_list PREFIX:line="104" PREFIX:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name PREFIX:line="105" PREFIX:column="11">identBuffer</name>.<name PREFIX:line="105" PREFIX:column="23">append</name></name><argument_list PREFIX:line="105" PREFIX:column="29">(<argument><expr><name PREFIX:line="105" PREFIX:column="30">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if PREFIX:line="106" PREFIX:column="11">if <condition PREFIX:line="106" PREFIX:column="14">(<expr><name PREFIX:line="106" PREFIX:column="15">c</name>=='\n'</expr>)</condition><then PREFIX:line="106" PREFIX:column="23"> <block PREFIX:line="106" PREFIX:column="24">{
            <if PREFIX:line="107" PREFIX:column="13">if <condition PREFIX:line="107" PREFIX:column="16">(<expr><call><name><name PREFIX:line="107" PREFIX:column="17">identString</name>.<name PREFIX:line="107" PREFIX:column="29">contains</name></name><argument_list PREFIX:line="107" PREFIX:column="37">(<argument><expr><name PREFIX:line="107" PREFIX:column="38">identString</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="107" PREFIX:column="51"> <block PREFIX:line="107" PREFIX:column="52">{
              <expr_stmt><expr><name PREFIX:line="108" PREFIX:column="15">motor_connected</name> = true</expr>;</expr_stmt>
              <expr_stmt><expr><call><name PREFIX:line="109" PREFIX:column="15">toggleUi</name><argument_list PREFIX:line="109" PREFIX:column="23">(<argument><expr PREFIX:line="109" PREFIX:column="24">true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return PREFIX:line="110" PREFIX:column="15">return;</return>
            }</block></then></if>
            <expr_stmt><expr><name PREFIX:line="112" PREFIX:column="13">identBuffer</name> = new <call><name PREFIX:line="112" PREFIX:column="31">StringBuilder</name><argument_list PREFIX:line="112" PREFIX:column="44">()</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if> 
      }</block></while>
    }</block> <catch PREFIX:line="116" PREFIX:column="7">catch <parameter_list PREFIX:line="116" PREFIX:column="13">(<param><decl><type><name PREFIX:line="116" PREFIX:column="14">RuntimeException</name></type> <name PREFIX:line="116" PREFIX:column="31">e</name></decl></param>)</parameter_list> <block PREFIX:line="116" PREFIX:column="34">{
      <comment type="line" PREFIX:line="117" PREFIX:column="7">//we simply do nothing</comment>
      <comment type="line" PREFIX:line="118" PREFIX:column="7">//TODO set status label</comment>
      <expr_stmt><expr><name PREFIX:line="119" PREFIX:column="7">error</name> = "There was a problem with serial port "+<name><name PREFIX:line="119" PREFIX:column="55">ports</name><index PREFIX:line="119" PREFIX:column="60">[<expr><name PREFIX:line="119" PREFIX:column="61">activePortIndex</name></expr>]</index></name>+": "+<call><name><name PREFIX:line="119" PREFIX:column="83">e</name>.<name PREFIX:line="119" PREFIX:column="85">getMessage</name></name><argument_list PREFIX:line="119" PREFIX:column="95">()</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
    <comment type="line" PREFIX:line="121" PREFIX:column="5">//ok appearantly we did not find an motor tester - so lets deselect that port</comment>
    <if PREFIX:line="122" PREFIX:column="5">if <condition PREFIX:line="122" PREFIX:column="8">(<expr><name PREFIX:line="122" PREFIX:column="9">error</name> == <name PREFIX:line="122" PREFIX:column="18">null</name></expr>)</condition><then PREFIX:line="122" PREFIX:column="23"> <block PREFIX:line="122" PREFIX:column="24">{
      <expr_stmt><expr><name PREFIX:line="123" PREFIX:column="7">error</name> = "Could not find TMC26XMotorTester on serial port "+<name><name PREFIX:line="123" PREFIX:column="66">ports</name><index PREFIX:line="123" PREFIX:column="71">[<expr><name PREFIX:line="123" PREFIX:column="72">activePortIndex</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name PREFIX:line="125" PREFIX:column="5">statusArea</name>.<name PREFIX:line="125" PREFIX:column="16">setText</name></name><argument_list PREFIX:line="125" PREFIX:column="23">(<argument><expr><name PREFIX:line="125" PREFIX:column="24">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name PREFIX:line="126" PREFIX:column="5">Toggle</name></type> <name PREFIX:line="126" PREFIX:column="12">selected</name> <init PREFIX:line="126" PREFIX:column="21">= <expr><call><name><name PREFIX:line="126" PREFIX:column="23">serialButtons</name>.<name PREFIX:line="126" PREFIX:column="37">getItem</name></name><argument_list PREFIX:line="126" PREFIX:column="44">(<argument><expr><name PREFIX:line="126" PREFIX:column="45">activePortIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name PREFIX:line="127" PREFIX:column="5">selected</name>.<name PREFIX:line="127" PREFIX:column="14">setState</name></name><argument_list PREFIX:line="127" PREFIX:column="22">(<argument><expr PREFIX:line="127" PREFIX:column="23">false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name PREFIX:line="128" PREFIX:column="5">serialOkButton</name>.<name PREFIX:line="128" PREFIX:column="20">setVisible</name></name><argument_list PREFIX:line="128" PREFIX:column="30">(<argument><expr PREFIX:line="128" PREFIX:column="31">false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>


<function><type><name PREFIX:line="133" PREFIX:column="1">void</name></type> <name PREFIX:line="133" PREFIX:column="6">decodeSerial</name><parameter_list PREFIX:line="133" PREFIX:column="18">()</parameter_list> <block PREFIX:line="133" PREFIX:column="21">{
  <if PREFIX:line="134" PREFIX:column="3">if <condition PREFIX:line="134" PREFIX:column="6">(<expr><name PREFIX:line="134" PREFIX:column="7">motor_connected</name></expr>)</condition><then PREFIX:line="134" PREFIX:column="23"> <block PREFIX:line="134" PREFIX:column="24">{
    <while PREFIX:line="135" PREFIX:column="5">while <condition PREFIX:line="135" PREFIX:column="11">(<expr><call><name><name PREFIX:line="135" PREFIX:column="12">arduinoPort</name>.<name PREFIX:line="135" PREFIX:column="24">available</name></name> <argument_list PREFIX:line="135" PREFIX:column="34">()</argument_list></call>&gt;0</expr>)</condition> <block PREFIX:line="135" PREFIX:column="40">{
      <decl_stmt><decl><type><name PREFIX:line="136" PREFIX:column="7">char</name></type> <name PREFIX:line="136" PREFIX:column="12">c</name> <init PREFIX:line="136" PREFIX:column="14">= <expr><call><name><name PREFIX:line="136" PREFIX:column="16">arduinoPort</name>.<name PREFIX:line="136" PREFIX:column="28">readChar</name></name><argument_list PREFIX:line="136" PREFIX:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name PREFIX:line="137" PREFIX:column="7">serialStringBuilder</name>.<name PREFIX:line="137" PREFIX:column="27">append</name></name><argument_list PREFIX:line="137" PREFIX:column="33">(<argument><expr><name PREFIX:line="137" PREFIX:column="34">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if PREFIX:line="138" PREFIX:column="7">if <condition PREFIX:line="138" PREFIX:column="10">(<expr><name PREFIX:line="138" PREFIX:column="11">c</name>=='\n'</expr>)</condition><then PREFIX:line="138" PREFIX:column="19"> <block PREFIX:line="138" PREFIX:column="20">{
        <expr_stmt><expr><call><name PREFIX:line="139" PREFIX:column="9">decodeSerial</name><argument_list PREFIX:line="139" PREFIX:column="21">(<argument><expr><call><name><name PREFIX:line="139" PREFIX:column="22">serialStringBuilder</name>.<name PREFIX:line="139" PREFIX:column="42">toString</name></name><argument_list PREFIX:line="139" PREFIX:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name PREFIX:line="140" PREFIX:column="9">serialStringBuilder</name> = new <call><name PREFIX:line="140" PREFIX:column="35">StringBuilder</name><argument_list PREFIX:line="140" PREFIX:column="48">()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></while>
  }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="146" PREFIX:column="1">void</name></type> <name PREFIX:line="146" PREFIX:column="6">sendCommand</name><parameter_list PREFIX:line="146" PREFIX:column="17">(<param><decl><type><name PREFIX:line="146" PREFIX:column="18">String</name></type> <name PREFIX:line="146" PREFIX:column="25">command</name></decl></param>)</parameter_list> <block PREFIX:line="146" PREFIX:column="34">{
  <if PREFIX:line="147" PREFIX:column="3">if <condition PREFIX:line="147" PREFIX:column="6">(<expr><name PREFIX:line="147" PREFIX:column="7">motor_connected</name></expr>)</condition><then PREFIX:line="147" PREFIX:column="23"> <block PREFIX:line="147" PREFIX:column="24">{
    <expr_stmt><expr><call><name><name PREFIX:line="148" PREFIX:column="5">arduinoPort</name>.<name PREFIX:line="148" PREFIX:column="17">write</name></name><argument_list PREFIX:line="148" PREFIX:column="22">(<argument><expr><name PREFIX:line="148" PREFIX:column="23">command</name>+"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="152" PREFIX:column="1">void</name></type> <name PREFIX:line="152" PREFIX:column="6">decodeSerial</name><parameter_list PREFIX:line="152" PREFIX:column="18">(<param><decl><type><name PREFIX:line="152" PREFIX:column="19">String</name></type> <name PREFIX:line="152" PREFIX:column="26">line</name></decl></param>)</parameter_list> <block PREFIX:line="152" PREFIX:column="32">{
  <expr_stmt><expr><name PREFIX:line="153" PREFIX:column="3">settingStatus</name>=true</expr>;</expr_stmt>
  <if PREFIX:line="154" PREFIX:column="3">if <condition PREFIX:line="154" PREFIX:column="6">(<expr><call><name><name PREFIX:line="154" PREFIX:column="7">line</name>.<name PREFIX:line="154" PREFIX:column="12">startsWith</name></name><argument_list PREFIX:line="154" PREFIX:column="22">(<argument><expr PREFIX:line="154" PREFIX:column="23">"#"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="154" PREFIX:column="28"> <block PREFIX:line="154" PREFIX:column="29">{
    <decl_stmt><decl><type><name PREFIX:line="155" PREFIX:column="5">String</name></type> <name PREFIX:line="155" PREFIX:column="12">status</name> <init PREFIX:line="155" PREFIX:column="19">= <expr><call><name><name PREFIX:line="155" PREFIX:column="21">line</name>.<name PREFIX:line="155" PREFIX:column="26">substring</name></name><argument_list PREFIX:line="155" PREFIX:column="35">(<argument><expr PREFIX:line="155" PREFIX:column="36">1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name PREFIX:line="156" PREFIX:column="5">StringTokenizer</name></type> <name PREFIX:line="156" PREFIX:column="21">statusTokenizer</name> <init PREFIX:line="156" PREFIX:column="37">= <expr PREFIX:line="156" PREFIX:column="39">new <call><name PREFIX:line="156" PREFIX:column="43">StringTokenizer</name><argument_list PREFIX:line="156" PREFIX:column="58">(<argument><expr><name PREFIX:line="156" PREFIX:column="59">status</name></expr></argument>, <argument><expr PREFIX:line="156" PREFIX:column="67">","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while PREFIX:line="157" PREFIX:column="5">while <condition PREFIX:line="157" PREFIX:column="11">(<expr><call><name><name PREFIX:line="157" PREFIX:column="12">statusTokenizer</name>.<name PREFIX:line="157" PREFIX:column="28">hasMoreTokens</name></name> <argument_list PREFIX:line="157" PREFIX:column="42">()</argument_list></call></expr>)</condition> <block PREFIX:line="157" PREFIX:column="46">{
      <decl_stmt><decl><type><name PREFIX:line="158" PREFIX:column="7">String</name></type> <name PREFIX:line="158" PREFIX:column="14">statusToken</name> <init PREFIX:line="158" PREFIX:column="26">= <expr><call><name><name PREFIX:line="158" PREFIX:column="28">statusTokenizer</name>.<name PREFIX:line="158" PREFIX:column="44">nextToken</name></name><argument_list PREFIX:line="158" PREFIX:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if PREFIX:line="159" PREFIX:column="7">if <condition PREFIX:line="159" PREFIX:column="10">(<expr PREFIX:line="159" PREFIX:column="11">"s".<call><name PREFIX:line="159" PREFIX:column="15">equals</name><argument_list PREFIX:line="159" PREFIX:column="21">(<argument><expr><name PREFIX:line="159" PREFIX:column="22">statusToken</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="159" PREFIX:column="35"> <block PREFIX:line="159" PREFIX:column="36">{
        <expr_stmt><expr><call><name><name PREFIX:line="160" PREFIX:column="9">runToggle</name>.<name PREFIX:line="160" PREFIX:column="19">setValue</name></name><argument_list PREFIX:line="160" PREFIX:column="27">(<argument><expr PREFIX:line="160" PREFIX:column="28">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="162" PREFIX:column="7">else <if PREFIX:line="162" PREFIX:column="12">if <condition PREFIX:line="162" PREFIX:column="15">(<expr PREFIX:line="162" PREFIX:column="16">"r".<call><name PREFIX:line="162" PREFIX:column="20">equals</name><argument_list PREFIX:line="162" PREFIX:column="26">(<argument><expr><name PREFIX:line="162" PREFIX:column="27">statusToken</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="162" PREFIX:column="40"> <block PREFIX:line="162" PREFIX:column="41">{
        <expr_stmt><expr><call><name><name PREFIX:line="163" PREFIX:column="9">runToggle</name>.<name PREFIX:line="163" PREFIX:column="19">setValue</name></name><argument_list PREFIX:line="163" PREFIX:column="27">(<argument><expr PREFIX:line="163" PREFIX:column="28">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="165" PREFIX:column="7">else <if PREFIX:line="165" PREFIX:column="12">if <condition PREFIX:line="165" PREFIX:column="15">(<expr><call><name><name PREFIX:line="165" PREFIX:column="16">statusToken</name>.<name PREFIX:line="165" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="165" PREFIX:column="38">(<argument><expr PREFIX:line="165" PREFIX:column="39">"e"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="165" PREFIX:column="44"> <block PREFIX:line="165" PREFIX:column="45">{
        <decl_stmt><decl><type><name PREFIX:line="166" PREFIX:column="9">int</name></type> <name PREFIX:line="166" PREFIX:column="13">enabled</name> <init PREFIX:line="166" PREFIX:column="21">= <expr><call><name PREFIX:line="166" PREFIX:column="23">getValueOfToken</name><argument_list PREFIX:line="166" PREFIX:column="38">(<argument><expr><name PREFIX:line="166" PREFIX:column="39">statusToken</name></expr></argument>, <argument><expr PREFIX:line="166" PREFIX:column="52">1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if PREFIX:line="167" PREFIX:column="9">if <condition PREFIX:line="167" PREFIX:column="12">(<expr><name PREFIX:line="167" PREFIX:column="13">enabled</name>!=0</expr>)</condition><then PREFIX:line="167" PREFIX:column="24"> <block PREFIX:line="167" PREFIX:column="25">{
          <expr_stmt><expr><call><name><name PREFIX:line="168" PREFIX:column="11">enabledToggle</name>.<name PREFIX:line="168" PREFIX:column="25">setValue</name></name><argument_list PREFIX:line="168" PREFIX:column="33">(<argument><expr PREFIX:line="168" PREFIX:column="34">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else PREFIX:line="170" PREFIX:column="9">else <block PREFIX:line="170" PREFIX:column="14">{
          <expr_stmt><expr><call><name><name PREFIX:line="171" PREFIX:column="11">enabledToggle</name>.<name PREFIX:line="171" PREFIX:column="25">setValue</name></name><argument_list PREFIX:line="171" PREFIX:column="33">(<argument><expr PREFIX:line="171" PREFIX:column="34">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then>
      <else PREFIX:line="174" PREFIX:column="7">else <if PREFIX:line="174" PREFIX:column="12">if <condition PREFIX:line="174" PREFIX:column="15">(<expr><call><name><name PREFIX:line="174" PREFIX:column="16">statusToken</name>.<name PREFIX:line="174" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="174" PREFIX:column="38">(<argument><expr PREFIX:line="174" PREFIX:column="39">"S"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="174" PREFIX:column="44"> <block PREFIX:line="174" PREFIX:column="45">{
        <expr_stmt><expr><call><name><name PREFIX:line="175" PREFIX:column="9">speedSlider</name>.<name PREFIX:line="175" PREFIX:column="21">setValue</name></name><argument_list PREFIX:line="175" PREFIX:column="29">(<argument><expr><call><name PREFIX:line="175" PREFIX:column="30">getValueOfToken</name><argument_list PREFIX:line="175" PREFIX:column="45">(<argument><expr><name PREFIX:line="175" PREFIX:column="46">statusToken</name></expr></argument>, <argument><expr PREFIX:line="175" PREFIX:column="59">1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="177" PREFIX:column="7">else <if PREFIX:line="177" PREFIX:column="12">if <condition PREFIX:line="177" PREFIX:column="15">(<expr><call><name><name PREFIX:line="177" PREFIX:column="16">statusToken</name>.<name PREFIX:line="177" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="177" PREFIX:column="38">(<argument><expr PREFIX:line="177" PREFIX:column="39">"m"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="177" PREFIX:column="44"> <block PREFIX:line="177" PREFIX:column="45">{
        <expr_stmt><expr><call><name><name PREFIX:line="178" PREFIX:column="9">microsteppingButtons</name>.<name PREFIX:line="178" PREFIX:column="30">activate</name></name><argument_list PREFIX:line="178" PREFIX:column="38">(<argument><expr PREFIX:line="178" PREFIX:column="39">"m_1/"+<call><name><name PREFIX:line="178" PREFIX:column="46">String</name>.<name PREFIX:line="178" PREFIX:column="53">valueOf</name></name><argument_list PREFIX:line="178" PREFIX:column="60">(<argument><expr><call><name PREFIX:line="178" PREFIX:column="61">getValueOfToken</name><argument_list PREFIX:line="178" PREFIX:column="76">(<argument><expr><name PREFIX:line="178" PREFIX:column="77">statusToken</name></expr></argument>, <argument><expr PREFIX:line="178" PREFIX:column="90">1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="180" PREFIX:column="7">else <if PREFIX:line="180" PREFIX:column="12">if <condition PREFIX:line="180" PREFIX:column="15">(<expr><call><name><name PREFIX:line="180" PREFIX:column="16">statusToken</name>.<name PREFIX:line="180" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="180" PREFIX:column="38">(<argument><expr PREFIX:line="180" PREFIX:column="39">"sg"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="180" PREFIX:column="45"> <block PREFIX:line="180" PREFIX:column="46">{
        <expr_stmt><expr><call><name PREFIX:line="181" PREFIX:column="9">addStallGuardReading</name><argument_list PREFIX:line="181" PREFIX:column="29">(<argument><expr><call><name PREFIX:line="181" PREFIX:column="30">getValueOfToken</name><argument_list PREFIX:line="181" PREFIX:column="45">(<argument><expr><name PREFIX:line="181" PREFIX:column="46">statusToken</name></expr></argument>, <argument><expr PREFIX:line="181" PREFIX:column="59">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="183" PREFIX:column="7">else <if PREFIX:line="183" PREFIX:column="12">if <condition PREFIX:line="183" PREFIX:column="15">(<expr><call><name><name PREFIX:line="183" PREFIX:column="16">statusToken</name>.<name PREFIX:line="183" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="183" PREFIX:column="38">(<argument><expr PREFIX:line="183" PREFIX:column="39">"p"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="183" PREFIX:column="44"> <block PREFIX:line="183" PREFIX:column="45">{
        <expr_stmt><expr><call><name PREFIX:line="184" PREFIX:column="9">addPositionReading</name><argument_list PREFIX:line="184" PREFIX:column="27">(<argument><expr><call><name PREFIX:line="184" PREFIX:column="28">getValueOfToken</name><argument_list PREFIX:line="184" PREFIX:column="43">(<argument><expr><name PREFIX:line="184" PREFIX:column="44">statusToken</name></expr></argument>, <argument><expr PREFIX:line="184" PREFIX:column="57">1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="186" PREFIX:column="7">else <if PREFIX:line="186" PREFIX:column="12">if <condition PREFIX:line="186" PREFIX:column="15">(<expr><call><name><name PREFIX:line="186" PREFIX:column="16">statusToken</name>.<name PREFIX:line="186" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="186" PREFIX:column="38">(<argument><expr PREFIX:line="186" PREFIX:column="39">"k"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="186" PREFIX:column="44"> <block PREFIX:line="186" PREFIX:column="45">{
        <expr_stmt><expr><call><name PREFIX:line="187" PREFIX:column="9">addCurrentReading</name><argument_list PREFIX:line="187" PREFIX:column="26">(<argument><expr><call><name PREFIX:line="187" PREFIX:column="27">getValueOfToken</name><argument_list PREFIX:line="187" PREFIX:column="42">(<argument><expr><name PREFIX:line="187" PREFIX:column="43">statusToken</name></expr></argument>, <argument><expr PREFIX:line="187" PREFIX:column="56">1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="189" PREFIX:column="7">else <if PREFIX:line="189" PREFIX:column="12">if <condition PREFIX:line="189" PREFIX:column="15">(<expr><call><name><name PREFIX:line="189" PREFIX:column="16">statusToken</name>.<name PREFIX:line="189" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="189" PREFIX:column="38">(<argument><expr PREFIX:line="189" PREFIX:column="39">"t"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="189" PREFIX:column="44"> <block PREFIX:line="189" PREFIX:column="45">{
        <expr_stmt><expr><call><name><name PREFIX:line="190" PREFIX:column="9">sgtSlider</name>.<name PREFIX:line="190" PREFIX:column="19">setValue</name></name><argument_list PREFIX:line="190" PREFIX:column="27">(<argument><expr><call><name PREFIX:line="190" PREFIX:column="28">getValueOfToken</name><argument_list PREFIX:line="190" PREFIX:column="43">(<argument><expr><name PREFIX:line="190" PREFIX:column="44">statusToken</name></expr></argument>, <argument><expr PREFIX:line="190" PREFIX:column="57">1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="192" PREFIX:column="7">else <if PREFIX:line="192" PREFIX:column="12">if <condition PREFIX:line="192" PREFIX:column="15">(<expr><call><name><name PREFIX:line="192" PREFIX:column="16">statusToken</name>.<name PREFIX:line="192" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="192" PREFIX:column="38">(<argument><expr PREFIX:line="192" PREFIX:column="39">"f"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="192" PREFIX:column="44"> <block PREFIX:line="192" PREFIX:column="45">{
        <expr_stmt><expr><call><name><name PREFIX:line="193" PREFIX:column="9">sgFilterToggle</name>.<name PREFIX:line="193" PREFIX:column="24">setValue</name></name><argument_list PREFIX:line="193" PREFIX:column="32">(<argument><expr><call><name PREFIX:line="193" PREFIX:column="33">getValueOfToken</name><argument_list PREFIX:line="193" PREFIX:column="48">(<argument><expr><name PREFIX:line="193" PREFIX:column="49">statusToken</name></expr></argument>, <argument><expr PREFIX:line="193" PREFIX:column="62">1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="195" PREFIX:column="7">else <if PREFIX:line="195" PREFIX:column="12">if <condition PREFIX:line="195" PREFIX:column="15">(<expr><call><name><name PREFIX:line="195" PREFIX:column="16">statusToken</name>.<name PREFIX:line="195" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="195" PREFIX:column="38">(<argument><expr PREFIX:line="195" PREFIX:column="39">"d"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="195" PREFIX:column="44"> <block PREFIX:line="195" PREFIX:column="45">{
        <expr_stmt><expr><call><name PREFIX:line="196" PREFIX:column="9">setDirection</name><argument_list PREFIX:line="196" PREFIX:column="21">(<argument><expr><call><name PREFIX:line="196" PREFIX:column="22">getValueOfToken</name><argument_list PREFIX:line="196" PREFIX:column="37">(<argument><expr><name PREFIX:line="196" PREFIX:column="38">statusToken</name></expr></argument>, <argument><expr PREFIX:line="196" PREFIX:column="51">1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="198" PREFIX:column="7">else <if PREFIX:line="198" PREFIX:column="12">if <condition PREFIX:line="198" PREFIX:column="15">(<expr><call><name><name PREFIX:line="198" PREFIX:column="16">statusToken</name>.<name PREFIX:line="198" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="198" PREFIX:column="38">(<argument><expr PREFIX:line="198" PREFIX:column="39">"c"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="198" PREFIX:column="44"> <block PREFIX:line="198" PREFIX:column="45">{
        <expr_stmt><expr><call><name PREFIX:line="199" PREFIX:column="9">setCurrent</name><argument_list PREFIX:line="199" PREFIX:column="19">(<argument><expr><call><name PREFIX:line="199" PREFIX:column="20">getValueOfToken</name><argument_list PREFIX:line="199" PREFIX:column="35">(<argument><expr><name PREFIX:line="199" PREFIX:column="36">statusToken</name></expr></argument>, <argument><expr PREFIX:line="199" PREFIX:column="49">1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="201" PREFIX:column="7">else <if PREFIX:line="201" PREFIX:column="12">if <condition PREFIX:line="201" PREFIX:column="15">(<expr><call><name><name PREFIX:line="201" PREFIX:column="16">statusToken</name>.<name PREFIX:line="201" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="201" PREFIX:column="38">(<argument><expr PREFIX:line="201" PREFIX:column="39">"a"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="201" PREFIX:column="44"> <block PREFIX:line="201" PREFIX:column="45">{
        <if PREFIX:line="202" PREFIX:column="9">if <condition PREFIX:line="202" PREFIX:column="12">(<expr><call><name><name PREFIX:line="202" PREFIX:column="13">statusToken</name>.<name PREFIX:line="202" PREFIX:column="25">charAt</name></name><argument_list PREFIX:line="202" PREFIX:column="31">(<argument><expr PREFIX:line="202" PREFIX:column="32">1</expr></argument>)</argument_list></call>=='o'</expr>)</condition><then PREFIX:line="202" PREFIX:column="40"> <block PREFIX:line="202" PREFIX:column="41">{
          <expr_stmt><expr><name PREFIX:line="203" PREFIX:column="11">channelAStatus</name>="Open Load"</expr>;</expr_stmt>
        }</block></then> 
        <else PREFIX:line="205" PREFIX:column="9">else <if PREFIX:line="205" PREFIX:column="14">if <condition PREFIX:line="205" PREFIX:column="17">(<expr><call><name><name PREFIX:line="205" PREFIX:column="18">statusToken</name>.<name PREFIX:line="205" PREFIX:column="30">charAt</name></name><argument_list PREFIX:line="205" PREFIX:column="36">(<argument><expr PREFIX:line="205" PREFIX:column="37">1</expr></argument>)</argument_list></call>=='g'</expr>)</condition><then PREFIX:line="205" PREFIX:column="45"> <block PREFIX:line="205" PREFIX:column="46">{
          <expr_stmt><expr><name PREFIX:line="206" PREFIX:column="11">channelAStatus</name>="Short to Ground!"</expr>;</expr_stmt>
        }</block></then> 
        <else PREFIX:line="208" PREFIX:column="9">else <block PREFIX:line="208" PREFIX:column="14">{
          <expr_stmt><expr><name PREFIX:line="209" PREFIX:column="11">channelAStatus</name>=<name PREFIX:line="209" PREFIX:column="26">null</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
      }</block></then> 
      <else PREFIX:line="212" PREFIX:column="7">else <if PREFIX:line="212" PREFIX:column="12">if <condition PREFIX:line="212" PREFIX:column="15">(<expr><call><name><name PREFIX:line="212" PREFIX:column="16">statusToken</name>.<name PREFIX:line="212" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="212" PREFIX:column="38">(<argument><expr PREFIX:line="212" PREFIX:column="39">"b"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="212" PREFIX:column="44"> <block PREFIX:line="212" PREFIX:column="45">{
        <if PREFIX:line="213" PREFIX:column="9">if <condition PREFIX:line="213" PREFIX:column="12">(<expr><call><name><name PREFIX:line="213" PREFIX:column="13">statusToken</name>.<name PREFIX:line="213" PREFIX:column="25">charAt</name></name><argument_list PREFIX:line="213" PREFIX:column="31">(<argument><expr PREFIX:line="213" PREFIX:column="32">1</expr></argument>)</argument_list></call>=='o'</expr>)</condition><then PREFIX:line="213" PREFIX:column="40"> <block PREFIX:line="213" PREFIX:column="41">{
          <expr_stmt><expr><name PREFIX:line="214" PREFIX:column="11">channelBStatus</name>="Open Load"</expr>;</expr_stmt>
        }</block></then> 
        <else PREFIX:line="216" PREFIX:column="9">else <if PREFIX:line="216" PREFIX:column="14">if <condition PREFIX:line="216" PREFIX:column="17">(<expr><call><name><name PREFIX:line="216" PREFIX:column="18">statusToken</name>.<name PREFIX:line="216" PREFIX:column="30">charAt</name></name><argument_list PREFIX:line="216" PREFIX:column="36">(<argument><expr PREFIX:line="216" PREFIX:column="37">1</expr></argument>)</argument_list></call>=='g'</expr>)</condition><then PREFIX:line="216" PREFIX:column="45"> <block PREFIX:line="216" PREFIX:column="46">{
          <expr_stmt><expr><name PREFIX:line="217" PREFIX:column="11">channelBStatus</name>="Short to Ground!"</expr>;</expr_stmt>
        }</block></then> 
        <else PREFIX:line="219" PREFIX:column="9">else <block PREFIX:line="219" PREFIX:column="14">{
          <expr_stmt><expr><name PREFIX:line="220" PREFIX:column="11">channelBStatus</name>=<name PREFIX:line="220" PREFIX:column="26">null</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
      }</block></then> 
      <else PREFIX:line="223" PREFIX:column="7">else <if PREFIX:line="223" PREFIX:column="12">if <condition PREFIX:line="223" PREFIX:column="15">(<expr><call><name><name PREFIX:line="223" PREFIX:column="16">statusToken</name>.<name PREFIX:line="223" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="223" PREFIX:column="38">(<argument><expr PREFIX:line="223" PREFIX:column="39">"x"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="223" PREFIX:column="44"> <block PREFIX:line="223" PREFIX:column="45">{
        <if PREFIX:line="224" PREFIX:column="9">if <condition PREFIX:line="224" PREFIX:column="12">(<expr><call><name><name PREFIX:line="224" PREFIX:column="13">statusToken</name>.<name PREFIX:line="224" PREFIX:column="25">charAt</name></name><argument_list PREFIX:line="224" PREFIX:column="31">(<argument><expr PREFIX:line="224" PREFIX:column="32">1</expr></argument>)</argument_list></call>=='w'</expr>)</condition><then PREFIX:line="224" PREFIX:column="40"> <block PREFIX:line="224" PREFIX:column="41">{
          <expr_stmt><expr><name PREFIX:line="225" PREFIX:column="11">temperatureStatus</name>="Prewarning!"</expr>;</expr_stmt>
        }</block></then> 
        <else PREFIX:line="227" PREFIX:column="9">else <if PREFIX:line="227" PREFIX:column="14">if <condition PREFIX:line="227" PREFIX:column="17">(<expr><call><name><name PREFIX:line="227" PREFIX:column="18">statusToken</name>.<name PREFIX:line="227" PREFIX:column="30">charAt</name></name><argument_list PREFIX:line="227" PREFIX:column="36">(<argument><expr PREFIX:line="227" PREFIX:column="37">1</expr></argument>)</argument_list></call>=='e'</expr>)</condition><then PREFIX:line="227" PREFIX:column="45"> <block PREFIX:line="227" PREFIX:column="46">{
          <expr_stmt><expr><name PREFIX:line="228" PREFIX:column="11">temperatureStatus</name>="Error"</expr>;</expr_stmt>
        }</block></then> 
        <else PREFIX:line="230" PREFIX:column="9">else <block PREFIX:line="230" PREFIX:column="14">{
          <expr_stmt><expr><name PREFIX:line="231" PREFIX:column="11">temperatureStatus</name>=<name PREFIX:line="231" PREFIX:column="29">null</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
      }</block></then>
      <else PREFIX:line="234" PREFIX:column="7">else <if PREFIX:line="234" PREFIX:column="12">if <condition PREFIX:line="234" PREFIX:column="15">(<expr><call><name><name PREFIX:line="234" PREFIX:column="16">statusToken</name>.<name PREFIX:line="234" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="234" PREFIX:column="38">(<argument><expr PREFIX:line="234" PREFIX:column="39">"Cm"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="234" PREFIX:column="45"> <block PREFIX:line="234" PREFIX:column="46">{
        <comment type="line" PREFIX:line="235" PREFIX:column="9">//chopper mode is currently ignored</comment>
      }</block></then> 
      <else PREFIX:line="237" PREFIX:column="7">else <if PREFIX:line="237" PREFIX:column="12">if <condition PREFIX:line="237" PREFIX:column="15">(<expr><call><name><name PREFIX:line="237" PREFIX:column="16">statusToken</name>.<name PREFIX:line="237" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="237" PREFIX:column="38">(<argument><expr PREFIX:line="237" PREFIX:column="39">"Co"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="237" PREFIX:column="45"> <block PREFIX:line="237" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="238" PREFIX:column="9">antOffSlider</name>.<name PREFIX:line="238" PREFIX:column="22">setValue</name></name><argument_list PREFIX:line="238" PREFIX:column="30">(<argument><expr><call><name PREFIX:line="238" PREFIX:column="31">getValueOfToken</name><argument_list PREFIX:line="238" PREFIX:column="46">(<argument><expr><name PREFIX:line="238" PREFIX:column="47">statusToken</name></expr></argument>, <argument><expr PREFIX:line="238" PREFIX:column="60">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>  
      <else PREFIX:line="240" PREFIX:column="7">else <if PREFIX:line="240" PREFIX:column="12">if <condition PREFIX:line="240" PREFIX:column="15">(<expr><call><name><name PREFIX:line="240" PREFIX:column="16">statusToken</name>.<name PREFIX:line="240" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="240" PREFIX:column="38">(<argument><expr PREFIX:line="240" PREFIX:column="39">"Cb"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="240" PREFIX:column="45"> <block PREFIX:line="240" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="241" PREFIX:column="9">blankTimeSlider</name>.<name PREFIX:line="241" PREFIX:column="25">setValue</name></name><argument_list PREFIX:line="241" PREFIX:column="33">(<argument><expr><call><name PREFIX:line="241" PREFIX:column="34">getValueOfToken</name><argument_list PREFIX:line="241" PREFIX:column="49">(<argument><expr><name PREFIX:line="241" PREFIX:column="50">statusToken</name></expr></argument>, <argument><expr PREFIX:line="241" PREFIX:column="63">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="243" PREFIX:column="7">else <if PREFIX:line="243" PREFIX:column="12">if <condition PREFIX:line="243" PREFIX:column="15">(<expr><call><name><name PREFIX:line="243" PREFIX:column="16">statusToken</name>.<name PREFIX:line="243" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="243" PREFIX:column="38">(<argument><expr PREFIX:line="243" PREFIX:column="39">"Cs"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="243" PREFIX:column="45"> <block PREFIX:line="243" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="244" PREFIX:column="9">hysteresisStartSlider</name>.<name PREFIX:line="244" PREFIX:column="31">setValue</name></name><argument_list PREFIX:line="244" PREFIX:column="39">(<argument><expr><call><name PREFIX:line="244" PREFIX:column="40">getValueOfToken</name><argument_list PREFIX:line="244" PREFIX:column="55">(<argument><expr><name PREFIX:line="244" PREFIX:column="56">statusToken</name></expr></argument>, <argument><expr PREFIX:line="244" PREFIX:column="69">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="246" PREFIX:column="7">else <if PREFIX:line="246" PREFIX:column="12">if <condition PREFIX:line="246" PREFIX:column="15">(<expr><call><name><name PREFIX:line="246" PREFIX:column="16">statusToken</name>.<name PREFIX:line="246" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="246" PREFIX:column="38">(<argument><expr PREFIX:line="246" PREFIX:column="39">"Ce"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="246" PREFIX:column="45"> <block PREFIX:line="246" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="247" PREFIX:column="9">hysteresisEndSlider</name>.<name PREFIX:line="247" PREFIX:column="29">setValue</name></name><argument_list PREFIX:line="247" PREFIX:column="37">(<argument><expr><call><name PREFIX:line="247" PREFIX:column="38">getValueOfToken</name><argument_list PREFIX:line="247" PREFIX:column="53">(<argument><expr><name PREFIX:line="247" PREFIX:column="54">statusToken</name></expr></argument>, <argument><expr PREFIX:line="247" PREFIX:column="67">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="249" PREFIX:column="7">else <if PREFIX:line="249" PREFIX:column="12">if <condition PREFIX:line="249" PREFIX:column="15">(<expr><call><name><name PREFIX:line="249" PREFIX:column="16">statusToken</name>.<name PREFIX:line="249" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="249" PREFIX:column="38">(<argument><expr PREFIX:line="249" PREFIX:column="39">"Cd"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="249" PREFIX:column="45"> <block PREFIX:line="249" PREFIX:column="46">{
        <expr_stmt><expr><call><name PREFIX:line="250" PREFIX:column="9">setHystDecrement</name><argument_list PREFIX:line="250" PREFIX:column="25">(<argument><expr><call><name PREFIX:line="250" PREFIX:column="26">getValueOfToken</name><argument_list PREFIX:line="250" PREFIX:column="41">(<argument><expr><name PREFIX:line="250" PREFIX:column="42">statusToken</name></expr></argument>, <argument><expr PREFIX:line="250" PREFIX:column="55">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="252" PREFIX:column="7">else <if PREFIX:line="252" PREFIX:column="12">if <condition PREFIX:line="252" PREFIX:column="15">(<expr PREFIX:line="252" PREFIX:column="16">"Ke+".<call><name PREFIX:line="252" PREFIX:column="22">equals</name><argument_list PREFIX:line="252" PREFIX:column="28">(<argument><expr><name PREFIX:line="252" PREFIX:column="29">statusToken</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="252" PREFIX:column="42"> <block PREFIX:line="252" PREFIX:column="43">{
        <expr_stmt><expr><call><name><name PREFIX:line="253" PREFIX:column="9">coolStepActiveToggle</name>.<name PREFIX:line="253" PREFIX:column="30">setValue</name></name><argument_list PREFIX:line="253" PREFIX:column="38">(<argument><expr PREFIX:line="253" PREFIX:column="39">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="255" PREFIX:column="7">else <if PREFIX:line="255" PREFIX:column="12">if <condition PREFIX:line="255" PREFIX:column="15">(<expr PREFIX:line="255" PREFIX:column="16">"Ke-".<call><name PREFIX:line="255" PREFIX:column="22">equals</name><argument_list PREFIX:line="255" PREFIX:column="28">(<argument><expr><name PREFIX:line="255" PREFIX:column="29">statusToken</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="255" PREFIX:column="42"> <block PREFIX:line="255" PREFIX:column="43">{
        <expr_stmt><expr><call><name><name PREFIX:line="256" PREFIX:column="9">coolStepActiveToggle</name>.<name PREFIX:line="256" PREFIX:column="30">setValue</name></name><argument_list PREFIX:line="256" PREFIX:column="38">(<argument><expr PREFIX:line="256" PREFIX:column="39">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="258" PREFIX:column="7">else <if PREFIX:line="258" PREFIX:column="12">if <condition PREFIX:line="258" PREFIX:column="15">(<expr><call><name><name PREFIX:line="258" PREFIX:column="16">statusToken</name>.<name PREFIX:line="258" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="258" PREFIX:column="38">(<argument><expr PREFIX:line="258" PREFIX:column="39">"Kl"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="258" PREFIX:column="45"> <block PREFIX:line="258" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="259" PREFIX:column="9">coolStepMinSlider</name>.<name PREFIX:line="259" PREFIX:column="27">setValue</name></name><argument_list PREFIX:line="259" PREFIX:column="35">(<argument><expr><call><name PREFIX:line="259" PREFIX:column="36">getValueOfToken</name><argument_list PREFIX:line="259" PREFIX:column="51">(<argument><expr><name PREFIX:line="259" PREFIX:column="52">statusToken</name></expr></argument>, <argument><expr PREFIX:line="259" PREFIX:column="65">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="261" PREFIX:column="7">else <if PREFIX:line="261" PREFIX:column="12">if <condition PREFIX:line="261" PREFIX:column="15">(<expr><call><name><name PREFIX:line="261" PREFIX:column="16">statusToken</name>.<name PREFIX:line="261" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="261" PREFIX:column="38">(<argument><expr PREFIX:line="261" PREFIX:column="39">"Ku"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="261" PREFIX:column="45"> <block PREFIX:line="261" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="262" PREFIX:column="9">coolStepMaxSlider</name>.<name PREFIX:line="262" PREFIX:column="27">setValue</name></name><argument_list PREFIX:line="262" PREFIX:column="35">(<argument><expr><call><name PREFIX:line="262" PREFIX:column="36">getValueOfToken</name><argument_list PREFIX:line="262" PREFIX:column="51">(<argument><expr><name PREFIX:line="262" PREFIX:column="52">statusToken</name></expr></argument>, <argument><expr PREFIX:line="262" PREFIX:column="65">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="264" PREFIX:column="7">else <if PREFIX:line="264" PREFIX:column="12">if <condition PREFIX:line="264" PREFIX:column="15">(<expr><call><name><name PREFIX:line="264" PREFIX:column="16">statusToken</name>.<name PREFIX:line="264" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="264" PREFIX:column="38">(<argument><expr PREFIX:line="264" PREFIX:column="39">"Kn"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="264" PREFIX:column="45"> <block PREFIX:line="264" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="265" PREFIX:column="9">coolStepDecrementButtons</name>.<name PREFIX:line="265" PREFIX:column="34">activate</name></name><argument_list PREFIX:line="265" PREFIX:column="42">(<argument><expr><call><name PREFIX:line="265" PREFIX:column="43">getValueOfToken</name><argument_list PREFIX:line="265" PREFIX:column="58">(<argument><expr><name PREFIX:line="265" PREFIX:column="59">statusToken</name></expr></argument>, <argument><expr PREFIX:line="265" PREFIX:column="72">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else PREFIX:line="267" PREFIX:column="7">else <if PREFIX:line="267" PREFIX:column="12">if <condition PREFIX:line="267" PREFIX:column="15">(<expr><call><name><name PREFIX:line="267" PREFIX:column="16">statusToken</name>.<name PREFIX:line="267" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="267" PREFIX:column="38">(<argument><expr PREFIX:line="267" PREFIX:column="39">"Ki"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="267" PREFIX:column="45"> <block PREFIX:line="267" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="268" PREFIX:column="9">coolStepIncrementButtons</name>.<name PREFIX:line="268" PREFIX:column="34">activate</name></name><argument_list PREFIX:line="268" PREFIX:column="42">(<argument><expr><call><name PREFIX:line="268" PREFIX:column="43">getValueOfToken</name><argument_list PREFIX:line="268" PREFIX:column="58">(<argument><expr><name PREFIX:line="268" PREFIX:column="59">statusToken</name></expr></argument>, <argument><expr PREFIX:line="268" PREFIX:column="72">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="270" PREFIX:column="7">else <if PREFIX:line="270" PREFIX:column="12">if <condition PREFIX:line="270" PREFIX:column="15">(<expr><call><name><name PREFIX:line="270" PREFIX:column="16">statusToken</name>.<name PREFIX:line="270" PREFIX:column="28">startsWith</name></name><argument_list PREFIX:line="270" PREFIX:column="38">(<argument><expr PREFIX:line="270" PREFIX:column="39">"Km"</expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="270" PREFIX:column="45"> <block PREFIX:line="270" PREFIX:column="46">{
        <expr_stmt><expr><call><name><name PREFIX:line="271" PREFIX:column="9">coolStepMinButtons</name>.<name PREFIX:line="271" PREFIX:column="28">activate</name></name><argument_list PREFIX:line="271" PREFIX:column="36">(<argument><expr><call><name PREFIX:line="271" PREFIX:column="37">getValueOfToken</name><argument_list PREFIX:line="271" PREFIX:column="52">(<argument><expr><name PREFIX:line="271" PREFIX:column="53">statusToken</name></expr></argument>, <argument><expr PREFIX:line="271" PREFIX:column="66">2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></while>
  }</block></then>
  <else PREFIX:line="275" PREFIX:column="3">else <block PREFIX:line="275" PREFIX:column="8">{
    <expr_stmt><expr><call><name PREFIX:line="276" PREFIX:column="5">println</name><argument_list PREFIX:line="276" PREFIX:column="12">(<argument><expr><name PREFIX:line="276" PREFIX:column="13">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><name PREFIX:line="278" PREFIX:column="3">settingStatus</name>=false</expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="281" PREFIX:column="1">int</name></type> <name PREFIX:line="281" PREFIX:column="5">getValueOfToken</name><parameter_list PREFIX:line="281" PREFIX:column="20">(<param><decl><type><name PREFIX:line="281" PREFIX:column="21">String</name></type> <name PREFIX:line="281" PREFIX:column="28">token</name></decl></param>, <param><decl><type><name PREFIX:line="281" PREFIX:column="35">int</name></type> <name PREFIX:line="281" PREFIX:column="39">position</name></decl></param>)</parameter_list> <block PREFIX:line="281" PREFIX:column="49">{
  <decl_stmt><decl><type><name PREFIX:line="282" PREFIX:column="3">String</name></type> <name PREFIX:line="282" PREFIX:column="10">value</name> <init PREFIX:line="282" PREFIX:column="16">= <expr><call><name><name PREFIX:line="282" PREFIX:column="18">token</name>.<name PREFIX:line="282" PREFIX:column="24">substring</name></name><argument_list PREFIX:line="282" PREFIX:column="33">(<argument><expr><name PREFIX:line="282" PREFIX:column="34">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <try PREFIX:line="283" PREFIX:column="3">try <block PREFIX:line="283" PREFIX:column="7">{
    <return PREFIX:line="284" PREFIX:column="5">return <expr><call><name><name PREFIX:line="284" PREFIX:column="12">Integer</name>.<name PREFIX:line="284" PREFIX:column="20">valueOf</name></name><argument_list PREFIX:line="284" PREFIX:column="27">(<argument><expr><name PREFIX:line="284" PREFIX:column="28">value</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block> 
  <catch PREFIX:line="286" PREFIX:column="3">catch <parameter_list PREFIX:line="286" PREFIX:column="9">(<param><decl><type><name PREFIX:line="286" PREFIX:column="10">NumberFormatException</name></type> <name PREFIX:line="286" PREFIX:column="32">e</name></decl></param>)</parameter_list> <block PREFIX:line="286" PREFIX:column="35">{
    <expr_stmt><expr><call><name PREFIX:line="287" PREFIX:column="5">println</name><argument_list PREFIX:line="287" PREFIX:column="12">(<argument><expr PREFIX:line="287" PREFIX:column="13">"Unable to decode '"+<name PREFIX:line="287" PREFIX:column="34">value</name>+"'of '"+<name PREFIX:line="287" PREFIX:column="48">token</name>+"' !"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return PREFIX:line="288" PREFIX:column="5">return <expr PREFIX:line="288" PREFIX:column="12">0</expr>;</return>
  }</block></catch></try>
}</block></function>

<function><type><name PREFIX:line="292" PREFIX:column="1">void</name></type> <name PREFIX:line="292" PREFIX:column="6">drawSerial</name><parameter_list PREFIX:line="292" PREFIX:column="16">()</parameter_list> <block PREFIX:line="292" PREFIX:column="19">{
  <comment type="line" PREFIX:line="293" PREFIX:column="3">//draw the logo and some epxlaining text while setting up the serial port</comment>
  <if PREFIX:line="294" PREFIX:column="3">if <condition PREFIX:line="294" PREFIX:column="6">(<expr PREFIX:line="294" PREFIX:column="7">!<name PREFIX:line="294" PREFIX:column="8">motor_connected</name></expr>)</condition><then PREFIX:line="294" PREFIX:column="24"> <block PREFIX:line="294" PREFIX:column="25">{
    <expr_stmt><expr><call><name PREFIX:line="295" PREFIX:column="5">image</name><argument_list PREFIX:line="295" PREFIX:column="10">(<argument><expr><name PREFIX:line="295" PREFIX:column="11">TMCLogo</name></expr></argument>,<argument><expr PREFIX:line="295" PREFIX:column="19">200</expr></argument>, <argument><expr PREFIX:line="295" PREFIX:column="24">100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name PREFIX:line="296" PREFIX:column="5">fill</name><argument_list PREFIX:line="296" PREFIX:column="9">(<argument><expr><name PREFIX:line="296" PREFIX:column="10">uiTextColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name PREFIX:line="297" PREFIX:column="5">text</name><argument_list PREFIX:line="297" PREFIX:column="9">(<argument><expr PREFIX:line="297" PREFIX:column="10">"Select the serial port where your Arduino is connected\nIf in doubt check it in the Arduino IDE.\nThe Motor Tester will automatically verify if it can find an Motor tester ath the port."</expr></argument>,<argument><expr PREFIX:line="297" PREFIX:column="198">200</expr></argument>,<argument><expr PREFIX:line="297" PREFIX:column="202">100+<name><name PREFIX:line="297" PREFIX:column="206">TMCLogo</name>.<name PREFIX:line="297" PREFIX:column="214">height</name></name>+50</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="301" PREFIX:column="1">void</name></type> <name PREFIX:line="301" PREFIX:column="6">help</name><parameter_list PREFIX:line="301" PREFIX:column="10">(<param><decl><type><name PREFIX:line="301" PREFIX:column="11">float</name></type> <name PREFIX:line="301" PREFIX:column="17">value</name></decl></param>)</parameter_list> <block PREFIX:line="301" PREFIX:column="24">{
  <if PREFIX:line="302" PREFIX:column="3">if <condition PREFIX:line="302" PREFIX:column="6">(<expr><name PREFIX:line="302" PREFIX:column="7">value</name>!=0</expr>)</condition><then PREFIX:line="302" PREFIX:column="16"> <block PREFIX:line="302" PREFIX:column="17">{
    <expr_stmt><expr><call><name PREFIX:line="303" PREFIX:column="5">link</name><argument_list PREFIX:line="303" PREFIX:column="9">(<argument><expr><name PREFIX:line="303" PREFIX:column="10">helpUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

</unit>
