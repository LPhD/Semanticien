<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/at90usb/HardwareSerial.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  HardwareSerial.cpp - Hardware serial library for Wiring
  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  
  Modified 23 November 2006 by David A. Mellis
  Modified 28 September 2010 by Mark Sproul
*/</comment>

<cpp:include PREFIX:line="23" PREFIX:column="1">#<cpp:directive PREFIX:line="23" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="23" PREFIX:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="24" PREFIX:column="1">#<cpp:directive PREFIX:line="24" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="24" PREFIX:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="25" PREFIX:column="1">#<cpp:directive PREFIX:line="25" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="25" PREFIX:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="26" PREFIX:column="1">#<cpp:directive PREFIX:line="26" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="26" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="10">"Arduino.h"</cpp:file></cpp:include>
<cpp:include PREFIX:line="28" PREFIX:column="1">#<cpp:directive PREFIX:line="28" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="28" PREFIX:column="10">"wiring_private.h"</cpp:file></cpp:include>

<comment type="line" PREFIX:line="30" PREFIX:column="1">// this next line disables the entire HardwareSerial.cpp, </comment>
<comment type="line" PREFIX:line="31" PREFIX:column="1">// this is so I can support Attiny series and any other chip without a uart</comment>
<cpp:if PREFIX:line="32" PREFIX:column="1">#<cpp:directive PREFIX:line="32" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="32" PREFIX:column="5">defined</name><argument_list PREFIX:line="32" PREFIX:column="12">(<argument><expr><name PREFIX:line="32" PREFIX:column="13">UBRRH</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="32" PREFIX:column="23">defined</name><argument_list PREFIX:line="32" PREFIX:column="30">(<argument><expr><name PREFIX:line="32" PREFIX:column="31">UBRR0H</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="32" PREFIX:column="42">defined</name><argument_list PREFIX:line="32" PREFIX:column="49">(<argument><expr><name PREFIX:line="32" PREFIX:column="50">UBRR1H</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="32" PREFIX:column="61">defined</name><argument_list PREFIX:line="32" PREFIX:column="68">(<argument><expr><name PREFIX:line="32" PREFIX:column="69">UBRR2H</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="32" PREFIX:column="80">defined</name><argument_list PREFIX:line="32" PREFIX:column="87">(<argument><expr><name PREFIX:line="32" PREFIX:column="88">UBRR3H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include PREFIX:line="34" PREFIX:column="1">#<cpp:directive PREFIX:line="34" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="34" PREFIX:column="10">"HardwareSerial.h"</cpp:file></cpp:include>

<comment type="line" PREFIX:line="36" PREFIX:column="1">// Define ants and variables for buffering incoming serial data.  We're</comment>
<comment type="line" PREFIX:line="37" PREFIX:column="1">// using a ring buffer (I think), in which head is the index of the location</comment>
<comment type="line" PREFIX:line="38" PREFIX:column="1">// to which to write the next incoming character and tail is the index of the</comment>
<comment type="line" PREFIX:line="39" PREFIX:column="1">// location from which to read.</comment>
<cpp:if PREFIX:line="40" PREFIX:column="1">#<cpp:directive PREFIX:line="40" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="40" PREFIX:column="5">(<name PREFIX:line="40" PREFIX:column="6">RAMEND</name> &lt; 1000)</expr></cpp:if>
  <cpp:define PREFIX:line="41" PREFIX:column="3">#<cpp:directive PREFIX:line="41" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="41" PREFIX:column="11">SERIAL_BUFFER_SIZE</name></cpp:macro> <cpp:value PREFIX:line="41" PREFIX:column="30">16</cpp:value></cpp:define>
<cpp:else PREFIX:line="42" PREFIX:column="1">#<cpp:directive PREFIX:line="42" PREFIX:column="2">else</cpp:directive></cpp:else>
  <cpp:define PREFIX:line="43" PREFIX:column="3">#<cpp:directive PREFIX:line="43" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="43" PREFIX:column="11">SERIAL_BUFFER_SIZE</name></cpp:macro> <cpp:value PREFIX:line="43" PREFIX:column="30">64</cpp:value></cpp:define>
<cpp:endif PREFIX:line="44" PREFIX:column="1">#<cpp:directive PREFIX:line="44" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<struct PREFIX:line="46" PREFIX:column="1">struct <name PREFIX:line="46" PREFIX:column="8">ring_buffer</name>
<block PREFIX:line="47" PREFIX:column="1">{<public type="default" PREFIX:line="47" PREFIX:column="2">
  <decl_stmt><decl><type><name PREFIX:line="48" PREFIX:column="3">unknowntype</name> <name PREFIX:line="48" PREFIX:column="15">char</name></type> <name><name PREFIX:line="48" PREFIX:column="20">buffer</name><index PREFIX:line="48" PREFIX:column="26">[<expr><name PREFIX:line="48" PREFIX:column="27">SERIAL_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier PREFIX:line="49" PREFIX:column="3">volatile</specifier> <name PREFIX:line="49" PREFIX:column="12">unknowntype</name> <name PREFIX:line="49" PREFIX:column="24">int</name></type> <name PREFIX:line="49" PREFIX:column="28">head</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier PREFIX:line="50" PREFIX:column="3">volatile</specifier> <name PREFIX:line="50" PREFIX:column="12">unknowntype</name> <name PREFIX:line="50" PREFIX:column="24">int</name></type> <name PREFIX:line="50" PREFIX:column="28">tail</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<cpp:if PREFIX:line="53" PREFIX:column="1">#<cpp:directive PREFIX:line="53" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="53" PREFIX:column="5">defined</name><argument_list PREFIX:line="53" PREFIX:column="12">(<argument><expr><name PREFIX:line="53" PREFIX:column="13">USBCON</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="54" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="54" PREFIX:column="15">rx_buffer</name> <init PREFIX:line="54" PREFIX:column="25">= <expr><block PREFIX:line="54" PREFIX:column="27">{ <expr><block PREFIX:line="54" PREFIX:column="29">{ <expr PREFIX:line="54" PREFIX:column="31">0</expr> }</block></expr>, <expr PREFIX:line="54" PREFIX:column="36">0</expr>, <expr PREFIX:line="54" PREFIX:column="39">0</expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="55" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="55" PREFIX:column="15">tx_buffer</name> <init PREFIX:line="55" PREFIX:column="25">= <expr><block PREFIX:line="55" PREFIX:column="27">{ <expr><block PREFIX:line="55" PREFIX:column="29">{ <expr PREFIX:line="55" PREFIX:column="31">0</expr> }</block></expr>, <expr PREFIX:line="55" PREFIX:column="36">0</expr>, <expr PREFIX:line="55" PREFIX:column="39">0</expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif PREFIX:line="56" PREFIX:column="1">#<cpp:directive PREFIX:line="56" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="57" PREFIX:column="1">#<cpp:directive PREFIX:line="57" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="57" PREFIX:column="5">defined</name><argument_list PREFIX:line="57" PREFIX:column="12">(<argument><expr><name PREFIX:line="57" PREFIX:column="13">UBRRH</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="57" PREFIX:column="23">defined</name><argument_list PREFIX:line="57" PREFIX:column="30">(<argument><expr><name PREFIX:line="57" PREFIX:column="31">UBRR0H</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="58" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="58" PREFIX:column="15">rx_buffer</name>  <init PREFIX:line="58" PREFIX:column="26">=  <expr><block PREFIX:line="58" PREFIX:column="29">{ <expr><block PREFIX:line="58" PREFIX:column="31">{ <expr PREFIX:line="58" PREFIX:column="33">0</expr> }</block></expr>, <expr PREFIX:line="58" PREFIX:column="38">0</expr>, <expr PREFIX:line="58" PREFIX:column="41">0</expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="59" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="59" PREFIX:column="15">tx_buffer</name>  <init PREFIX:line="59" PREFIX:column="26">=  <expr><block PREFIX:line="59" PREFIX:column="29">{ <expr><block PREFIX:line="59" PREFIX:column="31">{ <expr PREFIX:line="59" PREFIX:column="33">0</expr> }</block></expr>, <expr PREFIX:line="59" PREFIX:column="38">0</expr>, <expr PREFIX:line="59" PREFIX:column="41">0</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif PREFIX:line="60" PREFIX:column="1">#<cpp:directive PREFIX:line="60" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="61" PREFIX:column="1">#<cpp:directive PREFIX:line="61" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="61" PREFIX:column="5">defined</name><argument_list PREFIX:line="61" PREFIX:column="12">(<argument><expr><name PREFIX:line="61" PREFIX:column="13">UBRR1H</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="62" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="62" PREFIX:column="15">rx_buffer1</name>  <init PREFIX:line="62" PREFIX:column="27">=  <expr><block PREFIX:line="62" PREFIX:column="30">{ <expr><block PREFIX:line="62" PREFIX:column="32">{ <expr PREFIX:line="62" PREFIX:column="34">0</expr> }</block></expr>, <expr PREFIX:line="62" PREFIX:column="39">0</expr>, <expr PREFIX:line="62" PREFIX:column="42">0</expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="63" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="63" PREFIX:column="15">tx_buffer1</name>  <init PREFIX:line="63" PREFIX:column="27">=  <expr><block PREFIX:line="63" PREFIX:column="30">{ <expr><block PREFIX:line="63" PREFIX:column="32">{ <expr PREFIX:line="63" PREFIX:column="34">0</expr> }</block></expr>, <expr PREFIX:line="63" PREFIX:column="39">0</expr>, <expr PREFIX:line="63" PREFIX:column="42">0</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif PREFIX:line="64" PREFIX:column="1">#<cpp:directive PREFIX:line="64" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="65" PREFIX:column="1">#<cpp:directive PREFIX:line="65" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="65" PREFIX:column="5">defined</name><argument_list PREFIX:line="65" PREFIX:column="12">(<argument><expr><name PREFIX:line="65" PREFIX:column="13">UBRR2H</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="66" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="66" PREFIX:column="15">rx_buffer2</name>  <init PREFIX:line="66" PREFIX:column="27">=  <expr><block PREFIX:line="66" PREFIX:column="30">{ <expr><block PREFIX:line="66" PREFIX:column="32">{ <expr PREFIX:line="66" PREFIX:column="34">0</expr> }</block></expr>, <expr PREFIX:line="66" PREFIX:column="39">0</expr>, <expr PREFIX:line="66" PREFIX:column="42">0</expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="67" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="67" PREFIX:column="15">tx_buffer2</name>  <init PREFIX:line="67" PREFIX:column="27">=  <expr><block PREFIX:line="67" PREFIX:column="30">{ <expr><block PREFIX:line="67" PREFIX:column="32">{ <expr PREFIX:line="67" PREFIX:column="34">0</expr> }</block></expr>, <expr PREFIX:line="67" PREFIX:column="39">0</expr>, <expr PREFIX:line="67" PREFIX:column="42">0</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif PREFIX:line="68" PREFIX:column="1">#<cpp:directive PREFIX:line="68" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="69" PREFIX:column="5">defined</name><argument_list PREFIX:line="69" PREFIX:column="12">(<argument><expr><name PREFIX:line="69" PREFIX:column="13">UBRR3H</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="70" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="70" PREFIX:column="15">rx_buffer3</name>  <init PREFIX:line="70" PREFIX:column="27">=  <expr><block PREFIX:line="70" PREFIX:column="30">{ <expr><block PREFIX:line="70" PREFIX:column="32">{ <expr PREFIX:line="70" PREFIX:column="34">0</expr> }</block></expr>, <expr PREFIX:line="70" PREFIX:column="39">0</expr>, <expr PREFIX:line="70" PREFIX:column="42">0</expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="71" PREFIX:column="3">ring_buffer</name></type> <name PREFIX:line="71" PREFIX:column="15">tx_buffer3</name>  <init PREFIX:line="71" PREFIX:column="27">=  <expr><block PREFIX:line="71" PREFIX:column="30">{ <expr><block PREFIX:line="71" PREFIX:column="32">{ <expr PREFIX:line="71" PREFIX:column="34">0</expr> }</block></expr>, <expr PREFIX:line="71" PREFIX:column="39">0</expr>, <expr PREFIX:line="71" PREFIX:column="42">0</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif PREFIX:line="72" PREFIX:column="1">#<cpp:directive PREFIX:line="72" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier PREFIX:line="74" PREFIX:column="1">inline</specifier> <name PREFIX:line="74" PREFIX:column="8">void</name></type> <name PREFIX:line="74" PREFIX:column="13">store_char</name><parameter_list PREFIX:line="74" PREFIX:column="23">(<param><decl><type><name PREFIX:line="74" PREFIX:column="24">unknowntype</name> <name PREFIX:line="74" PREFIX:column="36">char</name></type> <name PREFIX:line="74" PREFIX:column="41">c</name></decl></param>, <param><decl><type><name PREFIX:line="74" PREFIX:column="44">ring_buffer</name> *</type><name PREFIX:line="74" PREFIX:column="57">buffer</name></decl></param>)</parameter_list>
<block PREFIX:line="75" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="76" PREFIX:column="3">int</name></type> <name PREFIX:line="76" PREFIX:column="7">i</name> <init PREFIX:line="76" PREFIX:column="9">= <expr><call PREFIX:line="76" PREFIX:column="11">(<name PREFIX:line="76" PREFIX:column="12">unknowntype</name> <name PREFIX:line="76" PREFIX:column="24">int</name>)<argument_list PREFIX:line="76" PREFIX:column="28">(<argument><expr><name><name PREFIX:line="76" PREFIX:column="29">buffer</name>-&gt;<name PREFIX:line="76" PREFIX:column="37">head</name></name> + 1</expr></argument>)</argument_list></call> % <name PREFIX:line="76" PREFIX:column="49">SERIAL_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>

  <comment type="line" PREFIX:line="78" PREFIX:column="3">// if we should be storing the received character into the location</comment>
  <comment type="line" PREFIX:line="79" PREFIX:column="3">// just before the tail (meaning that the head would advance to the</comment>
  <comment type="line" PREFIX:line="80" PREFIX:column="3">// current location of the tail), we're about to overflow the buffer</comment>
  <comment type="line" PREFIX:line="81" PREFIX:column="3">// and so we don't write the character or advance the head.</comment>
  <if PREFIX:line="82" PREFIX:column="3">if <condition PREFIX:line="82" PREFIX:column="6">(<expr><name PREFIX:line="82" PREFIX:column="7">i</name> != <name><name PREFIX:line="82" PREFIX:column="12">buffer</name>-&gt;<name PREFIX:line="82" PREFIX:column="20">tail</name></name></expr>)</condition><then PREFIX:line="82" PREFIX:column="25"> <block PREFIX:line="82" PREFIX:column="26">{
    <expr_stmt><expr><name><name PREFIX:line="83" PREFIX:column="5">buffer</name>-&gt;<name PREFIX:line="83" PREFIX:column="13">buffer</name><index PREFIX:line="83" PREFIX:column="19">[<expr><name><name PREFIX:line="83" PREFIX:column="20">buffer</name>-&gt;<name PREFIX:line="83" PREFIX:column="28">head</name></name></expr>]</index></name> = <name PREFIX:line="83" PREFIX:column="36">c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="84" PREFIX:column="5">buffer</name>-&gt;<name PREFIX:line="84" PREFIX:column="13">head</name></name> = <name PREFIX:line="84" PREFIX:column="20">i</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<cpp:if PREFIX:line="88" PREFIX:column="1">#<cpp:directive PREFIX:line="88" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="88" PREFIX:column="5">!<call><name PREFIX:line="88" PREFIX:column="6">defined</name><argument_list PREFIX:line="88" PREFIX:column="13">(<argument><expr><name PREFIX:line="88" PREFIX:column="14">USART0_RX_vect</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="88" PREFIX:column="33">defined</name><argument_list PREFIX:line="88" PREFIX:column="40">(<argument><expr><name PREFIX:line="88" PREFIX:column="41">USART1_RX_vect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line" PREFIX:line="89" PREFIX:column="1">// do nothing - on the 32u4 the first USART is USART1</comment>
<cpp:else PREFIX:line="90" PREFIX:column="1">#<cpp:directive PREFIX:line="90" PREFIX:column="2">else</cpp:directive></cpp:else>
<cpp:if PREFIX:line="91" PREFIX:column="1">#<cpp:directive PREFIX:line="91" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="91" PREFIX:column="5">!<call><name PREFIX:line="91" PREFIX:column="6">defined</name><argument_list PREFIX:line="91" PREFIX:column="13">(<argument><expr><name PREFIX:line="91" PREFIX:column="14">USART_RX_vect</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name PREFIX:line="91" PREFIX:column="33">defined</name><argument_list PREFIX:line="91" PREFIX:column="40">(<argument><expr><name PREFIX:line="91" PREFIX:column="41">SIG_USART0_RECV</name></expr></argument>)</argument_list></call> &amp;&amp; \
    !<call><name PREFIX:line="92" PREFIX:column="6">defined</name><argument_list PREFIX:line="92" PREFIX:column="13">(<argument><expr><name PREFIX:line="92" PREFIX:column="14">SIG_UART0_RECV</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name PREFIX:line="92" PREFIX:column="34">defined</name><argument_list PREFIX:line="92" PREFIX:column="41">(<argument><expr><name PREFIX:line="92" PREFIX:column="42">USART0_RX_vect</name></expr></argument>)</argument_list></call> &amp;&amp; \
	!<call><name PREFIX:line="93" PREFIX:column="10">defined</name><argument_list PREFIX:line="93" PREFIX:column="17">(<argument><expr><name PREFIX:line="93" PREFIX:column="18">SIG_UART_RECV</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <cpp:error PREFIX:line="94" PREFIX:column="3">#<cpp:directive PREFIX:line="94" PREFIX:column="4">error</cpp:directive> "Don't know what the Data Received vector is called for the first UART"</cpp:error>
<cpp:else PREFIX:line="95" PREFIX:column="1">#<cpp:directive PREFIX:line="95" PREFIX:column="2">else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name PREFIX:line="96" PREFIX:column="3">void</name></type> <name PREFIX:line="96" PREFIX:column="8">serialEvent</name><argument_list PREFIX:line="96" PREFIX:column="19">()</argument_list> <name PREFIX:line="96" PREFIX:column="22">__attribute__</name><argument_list PREFIX:line="96" PREFIX:column="35">(<argument><expr PREFIX:line="96" PREFIX:column="36">(<name PREFIX:line="96" PREFIX:column="37">weak</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
  <function><type><name PREFIX:line="97" PREFIX:column="3">void</name></type> <name PREFIX:line="97" PREFIX:column="8">serialEvent</name><parameter_list PREFIX:line="97" PREFIX:column="19">()</parameter_list> <block PREFIX:line="97" PREFIX:column="22">{}</block></function>
  <cpp:define PREFIX:line="98" PREFIX:column="3">#<cpp:directive PREFIX:line="98" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="98" PREFIX:column="11">serialEvent_implemented</name></cpp:macro></cpp:define>
<cpp:if PREFIX:line="99" PREFIX:column="1">#<cpp:directive PREFIX:line="99" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="99" PREFIX:column="5">defined</name><argument_list PREFIX:line="99" PREFIX:column="12">(<argument><expr><name PREFIX:line="99" PREFIX:column="13">USART_RX_vect</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <macro><name PREFIX:line="100" PREFIX:column="3">SIGNAL</name><argument_list PREFIX:line="100" PREFIX:column="9">(<argument PREFIX:line="100" PREFIX:column="10">USART_RX_vect</argument>)</argument_list></macro>
<cpp:elif PREFIX:line="101" PREFIX:column="1">#<cpp:directive PREFIX:line="101" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="101" PREFIX:column="7">defined</name><argument_list PREFIX:line="101" PREFIX:column="14">(<argument><expr><name PREFIX:line="101" PREFIX:column="15">SIG_USART0_RECV</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <macro><name PREFIX:line="102" PREFIX:column="3">SIGNAL</name><argument_list PREFIX:line="102" PREFIX:column="9">(<argument PREFIX:line="102" PREFIX:column="10">SIG_USART0_RECV</argument>)</argument_list></macro>
<cpp:elif PREFIX:line="103" PREFIX:column="1">#<cpp:directive PREFIX:line="103" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="103" PREFIX:column="7">defined</name><argument_list PREFIX:line="103" PREFIX:column="14">(<argument><expr><name PREFIX:line="103" PREFIX:column="15">SIG_UART0_RECV</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <macro><name PREFIX:line="104" PREFIX:column="3">SIGNAL</name><argument_list PREFIX:line="104" PREFIX:column="9">(<argument PREFIX:line="104" PREFIX:column="10">SIG_UART0_RECV</argument>)</argument_list></macro>
<cpp:elif PREFIX:line="105" PREFIX:column="1">#<cpp:directive PREFIX:line="105" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="105" PREFIX:column="7">defined</name><argument_list PREFIX:line="105" PREFIX:column="14">(<argument><expr><name PREFIX:line="105" PREFIX:column="15">USART0_RX_vect</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <macro><name PREFIX:line="106" PREFIX:column="3">SIGNAL</name><argument_list PREFIX:line="106" PREFIX:column="9">(<argument PREFIX:line="106" PREFIX:column="10">USART0_RX_vect</argument>)</argument_list></macro>
<cpp:elif PREFIX:line="107" PREFIX:column="1">#<cpp:directive PREFIX:line="107" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="107" PREFIX:column="7">defined</name><argument_list PREFIX:line="107" PREFIX:column="14">(<argument><expr><name PREFIX:line="107" PREFIX:column="15">SIG_UART_RECV</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <macro><name PREFIX:line="108" PREFIX:column="3">SIGNAL</name><argument_list PREFIX:line="108" PREFIX:column="9">(<argument PREFIX:line="108" PREFIX:column="10">SIG_UART_RECV</argument>)</argument_list></macro>
<cpp:endif PREFIX:line="109" PREFIX:column="1">#<cpp:directive PREFIX:line="109" PREFIX:column="2">endif</cpp:directive></cpp:endif>
  <block PREFIX:line="110" PREFIX:column="3">{
  <cpp:if PREFIX:line="111" PREFIX:column="3">#<cpp:directive PREFIX:line="111" PREFIX:column="4">if</cpp:directive> <expr><call><name PREFIX:line="111" PREFIX:column="7">defined</name><argument_list PREFIX:line="111" PREFIX:column="14">(<argument><expr><name PREFIX:line="111" PREFIX:column="15">UDR0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name PREFIX:line="112" PREFIX:column="5">unknowntype</name> <name PREFIX:line="112" PREFIX:column="17">char</name></type> <name PREFIX:line="112" PREFIX:column="22">c</name>  <init PREFIX:line="112" PREFIX:column="25">=  <expr><name PREFIX:line="112" PREFIX:column="28">UDR0</name></expr></init></decl>;</decl_stmt>
  <cpp:elif PREFIX:line="113" PREFIX:column="3">#<cpp:directive PREFIX:line="113" PREFIX:column="4">elif</cpp:directive> <expr><call><name PREFIX:line="113" PREFIX:column="9">defined</name><argument_list PREFIX:line="113" PREFIX:column="16">(<argument><expr><name PREFIX:line="113" PREFIX:column="17">UDR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name PREFIX:line="114" PREFIX:column="5">unknowntype</name> <name PREFIX:line="114" PREFIX:column="17">char</name></type> <name PREFIX:line="114" PREFIX:column="22">c</name>  <init PREFIX:line="114" PREFIX:column="25">=  <expr><name PREFIX:line="114" PREFIX:column="28">UDR</name></expr></init></decl>;</decl_stmt>
  <cpp:else PREFIX:line="115" PREFIX:column="3">#<cpp:directive PREFIX:line="115" PREFIX:column="4">else</cpp:directive></cpp:else>
    <cpp:error PREFIX:line="116" PREFIX:column="5">#<cpp:directive PREFIX:line="116" PREFIX:column="6">error</cpp:directive> UDR not defined</cpp:error>
  <cpp:endif PREFIX:line="117" PREFIX:column="3">#<cpp:directive PREFIX:line="117" PREFIX:column="4">endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name PREFIX:line="118" PREFIX:column="5">store_char</name><argument_list PREFIX:line="118" PREFIX:column="15">(<argument><expr><name PREFIX:line="118" PREFIX:column="16">c</name></expr></argument>, <argument><expr PREFIX:line="118" PREFIX:column="19">&amp;<name PREFIX:line="118" PREFIX:column="20">rx_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
<cpp:endif PREFIX:line="120" PREFIX:column="1">#<cpp:directive PREFIX:line="120" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif PREFIX:line="121" PREFIX:column="1">#<cpp:directive PREFIX:line="121" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="123" PREFIX:column="1">#<cpp:directive PREFIX:line="123" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="123" PREFIX:column="5">defined</name><argument_list PREFIX:line="123" PREFIX:column="12">(<argument><expr><name PREFIX:line="123" PREFIX:column="13">USART1_RX_vect</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="124" PREFIX:column="3">void</name></type> <name PREFIX:line="124" PREFIX:column="8">serialEvent1</name><argument_list PREFIX:line="124" PREFIX:column="20">()</argument_list> <name PREFIX:line="124" PREFIX:column="23">__attribute__</name><argument_list PREFIX:line="124" PREFIX:column="36">(<argument><expr PREFIX:line="124" PREFIX:column="37">(<name PREFIX:line="124" PREFIX:column="38">weak</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
  <function><type><name PREFIX:line="125" PREFIX:column="3">void</name></type> <name PREFIX:line="125" PREFIX:column="8">serialEvent1</name><parameter_list PREFIX:line="125" PREFIX:column="20">()</parameter_list> <block PREFIX:line="125" PREFIX:column="23">{}</block></function>
  <cpp:define PREFIX:line="126" PREFIX:column="3">#<cpp:directive PREFIX:line="126" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="126" PREFIX:column="11">serialEvent1_implemented</name></cpp:macro></cpp:define>
  <macro><name PREFIX:line="127" PREFIX:column="3">SIGNAL</name><argument_list PREFIX:line="127" PREFIX:column="9">(<argument PREFIX:line="127" PREFIX:column="10">USART1_RX_vect</argument>)</argument_list></macro>
  <block PREFIX:line="128" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="129" PREFIX:column="5">unknowntype</name> <name PREFIX:line="129" PREFIX:column="17">char</name></type> <name PREFIX:line="129" PREFIX:column="22">c</name> <init PREFIX:line="129" PREFIX:column="24">= <expr><name PREFIX:line="129" PREFIX:column="26">UDR1</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name PREFIX:line="130" PREFIX:column="5">store_char</name><argument_list PREFIX:line="130" PREFIX:column="15">(<argument><expr><name PREFIX:line="130" PREFIX:column="16">c</name></expr></argument>, <argument><expr PREFIX:line="130" PREFIX:column="19">&amp;<name PREFIX:line="130" PREFIX:column="20">rx_buffer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
<cpp:elif PREFIX:line="132" PREFIX:column="1">#<cpp:directive PREFIX:line="132" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="132" PREFIX:column="7">defined</name><argument_list PREFIX:line="132" PREFIX:column="14">(<argument><expr><name PREFIX:line="132" PREFIX:column="15">SIG_USART1_RECV</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <cpp:error PREFIX:line="133" PREFIX:column="3">#<cpp:directive PREFIX:line="133" PREFIX:column="4">error</cpp:directive> SIG_USART1_RECV</cpp:error>
<cpp:endif PREFIX:line="134" PREFIX:column="1">#<cpp:directive PREFIX:line="134" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="136" PREFIX:column="1">#<cpp:directive PREFIX:line="136" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="136" PREFIX:column="5">defined</name><argument_list PREFIX:line="136" PREFIX:column="12">(<argument><expr><name PREFIX:line="136" PREFIX:column="13">USART2_RX_vect</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="136" PREFIX:column="32">defined</name><argument_list PREFIX:line="136" PREFIX:column="39">(<argument><expr><name PREFIX:line="136" PREFIX:column="40">UDR2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="137" PREFIX:column="3">void</name></type> <name PREFIX:line="137" PREFIX:column="8">serialEvent2</name><argument_list PREFIX:line="137" PREFIX:column="20">()</argument_list> <name PREFIX:line="137" PREFIX:column="23">__attribute__</name><argument_list PREFIX:line="137" PREFIX:column="36">(<argument><expr PREFIX:line="137" PREFIX:column="37">(<name PREFIX:line="137" PREFIX:column="38">weak</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
  <function><type><name PREFIX:line="138" PREFIX:column="3">void</name></type> <name PREFIX:line="138" PREFIX:column="8">serialEvent2</name><parameter_list PREFIX:line="138" PREFIX:column="20">()</parameter_list> <block PREFIX:line="138" PREFIX:column="23">{}</block></function>
  <cpp:define PREFIX:line="139" PREFIX:column="3">#<cpp:directive PREFIX:line="139" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="139" PREFIX:column="11">serialEvent2_implemented</name></cpp:macro></cpp:define>
  <macro><name PREFIX:line="140" PREFIX:column="3">SIGNAL</name><argument_list PREFIX:line="140" PREFIX:column="9">(<argument PREFIX:line="140" PREFIX:column="10">USART2_RX_vect</argument>)</argument_list></macro>
  <block PREFIX:line="141" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="142" PREFIX:column="5">unknowntype</name> <name PREFIX:line="142" PREFIX:column="17">char</name></type> <name PREFIX:line="142" PREFIX:column="22">c</name> <init PREFIX:line="142" PREFIX:column="24">= <expr><name PREFIX:line="142" PREFIX:column="26">UDR2</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name PREFIX:line="143" PREFIX:column="5">store_char</name><argument_list PREFIX:line="143" PREFIX:column="15">(<argument><expr><name PREFIX:line="143" PREFIX:column="16">c</name></expr></argument>, <argument><expr PREFIX:line="143" PREFIX:column="19">&amp;<name PREFIX:line="143" PREFIX:column="20">rx_buffer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
<cpp:elif PREFIX:line="145" PREFIX:column="1">#<cpp:directive PREFIX:line="145" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="145" PREFIX:column="7">defined</name><argument_list PREFIX:line="145" PREFIX:column="14">(<argument><expr><name PREFIX:line="145" PREFIX:column="15">SIG_USART2_RECV</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <cpp:error PREFIX:line="146" PREFIX:column="3">#<cpp:directive PREFIX:line="146" PREFIX:column="4">error</cpp:directive> SIG_USART2_RECV</cpp:error>
<cpp:endif PREFIX:line="147" PREFIX:column="1">#<cpp:directive PREFIX:line="147" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="149" PREFIX:column="1">#<cpp:directive PREFIX:line="149" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="149" PREFIX:column="5">defined</name><argument_list PREFIX:line="149" PREFIX:column="12">(<argument><expr><name PREFIX:line="149" PREFIX:column="13">USART3_RX_vect</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="149" PREFIX:column="32">defined</name><argument_list PREFIX:line="149" PREFIX:column="39">(<argument><expr><name PREFIX:line="149" PREFIX:column="40">UDR3</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="150" PREFIX:column="3">void</name></type> <name PREFIX:line="150" PREFIX:column="8">serialEvent3</name><argument_list PREFIX:line="150" PREFIX:column="20">()</argument_list> <name PREFIX:line="150" PREFIX:column="23">__attribute__</name><argument_list PREFIX:line="150" PREFIX:column="36">(<argument><expr PREFIX:line="150" PREFIX:column="37">(<name PREFIX:line="150" PREFIX:column="38">weak</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
  <function><type><name PREFIX:line="151" PREFIX:column="3">void</name></type> <name PREFIX:line="151" PREFIX:column="8">serialEvent3</name><parameter_list PREFIX:line="151" PREFIX:column="20">()</parameter_list> <block PREFIX:line="151" PREFIX:column="23">{}</block></function>
  <cpp:define PREFIX:line="152" PREFIX:column="3">#<cpp:directive PREFIX:line="152" PREFIX:column="4">define</cpp:directive> <cpp:macro><name PREFIX:line="152" PREFIX:column="11">serialEvent3_implemented</name></cpp:macro></cpp:define>
  <macro><name PREFIX:line="153" PREFIX:column="3">SIGNAL</name><argument_list PREFIX:line="153" PREFIX:column="9">(<argument PREFIX:line="153" PREFIX:column="10">USART3_RX_vect</argument>)</argument_list></macro>
  <block PREFIX:line="154" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="155" PREFIX:column="5">unknowntype</name> <name PREFIX:line="155" PREFIX:column="17">char</name></type> <name PREFIX:line="155" PREFIX:column="22">c</name> <init PREFIX:line="155" PREFIX:column="24">= <expr><name PREFIX:line="155" PREFIX:column="26">UDR3</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name PREFIX:line="156" PREFIX:column="5">store_char</name><argument_list PREFIX:line="156" PREFIX:column="15">(<argument><expr><name PREFIX:line="156" PREFIX:column="16">c</name></expr></argument>, <argument><expr PREFIX:line="156" PREFIX:column="19">&amp;<name PREFIX:line="156" PREFIX:column="20">rx_buffer3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
<cpp:elif PREFIX:line="158" PREFIX:column="1">#<cpp:directive PREFIX:line="158" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="158" PREFIX:column="7">defined</name><argument_list PREFIX:line="158" PREFIX:column="14">(<argument><expr><name PREFIX:line="158" PREFIX:column="15">SIG_USART3_RECV</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <cpp:error PREFIX:line="159" PREFIX:column="3">#<cpp:directive PREFIX:line="159" PREFIX:column="4">error</cpp:directive> SIG_USART3_RECV</cpp:error>
<cpp:endif PREFIX:line="160" PREFIX:column="1">#<cpp:directive PREFIX:line="160" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<function><type><name PREFIX:line="162" PREFIX:column="1">void</name></type> <name PREFIX:line="162" PREFIX:column="6">serialEventRun</name><parameter_list PREFIX:line="162" PREFIX:column="20">(<param><decl><type><name PREFIX:line="162" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="163" PREFIX:column="1">{
<cpp:ifdef PREFIX:line="164" PREFIX:column="1">#<cpp:directive PREFIX:line="164" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="164" PREFIX:column="8">serialEvent_implemented</name></cpp:ifdef>
  <if PREFIX:line="165" PREFIX:column="3">if <condition PREFIX:line="165" PREFIX:column="6">(<expr><call><name><name PREFIX:line="165" PREFIX:column="7">Serial</name>.<name PREFIX:line="165" PREFIX:column="14">available</name></name><argument_list PREFIX:line="165" PREFIX:column="23">()</argument_list></call></expr>)</condition><then PREFIX:line="165" PREFIX:column="26"> <expr_stmt><expr><call><name PREFIX:line="165" PREFIX:column="27">serialEvent</name><argument_list PREFIX:line="165" PREFIX:column="38">()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif PREFIX:line="166" PREFIX:column="1">#<cpp:directive PREFIX:line="166" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifdef PREFIX:line="167" PREFIX:column="1">#<cpp:directive PREFIX:line="167" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="167" PREFIX:column="8">serialEvent1_implemented</name></cpp:ifdef>
  <if PREFIX:line="168" PREFIX:column="3">if <condition PREFIX:line="168" PREFIX:column="6">(<expr><call><name><name PREFIX:line="168" PREFIX:column="7">Serial1</name>.<name PREFIX:line="168" PREFIX:column="15">available</name></name><argument_list PREFIX:line="168" PREFIX:column="24">()</argument_list></call></expr>)</condition><then PREFIX:line="168" PREFIX:column="27"> <expr_stmt><expr><call><name PREFIX:line="168" PREFIX:column="28">serialEvent1</name><argument_list PREFIX:line="168" PREFIX:column="40">()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif PREFIX:line="169" PREFIX:column="1">#<cpp:directive PREFIX:line="169" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifdef PREFIX:line="170" PREFIX:column="1">#<cpp:directive PREFIX:line="170" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="170" PREFIX:column="8">serialEvent2_implemented</name></cpp:ifdef>
  <if PREFIX:line="171" PREFIX:column="3">if <condition PREFIX:line="171" PREFIX:column="6">(<expr><call><name><name PREFIX:line="171" PREFIX:column="7">Serial2</name>.<name PREFIX:line="171" PREFIX:column="15">available</name></name><argument_list PREFIX:line="171" PREFIX:column="24">()</argument_list></call></expr>)</condition><then PREFIX:line="171" PREFIX:column="27"> <expr_stmt><expr><call><name PREFIX:line="171" PREFIX:column="28">serialEvent2</name><argument_list PREFIX:line="171" PREFIX:column="40">()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif PREFIX:line="172" PREFIX:column="1">#<cpp:directive PREFIX:line="172" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifdef PREFIX:line="173" PREFIX:column="1">#<cpp:directive PREFIX:line="173" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="173" PREFIX:column="8">serialEvent3_implemented</name></cpp:ifdef>
  <if PREFIX:line="174" PREFIX:column="3">if <condition PREFIX:line="174" PREFIX:column="6">(<expr><call><name><name PREFIX:line="174" PREFIX:column="7">Serial3</name>.<name PREFIX:line="174" PREFIX:column="15">available</name></name><argument_list PREFIX:line="174" PREFIX:column="24">()</argument_list></call></expr>)</condition><then PREFIX:line="174" PREFIX:column="27"> <expr_stmt><expr><call><name PREFIX:line="174" PREFIX:column="28">serialEvent3</name><argument_list PREFIX:line="174" PREFIX:column="40">()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif PREFIX:line="175" PREFIX:column="1">#<cpp:directive PREFIX:line="175" PREFIX:column="2">endif</cpp:directive></cpp:endif>
}</block></function>


<cpp:if PREFIX:line="179" PREFIX:column="1">#<cpp:directive PREFIX:line="179" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="179" PREFIX:column="5">!<call><name PREFIX:line="179" PREFIX:column="6">defined</name><argument_list PREFIX:line="179" PREFIX:column="13">(<argument><expr><name PREFIX:line="179" PREFIX:column="14">USART0_UDRE_vect</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="179" PREFIX:column="35">defined</name><argument_list PREFIX:line="179" PREFIX:column="42">(<argument><expr><name PREFIX:line="179" PREFIX:column="43">USART1_UDRE_vect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line" PREFIX:line="180" PREFIX:column="1">// do nothing - on the 32u4 the first USART is USART1</comment>
<cpp:else PREFIX:line="181" PREFIX:column="1">#<cpp:directive PREFIX:line="181" PREFIX:column="2">else</cpp:directive></cpp:else>
<cpp:if PREFIX:line="182" PREFIX:column="1">#<cpp:directive PREFIX:line="182" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="182" PREFIX:column="5">!<call><name PREFIX:line="182" PREFIX:column="6">defined</name><argument_list PREFIX:line="182" PREFIX:column="13">(<argument><expr><name PREFIX:line="182" PREFIX:column="14">UART0_UDRE_vect</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name PREFIX:line="182" PREFIX:column="35">defined</name><argument_list PREFIX:line="182" PREFIX:column="42">(<argument><expr><name PREFIX:line="182" PREFIX:column="43">UART_UDRE_vect</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name PREFIX:line="182" PREFIX:column="63">defined</name><argument_list PREFIX:line="182" PREFIX:column="70">(<argument><expr><name PREFIX:line="182" PREFIX:column="71">USART0_UDRE_vect</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name PREFIX:line="182" PREFIX:column="93">defined</name><argument_list PREFIX:line="182" PREFIX:column="100">(<argument><expr><name PREFIX:line="182" PREFIX:column="101">USART_UDRE_vect</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <cpp:error PREFIX:line="183" PREFIX:column="3">#<cpp:directive PREFIX:line="183" PREFIX:column="4">error</cpp:directive> "Don't know what the Data Register Empty vector is called for the first UART"</cpp:error>
<cpp:else PREFIX:line="184" PREFIX:column="1">#<cpp:directive PREFIX:line="184" PREFIX:column="2">else</cpp:directive></cpp:else>
<cpp:if PREFIX:line="185" PREFIX:column="1">#<cpp:directive PREFIX:line="185" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="185" PREFIX:column="5">defined</name><argument_list PREFIX:line="185" PREFIX:column="12">(<argument><expr><name PREFIX:line="185" PREFIX:column="13">UART0_UDRE_vect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name PREFIX:line="186" PREFIX:column="1">ISR</name><argument_list PREFIX:line="186" PREFIX:column="4">(<argument PREFIX:line="186" PREFIX:column="5">UART0_UDRE_vect</argument>)</argument_list></macro>
<cpp:elif PREFIX:line="187" PREFIX:column="1">#<cpp:directive PREFIX:line="187" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="187" PREFIX:column="7">defined</name><argument_list PREFIX:line="187" PREFIX:column="14">(<argument><expr><name PREFIX:line="187" PREFIX:column="15">UART_UDRE_vect</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name PREFIX:line="188" PREFIX:column="1">ISR</name><argument_list PREFIX:line="188" PREFIX:column="4">(<argument PREFIX:line="188" PREFIX:column="5">UART_UDRE_vect</argument>)</argument_list></macro>
<cpp:elif PREFIX:line="189" PREFIX:column="1">#<cpp:directive PREFIX:line="189" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="189" PREFIX:column="7">defined</name><argument_list PREFIX:line="189" PREFIX:column="14">(<argument><expr><name PREFIX:line="189" PREFIX:column="15">USART0_UDRE_vect</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name PREFIX:line="190" PREFIX:column="1">ISR</name><argument_list PREFIX:line="190" PREFIX:column="4">(<argument PREFIX:line="190" PREFIX:column="5">USART0_UDRE_vect</argument>)</argument_list></macro>
<cpp:elif PREFIX:line="191" PREFIX:column="1">#<cpp:directive PREFIX:line="191" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="191" PREFIX:column="7">defined</name><argument_list PREFIX:line="191" PREFIX:column="14">(<argument><expr><name PREFIX:line="191" PREFIX:column="15">USART_UDRE_vect</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name PREFIX:line="192" PREFIX:column="1">ISR</name><argument_list PREFIX:line="192" PREFIX:column="4">(<argument PREFIX:line="192" PREFIX:column="5">USART_UDRE_vect</argument>)</argument_list></macro>
<cpp:endif PREFIX:line="193" PREFIX:column="1">#<cpp:directive PREFIX:line="193" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<block PREFIX:line="194" PREFIX:column="1">{
  <if PREFIX:line="195" PREFIX:column="3">if <condition PREFIX:line="195" PREFIX:column="6">(<expr><name><name PREFIX:line="195" PREFIX:column="7">tx_buffer</name>.<name PREFIX:line="195" PREFIX:column="17">head</name></name> == <name><name PREFIX:line="195" PREFIX:column="25">tx_buffer</name>.<name PREFIX:line="195" PREFIX:column="35">tail</name></name></expr>)</condition><then PREFIX:line="195" PREFIX:column="40"> <block PREFIX:line="195" PREFIX:column="41">{
	<comment type="line" PREFIX:line="196" PREFIX:column="9">// Buffer empty, so disable interrupts</comment>
<cpp:if PREFIX:line="197" PREFIX:column="1">#<cpp:directive PREFIX:line="197" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="197" PREFIX:column="5">defined</name><argument_list PREFIX:line="197" PREFIX:column="12">(<argument><expr><name PREFIX:line="197" PREFIX:column="13">UCSR0B</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name PREFIX:line="198" PREFIX:column="5">cbi</name><argument_list PREFIX:line="198" PREFIX:column="8">(<argument><expr><name PREFIX:line="198" PREFIX:column="9">UCSR0B</name></expr></argument>, <argument><expr><name PREFIX:line="198" PREFIX:column="17">UDRIE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else PREFIX:line="199" PREFIX:column="1">#<cpp:directive PREFIX:line="199" PREFIX:column="2">else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name PREFIX:line="200" PREFIX:column="5">cbi</name><argument_list PREFIX:line="200" PREFIX:column="8">(<argument><expr><name PREFIX:line="200" PREFIX:column="9">UCSRB</name></expr></argument>, <argument><expr><name PREFIX:line="200" PREFIX:column="16">UDRIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="201" PREFIX:column="1">#<cpp:directive PREFIX:line="201" PREFIX:column="2">endif</cpp:directive></cpp:endif>
  }</block></then>
  <else PREFIX:line="203" PREFIX:column="3">else <block PREFIX:line="203" PREFIX:column="8">{
    <comment type="line" PREFIX:line="204" PREFIX:column="5">// There is more data in the output buffer. Send the next byte</comment>
    <decl_stmt><decl><type><name PREFIX:line="205" PREFIX:column="5">unknowntype</name> <name PREFIX:line="205" PREFIX:column="17">char</name></type> <name PREFIX:line="205" PREFIX:column="22">c</name> <init PREFIX:line="205" PREFIX:column="24">= <expr><name><name PREFIX:line="205" PREFIX:column="26">tx_buffer</name>.<name PREFIX:line="205" PREFIX:column="36">buffer</name><index PREFIX:line="205" PREFIX:column="42">[<expr><name><name PREFIX:line="205" PREFIX:column="43">tx_buffer</name>.<name PREFIX:line="205" PREFIX:column="53">tail</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name PREFIX:line="206" PREFIX:column="5">tx_buffer</name>.<name PREFIX:line="206" PREFIX:column="15">tail</name></name> = (<name><name PREFIX:line="206" PREFIX:column="23">tx_buffer</name>.<name PREFIX:line="206" PREFIX:column="33">tail</name></name> + 1) % <name PREFIX:line="206" PREFIX:column="45">SERIAL_BUFFER_SIZE</name></expr>;</expr_stmt>
	
  <cpp:if PREFIX:line="208" PREFIX:column="3">#<cpp:directive PREFIX:line="208" PREFIX:column="4">if</cpp:directive> <expr><call><name PREFIX:line="208" PREFIX:column="7">defined</name><argument_list PREFIX:line="208" PREFIX:column="14">(<argument><expr><name PREFIX:line="208" PREFIX:column="15">UDR0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name PREFIX:line="209" PREFIX:column="5">UDR0</name> = <name PREFIX:line="209" PREFIX:column="12">c</name></expr>;</expr_stmt>
  <cpp:elif PREFIX:line="210" PREFIX:column="3">#<cpp:directive PREFIX:line="210" PREFIX:column="4">elif</cpp:directive> <expr><call><name PREFIX:line="210" PREFIX:column="9">defined</name><argument_list PREFIX:line="210" PREFIX:column="16">(<argument><expr><name PREFIX:line="210" PREFIX:column="17">UDR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name PREFIX:line="211" PREFIX:column="5">UDR</name> = <name PREFIX:line="211" PREFIX:column="11">c</name></expr>;</expr_stmt>
  <cpp:else PREFIX:line="212" PREFIX:column="3">#<cpp:directive PREFIX:line="212" PREFIX:column="4">else</cpp:directive></cpp:else>
    <cpp:error PREFIX:line="213" PREFIX:column="5">#<cpp:directive PREFIX:line="213" PREFIX:column="6">error</cpp:directive> UDR not defined</cpp:error>
  <cpp:endif PREFIX:line="214" PREFIX:column="3">#<cpp:directive PREFIX:line="214" PREFIX:column="4">endif</cpp:directive></cpp:endif>
  }</block></else></if>
}</block>
<cpp:endif PREFIX:line="217" PREFIX:column="1">#<cpp:directive PREFIX:line="217" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif PREFIX:line="218" PREFIX:column="1">#<cpp:directive PREFIX:line="218" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef PREFIX:line="220" PREFIX:column="1">#<cpp:directive PREFIX:line="220" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="220" PREFIX:column="8">USART1_UDRE_vect</name></cpp:ifdef>
<macro><name PREFIX:line="221" PREFIX:column="1">ISR</name><argument_list PREFIX:line="221" PREFIX:column="4">(<argument PREFIX:line="221" PREFIX:column="5">USART1_UDRE_vect</argument>)</argument_list></macro>
<block PREFIX:line="222" PREFIX:column="1">{
  <if PREFIX:line="223" PREFIX:column="3">if <condition PREFIX:line="223" PREFIX:column="6">(<expr><name><name PREFIX:line="223" PREFIX:column="7">tx_buffer1</name>.<name PREFIX:line="223" PREFIX:column="18">head</name></name> == <name><name PREFIX:line="223" PREFIX:column="26">tx_buffer1</name>.<name PREFIX:line="223" PREFIX:column="37">tail</name></name></expr>)</condition><then PREFIX:line="223" PREFIX:column="42"> <block PREFIX:line="223" PREFIX:column="43">{
	<comment type="line" PREFIX:line="224" PREFIX:column="9">// Buffer empty, so disable interrupts</comment>
    <expr_stmt><expr><call><name PREFIX:line="225" PREFIX:column="5">cbi</name><argument_list PREFIX:line="225" PREFIX:column="8">(<argument><expr><name PREFIX:line="225" PREFIX:column="9">UCSR1B</name></expr></argument>, <argument><expr><name PREFIX:line="225" PREFIX:column="17">UDRIE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="227" PREFIX:column="3">else <block PREFIX:line="227" PREFIX:column="8">{
    <comment type="line" PREFIX:line="228" PREFIX:column="5">// There is more data in the output buffer. Send the next byte</comment>
    <decl_stmt><decl><type><name PREFIX:line="229" PREFIX:column="5">unknowntype</name> <name PREFIX:line="229" PREFIX:column="17">char</name></type> <name PREFIX:line="229" PREFIX:column="22">c</name> <init PREFIX:line="229" PREFIX:column="24">= <expr><name><name PREFIX:line="229" PREFIX:column="26">tx_buffer1</name>.<name PREFIX:line="229" PREFIX:column="37">buffer</name><index PREFIX:line="229" PREFIX:column="43">[<expr><name><name PREFIX:line="229" PREFIX:column="44">tx_buffer1</name>.<name PREFIX:line="229" PREFIX:column="55">tail</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name PREFIX:line="230" PREFIX:column="5">tx_buffer1</name>.<name PREFIX:line="230" PREFIX:column="16">tail</name></name> = (<name><name PREFIX:line="230" PREFIX:column="24">tx_buffer1</name>.<name PREFIX:line="230" PREFIX:column="35">tail</name></name> + 1) % <name PREFIX:line="230" PREFIX:column="47">SERIAL_BUFFER_SIZE</name></expr>;</expr_stmt>
	
    <expr_stmt><expr><name PREFIX:line="232" PREFIX:column="5">UDR1</name> = <name PREFIX:line="232" PREFIX:column="12">c</name></expr>;</expr_stmt>
  }</block></else></if>
}</block>
<cpp:endif PREFIX:line="235" PREFIX:column="1">#<cpp:directive PREFIX:line="235" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef PREFIX:line="237" PREFIX:column="1">#<cpp:directive PREFIX:line="237" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="237" PREFIX:column="8">USART2_UDRE_vect</name></cpp:ifdef>
<macro><name PREFIX:line="238" PREFIX:column="1">ISR</name><argument_list PREFIX:line="238" PREFIX:column="4">(<argument PREFIX:line="238" PREFIX:column="5">USART2_UDRE_vect</argument>)</argument_list></macro>
<block PREFIX:line="239" PREFIX:column="1">{
  <if PREFIX:line="240" PREFIX:column="3">if <condition PREFIX:line="240" PREFIX:column="6">(<expr><name><name PREFIX:line="240" PREFIX:column="7">tx_buffer2</name>.<name PREFIX:line="240" PREFIX:column="18">head</name></name> == <name><name PREFIX:line="240" PREFIX:column="26">tx_buffer2</name>.<name PREFIX:line="240" PREFIX:column="37">tail</name></name></expr>)</condition><then PREFIX:line="240" PREFIX:column="42"> <block PREFIX:line="240" PREFIX:column="43">{
	<comment type="line" PREFIX:line="241" PREFIX:column="9">// Buffer empty, so disable interrupts</comment>
    <expr_stmt><expr><call><name PREFIX:line="242" PREFIX:column="5">cbi</name><argument_list PREFIX:line="242" PREFIX:column="8">(<argument><expr><name PREFIX:line="242" PREFIX:column="9">UCSR2B</name></expr></argument>, <argument><expr><name PREFIX:line="242" PREFIX:column="17">UDRIE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="244" PREFIX:column="3">else <block PREFIX:line="244" PREFIX:column="8">{
    <comment type="line" PREFIX:line="245" PREFIX:column="5">// There is more data in the output buffer. Send the next byte</comment>
    <decl_stmt><decl><type><name PREFIX:line="246" PREFIX:column="5">unknowntype</name> <name PREFIX:line="246" PREFIX:column="17">char</name></type> <name PREFIX:line="246" PREFIX:column="22">c</name> <init PREFIX:line="246" PREFIX:column="24">= <expr><name><name PREFIX:line="246" PREFIX:column="26">tx_buffer2</name>.<name PREFIX:line="246" PREFIX:column="37">buffer</name><index PREFIX:line="246" PREFIX:column="43">[<expr><name><name PREFIX:line="246" PREFIX:column="44">tx_buffer2</name>.<name PREFIX:line="246" PREFIX:column="55">tail</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name PREFIX:line="247" PREFIX:column="5">tx_buffer2</name>.<name PREFIX:line="247" PREFIX:column="16">tail</name></name> = (<name><name PREFIX:line="247" PREFIX:column="24">tx_buffer2</name>.<name PREFIX:line="247" PREFIX:column="35">tail</name></name> + 1) % <name PREFIX:line="247" PREFIX:column="47">SERIAL_BUFFER_SIZE</name></expr>;</expr_stmt>
	
    <expr_stmt><expr><name PREFIX:line="249" PREFIX:column="5">UDR2</name> = <name PREFIX:line="249" PREFIX:column="12">c</name></expr>;</expr_stmt>
  }</block></else></if>
}</block>
<cpp:endif PREFIX:line="252" PREFIX:column="1">#<cpp:directive PREFIX:line="252" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef PREFIX:line="254" PREFIX:column="1">#<cpp:directive PREFIX:line="254" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="254" PREFIX:column="8">USART3_UDRE_vect</name></cpp:ifdef>
<macro><name PREFIX:line="255" PREFIX:column="1">ISR</name><argument_list PREFIX:line="255" PREFIX:column="4">(<argument PREFIX:line="255" PREFIX:column="5">USART3_UDRE_vect</argument>)</argument_list></macro>
<block PREFIX:line="256" PREFIX:column="1">{
  <if PREFIX:line="257" PREFIX:column="3">if <condition PREFIX:line="257" PREFIX:column="6">(<expr><name><name PREFIX:line="257" PREFIX:column="7">tx_buffer3</name>.<name PREFIX:line="257" PREFIX:column="18">head</name></name> == <name><name PREFIX:line="257" PREFIX:column="26">tx_buffer3</name>.<name PREFIX:line="257" PREFIX:column="37">tail</name></name></expr>)</condition><then PREFIX:line="257" PREFIX:column="42"> <block PREFIX:line="257" PREFIX:column="43">{
	<comment type="line" PREFIX:line="258" PREFIX:column="9">// Buffer empty, so disable interrupts</comment>
    <expr_stmt><expr><call><name PREFIX:line="259" PREFIX:column="5">cbi</name><argument_list PREFIX:line="259" PREFIX:column="8">(<argument><expr><name PREFIX:line="259" PREFIX:column="9">UCSR3B</name></expr></argument>, <argument><expr><name PREFIX:line="259" PREFIX:column="17">UDRIE3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="261" PREFIX:column="3">else <block PREFIX:line="261" PREFIX:column="8">{
    <comment type="line" PREFIX:line="262" PREFIX:column="5">// There is more data in the output buffer. Send the next byte</comment>
    <decl_stmt><decl><type><name PREFIX:line="263" PREFIX:column="5">unknowntype</name> <name PREFIX:line="263" PREFIX:column="17">char</name></type> <name PREFIX:line="263" PREFIX:column="22">c</name> <init PREFIX:line="263" PREFIX:column="24">= <expr><name><name PREFIX:line="263" PREFIX:column="26">tx_buffer3</name>.<name PREFIX:line="263" PREFIX:column="37">buffer</name><index PREFIX:line="263" PREFIX:column="43">[<expr><name><name PREFIX:line="263" PREFIX:column="44">tx_buffer3</name>.<name PREFIX:line="263" PREFIX:column="55">tail</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name PREFIX:line="264" PREFIX:column="5">tx_buffer3</name>.<name PREFIX:line="264" PREFIX:column="16">tail</name></name> = (<name><name PREFIX:line="264" PREFIX:column="24">tx_buffer3</name>.<name PREFIX:line="264" PREFIX:column="35">tail</name></name> + 1) % <name PREFIX:line="264" PREFIX:column="47">SERIAL_BUFFER_SIZE</name></expr>;</expr_stmt>
	
    <expr_stmt><expr><name PREFIX:line="266" PREFIX:column="5">UDR3</name> = <name PREFIX:line="266" PREFIX:column="12">c</name></expr>;</expr_stmt>
  }</block></else></if>
}</block>
<cpp:endif PREFIX:line="269" PREFIX:column="1">#<cpp:directive PREFIX:line="269" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="line" PREFIX:line="272" PREFIX:column="1">// Constructors ////////////////////////////////////////////////////////////////</comment>

<constructor><name><name PREFIX:line="274" PREFIX:column="1">HardwareSerial</name>::<name PREFIX:line="274" PREFIX:column="17">HardwareSerial</name></name><parameter_list PREFIX:line="274" PREFIX:column="31">(<param><decl><type><name PREFIX:line="274" PREFIX:column="32">ring_buffer</name> *</type><name PREFIX:line="274" PREFIX:column="45">rx_buffer</name></decl></param>, <param><decl><type><name PREFIX:line="274" PREFIX:column="56">ring_buffer</name> *</type><name PREFIX:line="274" PREFIX:column="69">tx_buffer</name></decl></param>,
  <param><decl><type><specifier PREFIX:line="275" PREFIX:column="3">volatile</specifier> <name PREFIX:line="275" PREFIX:column="12">uint8_t</name> *</type><name PREFIX:line="275" PREFIX:column="21">ubrrh</name></decl></param>, <param><decl><type><specifier PREFIX:line="275" PREFIX:column="28">volatile</specifier> <name PREFIX:line="275" PREFIX:column="37">uint8_t</name> *</type><name PREFIX:line="275" PREFIX:column="46">ubrrl</name></decl></param>,
  <param><decl><type><specifier PREFIX:line="276" PREFIX:column="3">volatile</specifier> <name PREFIX:line="276" PREFIX:column="12">uint8_t</name> *</type><name PREFIX:line="276" PREFIX:column="21">ucsra</name></decl></param>, <param><decl><type><specifier PREFIX:line="276" PREFIX:column="28">volatile</specifier> <name PREFIX:line="276" PREFIX:column="37">uint8_t</name> *</type><name PREFIX:line="276" PREFIX:column="46">ucsrb</name></decl></param>,
  <param><decl><type><specifier PREFIX:line="277" PREFIX:column="3">volatile</specifier> <name PREFIX:line="277" PREFIX:column="12">uint8_t</name> *</type><name PREFIX:line="277" PREFIX:column="21">udr</name></decl></param>,
  <param><decl><type><name PREFIX:line="278" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="278" PREFIX:column="11">rxen</name></decl></param>, <param><decl><type><name PREFIX:line="278" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="278" PREFIX:column="25">txen</name></decl></param>, <param><decl><type><name PREFIX:line="278" PREFIX:column="31">uint8_t</name></type> <name PREFIX:line="278" PREFIX:column="39">rxcie</name></decl></param>, <param><decl><type><name PREFIX:line="278" PREFIX:column="46">uint8_t</name></type> <name PREFIX:line="278" PREFIX:column="54">udrie</name></decl></param>, <param><decl><type><name PREFIX:line="278" PREFIX:column="61">uint8_t</name></type> <name PREFIX:line="278" PREFIX:column="69">u2x</name></decl></param>)</parameter_list>
<block PREFIX:line="279" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="280" PREFIX:column="3">_rx_buffer</name> = <name PREFIX:line="280" PREFIX:column="16">rx_buffer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="281" PREFIX:column="3">_tx_buffer</name> = <name PREFIX:line="281" PREFIX:column="16">tx_buffer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="282" PREFIX:column="3">_ubrrh</name> = <name PREFIX:line="282" PREFIX:column="12">ubrrh</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="283" PREFIX:column="3">_ubrrl</name> = <name PREFIX:line="283" PREFIX:column="12">ubrrl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="284" PREFIX:column="3">_ucsra</name> = <name PREFIX:line="284" PREFIX:column="12">ucsra</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="285" PREFIX:column="3">_ucsrb</name> = <name PREFIX:line="285" PREFIX:column="12">ucsrb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="286" PREFIX:column="3">_udr</name> = <name PREFIX:line="286" PREFIX:column="10">udr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="287" PREFIX:column="3">_rxen</name> = <name PREFIX:line="287" PREFIX:column="11">rxen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="288" PREFIX:column="3">_txen</name> = <name PREFIX:line="288" PREFIX:column="11">txen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="289" PREFIX:column="3">_rxcie</name> = <name PREFIX:line="289" PREFIX:column="12">rxcie</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="290" PREFIX:column="3">_udrie</name> = <name PREFIX:line="290" PREFIX:column="12">udrie</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="291" PREFIX:column="3">_u2x</name> = <name PREFIX:line="291" PREFIX:column="10">u2x</name></expr>;</expr_stmt>
}</block></constructor>

<comment type="line" PREFIX:line="294" PREFIX:column="1">// Public Methods //////////////////////////////////////////////////////////////</comment>

<function><type><name PREFIX:line="296" PREFIX:column="1">void</name></type> <name><name PREFIX:line="296" PREFIX:column="6">HardwareSerial</name>::<name PREFIX:line="296" PREFIX:column="22">begin</name></name><parameter_list PREFIX:line="296" PREFIX:column="27">(<param><decl><type><name PREFIX:line="296" PREFIX:column="28">unknowntype</name> <name PREFIX:line="296" PREFIX:column="40">long</name></type> <name PREFIX:line="296" PREFIX:column="45">baud</name></decl></param>)</parameter_list>
<block PREFIX:line="297" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="298" PREFIX:column="3">uint16_t</name></type> <name PREFIX:line="298" PREFIX:column="12">baud_setting</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="299" PREFIX:column="3">bool</name></type> <name PREFIX:line="299" PREFIX:column="8">use_u2x</name> <init PREFIX:line="299" PREFIX:column="16">= <expr PREFIX:line="299" PREFIX:column="18">true</expr></init></decl>;</decl_stmt>

<cpp:if PREFIX:line="301" PREFIX:column="1">#<cpp:directive PREFIX:line="301" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="301" PREFIX:column="5">F_CPU</name> == 16000000UL</expr></cpp:if>
  <comment type="line" PREFIX:line="302" PREFIX:column="3">// hardcoded exception for compatibility with the bootloader shipped</comment>
  <comment type="line" PREFIX:line="303" PREFIX:column="3">// with the Duemilanove and previous boards and the firmware on the 8U2</comment>
  <comment type="line" PREFIX:line="304" PREFIX:column="3">// on the Uno and Mega 2560.</comment>
  <if PREFIX:line="305" PREFIX:column="3">if <condition PREFIX:line="305" PREFIX:column="6">(<expr><name PREFIX:line="305" PREFIX:column="7">baud</name> == 57600</expr>)</condition><then PREFIX:line="305" PREFIX:column="21"> <block PREFIX:line="305" PREFIX:column="22">{
    <expr_stmt><expr><name PREFIX:line="306" PREFIX:column="5">use_u2x</name> = false</expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif PREFIX:line="308" PREFIX:column="1">#<cpp:directive PREFIX:line="308" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<label><name PREFIX:line="310" PREFIX:column="1">try_again</name>:</label>
  
  <if PREFIX:line="312" PREFIX:column="3">if <condition PREFIX:line="312" PREFIX:column="6">(<expr><name PREFIX:line="312" PREFIX:column="7">use_u2x</name></expr>)</condition><then PREFIX:line="312" PREFIX:column="15"> <block PREFIX:line="312" PREFIX:column="16">{
    <expr_stmt><expr PREFIX:line="313" PREFIX:column="5">*<name PREFIX:line="313" PREFIX:column="6">_ucsra</name> = 1 &lt;&lt; <name PREFIX:line="313" PREFIX:column="20">_u2x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="314" PREFIX:column="5">baud_setting</name> = (<name PREFIX:line="314" PREFIX:column="21">F_CPU</name> / 4 / <name PREFIX:line="314" PREFIX:column="33">baud</name> - 1) / 2</expr>;</expr_stmt>
  }</block></then> <else PREFIX:line="315" PREFIX:column="5">else <block PREFIX:line="315" PREFIX:column="10">{
    <expr_stmt><expr PREFIX:line="316" PREFIX:column="5">*<name PREFIX:line="316" PREFIX:column="6">_ucsra</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="317" PREFIX:column="5">baud_setting</name> = (<name PREFIX:line="317" PREFIX:column="21">F_CPU</name> / 8 / <name PREFIX:line="317" PREFIX:column="33">baud</name> - 1) / 2</expr>;</expr_stmt>
  }</block></else></if>
  
  <if PREFIX:line="320" PREFIX:column="3">if <condition PREFIX:line="320" PREFIX:column="6">(<expr PREFIX:line="320" PREFIX:column="7">(<name PREFIX:line="320" PREFIX:column="8">baud_setting</name> &gt; 4095) &amp;&amp; <name PREFIX:line="320" PREFIX:column="32">use_u2x</name></expr>)</condition><then PREFIX:line="320" PREFIX:column="40">
  <block PREFIX:line="321" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="322" PREFIX:column="5">use_u2x</name> = false</expr>;</expr_stmt>
    <goto PREFIX:line="323" PREFIX:column="5">goto <name PREFIX:line="323" PREFIX:column="10">try_again</name>;</goto>
  }</block></then></if>

  <comment type="line" PREFIX:line="326" PREFIX:column="3">// assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)</comment>
  <expr_stmt><expr PREFIX:line="327" PREFIX:column="3">*<name PREFIX:line="327" PREFIX:column="4">_ubrrh</name> = <name PREFIX:line="327" PREFIX:column="13">baud_setting</name> &gt;&gt; 8</expr>;</expr_stmt>
  <expr_stmt><expr PREFIX:line="328" PREFIX:column="3">*<name PREFIX:line="328" PREFIX:column="4">_ubrrl</name> = <name PREFIX:line="328" PREFIX:column="13">baud_setting</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name PREFIX:line="330" PREFIX:column="3">sbi</name><argument_list PREFIX:line="330" PREFIX:column="6">(<argument><expr PREFIX:line="330" PREFIX:column="7">*<name PREFIX:line="330" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="330" PREFIX:column="16">_rxen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="331" PREFIX:column="3">sbi</name><argument_list PREFIX:line="331" PREFIX:column="6">(<argument><expr PREFIX:line="331" PREFIX:column="7">*<name PREFIX:line="331" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="331" PREFIX:column="16">_txen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="332" PREFIX:column="3">sbi</name><argument_list PREFIX:line="332" PREFIX:column="6">(<argument><expr PREFIX:line="332" PREFIX:column="7">*<name PREFIX:line="332" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="332" PREFIX:column="16">_rxcie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="333" PREFIX:column="3">cbi</name><argument_list PREFIX:line="333" PREFIX:column="6">(<argument><expr PREFIX:line="333" PREFIX:column="7">*<name PREFIX:line="333" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="333" PREFIX:column="16">_udrie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="336" PREFIX:column="1">void</name></type> <name><name PREFIX:line="336" PREFIX:column="6">HardwareSerial</name>::<name PREFIX:line="336" PREFIX:column="22">end</name></name><parameter_list PREFIX:line="336" PREFIX:column="25">()</parameter_list>
<block PREFIX:line="337" PREFIX:column="1">{
  <comment type="line" PREFIX:line="338" PREFIX:column="3">// wait for transmission of outgoing data</comment>
  <while PREFIX:line="339" PREFIX:column="3">while <condition PREFIX:line="339" PREFIX:column="9">(<expr><name><name PREFIX:line="339" PREFIX:column="10">_tx_buffer</name>-&gt;<name PREFIX:line="339" PREFIX:column="22">head</name></name> != <name><name PREFIX:line="339" PREFIX:column="30">_tx_buffer</name>-&gt;<name PREFIX:line="339" PREFIX:column="42">tail</name></name></expr>)</condition>
    <empty_stmt PREFIX:line="340" PREFIX:column="5">;</empty_stmt></while>

  <expr_stmt><expr><call><name PREFIX:line="342" PREFIX:column="3">cbi</name><argument_list PREFIX:line="342" PREFIX:column="6">(<argument><expr PREFIX:line="342" PREFIX:column="7">*<name PREFIX:line="342" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="342" PREFIX:column="16">_rxen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="343" PREFIX:column="3">cbi</name><argument_list PREFIX:line="343" PREFIX:column="6">(<argument><expr PREFIX:line="343" PREFIX:column="7">*<name PREFIX:line="343" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="343" PREFIX:column="16">_txen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="344" PREFIX:column="3">cbi</name><argument_list PREFIX:line="344" PREFIX:column="6">(<argument><expr PREFIX:line="344" PREFIX:column="7">*<name PREFIX:line="344" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="344" PREFIX:column="16">_rxcie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name PREFIX:line="345" PREFIX:column="3">cbi</name><argument_list PREFIX:line="345" PREFIX:column="6">(<argument><expr PREFIX:line="345" PREFIX:column="7">*<name PREFIX:line="345" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="345" PREFIX:column="16">_udrie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line" PREFIX:line="347" PREFIX:column="3">// clear any received data</comment>
  <expr_stmt><expr><name><name PREFIX:line="348" PREFIX:column="3">_rx_buffer</name>-&gt;<name PREFIX:line="348" PREFIX:column="15">head</name></name> = <name><name PREFIX:line="348" PREFIX:column="22">_rx_buffer</name>-&gt;<name PREFIX:line="348" PREFIX:column="34">tail</name></name></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="351" PREFIX:column="1">int</name></type> <name><name PREFIX:line="351" PREFIX:column="5">HardwareSerial</name>::<name PREFIX:line="351" PREFIX:column="21">available</name></name><parameter_list PREFIX:line="351" PREFIX:column="30">(<param><decl><type><name PREFIX:line="351" PREFIX:column="31">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="352" PREFIX:column="1">{
  <return PREFIX:line="353" PREFIX:column="3">return <expr><call PREFIX:line="353" PREFIX:column="10">(<name PREFIX:line="353" PREFIX:column="11">unknowntype</name> <name PREFIX:line="353" PREFIX:column="23">int</name>)<argument_list PREFIX:line="353" PREFIX:column="27">(<argument><expr><name PREFIX:line="353" PREFIX:column="28">SERIAL_BUFFER_SIZE</name> + <name><name PREFIX:line="353" PREFIX:column="49">_rx_buffer</name>-&gt;<name PREFIX:line="353" PREFIX:column="61">head</name></name> - <name><name PREFIX:line="353" PREFIX:column="68">_rx_buffer</name>-&gt;<name PREFIX:line="353" PREFIX:column="80">tail</name></name></expr></argument>)</argument_list></call> % <name PREFIX:line="353" PREFIX:column="88">SERIAL_BUFFER_SIZE</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="356" PREFIX:column="1">int</name></type> <name><name PREFIX:line="356" PREFIX:column="5">HardwareSerial</name>::<name PREFIX:line="356" PREFIX:column="21">peek</name></name><parameter_list PREFIX:line="356" PREFIX:column="25">(<param><decl><type><name PREFIX:line="356" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="357" PREFIX:column="1">{
  <if PREFIX:line="358" PREFIX:column="3">if <condition PREFIX:line="358" PREFIX:column="6">(<expr><name><name PREFIX:line="358" PREFIX:column="7">_rx_buffer</name>-&gt;<name PREFIX:line="358" PREFIX:column="19">head</name></name> == <name><name PREFIX:line="358" PREFIX:column="27">_rx_buffer</name>-&gt;<name PREFIX:line="358" PREFIX:column="39">tail</name></name></expr>)</condition><then PREFIX:line="358" PREFIX:column="44"> <block PREFIX:line="358" PREFIX:column="45">{
    <return PREFIX:line="359" PREFIX:column="5">return <expr PREFIX:line="359" PREFIX:column="12">-1</expr>;</return>
  }</block></then> <else PREFIX:line="360" PREFIX:column="5">else <block PREFIX:line="360" PREFIX:column="10">{
    <return PREFIX:line="361" PREFIX:column="5">return <expr><name><name PREFIX:line="361" PREFIX:column="12">_rx_buffer</name>-&gt;<name PREFIX:line="361" PREFIX:column="24">buffer</name><index PREFIX:line="361" PREFIX:column="30">[<expr><name><name PREFIX:line="361" PREFIX:column="31">_rx_buffer</name>-&gt;<name PREFIX:line="361" PREFIX:column="43">tail</name></name></expr>]</index></name></expr>;</return>
  }</block></else></if>
}</block></function>

<function><type><name PREFIX:line="365" PREFIX:column="1">int</name></type> <name><name PREFIX:line="365" PREFIX:column="5">HardwareSerial</name>::<name PREFIX:line="365" PREFIX:column="21">read</name></name><parameter_list PREFIX:line="365" PREFIX:column="25">(<param><decl><type><name PREFIX:line="365" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="366" PREFIX:column="1">{
  <comment type="line" PREFIX:line="367" PREFIX:column="3">// if the head isn't ahead of the tail, we don't have any characters</comment>
  <if PREFIX:line="368" PREFIX:column="3">if <condition PREFIX:line="368" PREFIX:column="6">(<expr><name><name PREFIX:line="368" PREFIX:column="7">_rx_buffer</name>-&gt;<name PREFIX:line="368" PREFIX:column="19">head</name></name> == <name><name PREFIX:line="368" PREFIX:column="27">_rx_buffer</name>-&gt;<name PREFIX:line="368" PREFIX:column="39">tail</name></name></expr>)</condition><then PREFIX:line="368" PREFIX:column="44"> <block PREFIX:line="368" PREFIX:column="45">{
    <return PREFIX:line="369" PREFIX:column="5">return <expr PREFIX:line="369" PREFIX:column="12">-1</expr>;</return>
  }</block></then> <else PREFIX:line="370" PREFIX:column="5">else <block PREFIX:line="370" PREFIX:column="10">{
    <decl_stmt><decl><type><name PREFIX:line="371" PREFIX:column="5">unknowntype</name> <name PREFIX:line="371" PREFIX:column="17">char</name></type> <name PREFIX:line="371" PREFIX:column="22">c</name> <init PREFIX:line="371" PREFIX:column="24">= <expr><name><name PREFIX:line="371" PREFIX:column="26">_rx_buffer</name>-&gt;<name PREFIX:line="371" PREFIX:column="38">buffer</name><index PREFIX:line="371" PREFIX:column="44">[<expr><name><name PREFIX:line="371" PREFIX:column="45">_rx_buffer</name>-&gt;<name PREFIX:line="371" PREFIX:column="57">tail</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name PREFIX:line="372" PREFIX:column="5">_rx_buffer</name>-&gt;<name PREFIX:line="372" PREFIX:column="17">tail</name></name> = <call PREFIX:line="372" PREFIX:column="24">(<name PREFIX:line="372" PREFIX:column="25">unknowntype</name> <name PREFIX:line="372" PREFIX:column="37">int</name>)<argument_list PREFIX:line="372" PREFIX:column="41">(<argument><expr><name><name PREFIX:line="372" PREFIX:column="42">_rx_buffer</name>-&gt;<name PREFIX:line="372" PREFIX:column="54">tail</name></name> + 1</expr></argument>)</argument_list></call> % <name PREFIX:line="372" PREFIX:column="66">SERIAL_BUFFER_SIZE</name></expr>;</expr_stmt>
    <return PREFIX:line="373" PREFIX:column="5">return <expr><name PREFIX:line="373" PREFIX:column="12">c</name></expr>;</return>
  }</block></else></if>
}</block></function>

<function><type><name PREFIX:line="377" PREFIX:column="1">void</name></type> <name><name PREFIX:line="377" PREFIX:column="6">HardwareSerial</name>::<name PREFIX:line="377" PREFIX:column="22">flush</name></name><parameter_list PREFIX:line="377" PREFIX:column="27">()</parameter_list>
<block PREFIX:line="378" PREFIX:column="1">{
  <while PREFIX:line="379" PREFIX:column="3">while <condition PREFIX:line="379" PREFIX:column="9">(<expr><name><name PREFIX:line="379" PREFIX:column="10">_tx_buffer</name>-&gt;<name PREFIX:line="379" PREFIX:column="22">head</name></name> != <name><name PREFIX:line="379" PREFIX:column="30">_tx_buffer</name>-&gt;<name PREFIX:line="379" PREFIX:column="42">tail</name></name></expr>)</condition>
    <empty_stmt PREFIX:line="380" PREFIX:column="5">;</empty_stmt></while>
}</block></function>

<function><type><name PREFIX:line="383" PREFIX:column="1">size_t</name></type> <name><name PREFIX:line="383" PREFIX:column="8">HardwareSerial</name>::<name PREFIX:line="383" PREFIX:column="24">write</name></name><parameter_list PREFIX:line="383" PREFIX:column="29">(<param><decl><type><name PREFIX:line="383" PREFIX:column="30">uint8_t</name></type> <name PREFIX:line="383" PREFIX:column="38">c</name></decl></param>)</parameter_list>
<block PREFIX:line="384" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="385" PREFIX:column="3">int</name></type> <name PREFIX:line="385" PREFIX:column="7">i</name> <init PREFIX:line="385" PREFIX:column="9">= <expr PREFIX:line="385" PREFIX:column="11">(<name><name PREFIX:line="385" PREFIX:column="12">_tx_buffer</name>-&gt;<name PREFIX:line="385" PREFIX:column="24">head</name></name> + 1) % <name PREFIX:line="385" PREFIX:column="36">SERIAL_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>
	
  <comment type="line" PREFIX:line="387" PREFIX:column="3">// If the output buffer is full, there's nothing for it other than to </comment>
  <comment type="line" PREFIX:line="388" PREFIX:column="3">// wait for the interrupt handler to empty it a bit</comment>
  <comment type="line" PREFIX:line="389" PREFIX:column="3">// ???: return 0 here instead?</comment>
  <while PREFIX:line="390" PREFIX:column="3">while <condition PREFIX:line="390" PREFIX:column="9">(<expr><name PREFIX:line="390" PREFIX:column="10">i</name> == <name><name PREFIX:line="390" PREFIX:column="15">_tx_buffer</name>-&gt;<name PREFIX:line="390" PREFIX:column="27">tail</name></name></expr>)</condition>
    <empty_stmt PREFIX:line="391" PREFIX:column="5">;</empty_stmt></while>
	
  <expr_stmt><expr><name><name PREFIX:line="393" PREFIX:column="3">_tx_buffer</name>-&gt;<name PREFIX:line="393" PREFIX:column="15">buffer</name><index PREFIX:line="393" PREFIX:column="21">[<expr><name><name PREFIX:line="393" PREFIX:column="22">_tx_buffer</name>-&gt;<name PREFIX:line="393" PREFIX:column="34">head</name></name></expr>]</index></name> = <name PREFIX:line="393" PREFIX:column="42">c</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="394" PREFIX:column="3">_tx_buffer</name>-&gt;<name PREFIX:line="394" PREFIX:column="15">head</name></name> = <name PREFIX:line="394" PREFIX:column="22">i</name></expr>;</expr_stmt>
	
  <expr_stmt><expr><call><name PREFIX:line="396" PREFIX:column="3">sbi</name><argument_list PREFIX:line="396" PREFIX:column="6">(<argument><expr PREFIX:line="396" PREFIX:column="7">*<name PREFIX:line="396" PREFIX:column="8">_ucsrb</name></expr></argument>, <argument><expr><name PREFIX:line="396" PREFIX:column="16">_udrie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return PREFIX:line="398" PREFIX:column="3">return <expr PREFIX:line="398" PREFIX:column="10">1</expr>;</return>
}</block></function>

<function><name><name PREFIX:line="401" PREFIX:column="1">HardwareSerial</name>::<name PREFIX:line="401" PREFIX:column="17">operator bool</name></name><parameter_list PREFIX:line="401" PREFIX:column="30">()</parameter_list> <block PREFIX:line="401" PREFIX:column="33">{
	<return PREFIX:line="402" PREFIX:column="9">return <expr PREFIX:line="402" PREFIX:column="16">true</expr>;</return>
}</block></function>

<comment type="line" PREFIX:line="405" PREFIX:column="1">// Preinstantiate Objects //////////////////////////////////////////////////////</comment>

<cpp:if PREFIX:line="407" PREFIX:column="1">#<cpp:directive PREFIX:line="407" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="407" PREFIX:column="5">defined</name><argument_list PREFIX:line="407" PREFIX:column="12">(<argument><expr><name PREFIX:line="407" PREFIX:column="13">UBRRH</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="407" PREFIX:column="23">defined</name><argument_list PREFIX:line="407" PREFIX:column="30">(<argument><expr><name PREFIX:line="407" PREFIX:column="31">UBRRL</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="408" PREFIX:column="3">HardwareSerial</name></type> <name PREFIX:line="408" PREFIX:column="18">Serial</name><argument_list PREFIX:line="408" PREFIX:column="24">(<argument><expr PREFIX:line="408" PREFIX:column="25">&amp;<name PREFIX:line="408" PREFIX:column="26">rx_buffer</name></expr></argument>, <argument><expr PREFIX:line="408" PREFIX:column="37">&amp;<name PREFIX:line="408" PREFIX:column="38">tx_buffer</name></expr></argument>, <argument><expr PREFIX:line="408" PREFIX:column="49">&amp;<name PREFIX:line="408" PREFIX:column="50">UBRRH</name></expr></argument>, <argument><expr PREFIX:line="408" PREFIX:column="57">&amp;<name PREFIX:line="408" PREFIX:column="58">UBRRL</name></expr></argument>, <argument><expr PREFIX:line="408" PREFIX:column="65">&amp;<name PREFIX:line="408" PREFIX:column="66">UCSRA</name></expr></argument>, <argument><expr PREFIX:line="408" PREFIX:column="73">&amp;<name PREFIX:line="408" PREFIX:column="74">UCSRB</name></expr></argument>, <argument><expr PREFIX:line="408" PREFIX:column="81">&amp;<name PREFIX:line="408" PREFIX:column="82">UDR</name></expr></argument>, <argument><expr><name PREFIX:line="408" PREFIX:column="87">RXEN</name></expr></argument>, <argument><expr><name PREFIX:line="408" PREFIX:column="93">TXEN</name></expr></argument>, <argument><expr><name PREFIX:line="408" PREFIX:column="99">RXCIE</name></expr></argument>, <argument><expr><name PREFIX:line="408" PREFIX:column="106">UDRIE</name></expr></argument>, <argument><expr><name PREFIX:line="408" PREFIX:column="113">U2X</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:elif PREFIX:line="409" PREFIX:column="1">#<cpp:directive PREFIX:line="409" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="409" PREFIX:column="7">defined</name><argument_list PREFIX:line="409" PREFIX:column="14">(<argument><expr><name PREFIX:line="409" PREFIX:column="15">UBRR0H</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="409" PREFIX:column="26">defined</name><argument_list PREFIX:line="409" PREFIX:column="33">(<argument><expr><name PREFIX:line="409" PREFIX:column="34">UBRR0L</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name PREFIX:line="410" PREFIX:column="3">HardwareSerial</name></type> <name PREFIX:line="410" PREFIX:column="18">Serial</name><argument_list PREFIX:line="410" PREFIX:column="24">(<argument><expr PREFIX:line="410" PREFIX:column="25">&amp;<name PREFIX:line="410" PREFIX:column="26">rx_buffer</name></expr></argument>, <argument><expr PREFIX:line="410" PREFIX:column="37">&amp;<name PREFIX:line="410" PREFIX:column="38">tx_buffer</name></expr></argument>, <argument><expr PREFIX:line="410" PREFIX:column="49">&amp;<name PREFIX:line="410" PREFIX:column="50">UBRR0H</name></expr></argument>, <argument><expr PREFIX:line="410" PREFIX:column="58">&amp;<name PREFIX:line="410" PREFIX:column="59">UBRR0L</name></expr></argument>, <argument><expr PREFIX:line="410" PREFIX:column="67">&amp;<name PREFIX:line="410" PREFIX:column="68">UCSR0A</name></expr></argument>, <argument><expr PREFIX:line="410" PREFIX:column="76">&amp;<name PREFIX:line="410" PREFIX:column="77">UCSR0B</name></expr></argument>, <argument><expr PREFIX:line="410" PREFIX:column="85">&amp;<name PREFIX:line="410" PREFIX:column="86">UDR0</name></expr></argument>, <argument><expr><name PREFIX:line="410" PREFIX:column="92">RXEN0</name></expr></argument>, <argument><expr><name PREFIX:line="410" PREFIX:column="99">TXEN0</name></expr></argument>, <argument><expr><name PREFIX:line="410" PREFIX:column="106">RXCIE0</name></expr></argument>, <argument><expr><name PREFIX:line="410" PREFIX:column="114">UDRIE0</name></expr></argument>, <argument><expr><name PREFIX:line="410" PREFIX:column="122">U2X0</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:elif PREFIX:line="411" PREFIX:column="1">#<cpp:directive PREFIX:line="411" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="411" PREFIX:column="7">defined</name><argument_list PREFIX:line="411" PREFIX:column="14">(<argument><expr><name PREFIX:line="411" PREFIX:column="15">USBCON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="line" PREFIX:line="412" PREFIX:column="3">// do nothing - Serial object and buffers are initialized in CDC code</comment>
<cpp:else PREFIX:line="413" PREFIX:column="1">#<cpp:directive PREFIX:line="413" PREFIX:column="2">else</cpp:directive></cpp:else>
  <cpp:error PREFIX:line="414" PREFIX:column="3">#<cpp:directive PREFIX:line="414" PREFIX:column="4">error</cpp:directive> no serial port defined  (port 0)</cpp:error>
<cpp:endif PREFIX:line="415" PREFIX:column="1">#<cpp:directive PREFIX:line="415" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="417" PREFIX:column="1">#<cpp:directive PREFIX:line="417" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="417" PREFIX:column="5">defined</name><argument_list PREFIX:line="417" PREFIX:column="12">(<argument><expr><name PREFIX:line="417" PREFIX:column="13">UBRR1H</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="418" PREFIX:column="3">HardwareSerial</name></type> <name PREFIX:line="418" PREFIX:column="18">Serial1</name><argument_list PREFIX:line="418" PREFIX:column="25">(<argument><expr PREFIX:line="418" PREFIX:column="26">&amp;<name PREFIX:line="418" PREFIX:column="27">rx_buffer1</name></expr></argument>, <argument><expr PREFIX:line="418" PREFIX:column="39">&amp;<name PREFIX:line="418" PREFIX:column="40">tx_buffer1</name></expr></argument>, <argument><expr PREFIX:line="418" PREFIX:column="52">&amp;<name PREFIX:line="418" PREFIX:column="53">UBRR1H</name></expr></argument>, <argument><expr PREFIX:line="418" PREFIX:column="61">&amp;<name PREFIX:line="418" PREFIX:column="62">UBRR1L</name></expr></argument>, <argument><expr PREFIX:line="418" PREFIX:column="70">&amp;<name PREFIX:line="418" PREFIX:column="71">UCSR1A</name></expr></argument>, <argument><expr PREFIX:line="418" PREFIX:column="79">&amp;<name PREFIX:line="418" PREFIX:column="80">UCSR1B</name></expr></argument>, <argument><expr PREFIX:line="418" PREFIX:column="88">&amp;<name PREFIX:line="418" PREFIX:column="89">UDR1</name></expr></argument>, <argument><expr><name PREFIX:line="418" PREFIX:column="95">RXEN1</name></expr></argument>, <argument><expr><name PREFIX:line="418" PREFIX:column="102">TXEN1</name></expr></argument>, <argument><expr><name PREFIX:line="418" PREFIX:column="109">RXCIE1</name></expr></argument>, <argument><expr><name PREFIX:line="418" PREFIX:column="117">UDRIE1</name></expr></argument>, <argument><expr><name PREFIX:line="418" PREFIX:column="125">U2X1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif PREFIX:line="419" PREFIX:column="1">#<cpp:directive PREFIX:line="419" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="420" PREFIX:column="1">#<cpp:directive PREFIX:line="420" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="420" PREFIX:column="5">defined</name><argument_list PREFIX:line="420" PREFIX:column="12">(<argument><expr><name PREFIX:line="420" PREFIX:column="13">UBRR2H</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="421" PREFIX:column="3">HardwareSerial</name></type> <name PREFIX:line="421" PREFIX:column="18">Serial2</name><argument_list PREFIX:line="421" PREFIX:column="25">(<argument><expr PREFIX:line="421" PREFIX:column="26">&amp;<name PREFIX:line="421" PREFIX:column="27">rx_buffer2</name></expr></argument>, <argument><expr PREFIX:line="421" PREFIX:column="39">&amp;<name PREFIX:line="421" PREFIX:column="40">tx_buffer2</name></expr></argument>, <argument><expr PREFIX:line="421" PREFIX:column="52">&amp;<name PREFIX:line="421" PREFIX:column="53">UBRR2H</name></expr></argument>, <argument><expr PREFIX:line="421" PREFIX:column="61">&amp;<name PREFIX:line="421" PREFIX:column="62">UBRR2L</name></expr></argument>, <argument><expr PREFIX:line="421" PREFIX:column="70">&amp;<name PREFIX:line="421" PREFIX:column="71">UCSR2A</name></expr></argument>, <argument><expr PREFIX:line="421" PREFIX:column="79">&amp;<name PREFIX:line="421" PREFIX:column="80">UCSR2B</name></expr></argument>, <argument><expr PREFIX:line="421" PREFIX:column="88">&amp;<name PREFIX:line="421" PREFIX:column="89">UDR2</name></expr></argument>, <argument><expr><name PREFIX:line="421" PREFIX:column="95">RXEN2</name></expr></argument>, <argument><expr><name PREFIX:line="421" PREFIX:column="102">TXEN2</name></expr></argument>, <argument><expr><name PREFIX:line="421" PREFIX:column="109">RXCIE2</name></expr></argument>, <argument><expr><name PREFIX:line="421" PREFIX:column="117">UDRIE2</name></expr></argument>, <argument><expr><name PREFIX:line="421" PREFIX:column="125">U2X2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif PREFIX:line="422" PREFIX:column="1">#<cpp:directive PREFIX:line="422" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="423" PREFIX:column="1">#<cpp:directive PREFIX:line="423" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="423" PREFIX:column="5">defined</name><argument_list PREFIX:line="423" PREFIX:column="12">(<argument><expr><name PREFIX:line="423" PREFIX:column="13">UBRR3H</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name PREFIX:line="424" PREFIX:column="3">HardwareSerial</name></type> <name PREFIX:line="424" PREFIX:column="18">Serial3</name><argument_list PREFIX:line="424" PREFIX:column="25">(<argument><expr PREFIX:line="424" PREFIX:column="26">&amp;<name PREFIX:line="424" PREFIX:column="27">rx_buffer3</name></expr></argument>, <argument><expr PREFIX:line="424" PREFIX:column="39">&amp;<name PREFIX:line="424" PREFIX:column="40">tx_buffer3</name></expr></argument>, <argument><expr PREFIX:line="424" PREFIX:column="52">&amp;<name PREFIX:line="424" PREFIX:column="53">UBRR3H</name></expr></argument>, <argument><expr PREFIX:line="424" PREFIX:column="61">&amp;<name PREFIX:line="424" PREFIX:column="62">UBRR3L</name></expr></argument>, <argument><expr PREFIX:line="424" PREFIX:column="70">&amp;<name PREFIX:line="424" PREFIX:column="71">UCSR3A</name></expr></argument>, <argument><expr PREFIX:line="424" PREFIX:column="79">&amp;<name PREFIX:line="424" PREFIX:column="80">UCSR3B</name></expr></argument>, <argument><expr PREFIX:line="424" PREFIX:column="88">&amp;<name PREFIX:line="424" PREFIX:column="89">UDR3</name></expr></argument>, <argument><expr><name PREFIX:line="424" PREFIX:column="95">RXEN3</name></expr></argument>, <argument><expr><name PREFIX:line="424" PREFIX:column="102">TXEN3</name></expr></argument>, <argument><expr><name PREFIX:line="424" PREFIX:column="109">RXCIE3</name></expr></argument>, <argument><expr><name PREFIX:line="424" PREFIX:column="117">UDRIE3</name></expr></argument>, <argument><expr><name PREFIX:line="424" PREFIX:column="125">U2X3</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif PREFIX:line="425" PREFIX:column="1">#<cpp:directive PREFIX:line="425" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif PREFIX:line="427" PREFIX:column="1">#<cpp:directive PREFIX:line="427" PREFIX:column="2">endif</cpp:directive></cpp:endif> <comment type="line" PREFIX:line="427" PREFIX:column="8">// whole file</comment>

</unit>
