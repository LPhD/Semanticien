<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/WInterrupts.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block" PREFIX:line="3" PREFIX:column="1">/*
  Part of the Wiring project - http://wiring.uniandes.edu.co

  Copyright (c) 2004-05 Hernando Barragan

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA
  
  Modified 24 November 2006 by David A. Mellis
  Modified 1 August 2010 by Mark Sproul
*/</comment>

<cpp:include PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="28" PREFIX:column="1">#<cpp:directive PREFIX:line="28" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="28" PREFIX:column="10">&lt;avr/io.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="29" PREFIX:column="1">#<cpp:directive PREFIX:line="29" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="29" PREFIX:column="10">&lt;avr/interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="30" PREFIX:column="1">#<cpp:directive PREFIX:line="30" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="30" PREFIX:column="10">&lt;avr/pgmspace.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="31" PREFIX:column="1">#<cpp:directive PREFIX:line="31" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="31" PREFIX:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include PREFIX:line="33" PREFIX:column="1">#<cpp:directive PREFIX:line="33" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="33" PREFIX:column="10">"wiring_private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier PREFIX:line="35" PREFIX:column="1">static</specifier> <specifier PREFIX:line="35" PREFIX:column="8">volatile</specifier> <name PREFIX:line="35" PREFIX:column="17">voidFuncPtr</name></type> <name><name PREFIX:line="35" PREFIX:column="29">intFunc</name><index PREFIX:line="35" PREFIX:column="36">[<expr><name PREFIX:line="35" PREFIX:column="37">EXTERNAL_NUM_INTERRUPTS</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="line" PREFIX:line="36" PREFIX:column="1">// volatile static voidFuncPtr twiIntFunc;</comment>

<function><type><name PREFIX:line="38" PREFIX:column="1">void</name></type> <name PREFIX:line="38" PREFIX:column="6">attachInterrupt</name><parameter_list PREFIX:line="38" PREFIX:column="21">(<param><decl><type><name PREFIX:line="38" PREFIX:column="22">uint8_t</name></type> <name PREFIX:line="38" PREFIX:column="30">interruptNum</name></decl></param>, <param><function_decl><type><name PREFIX:line="38" PREFIX:column="44">void</name></type> (*<name PREFIX:line="38" PREFIX:column="51">userFunc</name>)<parameter_list PREFIX:line="38" PREFIX:column="60">(<param><decl><type><name PREFIX:line="38" PREFIX:column="61">void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name PREFIX:line="38" PREFIX:column="68">int</name></type> <name PREFIX:line="38" PREFIX:column="72">mode</name></decl></param>)</parameter_list> <block PREFIX:line="38" PREFIX:column="78">{
  <if PREFIX:line="39" PREFIX:column="3">if<condition PREFIX:line="39" PREFIX:column="5">(<expr><name PREFIX:line="39" PREFIX:column="6">interruptNum</name> &lt; <name PREFIX:line="39" PREFIX:column="21">EXTERNAL_NUM_INTERRUPTS</name></expr>)</condition><then PREFIX:line="39" PREFIX:column="45"> <block PREFIX:line="39" PREFIX:column="46">{
    <expr_stmt><expr><name><name PREFIX:line="40" PREFIX:column="5">intFunc</name><index PREFIX:line="40" PREFIX:column="12">[<expr><name PREFIX:line="40" PREFIX:column="13">interruptNum</name></expr>]</index></name> = <name PREFIX:line="40" PREFIX:column="29">userFunc</name></expr>;</expr_stmt>
    
    <comment type="line" PREFIX:line="42" PREFIX:column="5">// Configure the interrupt mode (trigger on low input, any change, rising</comment>
    <comment type="line" PREFIX:line="43" PREFIX:column="5">// edge, or falling edge).  The mode ants were chosen to correspond</comment>
    <comment type="line" PREFIX:line="44" PREFIX:column="5">// to the configuration bits in the hardware register, so we simply shift</comment>
    <comment type="line" PREFIX:line="45" PREFIX:column="5">// the mode into place.</comment>
      
    <comment type="line" PREFIX:line="47" PREFIX:column="5">// Enable the interrupt.</comment>
      
    <switch PREFIX:line="49" PREFIX:column="5">switch <condition PREFIX:line="49" PREFIX:column="12">(<expr><name PREFIX:line="49" PREFIX:column="13">interruptNum</name></expr>)</condition> <block PREFIX:line="49" PREFIX:column="27">{
<cpp:if PREFIX:line="50" PREFIX:column="1">#<cpp:directive PREFIX:line="50" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="50" PREFIX:column="5">defined</name><argument_list PREFIX:line="50" PREFIX:column="12">(<argument><expr><name PREFIX:line="50" PREFIX:column="13">__AVR_ATmega32U4__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="line" PREFIX:line="51" PREFIX:column="9">// I hate doing this, but the register assignment differs between the 1280/2560</comment>
	<comment type="line" PREFIX:line="52" PREFIX:column="9">// and the 32U4.  Since avrlib defines registers PCMSK1 and PCMSK2 that aren't </comment>
	<comment type="line" PREFIX:line="53" PREFIX:column="9">// even present on the 32U4 this is the only way to distinguish between them.</comment>
	<case PREFIX:line="54" PREFIX:column="9">case <expr PREFIX:line="54" PREFIX:column="14">0</expr>:
		<expr_stmt><expr><name PREFIX:line="55" PREFIX:column="17">EICRA</name> = (<name PREFIX:line="55" PREFIX:column="26">EICRA</name> &amp; ~((1&lt;&lt;<name PREFIX:line="55" PREFIX:column="40">ISC00</name>) | (1&lt;&lt;<name PREFIX:line="55" PREFIX:column="53">ISC01</name>))) | (<name PREFIX:line="55" PREFIX:column="65">mode</name> &lt;&lt; <name PREFIX:line="55" PREFIX:column="73">ISC00</name>)</expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="56" PREFIX:column="17">EIMSK</name> |= (1&lt;&lt;<name PREFIX:line="56" PREFIX:column="30">INT0</name>)</expr>;</expr_stmt>
		<break PREFIX:line="57" PREFIX:column="17">break;</break>
	</case><case PREFIX:line="58" PREFIX:column="9">case <expr PREFIX:line="58" PREFIX:column="14">1</expr>:
		<expr_stmt><expr><name PREFIX:line="59" PREFIX:column="17">EICRA</name> = (<name PREFIX:line="59" PREFIX:column="26">EICRA</name> &amp; ~((1&lt;&lt;<name PREFIX:line="59" PREFIX:column="40">ISC10</name>) | (1&lt;&lt;<name PREFIX:line="59" PREFIX:column="53">ISC11</name>))) | (<name PREFIX:line="59" PREFIX:column="65">mode</name> &lt;&lt; <name PREFIX:line="59" PREFIX:column="73">ISC10</name>)</expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="60" PREFIX:column="17">EIMSK</name> |= (1&lt;&lt;<name PREFIX:line="60" PREFIX:column="30">INT1</name>)</expr>;</expr_stmt>
		<break PREFIX:line="61" PREFIX:column="17">break;</break>	
    </case><case PREFIX:line="62" PREFIX:column="5">case <expr PREFIX:line="62" PREFIX:column="10">2</expr>:
        <expr_stmt><expr><name PREFIX:line="63" PREFIX:column="9">EICRA</name> = (<name PREFIX:line="63" PREFIX:column="18">EICRA</name> &amp; ~((1&lt;&lt;<name PREFIX:line="63" PREFIX:column="32">ISC20</name>) | (1&lt;&lt;<name PREFIX:line="63" PREFIX:column="45">ISC21</name>))) | (<name PREFIX:line="63" PREFIX:column="57">mode</name> &lt;&lt; <name PREFIX:line="63" PREFIX:column="65">ISC20</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name PREFIX:line="64" PREFIX:column="9">EIMSK</name> |= (1&lt;&lt;<name PREFIX:line="64" PREFIX:column="22">INT2</name>)</expr>;</expr_stmt>
        <break PREFIX:line="65" PREFIX:column="9">break;</break>
    </case><case PREFIX:line="66" PREFIX:column="5">case <expr PREFIX:line="66" PREFIX:column="10">3</expr>:
        <expr_stmt><expr><name PREFIX:line="67" PREFIX:column="9">EICRA</name> = (<name PREFIX:line="67" PREFIX:column="18">EICRA</name> &amp; ~((1&lt;&lt;<name PREFIX:line="67" PREFIX:column="32">ISC30</name>) | (1&lt;&lt;<name PREFIX:line="67" PREFIX:column="45">ISC31</name>))) | (<name PREFIX:line="67" PREFIX:column="57">mode</name> &lt;&lt; <name PREFIX:line="67" PREFIX:column="65">ISC30</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name PREFIX:line="68" PREFIX:column="9">EIMSK</name> |= (1&lt;&lt;<name PREFIX:line="68" PREFIX:column="22">INT3</name>)</expr>;</expr_stmt>
        <break PREFIX:line="69" PREFIX:column="9">break;</break>
<cpp:elif PREFIX:line="70" PREFIX:column="1">#<cpp:directive PREFIX:line="70" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="70" PREFIX:column="7">defined</name><argument_list PREFIX:line="70" PREFIX:column="14">(<argument><expr><name PREFIX:line="70" PREFIX:column="15">EICRA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="70" PREFIX:column="25">defined</name><argument_list PREFIX:line="70" PREFIX:column="32">(<argument><expr><name PREFIX:line="70" PREFIX:column="33">EICRB</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="70" PREFIX:column="43">defined</name><argument_list PREFIX:line="70" PREFIX:column="50">(<argument><expr><name PREFIX:line="70" PREFIX:column="51">EIMSK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    </case><case PREFIX:line="71" PREFIX:column="5">case <expr PREFIX:line="71" PREFIX:column="10">2</expr>:
      <expr_stmt><expr><name PREFIX:line="72" PREFIX:column="7">EICRA</name> = (<name PREFIX:line="72" PREFIX:column="16">EICRA</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="72" PREFIX:column="32">ISC00</name>) | (1 &lt;&lt; <name PREFIX:line="72" PREFIX:column="47">ISC01</name>))) | (<name PREFIX:line="72" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="72" PREFIX:column="67">ISC00</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="73" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="73" PREFIX:column="22">INT0</name>)</expr>;</expr_stmt>
      <break PREFIX:line="74" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="75" PREFIX:column="5">case <expr PREFIX:line="75" PREFIX:column="10">3</expr>:
      <expr_stmt><expr><name PREFIX:line="76" PREFIX:column="7">EICRA</name> = (<name PREFIX:line="76" PREFIX:column="16">EICRA</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="76" PREFIX:column="32">ISC10</name>) | (1 &lt;&lt; <name PREFIX:line="76" PREFIX:column="47">ISC11</name>))) | (<name PREFIX:line="76" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="76" PREFIX:column="67">ISC10</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="77" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="77" PREFIX:column="22">INT1</name>)</expr>;</expr_stmt>
      <break PREFIX:line="78" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="79" PREFIX:column="5">case <expr PREFIX:line="79" PREFIX:column="10">4</expr>:
      <expr_stmt><expr><name PREFIX:line="80" PREFIX:column="7">EICRA</name> = (<name PREFIX:line="80" PREFIX:column="16">EICRA</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="80" PREFIX:column="32">ISC20</name>) | (1 &lt;&lt; <name PREFIX:line="80" PREFIX:column="47">ISC21</name>))) | (<name PREFIX:line="80" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="80" PREFIX:column="67">ISC20</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="81" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="81" PREFIX:column="22">INT2</name>)</expr>;</expr_stmt>
      <break PREFIX:line="82" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="83" PREFIX:column="5">case <expr PREFIX:line="83" PREFIX:column="10">5</expr>:
      <expr_stmt><expr><name PREFIX:line="84" PREFIX:column="7">EICRA</name> = (<name PREFIX:line="84" PREFIX:column="16">EICRA</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="84" PREFIX:column="32">ISC30</name>) | (1 &lt;&lt; <name PREFIX:line="84" PREFIX:column="47">ISC31</name>))) | (<name PREFIX:line="84" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="84" PREFIX:column="67">ISC30</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="85" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="85" PREFIX:column="22">INT3</name>)</expr>;</expr_stmt>
      <break PREFIX:line="86" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="87" PREFIX:column="5">case <expr PREFIX:line="87" PREFIX:column="10">0</expr>:
      <expr_stmt><expr><name PREFIX:line="88" PREFIX:column="7">EICRB</name> = (<name PREFIX:line="88" PREFIX:column="16">EICRB</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="88" PREFIX:column="32">ISC40</name>) | (1 &lt;&lt; <name PREFIX:line="88" PREFIX:column="47">ISC41</name>))) | (<name PREFIX:line="88" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="88" PREFIX:column="67">ISC40</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="89" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="89" PREFIX:column="22">INT4</name>)</expr>;</expr_stmt>
      <break PREFIX:line="90" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="91" PREFIX:column="5">case <expr PREFIX:line="91" PREFIX:column="10">1</expr>:
      <expr_stmt><expr><name PREFIX:line="92" PREFIX:column="7">EICRB</name> = (<name PREFIX:line="92" PREFIX:column="16">EICRB</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="92" PREFIX:column="32">ISC50</name>) | (1 &lt;&lt; <name PREFIX:line="92" PREFIX:column="47">ISC51</name>))) | (<name PREFIX:line="92" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="92" PREFIX:column="67">ISC50</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="93" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="93" PREFIX:column="22">INT5</name>)</expr>;</expr_stmt>
      <break PREFIX:line="94" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="95" PREFIX:column="5">case <expr PREFIX:line="95" PREFIX:column="10">6</expr>:
      <expr_stmt><expr><name PREFIX:line="96" PREFIX:column="7">EICRB</name> = (<name PREFIX:line="96" PREFIX:column="16">EICRB</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="96" PREFIX:column="32">ISC60</name>) | (1 &lt;&lt; <name PREFIX:line="96" PREFIX:column="47">ISC61</name>))) | (<name PREFIX:line="96" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="96" PREFIX:column="67">ISC60</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="97" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="97" PREFIX:column="22">INT6</name>)</expr>;</expr_stmt>
      <break PREFIX:line="98" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="99" PREFIX:column="5">case <expr PREFIX:line="99" PREFIX:column="10">7</expr>:
      <expr_stmt><expr><name PREFIX:line="100" PREFIX:column="7">EICRB</name> = (<name PREFIX:line="100" PREFIX:column="16">EICRB</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="100" PREFIX:column="32">ISC70</name>) | (1 &lt;&lt; <name PREFIX:line="100" PREFIX:column="47">ISC71</name>))) | (<name PREFIX:line="100" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="100" PREFIX:column="67">ISC70</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="101" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="101" PREFIX:column="22">INT7</name>)</expr>;</expr_stmt>
      <break PREFIX:line="102" PREFIX:column="7">break;</break>
<cpp:else PREFIX:line="103" PREFIX:column="1">#<cpp:directive PREFIX:line="103" PREFIX:column="2">else</cpp:directive></cpp:else>		
    </case><case PREFIX:line="104" PREFIX:column="5">case <expr PREFIX:line="104" PREFIX:column="10">0</expr>:
    <cpp:if PREFIX:line="105" PREFIX:column="5">#<cpp:directive PREFIX:line="105" PREFIX:column="6">if</cpp:directive> <expr><call><name PREFIX:line="105" PREFIX:column="9">defined</name><argument_list PREFIX:line="105" PREFIX:column="16">(<argument><expr><name PREFIX:line="105" PREFIX:column="17">EICRA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="105" PREFIX:column="27">defined</name><argument_list PREFIX:line="105" PREFIX:column="34">(<argument><expr><name PREFIX:line="105" PREFIX:column="35">ISC00</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="105" PREFIX:column="45">defined</name><argument_list PREFIX:line="105" PREFIX:column="52">(<argument><expr><name PREFIX:line="105" PREFIX:column="53">EIMSK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr_stmt><expr><name PREFIX:line="106" PREFIX:column="7">EICRA</name> = (<name PREFIX:line="106" PREFIX:column="16">EICRA</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="106" PREFIX:column="32">ISC00</name>) | (1 &lt;&lt; <name PREFIX:line="106" PREFIX:column="47">ISC01</name>))) | (<name PREFIX:line="106" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="106" PREFIX:column="67">ISC00</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="107" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="107" PREFIX:column="22">INT0</name>)</expr>;</expr_stmt>
    <cpp:elif PREFIX:line="108" PREFIX:column="5">#<cpp:directive PREFIX:line="108" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="108" PREFIX:column="11">defined</name><argument_list PREFIX:line="108" PREFIX:column="18">(<argument><expr><name PREFIX:line="108" PREFIX:column="19">MCUCR</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="108" PREFIX:column="29">defined</name><argument_list PREFIX:line="108" PREFIX:column="36">(<argument><expr><name PREFIX:line="108" PREFIX:column="37">ISC00</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="108" PREFIX:column="47">defined</name><argument_list PREFIX:line="108" PREFIX:column="54">(<argument><expr><name PREFIX:line="108" PREFIX:column="55">GICR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="109" PREFIX:column="7">MCUCR</name> = (<name PREFIX:line="109" PREFIX:column="16">MCUCR</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="109" PREFIX:column="32">ISC00</name>) | (1 &lt;&lt; <name PREFIX:line="109" PREFIX:column="47">ISC01</name>))) | (<name PREFIX:line="109" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="109" PREFIX:column="67">ISC00</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="110" PREFIX:column="7">GICR</name> |= (1 &lt;&lt; <name PREFIX:line="110" PREFIX:column="21">INT0</name>)</expr>;</expr_stmt>
    <cpp:elif PREFIX:line="111" PREFIX:column="5">#<cpp:directive PREFIX:line="111" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="111" PREFIX:column="11">defined</name><argument_list PREFIX:line="111" PREFIX:column="18">(<argument><expr><name PREFIX:line="111" PREFIX:column="19">MCUCR</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="111" PREFIX:column="29">defined</name><argument_list PREFIX:line="111" PREFIX:column="36">(<argument><expr><name PREFIX:line="111" PREFIX:column="37">ISC00</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="111" PREFIX:column="47">defined</name><argument_list PREFIX:line="111" PREFIX:column="54">(<argument><expr><name PREFIX:line="111" PREFIX:column="55">GIMSK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="112" PREFIX:column="7">MCUCR</name> = (<name PREFIX:line="112" PREFIX:column="16">MCUCR</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="112" PREFIX:column="32">ISC00</name>) | (1 &lt;&lt; <name PREFIX:line="112" PREFIX:column="47">ISC01</name>))) | (<name PREFIX:line="112" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="112" PREFIX:column="67">ISC00</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="113" PREFIX:column="7">GIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="113" PREFIX:column="22">INT0</name>)</expr>;</expr_stmt>
    <cpp:else PREFIX:line="114" PREFIX:column="5">#<cpp:directive PREFIX:line="114" PREFIX:column="6">else</cpp:directive></cpp:else>
      <cpp:error PREFIX:line="115" PREFIX:column="7">#<cpp:directive PREFIX:line="115" PREFIX:column="8">error</cpp:directive> attachInterrupt not finished for this CPU (case 0)</cpp:error>
    <cpp:endif PREFIX:line="116" PREFIX:column="5">#<cpp:directive PREFIX:line="116" PREFIX:column="6">endif</cpp:directive></cpp:endif>
      <break PREFIX:line="117" PREFIX:column="7">break;</break>

    </case><case PREFIX:line="119" PREFIX:column="5">case <expr PREFIX:line="119" PREFIX:column="10">1</expr>:
    <cpp:if PREFIX:line="120" PREFIX:column="5">#<cpp:directive PREFIX:line="120" PREFIX:column="6">if</cpp:directive> <expr><call><name PREFIX:line="120" PREFIX:column="9">defined</name><argument_list PREFIX:line="120" PREFIX:column="16">(<argument><expr><name PREFIX:line="120" PREFIX:column="17">EICRA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="120" PREFIX:column="27">defined</name><argument_list PREFIX:line="120" PREFIX:column="34">(<argument><expr><name PREFIX:line="120" PREFIX:column="35">ISC10</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="120" PREFIX:column="45">defined</name><argument_list PREFIX:line="120" PREFIX:column="52">(<argument><expr><name PREFIX:line="120" PREFIX:column="53">ISC11</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="120" PREFIX:column="63">defined</name><argument_list PREFIX:line="120" PREFIX:column="70">(<argument><expr><name PREFIX:line="120" PREFIX:column="71">EIMSK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr_stmt><expr><name PREFIX:line="121" PREFIX:column="7">EICRA</name> = (<name PREFIX:line="121" PREFIX:column="16">EICRA</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="121" PREFIX:column="32">ISC10</name>) | (1 &lt;&lt; <name PREFIX:line="121" PREFIX:column="47">ISC11</name>))) | (<name PREFIX:line="121" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="121" PREFIX:column="67">ISC10</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="122" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="122" PREFIX:column="22">INT1</name>)</expr>;</expr_stmt>
    <cpp:elif PREFIX:line="123" PREFIX:column="5">#<cpp:directive PREFIX:line="123" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="123" PREFIX:column="11">defined</name><argument_list PREFIX:line="123" PREFIX:column="18">(<argument><expr><name PREFIX:line="123" PREFIX:column="19">MCUCR</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="123" PREFIX:column="29">defined</name><argument_list PREFIX:line="123" PREFIX:column="36">(<argument><expr><name PREFIX:line="123" PREFIX:column="37">ISC10</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="123" PREFIX:column="47">defined</name><argument_list PREFIX:line="123" PREFIX:column="54">(<argument><expr><name PREFIX:line="123" PREFIX:column="55">ISC11</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="123" PREFIX:column="65">defined</name><argument_list PREFIX:line="123" PREFIX:column="72">(<argument><expr><name PREFIX:line="123" PREFIX:column="73">GICR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="124" PREFIX:column="7">MCUCR</name> = (<name PREFIX:line="124" PREFIX:column="16">MCUCR</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="124" PREFIX:column="32">ISC10</name>) | (1 &lt;&lt; <name PREFIX:line="124" PREFIX:column="47">ISC11</name>))) | (<name PREFIX:line="124" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="124" PREFIX:column="67">ISC10</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="125" PREFIX:column="7">GICR</name> |= (1 &lt;&lt; <name PREFIX:line="125" PREFIX:column="21">INT1</name>)</expr>;</expr_stmt>
    <cpp:elif PREFIX:line="126" PREFIX:column="5">#<cpp:directive PREFIX:line="126" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="126" PREFIX:column="11">defined</name><argument_list PREFIX:line="126" PREFIX:column="18">(<argument><expr><name PREFIX:line="126" PREFIX:column="19">MCUCR</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="126" PREFIX:column="29">defined</name><argument_list PREFIX:line="126" PREFIX:column="36">(<argument><expr><name PREFIX:line="126" PREFIX:column="37">ISC10</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="126" PREFIX:column="47">defined</name><argument_list PREFIX:line="126" PREFIX:column="54">(<argument><expr><name PREFIX:line="126" PREFIX:column="55">GIMSK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="126" PREFIX:column="65">defined</name><argument_list PREFIX:line="126" PREFIX:column="72">(<argument><expr><name PREFIX:line="126" PREFIX:column="73">GIMSK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="127" PREFIX:column="7">MCUCR</name> = (<name PREFIX:line="127" PREFIX:column="16">MCUCR</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="127" PREFIX:column="32">ISC10</name>) | (1 &lt;&lt; <name PREFIX:line="127" PREFIX:column="47">ISC11</name>))) | (<name PREFIX:line="127" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="127" PREFIX:column="67">ISC10</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="128" PREFIX:column="7">GIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="128" PREFIX:column="22">INT1</name>)</expr>;</expr_stmt>
    <cpp:else PREFIX:line="129" PREFIX:column="5">#<cpp:directive PREFIX:line="129" PREFIX:column="6">else</cpp:directive></cpp:else>
      <cpp:error PREFIX:line="130" PREFIX:column="7">#<cpp:directive PREFIX:line="130" PREFIX:column="8">warning</cpp:directive> attachInterrupt may need some more work for this cpu (case 1)</cpp:error>
    <cpp:endif PREFIX:line="131" PREFIX:column="5">#<cpp:directive PREFIX:line="131" PREFIX:column="6">endif</cpp:directive></cpp:endif>
      <break PREFIX:line="132" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="134" PREFIX:column="5">case <expr PREFIX:line="134" PREFIX:column="10">2</expr>:
    <cpp:if PREFIX:line="135" PREFIX:column="5">#<cpp:directive PREFIX:line="135" PREFIX:column="6">if</cpp:directive> <expr><call><name PREFIX:line="135" PREFIX:column="9">defined</name><argument_list PREFIX:line="135" PREFIX:column="16">(<argument><expr><name PREFIX:line="135" PREFIX:column="17">EICRA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="135" PREFIX:column="27">defined</name><argument_list PREFIX:line="135" PREFIX:column="34">(<argument><expr><name PREFIX:line="135" PREFIX:column="35">ISC20</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="135" PREFIX:column="45">defined</name><argument_list PREFIX:line="135" PREFIX:column="52">(<argument><expr><name PREFIX:line="135" PREFIX:column="53">ISC21</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="135" PREFIX:column="63">defined</name><argument_list PREFIX:line="135" PREFIX:column="70">(<argument><expr><name PREFIX:line="135" PREFIX:column="71">EIMSK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr_stmt><expr><name PREFIX:line="136" PREFIX:column="7">EICRA</name> = (<name PREFIX:line="136" PREFIX:column="16">EICRA</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="136" PREFIX:column="32">ISC20</name>) | (1 &lt;&lt; <name PREFIX:line="136" PREFIX:column="47">ISC21</name>))) | (<name PREFIX:line="136" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="136" PREFIX:column="67">ISC20</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="137" PREFIX:column="7">EIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="137" PREFIX:column="22">INT2</name>)</expr>;</expr_stmt>
    <cpp:elif PREFIX:line="138" PREFIX:column="5">#<cpp:directive PREFIX:line="138" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="138" PREFIX:column="11">defined</name><argument_list PREFIX:line="138" PREFIX:column="18">(<argument><expr><name PREFIX:line="138" PREFIX:column="19">MCUCR</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="138" PREFIX:column="29">defined</name><argument_list PREFIX:line="138" PREFIX:column="36">(<argument><expr><name PREFIX:line="138" PREFIX:column="37">ISC20</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="138" PREFIX:column="47">defined</name><argument_list PREFIX:line="138" PREFIX:column="54">(<argument><expr><name PREFIX:line="138" PREFIX:column="55">ISC21</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="138" PREFIX:column="65">defined</name><argument_list PREFIX:line="138" PREFIX:column="72">(<argument><expr><name PREFIX:line="138" PREFIX:column="73">GICR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="139" PREFIX:column="7">MCUCR</name> = (<name PREFIX:line="139" PREFIX:column="16">MCUCR</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="139" PREFIX:column="32">ISC20</name>) | (1 &lt;&lt; <name PREFIX:line="139" PREFIX:column="47">ISC21</name>))) | (<name PREFIX:line="139" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="139" PREFIX:column="67">ISC20</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="140" PREFIX:column="7">GICR</name> |= (1 &lt;&lt; <name PREFIX:line="140" PREFIX:column="21">INT2</name>)</expr>;</expr_stmt>
    <cpp:elif PREFIX:line="141" PREFIX:column="5">#<cpp:directive PREFIX:line="141" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="141" PREFIX:column="11">defined</name><argument_list PREFIX:line="141" PREFIX:column="18">(<argument><expr><name PREFIX:line="141" PREFIX:column="19">MCUCR</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="141" PREFIX:column="29">defined</name><argument_list PREFIX:line="141" PREFIX:column="36">(<argument><expr><name PREFIX:line="141" PREFIX:column="37">ISC20</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="141" PREFIX:column="47">defined</name><argument_list PREFIX:line="141" PREFIX:column="54">(<argument><expr><name PREFIX:line="141" PREFIX:column="55">GIMSK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="141" PREFIX:column="65">defined</name><argument_list PREFIX:line="141" PREFIX:column="72">(<argument><expr><name PREFIX:line="141" PREFIX:column="73">GIMSK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="142" PREFIX:column="7">MCUCR</name> = (<name PREFIX:line="142" PREFIX:column="16">MCUCR</name> &amp; ~((1 &lt;&lt; <name PREFIX:line="142" PREFIX:column="32">ISC20</name>) | (1 &lt;&lt; <name PREFIX:line="142" PREFIX:column="47">ISC21</name>))) | (<name PREFIX:line="142" PREFIX:column="59">mode</name> &lt;&lt; <name PREFIX:line="142" PREFIX:column="67">ISC20</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="143" PREFIX:column="7">GIMSK</name> |= (1 &lt;&lt; <name PREFIX:line="143" PREFIX:column="22">INT2</name>)</expr>;</expr_stmt>
    <cpp:endif PREFIX:line="144" PREFIX:column="5">#<cpp:directive PREFIX:line="144" PREFIX:column="6">endif</cpp:directive></cpp:endif>
      <break PREFIX:line="145" PREFIX:column="7">break;</break>
<cpp:endif PREFIX:line="146" PREFIX:column="1">#<cpp:directive PREFIX:line="146" PREFIX:column="2">endif</cpp:directive></cpp:endif>
    </case>}</block></switch>
  }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="151" PREFIX:column="1">void</name></type> <name PREFIX:line="151" PREFIX:column="6">detachInterrupt</name><parameter_list PREFIX:line="151" PREFIX:column="21">(<param><decl><type><name PREFIX:line="151" PREFIX:column="22">uint8_t</name></type> <name PREFIX:line="151" PREFIX:column="30">interruptNum</name></decl></param>)</parameter_list> <block PREFIX:line="151" PREFIX:column="44">{
  <if PREFIX:line="152" PREFIX:column="3">if<condition PREFIX:line="152" PREFIX:column="5">(<expr><name PREFIX:line="152" PREFIX:column="6">interruptNum</name> &lt; <name PREFIX:line="152" PREFIX:column="21">EXTERNAL_NUM_INTERRUPTS</name></expr>)</condition><then PREFIX:line="152" PREFIX:column="45"> <block PREFIX:line="152" PREFIX:column="46">{
    <comment type="line" PREFIX:line="153" PREFIX:column="5">// Disable the interrupt.  (We can't assume that interruptNum is equal</comment>
    <comment type="line" PREFIX:line="154" PREFIX:column="5">// to the number of the EIMSK bit to clear, as this isn't true on the </comment>
    <comment type="line" PREFIX:line="155" PREFIX:column="5">// ATmega8.  There, INT0 is 6 and INT1 is 7.)</comment>
    <switch PREFIX:line="156" PREFIX:column="5">switch <condition PREFIX:line="156" PREFIX:column="12">(<expr><name PREFIX:line="156" PREFIX:column="13">interruptNum</name></expr>)</condition> <block PREFIX:line="156" PREFIX:column="27">{
<cpp:if PREFIX:line="157" PREFIX:column="1">#<cpp:directive PREFIX:line="157" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="157" PREFIX:column="5">defined</name><argument_list PREFIX:line="157" PREFIX:column="12">(<argument><expr><name PREFIX:line="157" PREFIX:column="13">__AVR_ATmega32U4__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case PREFIX:line="158" PREFIX:column="5">case <expr PREFIX:line="158" PREFIX:column="10">0</expr>:
        <expr_stmt><expr><name PREFIX:line="159" PREFIX:column="9">EIMSK</name> &amp;= ~(1&lt;&lt;<name PREFIX:line="159" PREFIX:column="23">INT0</name>)</expr>;</expr_stmt>
        <break PREFIX:line="160" PREFIX:column="9">break;</break>
    </case><case PREFIX:line="161" PREFIX:column="5">case <expr PREFIX:line="161" PREFIX:column="10">1</expr>:
        <expr_stmt><expr><name PREFIX:line="162" PREFIX:column="9">EIMSK</name> &amp;= ~(1&lt;&lt;<name PREFIX:line="162" PREFIX:column="23">INT1</name>)</expr>;</expr_stmt>
        <break PREFIX:line="163" PREFIX:column="9">break;</break>
    </case><case PREFIX:line="164" PREFIX:column="5">case <expr PREFIX:line="164" PREFIX:column="10">2</expr>:
        <expr_stmt><expr><name PREFIX:line="165" PREFIX:column="9">EIMSK</name> &amp;= ~(1&lt;&lt;<name PREFIX:line="165" PREFIX:column="23">INT2</name>)</expr>;</expr_stmt>
        <break PREFIX:line="166" PREFIX:column="9">break;</break>
    </case><case PREFIX:line="167" PREFIX:column="5">case <expr PREFIX:line="167" PREFIX:column="10">3</expr>:
        <expr_stmt><expr><name PREFIX:line="168" PREFIX:column="9">EIMSK</name> &amp;= ~(1&lt;&lt;<name PREFIX:line="168" PREFIX:column="23">INT3</name>)</expr>;</expr_stmt>
        <break PREFIX:line="169" PREFIX:column="9">break;</break>		
<cpp:elif PREFIX:line="170" PREFIX:column="1">#<cpp:directive PREFIX:line="170" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="170" PREFIX:column="7">defined</name><argument_list PREFIX:line="170" PREFIX:column="14">(<argument><expr><name PREFIX:line="170" PREFIX:column="15">EICRA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="170" PREFIX:column="25">defined</name><argument_list PREFIX:line="170" PREFIX:column="32">(<argument><expr><name PREFIX:line="170" PREFIX:column="33">EICRB</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="170" PREFIX:column="43">defined</name><argument_list PREFIX:line="170" PREFIX:column="50">(<argument><expr><name PREFIX:line="170" PREFIX:column="51">EIMSK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    </case><case PREFIX:line="171" PREFIX:column="5">case <expr PREFIX:line="171" PREFIX:column="10">2</expr>:
      <expr_stmt><expr><name PREFIX:line="172" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="172" PREFIX:column="23">INT0</name>)</expr>;</expr_stmt>
      <break PREFIX:line="173" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="174" PREFIX:column="5">case <expr PREFIX:line="174" PREFIX:column="10">3</expr>:
      <expr_stmt><expr><name PREFIX:line="175" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="175" PREFIX:column="23">INT1</name>)</expr>;</expr_stmt>
      <break PREFIX:line="176" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="177" PREFIX:column="5">case <expr PREFIX:line="177" PREFIX:column="10">4</expr>:
      <expr_stmt><expr><name PREFIX:line="178" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="178" PREFIX:column="23">INT2</name>)</expr>;</expr_stmt>
      <break PREFIX:line="179" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="180" PREFIX:column="5">case <expr PREFIX:line="180" PREFIX:column="10">5</expr>:
      <expr_stmt><expr><name PREFIX:line="181" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="181" PREFIX:column="23">INT3</name>)</expr>;</expr_stmt>
      <break PREFIX:line="182" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="183" PREFIX:column="5">case <expr PREFIX:line="183" PREFIX:column="10">0</expr>:
      <expr_stmt><expr><name PREFIX:line="184" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="184" PREFIX:column="23">INT4</name>)</expr>;</expr_stmt>
      <break PREFIX:line="185" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="186" PREFIX:column="5">case <expr PREFIX:line="186" PREFIX:column="10">1</expr>:
      <expr_stmt><expr><name PREFIX:line="187" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="187" PREFIX:column="23">INT5</name>)</expr>;</expr_stmt>
      <break PREFIX:line="188" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="189" PREFIX:column="5">case <expr PREFIX:line="189" PREFIX:column="10">6</expr>:
      <expr_stmt><expr><name PREFIX:line="190" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="190" PREFIX:column="23">INT6</name>)</expr>;</expr_stmt>
      <break PREFIX:line="191" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="192" PREFIX:column="5">case <expr PREFIX:line="192" PREFIX:column="10">7</expr>:
      <expr_stmt><expr><name PREFIX:line="193" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="193" PREFIX:column="23">INT7</name>)</expr>;</expr_stmt>
      <break PREFIX:line="194" PREFIX:column="7">break;</break>
<cpp:else PREFIX:line="195" PREFIX:column="1">#<cpp:directive PREFIX:line="195" PREFIX:column="2">else</cpp:directive></cpp:else>
    </case><case PREFIX:line="196" PREFIX:column="5">case <expr PREFIX:line="196" PREFIX:column="10">0</expr>:
    <cpp:if PREFIX:line="197" PREFIX:column="5">#<cpp:directive PREFIX:line="197" PREFIX:column="6">if</cpp:directive> <expr><call><name PREFIX:line="197" PREFIX:column="9">defined</name><argument_list PREFIX:line="197" PREFIX:column="16">(<argument><expr><name PREFIX:line="197" PREFIX:column="17">EIMSK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="197" PREFIX:column="27">defined</name><argument_list PREFIX:line="197" PREFIX:column="34">(<argument><expr><name PREFIX:line="197" PREFIX:column="35">INT0</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr_stmt><expr><name PREFIX:line="198" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="198" PREFIX:column="23">INT0</name>)</expr>;</expr_stmt>
    <cpp:elif PREFIX:line="199" PREFIX:column="5">#<cpp:directive PREFIX:line="199" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="199" PREFIX:column="11">defined</name><argument_list PREFIX:line="199" PREFIX:column="18">(<argument><expr><name PREFIX:line="199" PREFIX:column="19">GICR</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="199" PREFIX:column="28">defined</name><argument_list PREFIX:line="199" PREFIX:column="35">(<argument><expr><name PREFIX:line="199" PREFIX:column="36">ISC00</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="200" PREFIX:column="7">GICR</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="200" PREFIX:column="22">INT0</name>)</expr>;</expr_stmt> <comment type="line" PREFIX:line="200" PREFIX:column="29">// atmega32</comment>
    <cpp:elif PREFIX:line="201" PREFIX:column="5">#<cpp:directive PREFIX:line="201" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="201" PREFIX:column="11">defined</name><argument_list PREFIX:line="201" PREFIX:column="18">(<argument><expr><name PREFIX:line="201" PREFIX:column="19">GIMSK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="201" PREFIX:column="29">defined</name><argument_list PREFIX:line="201" PREFIX:column="36">(<argument><expr><name PREFIX:line="201" PREFIX:column="37">INT0</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="202" PREFIX:column="7">GIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="202" PREFIX:column="23">INT0</name>)</expr>;</expr_stmt>
    <cpp:else PREFIX:line="203" PREFIX:column="5">#<cpp:directive PREFIX:line="203" PREFIX:column="6">else</cpp:directive></cpp:else>
      <cpp:error PREFIX:line="204" PREFIX:column="7">#<cpp:directive PREFIX:line="204" PREFIX:column="8">error</cpp:directive> detachInterrupt not finished for this cpu</cpp:error>
    <cpp:endif PREFIX:line="205" PREFIX:column="5">#<cpp:directive PREFIX:line="205" PREFIX:column="6">endif</cpp:directive></cpp:endif>
      <break PREFIX:line="206" PREFIX:column="7">break;</break>

    </case><case PREFIX:line="208" PREFIX:column="5">case <expr PREFIX:line="208" PREFIX:column="10">1</expr>:
    <cpp:if PREFIX:line="209" PREFIX:column="5">#<cpp:directive PREFIX:line="209" PREFIX:column="6">if</cpp:directive> <expr><call><name PREFIX:line="209" PREFIX:column="9">defined</name><argument_list PREFIX:line="209" PREFIX:column="16">(<argument><expr><name PREFIX:line="209" PREFIX:column="17">EIMSK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="209" PREFIX:column="27">defined</name><argument_list PREFIX:line="209" PREFIX:column="34">(<argument><expr><name PREFIX:line="209" PREFIX:column="35">INT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr_stmt><expr><name PREFIX:line="210" PREFIX:column="7">EIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="210" PREFIX:column="23">INT1</name>)</expr>;</expr_stmt>
    <cpp:elif PREFIX:line="211" PREFIX:column="5">#<cpp:directive PREFIX:line="211" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="211" PREFIX:column="11">defined</name><argument_list PREFIX:line="211" PREFIX:column="18">(<argument><expr><name PREFIX:line="211" PREFIX:column="19">GICR</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="211" PREFIX:column="28">defined</name><argument_list PREFIX:line="211" PREFIX:column="35">(<argument><expr><name PREFIX:line="211" PREFIX:column="36">INT1</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="212" PREFIX:column="7">GICR</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="212" PREFIX:column="22">INT1</name>)</expr>;</expr_stmt> <comment type="line" PREFIX:line="212" PREFIX:column="29">// atmega32</comment>
    <cpp:elif PREFIX:line="213" PREFIX:column="5">#<cpp:directive PREFIX:line="213" PREFIX:column="6">elif</cpp:directive> <expr><call><name PREFIX:line="213" PREFIX:column="11">defined</name><argument_list PREFIX:line="213" PREFIX:column="18">(<argument><expr><name PREFIX:line="213" PREFIX:column="19">GIMSK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="213" PREFIX:column="29">defined</name><argument_list PREFIX:line="213" PREFIX:column="36">(<argument><expr><name PREFIX:line="213" PREFIX:column="37">INT1</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name PREFIX:line="214" PREFIX:column="7">GIMSK</name> &amp;= ~(1 &lt;&lt; <name PREFIX:line="214" PREFIX:column="23">INT1</name>)</expr>;</expr_stmt>
    <cpp:else PREFIX:line="215" PREFIX:column="5">#<cpp:directive PREFIX:line="215" PREFIX:column="6">else</cpp:directive></cpp:else>
      <cpp:error PREFIX:line="216" PREFIX:column="7">#<cpp:directive PREFIX:line="216" PREFIX:column="8">warning</cpp:directive> detachInterrupt may need some more work for this cpu (case 1)</cpp:error>
    <cpp:endif PREFIX:line="217" PREFIX:column="5">#<cpp:directive PREFIX:line="217" PREFIX:column="6">endif</cpp:directive></cpp:endif>
      <break PREFIX:line="218" PREFIX:column="7">break;</break>
<cpp:endif PREFIX:line="219" PREFIX:column="1">#<cpp:directive PREFIX:line="219" PREFIX:column="2">endif</cpp:directive></cpp:endif>
    </case>}</block></switch>
      
    <expr_stmt><expr><name><name PREFIX:line="222" PREFIX:column="5">intFunc</name><index PREFIX:line="222" PREFIX:column="12">[<expr><name PREFIX:line="222" PREFIX:column="13">interruptNum</name></expr>]</index></name> = 0</expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<comment type="block" PREFIX:line="226" PREFIX:column="1">/*
void attachInterruptTwi(void (*userFunc)(void) ) {
  twiIntFunc = userFunc;
}
*/</comment>

<cpp:if PREFIX:line="232" PREFIX:column="1">#<cpp:directive PREFIX:line="232" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="232" PREFIX:column="5">defined</name><argument_list PREFIX:line="232" PREFIX:column="12">(<argument><expr><name PREFIX:line="232" PREFIX:column="13">__AVR_ATmega32U4__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name PREFIX:line="233" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="233" PREFIX:column="7">(<argument PREFIX:line="233" PREFIX:column="8">INT0_vect</argument>)</argument_list></macro> <block PREFIX:line="233" PREFIX:column="19">{
	<if PREFIX:line="234" PREFIX:column="9">if<condition PREFIX:line="234" PREFIX:column="11">(<expr><name><name PREFIX:line="234" PREFIX:column="12">intFunc</name><index PREFIX:line="234" PREFIX:column="19">[<expr><name PREFIX:line="234" PREFIX:column="20">EXTERNAL_INT_0</name></expr>]</index></name></expr>)</condition><then PREFIX:line="234" PREFIX:column="36">
		<expr_stmt><expr><name><name PREFIX:line="235" PREFIX:column="17">intFunc</name><index PREFIX:line="235" PREFIX:column="24">[<expr><name PREFIX:line="235" PREFIX:column="25">EXTERNAL_INT_0</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="238" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="238" PREFIX:column="7">(<argument PREFIX:line="238" PREFIX:column="8">INT1_vect</argument>)</argument_list></macro> <block PREFIX:line="238" PREFIX:column="19">{
	<if PREFIX:line="239" PREFIX:column="9">if<condition PREFIX:line="239" PREFIX:column="11">(<expr><name><name PREFIX:line="239" PREFIX:column="12">intFunc</name><index PREFIX:line="239" PREFIX:column="19">[<expr><name PREFIX:line="239" PREFIX:column="20">EXTERNAL_INT_1</name></expr>]</index></name></expr>)</condition><then PREFIX:line="239" PREFIX:column="36">
		<expr_stmt><expr><name><name PREFIX:line="240" PREFIX:column="17">intFunc</name><index PREFIX:line="240" PREFIX:column="24">[<expr><name PREFIX:line="240" PREFIX:column="25">EXTERNAL_INT_1</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="243" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="243" PREFIX:column="7">(<argument PREFIX:line="243" PREFIX:column="8">INT2_vect</argument>)</argument_list></macro> <block PREFIX:line="243" PREFIX:column="19">{
    <if PREFIX:line="244" PREFIX:column="5">if<condition PREFIX:line="244" PREFIX:column="7">(<expr><name><name PREFIX:line="244" PREFIX:column="8">intFunc</name><index PREFIX:line="244" PREFIX:column="15">[<expr><name PREFIX:line="244" PREFIX:column="16">EXTERNAL_INT_2</name></expr>]</index></name></expr>)</condition><then PREFIX:line="244" PREFIX:column="32">
		<expr_stmt><expr><name><name PREFIX:line="245" PREFIX:column="17">intFunc</name><index PREFIX:line="245" PREFIX:column="24">[<expr><name PREFIX:line="245" PREFIX:column="25">EXTERNAL_INT_2</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="248" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="248" PREFIX:column="7">(<argument PREFIX:line="248" PREFIX:column="8">INT3_vect</argument>)</argument_list></macro> <block PREFIX:line="248" PREFIX:column="19">{
    <if PREFIX:line="249" PREFIX:column="5">if<condition PREFIX:line="249" PREFIX:column="7">(<expr><name><name PREFIX:line="249" PREFIX:column="8">intFunc</name><index PREFIX:line="249" PREFIX:column="15">[<expr><name PREFIX:line="249" PREFIX:column="16">EXTERNAL_INT_3</name></expr>]</index></name></expr>)</condition><then PREFIX:line="249" PREFIX:column="32">
		<expr_stmt><expr><name><name PREFIX:line="250" PREFIX:column="17">intFunc</name><index PREFIX:line="250" PREFIX:column="24">[<expr><name PREFIX:line="250" PREFIX:column="25">EXTERNAL_INT_3</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<cpp:elif PREFIX:line="253" PREFIX:column="1">#<cpp:directive PREFIX:line="253" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="253" PREFIX:column="7">defined</name><argument_list PREFIX:line="253" PREFIX:column="14">(<argument><expr><name PREFIX:line="253" PREFIX:column="15">EICRA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="253" PREFIX:column="25">defined</name><argument_list PREFIX:line="253" PREFIX:column="32">(<argument><expr><name PREFIX:line="253" PREFIX:column="33">EICRB</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<macro><name PREFIX:line="255" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="255" PREFIX:column="7">(<argument PREFIX:line="255" PREFIX:column="8">INT0_vect</argument>)</argument_list></macro> <block PREFIX:line="255" PREFIX:column="19">{
  <if PREFIX:line="256" PREFIX:column="3">if<condition PREFIX:line="256" PREFIX:column="5">(<expr><name><name PREFIX:line="256" PREFIX:column="6">intFunc</name><index PREFIX:line="256" PREFIX:column="13">[<expr><name PREFIX:line="256" PREFIX:column="14">EXTERNAL_INT_2</name></expr>]</index></name></expr>)</condition><then PREFIX:line="256" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="257" PREFIX:column="5">intFunc</name><index PREFIX:line="257" PREFIX:column="12">[<expr><name PREFIX:line="257" PREFIX:column="13">EXTERNAL_INT_2</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="260" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="260" PREFIX:column="7">(<argument PREFIX:line="260" PREFIX:column="8">INT1_vect</argument>)</argument_list></macro> <block PREFIX:line="260" PREFIX:column="19">{
  <if PREFIX:line="261" PREFIX:column="3">if<condition PREFIX:line="261" PREFIX:column="5">(<expr><name><name PREFIX:line="261" PREFIX:column="6">intFunc</name><index PREFIX:line="261" PREFIX:column="13">[<expr><name PREFIX:line="261" PREFIX:column="14">EXTERNAL_INT_3</name></expr>]</index></name></expr>)</condition><then PREFIX:line="261" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="262" PREFIX:column="5">intFunc</name><index PREFIX:line="262" PREFIX:column="12">[<expr><name PREFIX:line="262" PREFIX:column="13">EXTERNAL_INT_3</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="265" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="265" PREFIX:column="7">(<argument PREFIX:line="265" PREFIX:column="8">INT2_vect</argument>)</argument_list></macro> <block PREFIX:line="265" PREFIX:column="19">{
  <if PREFIX:line="266" PREFIX:column="3">if<condition PREFIX:line="266" PREFIX:column="5">(<expr><name><name PREFIX:line="266" PREFIX:column="6">intFunc</name><index PREFIX:line="266" PREFIX:column="13">[<expr><name PREFIX:line="266" PREFIX:column="14">EXTERNAL_INT_4</name></expr>]</index></name></expr>)</condition><then PREFIX:line="266" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="267" PREFIX:column="5">intFunc</name><index PREFIX:line="267" PREFIX:column="12">[<expr><name PREFIX:line="267" PREFIX:column="13">EXTERNAL_INT_4</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="270" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="270" PREFIX:column="7">(<argument PREFIX:line="270" PREFIX:column="8">INT3_vect</argument>)</argument_list></macro> <block PREFIX:line="270" PREFIX:column="19">{
  <if PREFIX:line="271" PREFIX:column="3">if<condition PREFIX:line="271" PREFIX:column="5">(<expr><name><name PREFIX:line="271" PREFIX:column="6">intFunc</name><index PREFIX:line="271" PREFIX:column="13">[<expr><name PREFIX:line="271" PREFIX:column="14">EXTERNAL_INT_5</name></expr>]</index></name></expr>)</condition><then PREFIX:line="271" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="272" PREFIX:column="5">intFunc</name><index PREFIX:line="272" PREFIX:column="12">[<expr><name PREFIX:line="272" PREFIX:column="13">EXTERNAL_INT_5</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="275" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="275" PREFIX:column="7">(<argument PREFIX:line="275" PREFIX:column="8">INT4_vect</argument>)</argument_list></macro> <block PREFIX:line="275" PREFIX:column="19">{
  <if PREFIX:line="276" PREFIX:column="3">if<condition PREFIX:line="276" PREFIX:column="5">(<expr><name><name PREFIX:line="276" PREFIX:column="6">intFunc</name><index PREFIX:line="276" PREFIX:column="13">[<expr><name PREFIX:line="276" PREFIX:column="14">EXTERNAL_INT_0</name></expr>]</index></name></expr>)</condition><then PREFIX:line="276" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="277" PREFIX:column="5">intFunc</name><index PREFIX:line="277" PREFIX:column="12">[<expr><name PREFIX:line="277" PREFIX:column="13">EXTERNAL_INT_0</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="280" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="280" PREFIX:column="7">(<argument PREFIX:line="280" PREFIX:column="8">INT5_vect</argument>)</argument_list></macro> <block PREFIX:line="280" PREFIX:column="19">{
  <if PREFIX:line="281" PREFIX:column="3">if<condition PREFIX:line="281" PREFIX:column="5">(<expr><name><name PREFIX:line="281" PREFIX:column="6">intFunc</name><index PREFIX:line="281" PREFIX:column="13">[<expr><name PREFIX:line="281" PREFIX:column="14">EXTERNAL_INT_1</name></expr>]</index></name></expr>)</condition><then PREFIX:line="281" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="282" PREFIX:column="5">intFunc</name><index PREFIX:line="282" PREFIX:column="12">[<expr><name PREFIX:line="282" PREFIX:column="13">EXTERNAL_INT_1</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="285" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="285" PREFIX:column="7">(<argument PREFIX:line="285" PREFIX:column="8">INT6_vect</argument>)</argument_list></macro> <block PREFIX:line="285" PREFIX:column="19">{
  <if PREFIX:line="286" PREFIX:column="3">if<condition PREFIX:line="286" PREFIX:column="5">(<expr><name><name PREFIX:line="286" PREFIX:column="6">intFunc</name><index PREFIX:line="286" PREFIX:column="13">[<expr><name PREFIX:line="286" PREFIX:column="14">EXTERNAL_INT_6</name></expr>]</index></name></expr>)</condition><then PREFIX:line="286" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="287" PREFIX:column="5">intFunc</name><index PREFIX:line="287" PREFIX:column="12">[<expr><name PREFIX:line="287" PREFIX:column="13">EXTERNAL_INT_6</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="290" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="290" PREFIX:column="7">(<argument PREFIX:line="290" PREFIX:column="8">INT7_vect</argument>)</argument_list></macro> <block PREFIX:line="290" PREFIX:column="19">{
  <if PREFIX:line="291" PREFIX:column="3">if<condition PREFIX:line="291" PREFIX:column="5">(<expr><name><name PREFIX:line="291" PREFIX:column="6">intFunc</name><index PREFIX:line="291" PREFIX:column="13">[<expr><name PREFIX:line="291" PREFIX:column="14">EXTERNAL_INT_7</name></expr>]</index></name></expr>)</condition><then PREFIX:line="291" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="292" PREFIX:column="5">intFunc</name><index PREFIX:line="292" PREFIX:column="12">[<expr><name PREFIX:line="292" PREFIX:column="13">EXTERNAL_INT_7</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<cpp:else PREFIX:line="295" PREFIX:column="1">#<cpp:directive PREFIX:line="295" PREFIX:column="2">else</cpp:directive></cpp:else>

<macro><name PREFIX:line="297" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="297" PREFIX:column="7">(<argument PREFIX:line="297" PREFIX:column="8">INT0_vect</argument>)</argument_list></macro> <block PREFIX:line="297" PREFIX:column="19">{
  <if PREFIX:line="298" PREFIX:column="3">if<condition PREFIX:line="298" PREFIX:column="5">(<expr><name><name PREFIX:line="298" PREFIX:column="6">intFunc</name><index PREFIX:line="298" PREFIX:column="13">[<expr><name PREFIX:line="298" PREFIX:column="14">EXTERNAL_INT_0</name></expr>]</index></name></expr>)</condition><then PREFIX:line="298" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="299" PREFIX:column="5">intFunc</name><index PREFIX:line="299" PREFIX:column="12">[<expr><name PREFIX:line="299" PREFIX:column="13">EXTERNAL_INT_0</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<macro><name PREFIX:line="302" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="302" PREFIX:column="7">(<argument PREFIX:line="302" PREFIX:column="8">INT1_vect</argument>)</argument_list></macro> <block PREFIX:line="302" PREFIX:column="19">{
  <if PREFIX:line="303" PREFIX:column="3">if<condition PREFIX:line="303" PREFIX:column="5">(<expr><name><name PREFIX:line="303" PREFIX:column="6">intFunc</name><index PREFIX:line="303" PREFIX:column="13">[<expr><name PREFIX:line="303" PREFIX:column="14">EXTERNAL_INT_1</name></expr>]</index></name></expr>)</condition><then PREFIX:line="303" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="304" PREFIX:column="5">intFunc</name><index PREFIX:line="304" PREFIX:column="12">[<expr><name PREFIX:line="304" PREFIX:column="13">EXTERNAL_INT_1</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>

<cpp:if PREFIX:line="307" PREFIX:column="1">#<cpp:directive PREFIX:line="307" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="307" PREFIX:column="5">defined</name><argument_list PREFIX:line="307" PREFIX:column="12">(<argument><expr><name PREFIX:line="307" PREFIX:column="13">EICRA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="307" PREFIX:column="23">defined</name><argument_list PREFIX:line="307" PREFIX:column="30">(<argument><expr><name PREFIX:line="307" PREFIX:column="31">ISC20</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name PREFIX:line="308" PREFIX:column="1">SIGNAL</name><argument_list PREFIX:line="308" PREFIX:column="7">(<argument PREFIX:line="308" PREFIX:column="8">INT2_vect</argument>)</argument_list></macro> <block PREFIX:line="308" PREFIX:column="19">{
  <if PREFIX:line="309" PREFIX:column="3">if<condition PREFIX:line="309" PREFIX:column="5">(<expr><name><name PREFIX:line="309" PREFIX:column="6">intFunc</name><index PREFIX:line="309" PREFIX:column="13">[<expr><name PREFIX:line="309" PREFIX:column="14">EXTERNAL_INT_2</name></expr>]</index></name></expr>)</condition><then PREFIX:line="309" PREFIX:column="30">
    <expr_stmt><expr><name><name PREFIX:line="310" PREFIX:column="5">intFunc</name><index PREFIX:line="310" PREFIX:column="12">[<expr><name PREFIX:line="310" PREFIX:column="13">EXTERNAL_INT_2</name></expr>]</index></name>()</expr>;</expr_stmt></then></if>
}</block>
<cpp:endif PREFIX:line="312" PREFIX:column="1">#<cpp:directive PREFIX:line="312" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif PREFIX:line="314" PREFIX:column="1">#<cpp:directive PREFIX:line="314" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" PREFIX:line="316" PREFIX:column="1">/*
SIGNAL(SIG_2WIRE_SERIAL) {
  if(twiIntFunc)
    twiIntFunc();
}
*/</comment>

</unit>
