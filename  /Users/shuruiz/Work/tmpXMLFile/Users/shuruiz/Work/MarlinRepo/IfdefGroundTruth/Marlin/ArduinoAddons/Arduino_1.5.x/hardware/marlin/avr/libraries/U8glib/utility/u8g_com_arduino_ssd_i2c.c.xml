<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_ssd_i2c.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  
  u8g_com_arduino_ssd_i2c.c

  com interface for arduino (AND atmega) and the SSDxxxx chip (SOLOMON) variant 
  I2C protocol 
  
  ToDo: Rename this to u8g_com_avr_ssd_i2c.c

  Universal 8bit Graphics Library
  
  Copyright (c) 2012, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  
  Special pin usage:
    U8G_PI_I2C_OPTION	additional options
    U8G_PI_A0_STATE	used to store the last value of the command/data register selection
    U8G_PI_SET_A0		1: Signal request to update I2C device with new A0_STATE, 0: Do nothing, A0_STATE matches I2C device
    U8G_PI_SCL		clock line (NOT USED)
    U8G_PI_SDA		data line (NOT USED)
    
    U8G_PI_RESET		reset line (currently disabled, see below)

  Protocol:
    SLA, Cmd/Data Selection, Arguments
    The command/data register is selected by a special instruction byte, which is sent after SLA
    
    The continue bit is always 0 so that a (re)start is equired for the change from cmd to/data mode
*/</comment>

<cpp:include PREFIX:line="55" PREFIX:column="1">#<cpp:directive PREFIX:line="55" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="55" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>

<cpp:define PREFIX:line="57" PREFIX:column="1">#<cpp:directive PREFIX:line="57" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="57" PREFIX:column="9">I2C_SLA</name></cpp:macro>		<cpp:value PREFIX:line="57" PREFIX:column="25">(0x3c*2)</cpp:value></cpp:define>
<comment type="line" PREFIX:line="58" PREFIX:column="1">//#define I2C_CMD_MODE	0x080</comment>
<cpp:define PREFIX:line="59" PREFIX:column="1">#<cpp:directive PREFIX:line="59" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="59" PREFIX:column="9">I2C_CMD_MODE</name></cpp:macro>	<cpp:value PREFIX:line="59" PREFIX:column="25">0x000</cpp:value></cpp:define>
<cpp:define PREFIX:line="60" PREFIX:column="1">#<cpp:directive PREFIX:line="60" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="60" PREFIX:column="9">I2C_DATA_MODE</name></cpp:macro>	<cpp:value PREFIX:line="60" PREFIX:column="25">0x040</cpp:value></cpp:define>


<function><type><name PREFIX:line="63" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="63" PREFIX:column="9">u8g_com_arduino_ssd_start_sequence</name><parameter_list PREFIX:line="63" PREFIX:column="43">(<param><decl><type><name PREFIX:line="63" PREFIX:column="44">u8g_t</name> *</type><name PREFIX:line="63" PREFIX:column="51">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="64" PREFIX:column="1">{
  <comment type="block" PREFIX:line="65" PREFIX:column="3">/* are we requested to set the a0 state? */</comment>
  <if PREFIX:line="66" PREFIX:column="3">if <condition PREFIX:line="66" PREFIX:column="6">( <expr><name><name PREFIX:line="66" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="66" PREFIX:column="13">pin_list</name><index PREFIX:line="66" PREFIX:column="21">[<expr><name PREFIX:line="66" PREFIX:column="22">U8G_PI_SET_A0</name></expr>]</index></name> == 0</expr> )</condition><then PREFIX:line="66" PREFIX:column="43">
    <return PREFIX:line="67" PREFIX:column="5">return <expr PREFIX:line="67" PREFIX:column="12">1</expr>;</return></then></if>	
  
  <comment type="block" PREFIX:line="69" PREFIX:column="3">/* setup bus, might be a repeated start */</comment>
  <if PREFIX:line="70" PREFIX:column="3">if <condition PREFIX:line="70" PREFIX:column="6">( <expr><call><name PREFIX:line="70" PREFIX:column="8">u8g_i2c_start</name><argument_list PREFIX:line="70" PREFIX:column="21">(<argument><expr><name PREFIX:line="70" PREFIX:column="22">I2C_SLA</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="70" PREFIX:column="37">
    <return PREFIX:line="71" PREFIX:column="5">return <expr PREFIX:line="71" PREFIX:column="12">0</expr>;</return></then></if>
  <if PREFIX:line="72" PREFIX:column="3">if <condition PREFIX:line="72" PREFIX:column="6">( <expr><name><name PREFIX:line="72" PREFIX:column="8">u8g</name>-&gt;<name PREFIX:line="72" PREFIX:column="13">pin_list</name><index PREFIX:line="72" PREFIX:column="21">[<expr><name PREFIX:line="72" PREFIX:column="22">U8G_PI_A0_STATE</name></expr>]</index></name> == 0</expr> )</condition><then PREFIX:line="72" PREFIX:column="45">
  <block PREFIX:line="73" PREFIX:column="3">{
    <if PREFIX:line="74" PREFIX:column="5">if <condition PREFIX:line="74" PREFIX:column="8">( <expr><call><name PREFIX:line="74" PREFIX:column="10">u8g_i2c_send_byte</name><argument_list PREFIX:line="74" PREFIX:column="27">(<argument><expr><name PREFIX:line="74" PREFIX:column="28">I2C_CMD_MODE</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="74" PREFIX:column="48">
      <return PREFIX:line="75" PREFIX:column="7">return <expr PREFIX:line="75" PREFIX:column="14">0</expr>;</return></then></if>
  }</block></then>
  <else PREFIX:line="77" PREFIX:column="3">else
  <block PREFIX:line="78" PREFIX:column="3">{
    <if PREFIX:line="79" PREFIX:column="5">if <condition PREFIX:line="79" PREFIX:column="8">( <expr><call><name PREFIX:line="79" PREFIX:column="10">u8g_i2c_send_byte</name><argument_list PREFIX:line="79" PREFIX:column="27">(<argument><expr><name PREFIX:line="79" PREFIX:column="28">I2C_DATA_MODE</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="79" PREFIX:column="49">
      <return PREFIX:line="80" PREFIX:column="7">return <expr PREFIX:line="80" PREFIX:column="14">0</expr>;</return></then></if>
  }</block></else></if>
  
  
  <expr_stmt><expr><name><name PREFIX:line="84" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="84" PREFIX:column="8">pin_list</name><index PREFIX:line="84" PREFIX:column="16">[<expr><name PREFIX:line="84" PREFIX:column="17">U8G_PI_SET_A0</name></expr>]</index></name> = 0</expr>;</expr_stmt>
  <return PREFIX:line="85" PREFIX:column="3">return <expr PREFIX:line="85" PREFIX:column="10">1</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="88" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="88" PREFIX:column="9">u8g_com_arduino_ssd_i2c_fn</name><parameter_list PREFIX:line="88" PREFIX:column="35">(<param><decl><type><name PREFIX:line="88" PREFIX:column="36">u8g_t</name> *</type><name PREFIX:line="88" PREFIX:column="43">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="88" PREFIX:column="48">uint8_t</name></type> <name PREFIX:line="88" PREFIX:column="56">msg</name></decl></param>, <param><decl><type><name PREFIX:line="88" PREFIX:column="61">uint8_t</name></type> <name PREFIX:line="88" PREFIX:column="69">arg_val</name></decl></param>, <param><decl><type><name PREFIX:line="88" PREFIX:column="78">void</name> *</type><name PREFIX:line="88" PREFIX:column="84">arg_ptr</name></decl></param>)</parameter_list>
<block PREFIX:line="89" PREFIX:column="1">{
  <switch PREFIX:line="90" PREFIX:column="3">switch<condition PREFIX:line="90" PREFIX:column="9">(<expr><name PREFIX:line="90" PREFIX:column="10">msg</name></expr>)</condition>
  <block PREFIX:line="91" PREFIX:column="3">{
    <case PREFIX:line="92" PREFIX:column="5">case <expr><name PREFIX:line="92" PREFIX:column="10">U8G_COM_MSG_INIT</name></expr>:
      <comment type="line" PREFIX:line="93" PREFIX:column="7">//u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);</comment>
      <comment type="line" PREFIX:line="94" PREFIX:column="7">//u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);</comment>
      <comment type="line" PREFIX:line="95" PREFIX:column="7">//u8g-&gt;pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */</comment>
    
      <expr_stmt><expr><call><name PREFIX:line="97" PREFIX:column="7">u8g_i2c_init</name><argument_list PREFIX:line="97" PREFIX:column="19">(<argument><expr><name><name PREFIX:line="97" PREFIX:column="20">u8g</name>-&gt;<name PREFIX:line="97" PREFIX:column="25">pin_list</name><index PREFIX:line="97" PREFIX:column="33">[<expr><name PREFIX:line="97" PREFIX:column="34">U8G_PI_I2C_OPTION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break PREFIX:line="99" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="101" PREFIX:column="5">case <expr><name PREFIX:line="101" PREFIX:column="10">U8G_COM_MSG_STOP</name></expr>:
      <break PREFIX:line="102" PREFIX:column="7">break;</break>

    </case><case PREFIX:line="104" PREFIX:column="5">case <expr><name PREFIX:line="104" PREFIX:column="10">U8G_COM_MSG_RESET</name></expr>:
      <comment type="block" PREFIX:line="105" PREFIX:column="7">/* Currently disabled, but it could be enable. Previous restrictions have been removed */</comment>
      <comment type="block" PREFIX:line="106" PREFIX:column="7">/* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */</comment>
      <break PREFIX:line="107" PREFIX:column="7">break;</break>
      
    </case><case PREFIX:line="109" PREFIX:column="5">case <expr><name PREFIX:line="109" PREFIX:column="10">U8G_COM_MSG_CHIP_SELECT</name></expr>:
      <expr_stmt><expr><name><name PREFIX:line="110" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="110" PREFIX:column="12">pin_list</name><index PREFIX:line="110" PREFIX:column="20">[<expr><name PREFIX:line="110" PREFIX:column="21">U8G_PI_A0_STATE</name></expr>]</index></name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="111" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="111" PREFIX:column="12">pin_list</name><index PREFIX:line="111" PREFIX:column="20">[<expr><name PREFIX:line="111" PREFIX:column="21">U8G_PI_SET_A0</name></expr>]</index></name> = 1</expr>;</expr_stmt>		<comment type="block" PREFIX:line="111" PREFIX:column="49">/* force a0 to set again, also forces start condition */</comment>
      <if PREFIX:line="112" PREFIX:column="7">if <condition PREFIX:line="112" PREFIX:column="10">( <expr><name PREFIX:line="112" PREFIX:column="12">arg_val</name> == 0</expr> )</condition><then PREFIX:line="112" PREFIX:column="26">
      <block PREFIX:line="113" PREFIX:column="7">{
        <comment type="block" PREFIX:line="114" PREFIX:column="9">/* disable chip, send stop condition */</comment>
	<expr_stmt><expr><call><name PREFIX:line="115" PREFIX:column="9">u8g_i2c_stop</name><argument_list PREFIX:line="115" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
     }</block></then>
      <else PREFIX:line="117" PREFIX:column="7">else
      <block PREFIX:line="118" PREFIX:column="7">{
        <comment type="block" PREFIX:line="119" PREFIX:column="9">/* enable, do nothing: any byte writing will trigger the i2c start */</comment>
      }</block></else></if>
      <break PREFIX:line="121" PREFIX:column="7">break;</break>

    </case><case PREFIX:line="123" PREFIX:column="5">case <expr><name PREFIX:line="123" PREFIX:column="10">U8G_COM_MSG_WRITE_BYTE</name></expr>:
      <comment type="line" PREFIX:line="124" PREFIX:column="7">//u8g-&gt;pin_list[U8G_PI_SET_A0] = 1;</comment>
      <if PREFIX:line="125" PREFIX:column="7">if <condition PREFIX:line="125" PREFIX:column="10">( <expr><call><name PREFIX:line="125" PREFIX:column="12">u8g_com_arduino_ssd_start_sequence</name><argument_list PREFIX:line="125" PREFIX:column="46">(<argument><expr><name PREFIX:line="125" PREFIX:column="47">u8g</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="125" PREFIX:column="58">
	<return PREFIX:line="126" PREFIX:column="9">return <expr><call><name PREFIX:line="126" PREFIX:column="16">u8g_i2c_stop</name><argument_list PREFIX:line="126" PREFIX:column="28">()</argument_list></call></expr>, <expr PREFIX:line="126" PREFIX:column="32">0</expr>;</return></then></if>
      <if PREFIX:line="127" PREFIX:column="7">if <condition PREFIX:line="127" PREFIX:column="10">( <expr><call><name PREFIX:line="127" PREFIX:column="12">u8g_i2c_send_byte</name><argument_list PREFIX:line="127" PREFIX:column="29">(<argument><expr><name PREFIX:line="127" PREFIX:column="30">arg_val</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="127" PREFIX:column="45">
	<return PREFIX:line="128" PREFIX:column="9">return <expr><call><name PREFIX:line="128" PREFIX:column="16">u8g_i2c_stop</name><argument_list PREFIX:line="128" PREFIX:column="28">()</argument_list></call></expr>, <expr PREFIX:line="128" PREFIX:column="32">0</expr>;</return></then></if>
      <comment type="line" PREFIX:line="129" PREFIX:column="7">// u8g_i2c_stop();</comment>
      <break PREFIX:line="130" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="132" PREFIX:column="5">case <expr><name PREFIX:line="132" PREFIX:column="10">U8G_COM_MSG_WRITE_SEQ</name></expr>:
      <comment type="line" PREFIX:line="133" PREFIX:column="7">//u8g-&gt;pin_list[U8G_PI_SET_A0] = 1;</comment>
      <if PREFIX:line="134" PREFIX:column="7">if <condition PREFIX:line="134" PREFIX:column="10">( <expr><call><name PREFIX:line="134" PREFIX:column="12">u8g_com_arduino_ssd_start_sequence</name><argument_list PREFIX:line="134" PREFIX:column="46">(<argument><expr><name PREFIX:line="134" PREFIX:column="47">u8g</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="134" PREFIX:column="58">
	<return PREFIX:line="135" PREFIX:column="9">return <expr><call><name PREFIX:line="135" PREFIX:column="16">u8g_i2c_stop</name><argument_list PREFIX:line="135" PREFIX:column="28">()</argument_list></call></expr>, <expr PREFIX:line="135" PREFIX:column="32">0</expr>;</return></then></if>
      <block PREFIX:line="136" PREFIX:column="7">{
        <decl_stmt><decl><type><name PREFIX:line="137" PREFIX:column="9">register</name> <name PREFIX:line="137" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="137" PREFIX:column="27">ptr</name> <init PREFIX:line="137" PREFIX:column="31">= <expr><name PREFIX:line="137" PREFIX:column="33">arg_ptr</name></expr></init></decl>;</decl_stmt>
        <while PREFIX:line="138" PREFIX:column="9">while<condition PREFIX:line="138" PREFIX:column="14">( <expr><name PREFIX:line="138" PREFIX:column="16">arg_val</name> &gt; 0</expr> )</condition>
        <block PREFIX:line="139" PREFIX:column="9">{
	  <if PREFIX:line="140" PREFIX:column="11">if <condition PREFIX:line="140" PREFIX:column="14">( <expr><call><name PREFIX:line="140" PREFIX:column="16">u8g_i2c_send_byte</name><argument_list PREFIX:line="140" PREFIX:column="33">(<argument><expr PREFIX:line="140" PREFIX:column="34">*<name PREFIX:line="140" PREFIX:column="35">ptr</name>++</expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="140" PREFIX:column="48">
	    <return PREFIX:line="141" PREFIX:column="13">return <expr><call><name PREFIX:line="141" PREFIX:column="20">u8g_i2c_stop</name><argument_list PREFIX:line="141" PREFIX:column="32">()</argument_list></call></expr>, <expr PREFIX:line="141" PREFIX:column="36">0</expr>;</return></then></if>
          <expr_stmt><expr><name PREFIX:line="142" PREFIX:column="11">arg_val</name>--</expr>;</expr_stmt>
        }</block></while>
      }</block>
      <comment type="line" PREFIX:line="145" PREFIX:column="7">// u8g_i2c_stop();</comment>
      <break PREFIX:line="146" PREFIX:column="7">break;</break>

    </case><case PREFIX:line="148" PREFIX:column="5">case <expr><name PREFIX:line="148" PREFIX:column="10">U8G_COM_MSG_WRITE_SEQ_P</name></expr>:
      <comment type="line" PREFIX:line="149" PREFIX:column="7">//u8g-&gt;pin_list[U8G_PI_SET_A0] = 1;</comment>
      <if PREFIX:line="150" PREFIX:column="7">if <condition PREFIX:line="150" PREFIX:column="10">( <expr><call><name PREFIX:line="150" PREFIX:column="12">u8g_com_arduino_ssd_start_sequence</name><argument_list PREFIX:line="150" PREFIX:column="46">(<argument><expr><name PREFIX:line="150" PREFIX:column="47">u8g</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="150" PREFIX:column="58">
	<return PREFIX:line="151" PREFIX:column="9">return <expr><call><name PREFIX:line="151" PREFIX:column="16">u8g_i2c_stop</name><argument_list PREFIX:line="151" PREFIX:column="28">()</argument_list></call></expr>, <expr PREFIX:line="151" PREFIX:column="32">0</expr>;</return></then></if>
      <block PREFIX:line="152" PREFIX:column="7">{
        <decl_stmt><decl><type><name PREFIX:line="153" PREFIX:column="9">register</name> <name PREFIX:line="153" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="153" PREFIX:column="27">ptr</name> <init PREFIX:line="153" PREFIX:column="31">= <expr><name PREFIX:line="153" PREFIX:column="33">arg_ptr</name></expr></init></decl>;</decl_stmt>
        <while PREFIX:line="154" PREFIX:column="9">while<condition PREFIX:line="154" PREFIX:column="14">( <expr><name PREFIX:line="154" PREFIX:column="16">arg_val</name> &gt; 0</expr> )</condition>
        <block PREFIX:line="155" PREFIX:column="9">{
	  <if PREFIX:line="156" PREFIX:column="11">if <condition PREFIX:line="156" PREFIX:column="14">( <expr><call><name PREFIX:line="156" PREFIX:column="16">u8g_i2c_send_byte</name><argument_list PREFIX:line="156" PREFIX:column="33">(<argument><expr><call><name PREFIX:line="156" PREFIX:column="34">u8g_pgm_read</name><argument_list PREFIX:line="156" PREFIX:column="46">(<argument><expr><name PREFIX:line="156" PREFIX:column="47">ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="156" PREFIX:column="59">
	    <return PREFIX:line="157" PREFIX:column="13">return <expr PREFIX:line="157" PREFIX:column="20">0</expr>;</return></then></if>
          <expr_stmt><expr><name PREFIX:line="158" PREFIX:column="11">ptr</name>++</expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="159" PREFIX:column="11">arg_val</name>--</expr>;</expr_stmt>
        }</block></while>
      }</block>
      <comment type="line" PREFIX:line="162" PREFIX:column="7">// u8g_i2c_stop();</comment>
      <break PREFIX:line="163" PREFIX:column="7">break;</break>
      
    </case><case PREFIX:line="165" PREFIX:column="5">case <expr><name PREFIX:line="165" PREFIX:column="10">U8G_COM_MSG_ADDRESS</name></expr>:                     <comment type="block" PREFIX:line="165" PREFIX:column="51">/* define cmd (arg_val = 0) or data mode (arg_val = 1) */</comment>
      <expr_stmt><expr><name><name PREFIX:line="166" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="166" PREFIX:column="12">pin_list</name><index PREFIX:line="166" PREFIX:column="20">[<expr><name PREFIX:line="166" PREFIX:column="21">U8G_PI_A0_STATE</name></expr>]</index></name> = <name PREFIX:line="166" PREFIX:column="40">arg_val</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="167" PREFIX:column="7">u8g</name>-&gt;<name PREFIX:line="167" PREFIX:column="12">pin_list</name><index PREFIX:line="167" PREFIX:column="20">[<expr><name PREFIX:line="167" PREFIX:column="21">U8G_PI_SET_A0</name></expr>]</index></name> = 1</expr>;</expr_stmt>		<comment type="block" PREFIX:line="167" PREFIX:column="49">/* force a0 to set again */</comment>
    
<cpp:ifdef PREFIX:line="169" PREFIX:column="1">#<cpp:directive PREFIX:line="169" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="169" PREFIX:column="8">OLD_CODE</name></cpp:ifdef>    
      <if PREFIX:line="170" PREFIX:column="7">if <condition PREFIX:line="170" PREFIX:column="10">( <expr><name PREFIX:line="170" PREFIX:column="12">i2c_state</name> != 0</expr> )</condition><then PREFIX:line="170" PREFIX:column="28">
      <block PREFIX:line="171" PREFIX:column="7">{
	<expr_stmt><expr><call><name PREFIX:line="172" PREFIX:column="9">u8g_i2c_stop</name><argument_list PREFIX:line="172" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="173" PREFIX:column="9">i2c_state</name> = 0</expr>;</expr_stmt>
      }</block></then></if>

      <if PREFIX:line="176" PREFIX:column="7">if <condition PREFIX:line="176" PREFIX:column="10">( <expr><call><name PREFIX:line="176" PREFIX:column="12">u8g_com_arduino_ssd_start_sequence</name><argument_list PREFIX:line="176" PREFIX:column="46">(<argument><expr><name PREFIX:line="176" PREFIX:column="47">arg_val</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="176" PREFIX:column="62">
	<return PREFIX:line="177" PREFIX:column="9">return <expr PREFIX:line="177" PREFIX:column="16">0</expr>;</return></then></if>
    
      <comment type="block" PREFIX:line="179" PREFIX:column="7">/* setup bus, might be a repeated start */</comment>
      <comment type="block" PREFIX:line="180" PREFIX:column="7">/*
      if ( u8g_i2c_start(I2C_SLA) == 0 )
	return 0;
      if ( arg_val == 0 )
      {
	i2c_state = 1;
	
	if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
	  return 0;
      }
      else
      {
	i2c_state = 2;
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */</comment>
<cpp:endif PREFIX:line="197" PREFIX:column="1">#<cpp:directive PREFIX:line="197" PREFIX:column="2">endif</cpp:directive></cpp:endif>
      <break PREFIX:line="198" PREFIX:column="7">break;</break>
  </case>}</block></switch>
  <return PREFIX:line="200" PREFIX:column="3">return <expr PREFIX:line="200" PREFIX:column="10">1</expr>;</return>
}</block></function>
</unit>
