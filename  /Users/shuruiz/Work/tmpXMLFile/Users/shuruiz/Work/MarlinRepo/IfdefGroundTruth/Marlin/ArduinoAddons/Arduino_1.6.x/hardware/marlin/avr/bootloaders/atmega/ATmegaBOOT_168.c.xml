<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/bootloaders/atmega/ATmegaBOOT_168.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/**********************************************************/</comment>
<comment type="block" PREFIX:line="2" PREFIX:column="1">/* Serial Bootloader for Atmel megaAVR Controllers        */</comment>
<comment type="block" PREFIX:line="3" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="4" PREFIX:column="1">/* tested with ATmega8, ATmega128 and ATmega168           */</comment>
<comment type="block" PREFIX:line="5" PREFIX:column="1">/* should work with other mega's, see code for details    */</comment>
<comment type="block" PREFIX:line="6" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="7" PREFIX:column="1">/* ATmegaBOOT.c                                           */</comment>
<comment type="block" PREFIX:line="8" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="9" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="10" PREFIX:column="1">/* 20090308: integrated Mega changes into main bootloader */</comment>
<comment type="block" PREFIX:line="11" PREFIX:column="1">/*           source by D. Mellis                          */</comment>
<comment type="block" PREFIX:line="12" PREFIX:column="1">/* 20080930: hacked for Arduino Mega (with the 1280       */</comment>
<comment type="block" PREFIX:line="13" PREFIX:column="1">/*           processor, backwards compatible)             */</comment>
<comment type="block" PREFIX:line="14" PREFIX:column="1">/*           by D. Cuartielles                            */</comment>
<comment type="block" PREFIX:line="15" PREFIX:column="1">/* 20070626: hacked for Arduino Diecimila (which auto-    */</comment>
<comment type="block" PREFIX:line="16" PREFIX:column="1">/*           resets when a USB connection is made to it)  */</comment>
<comment type="block" PREFIX:line="17" PREFIX:column="1">/*           by D. Mellis                                 */</comment>
<comment type="block" PREFIX:line="18" PREFIX:column="1">/* 20060802: hacked for Arduino by D. Cuartielles         */</comment>
<comment type="block" PREFIX:line="19" PREFIX:column="1">/*           based on a previous hack by D. Mellis        */</comment>
<comment type="block" PREFIX:line="20" PREFIX:column="1">/*           and D. Cuartielles                           */</comment>
<comment type="block" PREFIX:line="21" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="22" PREFIX:column="1">/* Monitor and debug functions were added to the original */</comment>
<comment type="block" PREFIX:line="23" PREFIX:column="1">/* code by Dr. Erik Lins, chip45.com. (See below)         */</comment>
<comment type="block" PREFIX:line="24" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="25" PREFIX:column="1">/* Thanks to Karl Pitrich for fixing a bootloader pin     */</comment>
<comment type="block" PREFIX:line="26" PREFIX:column="1">/* problem and more informative LED blinking!             */</comment>
<comment type="block" PREFIX:line="27" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="28" PREFIX:column="1">/* For the latest version see:                            */</comment>
<comment type="block" PREFIX:line="29" PREFIX:column="1">/* http://www.chip45.com/                                 */</comment>
<comment type="block" PREFIX:line="30" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="31" PREFIX:column="1">/* ------------------------------------------------------ */</comment>
<comment type="block" PREFIX:line="32" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="33" PREFIX:column="1">/* based on stk500boot.c                                  */</comment>
<comment type="block" PREFIX:line="34" PREFIX:column="1">/* Copyright (c) 2003, Jason P. Kyle                      */</comment>
<comment type="block" PREFIX:line="35" PREFIX:column="1">/* All rights reserved.                                   */</comment>
<comment type="block" PREFIX:line="36" PREFIX:column="1">/* see avr1.org for original file and information         */</comment>
<comment type="block" PREFIX:line="37" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="38" PREFIX:column="1">/* This program is free software; you can redistribute it */</comment>
<comment type="block" PREFIX:line="39" PREFIX:column="1">/* and/or modify it under the terms of the GNU General    */</comment>
<comment type="block" PREFIX:line="40" PREFIX:column="1">/* Public License as published by the Free Software       */</comment>
<comment type="block" PREFIX:line="41" PREFIX:column="1">/* Foundation; either version 2 of the License, or        */</comment>
<comment type="block" PREFIX:line="42" PREFIX:column="1">/* (at your option) any later version.                    */</comment>
<comment type="block" PREFIX:line="43" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="44" PREFIX:column="1">/* This program is distributed in the hope that it will   */</comment>
<comment type="block" PREFIX:line="45" PREFIX:column="1">/* be useful, but WITHOUT ANY WARRANTY; without even the  */</comment>
<comment type="block" PREFIX:line="46" PREFIX:column="1">/* implied warranty of MERCHANTABILITY or FITNESS FOR A   */</comment>
<comment type="block" PREFIX:line="47" PREFIX:column="1">/* PARTICULAR PURPOSE.  See the GNU General Public        */</comment>
<comment type="block" PREFIX:line="48" PREFIX:column="1">/* License for more details.                              */</comment>
<comment type="block" PREFIX:line="49" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="50" PREFIX:column="1">/* You should have received a copy of the GNU General     */</comment>
<comment type="block" PREFIX:line="51" PREFIX:column="1">/* Public License along with this program; if not, write  */</comment>
<comment type="block" PREFIX:line="52" PREFIX:column="1">/* to the Free Software Foundation, Inc.,                 */</comment>
<comment type="block" PREFIX:line="53" PREFIX:column="1">/* 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA */</comment>
<comment type="block" PREFIX:line="54" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="55" PREFIX:column="1">/* Licence can be viewed at                               */</comment>
<comment type="block" PREFIX:line="56" PREFIX:column="1">/* http://www.fsf.org/licenses/gpl.txt                    */</comment>
<comment type="block" PREFIX:line="57" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="58" PREFIX:column="1">/* Target = Atmel AVR m128,m64,m32,m16,m8,m162,m163,m169, */</comment>
<comment type="block" PREFIX:line="59" PREFIX:column="1">/* m8515,m8535. ATmega161 has a very small boot block so  */</comment>
<comment type="block" PREFIX:line="60" PREFIX:column="1">/* isn't supported.                                       */</comment>
<comment type="block" PREFIX:line="61" PREFIX:column="1">/*                                                        */</comment>
<comment type="block" PREFIX:line="62" PREFIX:column="1">/* Tested with m168                                       */</comment>
<comment type="block" PREFIX:line="63" PREFIX:column="1">/**********************************************************/</comment>

<comment type="block" PREFIX:line="65" PREFIX:column="1">/* $Id$ */</comment>


<comment type="block" PREFIX:line="68" PREFIX:column="1">/* some includes */</comment>
<cpp:include PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="69" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="70" PREFIX:column="1">#<cpp:directive PREFIX:line="70" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="70" PREFIX:column="10">&lt;avr/io.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="71" PREFIX:column="1">#<cpp:directive PREFIX:line="71" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="71" PREFIX:column="10">&lt;avr/pgmspace.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="72" PREFIX:column="1">#<cpp:directive PREFIX:line="72" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="72" PREFIX:column="10">&lt;avr/interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="73" PREFIX:column="1">#<cpp:directive PREFIX:line="73" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="73" PREFIX:column="10">&lt;avr/wdt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="74" PREFIX:column="1">#<cpp:directive PREFIX:line="74" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="74" PREFIX:column="10">&lt;util/delay.h&gt;</cpp:file></cpp:include>

<comment type="block" PREFIX:line="76" PREFIX:column="1">/* the current avr-libc eeprom functions do not support the ATmega168 */</comment>
<comment type="block" PREFIX:line="77" PREFIX:column="1">/* own eeprom write/read functions are used instead */</comment>
<cpp:if PREFIX:line="78" PREFIX:column="1">#<cpp:directive PREFIX:line="78" PREFIX:column="2">if</cpp:directive> <expr PREFIX:line="78" PREFIX:column="5">!<call><name PREFIX:line="78" PREFIX:column="6">defined</name><argument_list PREFIX:line="78" PREFIX:column="13">(<argument><expr><name PREFIX:line="78" PREFIX:column="14">__AVR_ATmega168__</name></expr></argument>)</argument_list></call> || !<call><name PREFIX:line="78" PREFIX:column="37">defined</name><argument_list PREFIX:line="78" PREFIX:column="44">(<argument><expr><name PREFIX:line="78" PREFIX:column="45">__AVR_ATmega328P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include PREFIX:line="79" PREFIX:column="1">#<cpp:directive PREFIX:line="79" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="79" PREFIX:column="10">&lt;avr/eeprom.h&gt;</cpp:file></cpp:include>
<cpp:endif PREFIX:line="80" PREFIX:column="1">#<cpp:directive PREFIX:line="80" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" PREFIX:line="82" PREFIX:column="1">/* Use the F_CPU defined in Makefile */</comment>

<comment type="block" PREFIX:line="84" PREFIX:column="1">/* 20060803: hacked by DojoCorp */</comment>
<comment type="block" PREFIX:line="85" PREFIX:column="1">/* 20070626: hacked by David A. Mellis to decrease waiting time for auto-reset */</comment>
<comment type="block" PREFIX:line="86" PREFIX:column="1">/* set the waiting time for the bootloader */</comment>
<comment type="block" PREFIX:line="87" PREFIX:column="1">/* get this from the Makefile instead */</comment>
<comment type="block" PREFIX:line="88" PREFIX:column="1">/* #define MAX_TIME_COUNT (F_CPU&gt;&gt;4) */</comment>

<comment type="block" PREFIX:line="90" PREFIX:column="1">/* 20070707: hacked by David A. Mellis - after this many errors give up and launch application */</comment>
<cpp:define PREFIX:line="91" PREFIX:column="1">#<cpp:directive PREFIX:line="91" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="91" PREFIX:column="9">MAX_ERROR_COUNT</name></cpp:macro> <cpp:value PREFIX:line="91" PREFIX:column="25">5</cpp:value></cpp:define>

<comment type="block" PREFIX:line="93" PREFIX:column="1">/* set the UART baud rate */</comment>
<comment type="block" PREFIX:line="94" PREFIX:column="1">/* 20060803: hacked by DojoCorp */</comment>
<comment type="line" PREFIX:line="95" PREFIX:column="1">//#define BAUD_RATE   115200</comment>
<cpp:ifndef PREFIX:line="96" PREFIX:column="1">#<cpp:directive PREFIX:line="96" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="96" PREFIX:column="9">BAUD_RATE</name></cpp:ifndef>
<cpp:define PREFIX:line="97" PREFIX:column="1">#<cpp:directive PREFIX:line="97" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="97" PREFIX:column="9">BAUD_RATE</name></cpp:macro>   <cpp:value PREFIX:line="97" PREFIX:column="21">19200</cpp:value></cpp:define>
<cpp:endif PREFIX:line="98" PREFIX:column="1">#<cpp:directive PREFIX:line="98" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="101" PREFIX:column="1">/* SW_MAJOR and MINOR needs to be updated from time to time to avoid warning message from AVR Studio */</comment>
<comment type="block" PREFIX:line="102" PREFIX:column="1">/* never allow AVR Studio to do an update !!!! */</comment>
<cpp:define PREFIX:line="103" PREFIX:column="1">#<cpp:directive PREFIX:line="103" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="103" PREFIX:column="9">HW_VER</name></cpp:macro>	 <cpp:value PREFIX:line="103" PREFIX:column="18">0x02</cpp:value></cpp:define>
<cpp:define PREFIX:line="104" PREFIX:column="1">#<cpp:directive PREFIX:line="104" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="104" PREFIX:column="9">SW_MAJOR</name></cpp:macro> <cpp:value PREFIX:line="104" PREFIX:column="18">0x01</cpp:value></cpp:define>
<cpp:define PREFIX:line="105" PREFIX:column="1">#<cpp:directive PREFIX:line="105" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="105" PREFIX:column="9">SW_MINOR</name></cpp:macro> <cpp:value PREFIX:line="105" PREFIX:column="18">0x10</cpp:value></cpp:define>


<comment type="block" PREFIX:line="108" PREFIX:column="1">/* Adjust to suit whatever pin your hardware uses to enter the bootloader */</comment>
<comment type="block" PREFIX:line="109" PREFIX:column="1">/* ATmega128 has two UARTS so two pins are used to enter bootloader and select UART */</comment>
<comment type="block" PREFIX:line="110" PREFIX:column="1">/* ATmega1280 has four UARTS, but for Arduino Mega, we will only use RXD0 to get code */</comment>
<comment type="block" PREFIX:line="111" PREFIX:column="1">/* BL0... means UART0, BL1... means UART1 */</comment>
<cpp:ifdef PREFIX:line="112" PREFIX:column="1">#<cpp:directive PREFIX:line="112" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="112" PREFIX:column="8">__AVR_ATmega128__</name></cpp:ifdef>
<cpp:define PREFIX:line="113" PREFIX:column="1">#<cpp:directive PREFIX:line="113" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="113" PREFIX:column="9">BL_DDR</name></cpp:macro>  <cpp:value PREFIX:line="113" PREFIX:column="17">DDRF</cpp:value></cpp:define>
<cpp:define PREFIX:line="114" PREFIX:column="1">#<cpp:directive PREFIX:line="114" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="114" PREFIX:column="9">BL_PORT</name></cpp:macro> <cpp:value PREFIX:line="114" PREFIX:column="17">PORTF</cpp:value></cpp:define>
<cpp:define PREFIX:line="115" PREFIX:column="1">#<cpp:directive PREFIX:line="115" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="115" PREFIX:column="9">BL_PIN</name></cpp:macro>  <cpp:value PREFIX:line="115" PREFIX:column="17">PINF</cpp:value></cpp:define>
<cpp:define PREFIX:line="116" PREFIX:column="1">#<cpp:directive PREFIX:line="116" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="116" PREFIX:column="9">BL0</name></cpp:macro>     <cpp:value PREFIX:line="116" PREFIX:column="17">PINF7</cpp:value></cpp:define>
<cpp:define PREFIX:line="117" PREFIX:column="1">#<cpp:directive PREFIX:line="117" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="117" PREFIX:column="9">BL1</name></cpp:macro>     <cpp:value PREFIX:line="117" PREFIX:column="17">PINF6</cpp:value></cpp:define>
<cpp:elif PREFIX:line="118" PREFIX:column="1">#<cpp:directive PREFIX:line="118" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="118" PREFIX:column="7">defined</name> <name PREFIX:line="118" PREFIX:column="15">__AVR_ATmega1280__</name></expr></cpp:elif> 
<comment type="block" PREFIX:line="119" PREFIX:column="1">/* we just don't do anything for the MEGA and enter bootloader on reset anyway*/</comment>
<cpp:elif PREFIX:line="120" PREFIX:column="1">#<cpp:directive PREFIX:line="120" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="120" PREFIX:column="7">defined</name> <name PREFIX:line="120" PREFIX:column="15">__AVR_ATmega1284P_</name> || <name PREFIX:line="120" PREFIX:column="37">defined</name> <name PREFIX:line="120" PREFIX:column="45">__AVR_ATmega644P__</name></expr></cpp:elif>

<cpp:else PREFIX:line="122" PREFIX:column="1">#<cpp:directive PREFIX:line="122" PREFIX:column="2">else</cpp:directive></cpp:else>
<comment type="block" PREFIX:line="123" PREFIX:column="1">/* other ATmegas have only one UART, so only one pin is defined to enter bootloader */</comment>
<cpp:define PREFIX:line="124" PREFIX:column="1">#<cpp:directive PREFIX:line="124" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="124" PREFIX:column="9">BL_DDR</name></cpp:macro>  <cpp:value PREFIX:line="124" PREFIX:column="17">DDRD</cpp:value></cpp:define>
<cpp:define PREFIX:line="125" PREFIX:column="1">#<cpp:directive PREFIX:line="125" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="125" PREFIX:column="9">BL_PORT</name></cpp:macro> <cpp:value PREFIX:line="125" PREFIX:column="17">PORTD</cpp:value></cpp:define>
<cpp:define PREFIX:line="126" PREFIX:column="1">#<cpp:directive PREFIX:line="126" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="126" PREFIX:column="9">BL_PIN</name></cpp:macro>  <cpp:value PREFIX:line="126" PREFIX:column="17">PIND</cpp:value></cpp:define>
<cpp:define PREFIX:line="127" PREFIX:column="1">#<cpp:directive PREFIX:line="127" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="127" PREFIX:column="9">BL</name></cpp:macro>      <cpp:value PREFIX:line="127" PREFIX:column="17">PIND6</cpp:value></cpp:define>
<cpp:endif PREFIX:line="128" PREFIX:column="1">#<cpp:directive PREFIX:line="128" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="131" PREFIX:column="1">/* onboard LED is used to indicate, that the bootloader was entered (3x flashing) */</comment>
<comment type="block" PREFIX:line="132" PREFIX:column="1">/* if monitor functions are included, LED goes on after monitor was entered */</comment>
<cpp:if PREFIX:line="133" PREFIX:column="1">#<cpp:directive PREFIX:line="133" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="133" PREFIX:column="5">defined</name> <name PREFIX:line="133" PREFIX:column="13">__AVR_ATmega128__</name> || <name PREFIX:line="133" PREFIX:column="34">defined</name> <name PREFIX:line="133" PREFIX:column="42">__AVR_ATmega1280__</name></expr></cpp:if>
<comment type="block" PREFIX:line="134" PREFIX:column="1">/* Onboard LED is connected to pin PB7 (e.g. Crumb128, PROBOmega128, Savvy128, Arduino Mega) */</comment>
<cpp:define PREFIX:line="135" PREFIX:column="1">#<cpp:directive PREFIX:line="135" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="135" PREFIX:column="9">LED_DDR</name></cpp:macro>  <cpp:value PREFIX:line="135" PREFIX:column="18">DDRB</cpp:value></cpp:define>
<cpp:define PREFIX:line="136" PREFIX:column="1">#<cpp:directive PREFIX:line="136" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="136" PREFIX:column="9">LED_PORT</name></cpp:macro> <cpp:value PREFIX:line="136" PREFIX:column="18">PORTB</cpp:value></cpp:define>
<cpp:define PREFIX:line="137" PREFIX:column="1">#<cpp:directive PREFIX:line="137" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="137" PREFIX:column="9">LED_PIN</name></cpp:macro>  <cpp:value PREFIX:line="137" PREFIX:column="18">PINB</cpp:value></cpp:define>
<cpp:define PREFIX:line="138" PREFIX:column="1">#<cpp:directive PREFIX:line="138" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="138" PREFIX:column="9">LED</name></cpp:macro>      <cpp:value PREFIX:line="138" PREFIX:column="18">PINB7</cpp:value></cpp:define>
<cpp:elif PREFIX:line="139" PREFIX:column="1">#<cpp:directive PREFIX:line="139" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="139" PREFIX:column="7">defined</name> <name PREFIX:line="139" PREFIX:column="15">__AVR_ATmega1284P__</name> || <name PREFIX:line="139" PREFIX:column="38">defined</name> <name PREFIX:line="139" PREFIX:column="46">__AVR_ATmega644P__</name></expr></cpp:elif>
<cpp:define PREFIX:line="140" PREFIX:column="1">#<cpp:directive PREFIX:line="140" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="140" PREFIX:column="9">LED_DDR</name></cpp:macro>  <cpp:value PREFIX:line="140" PREFIX:column="18">DDRB</cpp:value></cpp:define>
<cpp:define PREFIX:line="141" PREFIX:column="1">#<cpp:directive PREFIX:line="141" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="141" PREFIX:column="9">LED_PORT</name></cpp:macro> <cpp:value PREFIX:line="141" PREFIX:column="18">PORTB</cpp:value></cpp:define>
<cpp:define PREFIX:line="142" PREFIX:column="1">#<cpp:directive PREFIX:line="142" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="142" PREFIX:column="9">LED_PIN</name></cpp:macro>  <cpp:value PREFIX:line="142" PREFIX:column="18">PINB</cpp:value></cpp:define>
<cpp:define PREFIX:line="143" PREFIX:column="1">#<cpp:directive PREFIX:line="143" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="143" PREFIX:column="9">LED</name></cpp:macro>      <cpp:value PREFIX:line="143" PREFIX:column="18">PINB0</cpp:value></cpp:define>
<cpp:else PREFIX:line="144" PREFIX:column="1">#<cpp:directive PREFIX:line="144" PREFIX:column="2">else</cpp:directive></cpp:else>
<comment type="block" PREFIX:line="145" PREFIX:column="1">/* Onboard LED is connected to pin PB5 in Arduino NG, Diecimila, and Duomilanuove */</comment> 
<comment type="block" PREFIX:line="146" PREFIX:column="1">/* other boards like e.g. Crumb8, Crumb168 are using PB2 */</comment>
<cpp:define PREFIX:line="147" PREFIX:column="1">#<cpp:directive PREFIX:line="147" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="147" PREFIX:column="9">LED_DDR</name></cpp:macro>  <cpp:value PREFIX:line="147" PREFIX:column="18">DDRB</cpp:value></cpp:define>
<cpp:define PREFIX:line="148" PREFIX:column="1">#<cpp:directive PREFIX:line="148" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="148" PREFIX:column="9">LED_PORT</name></cpp:macro> <cpp:value PREFIX:line="148" PREFIX:column="18">PORTB</cpp:value></cpp:define>
<cpp:define PREFIX:line="149" PREFIX:column="1">#<cpp:directive PREFIX:line="149" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="149" PREFIX:column="9">LED_PIN</name></cpp:macro>  <cpp:value PREFIX:line="149" PREFIX:column="18">PINB</cpp:value></cpp:define>
<cpp:define PREFIX:line="150" PREFIX:column="1">#<cpp:directive PREFIX:line="150" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="150" PREFIX:column="9">LED</name></cpp:macro>      <cpp:value PREFIX:line="150" PREFIX:column="18">PINB5</cpp:value></cpp:define>
<cpp:endif PREFIX:line="151" PREFIX:column="1">#<cpp:directive PREFIX:line="151" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="154" PREFIX:column="1">/* monitor functions will only be compiled when using ATmega128, due to bootblock size raints */</comment>
<cpp:if PREFIX:line="155" PREFIX:column="1">#<cpp:directive PREFIX:line="155" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="155" PREFIX:column="5">defined</name><argument_list PREFIX:line="155" PREFIX:column="12">(<argument><expr><name PREFIX:line="155" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="155" PREFIX:column="35">defined</name><argument_list PREFIX:line="155" PREFIX:column="42">(<argument><expr><name PREFIX:line="155" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="156" PREFIX:column="1">#<cpp:directive PREFIX:line="156" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="156" PREFIX:column="9">MONITOR</name></cpp:macro> <cpp:value PREFIX:line="156" PREFIX:column="17">1</cpp:value></cpp:define>
<cpp:endif PREFIX:line="157" PREFIX:column="1">#<cpp:directive PREFIX:line="157" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="160" PREFIX:column="1">/* define various device id's */</comment>
<comment type="block" PREFIX:line="161" PREFIX:column="1">/* manufacturer byte is always the same */</comment>
<cpp:define PREFIX:line="162" PREFIX:column="1">#<cpp:directive PREFIX:line="162" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="162" PREFIX:column="9">SIG1</name></cpp:macro>	<cpp:value PREFIX:line="162" PREFIX:column="17">0x1E</cpp:value></cpp:define>	<comment type="line" PREFIX:line="162" PREFIX:column="25">// Yep, Atmel is the only manufacturer of AVR micros.  Single source :(</comment>

<cpp:if PREFIX:line="164" PREFIX:column="1">#<cpp:directive PREFIX:line="164" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="164" PREFIX:column="5">defined</name> <name PREFIX:line="164" PREFIX:column="13">__AVR_ATmega1280__</name></expr></cpp:if>
<cpp:define PREFIX:line="165" PREFIX:column="1">#<cpp:directive PREFIX:line="165" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="165" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="165" PREFIX:column="17">0x97</cpp:value></cpp:define>
<cpp:define PREFIX:line="166" PREFIX:column="1">#<cpp:directive PREFIX:line="166" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="166" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="166" PREFIX:column="17">0x03</cpp:value></cpp:define>
<cpp:define PREFIX:line="167" PREFIX:column="1">#<cpp:directive PREFIX:line="167" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="167" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="167" PREFIX:column="25">0x80U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="167" PREFIX:column="33">//128 words</comment>

<cpp:elif PREFIX:line="169" PREFIX:column="1">#<cpp:directive PREFIX:line="169" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="169" PREFIX:column="7">defined</name> <name PREFIX:line="169" PREFIX:column="15">__AVR_ATmega1284P__</name></expr></cpp:elif>
<cpp:define PREFIX:line="170" PREFIX:column="1">#<cpp:directive PREFIX:line="170" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="170" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="170" PREFIX:column="17">0x97</cpp:value></cpp:define>
<cpp:define PREFIX:line="171" PREFIX:column="1">#<cpp:directive PREFIX:line="171" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="171" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="171" PREFIX:column="17">0x05</cpp:value></cpp:define>
<cpp:define PREFIX:line="172" PREFIX:column="1">#<cpp:directive PREFIX:line="172" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="172" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="172" PREFIX:column="25">0x080U</cpp:value></cpp:define>   <comment type="line" PREFIX:line="172" PREFIX:column="34">//128 words</comment>

<cpp:elif PREFIX:line="174" PREFIX:column="1">#<cpp:directive PREFIX:line="174" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="174" PREFIX:column="7">defined</name> <name PREFIX:line="174" PREFIX:column="15">__AVR_ATmega1281__</name></expr></cpp:elif>
<cpp:define PREFIX:line="175" PREFIX:column="1">#<cpp:directive PREFIX:line="175" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="175" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="175" PREFIX:column="17">0x97</cpp:value></cpp:define>
<cpp:define PREFIX:line="176" PREFIX:column="1">#<cpp:directive PREFIX:line="176" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="176" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="176" PREFIX:column="17">0x04</cpp:value></cpp:define>
<cpp:define PREFIX:line="177" PREFIX:column="1">#<cpp:directive PREFIX:line="177" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="177" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="177" PREFIX:column="25">0x80U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="177" PREFIX:column="33">//128 words</comment>

<cpp:elif PREFIX:line="179" PREFIX:column="1">#<cpp:directive PREFIX:line="179" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="179" PREFIX:column="7">defined</name> <name PREFIX:line="179" PREFIX:column="15">__AVR_ATmega644P__</name></expr></cpp:elif>
<cpp:define PREFIX:line="180" PREFIX:column="1">#<cpp:directive PREFIX:line="180" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="180" PREFIX:column="9">SIG2</name></cpp:macro>    <cpp:value PREFIX:line="180" PREFIX:column="17">0x96</cpp:value></cpp:define>
<cpp:define PREFIX:line="181" PREFIX:column="1">#<cpp:directive PREFIX:line="181" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="181" PREFIX:column="9">SIG3</name></cpp:macro>    <cpp:value PREFIX:line="181" PREFIX:column="17">0x0A</cpp:value></cpp:define>
<cpp:define PREFIX:line="182" PREFIX:column="1">#<cpp:directive PREFIX:line="182" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="182" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>       <cpp:value PREFIX:line="182" PREFIX:column="25">0x080U</cpp:value></cpp:define>   <comment type="line" PREFIX:line="182" PREFIX:column="34">//128 words</comment>

<cpp:elif PREFIX:line="184" PREFIX:column="1">#<cpp:directive PREFIX:line="184" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="184" PREFIX:column="7">defined</name> <name PREFIX:line="184" PREFIX:column="15">__AVR_ATmega128__</name></expr></cpp:elif>
<cpp:define PREFIX:line="185" PREFIX:column="1">#<cpp:directive PREFIX:line="185" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="185" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="185" PREFIX:column="17">0x97</cpp:value></cpp:define>
<cpp:define PREFIX:line="186" PREFIX:column="1">#<cpp:directive PREFIX:line="186" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="186" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="186" PREFIX:column="17">0x02</cpp:value></cpp:define>
<cpp:define PREFIX:line="187" PREFIX:column="1">#<cpp:directive PREFIX:line="187" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="187" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="187" PREFIX:column="25">0x80U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="187" PREFIX:column="33">//128 words</comment>

<cpp:elif PREFIX:line="189" PREFIX:column="1">#<cpp:directive PREFIX:line="189" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="189" PREFIX:column="7">defined</name> <name PREFIX:line="189" PREFIX:column="15">__AVR_ATmega64__</name></expr></cpp:elif>
<cpp:define PREFIX:line="190" PREFIX:column="1">#<cpp:directive PREFIX:line="190" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="190" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="190" PREFIX:column="17">0x96</cpp:value></cpp:define>
<cpp:define PREFIX:line="191" PREFIX:column="1">#<cpp:directive PREFIX:line="191" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="191" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="191" PREFIX:column="17">0x02</cpp:value></cpp:define>
<cpp:define PREFIX:line="192" PREFIX:column="1">#<cpp:directive PREFIX:line="192" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="192" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="192" PREFIX:column="25">0x80U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="192" PREFIX:column="33">//128 words</comment>

<cpp:elif PREFIX:line="194" PREFIX:column="1">#<cpp:directive PREFIX:line="194" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="194" PREFIX:column="7">defined</name> <name PREFIX:line="194" PREFIX:column="15">__AVR_ATmega32__</name></expr></cpp:elif>
<cpp:define PREFIX:line="195" PREFIX:column="1">#<cpp:directive PREFIX:line="195" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="195" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="195" PREFIX:column="17">0x95</cpp:value></cpp:define>
<cpp:define PREFIX:line="196" PREFIX:column="1">#<cpp:directive PREFIX:line="196" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="196" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="196" PREFIX:column="17">0x02</cpp:value></cpp:define>
<cpp:define PREFIX:line="197" PREFIX:column="1">#<cpp:directive PREFIX:line="197" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="197" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="197" PREFIX:column="25">0x40U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="197" PREFIX:column="33">//64 words</comment>

<cpp:elif PREFIX:line="199" PREFIX:column="1">#<cpp:directive PREFIX:line="199" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="199" PREFIX:column="7">defined</name> <name PREFIX:line="199" PREFIX:column="15">__AVR_ATmega16__</name></expr></cpp:elif>
<cpp:define PREFIX:line="200" PREFIX:column="1">#<cpp:directive PREFIX:line="200" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="200" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="200" PREFIX:column="17">0x94</cpp:value></cpp:define>
<cpp:define PREFIX:line="201" PREFIX:column="1">#<cpp:directive PREFIX:line="201" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="201" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="201" PREFIX:column="17">0x03</cpp:value></cpp:define>
<cpp:define PREFIX:line="202" PREFIX:column="1">#<cpp:directive PREFIX:line="202" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="202" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="202" PREFIX:column="25">0x40U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="202" PREFIX:column="33">//64 words</comment>

<cpp:elif PREFIX:line="204" PREFIX:column="1">#<cpp:directive PREFIX:line="204" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="204" PREFIX:column="7">defined</name> <name PREFIX:line="204" PREFIX:column="15">__AVR_ATmega8__</name></expr></cpp:elif>
<cpp:define PREFIX:line="205" PREFIX:column="1">#<cpp:directive PREFIX:line="205" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="205" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="205" PREFIX:column="17">0x93</cpp:value></cpp:define>
<cpp:define PREFIX:line="206" PREFIX:column="1">#<cpp:directive PREFIX:line="206" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="206" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="206" PREFIX:column="17">0x07</cpp:value></cpp:define>
<cpp:define PREFIX:line="207" PREFIX:column="1">#<cpp:directive PREFIX:line="207" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="207" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="207" PREFIX:column="25">0x20U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="207" PREFIX:column="33">//32 words</comment>

<cpp:elif PREFIX:line="209" PREFIX:column="1">#<cpp:directive PREFIX:line="209" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="209" PREFIX:column="7">defined</name> <name PREFIX:line="209" PREFIX:column="15">__AVR_ATmega88__</name></expr></cpp:elif>
<cpp:define PREFIX:line="210" PREFIX:column="1">#<cpp:directive PREFIX:line="210" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="210" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="210" PREFIX:column="17">0x93</cpp:value></cpp:define>
<cpp:define PREFIX:line="211" PREFIX:column="1">#<cpp:directive PREFIX:line="211" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="211" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="211" PREFIX:column="17">0x0a</cpp:value></cpp:define>
<cpp:define PREFIX:line="212" PREFIX:column="1">#<cpp:directive PREFIX:line="212" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="212" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="212" PREFIX:column="25">0x20U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="212" PREFIX:column="33">//32 words</comment>

<cpp:elif PREFIX:line="214" PREFIX:column="1">#<cpp:directive PREFIX:line="214" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="214" PREFIX:column="7">defined</name> <name PREFIX:line="214" PREFIX:column="15">__AVR_ATmega168__</name></expr></cpp:elif>
<cpp:define PREFIX:line="215" PREFIX:column="1">#<cpp:directive PREFIX:line="215" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="215" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="215" PREFIX:column="17">0x94</cpp:value></cpp:define>
<cpp:define PREFIX:line="216" PREFIX:column="1">#<cpp:directive PREFIX:line="216" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="216" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="216" PREFIX:column="17">0x06</cpp:value></cpp:define>
<cpp:define PREFIX:line="217" PREFIX:column="1">#<cpp:directive PREFIX:line="217" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="217" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="217" PREFIX:column="25">0x40U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="217" PREFIX:column="33">//64 words</comment>

<cpp:elif PREFIX:line="219" PREFIX:column="1">#<cpp:directive PREFIX:line="219" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="219" PREFIX:column="7">defined</name> <name PREFIX:line="219" PREFIX:column="15">__AVR_ATmega328P__</name></expr></cpp:elif>
<cpp:define PREFIX:line="220" PREFIX:column="1">#<cpp:directive PREFIX:line="220" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="220" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="220" PREFIX:column="17">0x95</cpp:value></cpp:define>
<cpp:define PREFIX:line="221" PREFIX:column="1">#<cpp:directive PREFIX:line="221" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="221" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="221" PREFIX:column="17">0x0F</cpp:value></cpp:define>
<cpp:define PREFIX:line="222" PREFIX:column="1">#<cpp:directive PREFIX:line="222" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="222" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="222" PREFIX:column="25">0x40U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="222" PREFIX:column="33">//64 words</comment>

<cpp:elif PREFIX:line="224" PREFIX:column="1">#<cpp:directive PREFIX:line="224" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="224" PREFIX:column="7">defined</name> <name PREFIX:line="224" PREFIX:column="15">__AVR_ATmega162__</name></expr></cpp:elif>
<cpp:define PREFIX:line="225" PREFIX:column="1">#<cpp:directive PREFIX:line="225" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="225" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="225" PREFIX:column="17">0x94</cpp:value></cpp:define>
<cpp:define PREFIX:line="226" PREFIX:column="1">#<cpp:directive PREFIX:line="226" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="226" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="226" PREFIX:column="17">0x04</cpp:value></cpp:define>
<cpp:define PREFIX:line="227" PREFIX:column="1">#<cpp:directive PREFIX:line="227" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="227" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="227" PREFIX:column="25">0x40U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="227" PREFIX:column="33">//64 words</comment>

<cpp:elif PREFIX:line="229" PREFIX:column="1">#<cpp:directive PREFIX:line="229" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="229" PREFIX:column="7">defined</name> <name PREFIX:line="229" PREFIX:column="15">__AVR_ATmega163__</name></expr></cpp:elif>
<cpp:define PREFIX:line="230" PREFIX:column="1">#<cpp:directive PREFIX:line="230" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="230" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="230" PREFIX:column="17">0x94</cpp:value></cpp:define>
<cpp:define PREFIX:line="231" PREFIX:column="1">#<cpp:directive PREFIX:line="231" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="231" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="231" PREFIX:column="17">0x02</cpp:value></cpp:define>
<cpp:define PREFIX:line="232" PREFIX:column="1">#<cpp:directive PREFIX:line="232" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="232" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="232" PREFIX:column="25">0x40U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="232" PREFIX:column="33">//64 words</comment>

<cpp:elif PREFIX:line="234" PREFIX:column="1">#<cpp:directive PREFIX:line="234" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="234" PREFIX:column="7">defined</name> <name PREFIX:line="234" PREFIX:column="15">__AVR_ATmega169__</name></expr></cpp:elif>
<cpp:define PREFIX:line="235" PREFIX:column="1">#<cpp:directive PREFIX:line="235" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="235" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="235" PREFIX:column="17">0x94</cpp:value></cpp:define>
<cpp:define PREFIX:line="236" PREFIX:column="1">#<cpp:directive PREFIX:line="236" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="236" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="236" PREFIX:column="17">0x05</cpp:value></cpp:define>
<cpp:define PREFIX:line="237" PREFIX:column="1">#<cpp:directive PREFIX:line="237" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="237" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="237" PREFIX:column="25">0x40U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="237" PREFIX:column="33">//64 words</comment>

<cpp:elif PREFIX:line="239" PREFIX:column="1">#<cpp:directive PREFIX:line="239" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="239" PREFIX:column="7">defined</name> <name PREFIX:line="239" PREFIX:column="15">__AVR_ATmega8515__</name></expr></cpp:elif>
<cpp:define PREFIX:line="240" PREFIX:column="1">#<cpp:directive PREFIX:line="240" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="240" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="240" PREFIX:column="17">0x93</cpp:value></cpp:define>
<cpp:define PREFIX:line="241" PREFIX:column="1">#<cpp:directive PREFIX:line="241" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="241" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="241" PREFIX:column="17">0x06</cpp:value></cpp:define>
<cpp:define PREFIX:line="242" PREFIX:column="1">#<cpp:directive PREFIX:line="242" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="242" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="242" PREFIX:column="25">0x20U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="242" PREFIX:column="33">//32 words</comment>

<cpp:elif PREFIX:line="244" PREFIX:column="1">#<cpp:directive PREFIX:line="244" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="244" PREFIX:column="7">defined</name> <name PREFIX:line="244" PREFIX:column="15">__AVR_ATmega8535__</name></expr></cpp:elif>
<cpp:define PREFIX:line="245" PREFIX:column="1">#<cpp:directive PREFIX:line="245" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="245" PREFIX:column="9">SIG2</name></cpp:macro>	<cpp:value PREFIX:line="245" PREFIX:column="17">0x93</cpp:value></cpp:define>
<cpp:define PREFIX:line="246" PREFIX:column="1">#<cpp:directive PREFIX:line="246" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="246" PREFIX:column="9">SIG3</name></cpp:macro>	<cpp:value PREFIX:line="246" PREFIX:column="17">0x08</cpp:value></cpp:define>
<cpp:define PREFIX:line="247" PREFIX:column="1">#<cpp:directive PREFIX:line="247" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="247" PREFIX:column="9">PAGE_SIZE</name></cpp:macro>	<cpp:value PREFIX:line="247" PREFIX:column="25">0x20U</cpp:value></cpp:define>	<comment type="line" PREFIX:line="247" PREFIX:column="33">//32 words</comment>
<cpp:endif PREFIX:line="248" PREFIX:column="1">#<cpp:directive PREFIX:line="248" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" PREFIX:line="251" PREFIX:column="1">/* function prototypes */</comment>
<function_decl><type><name PREFIX:line="252" PREFIX:column="1">void</name></type> <name PREFIX:line="252" PREFIX:column="6">putch</name><parameter_list PREFIX:line="252" PREFIX:column="11">(<param><decl><type><name PREFIX:line="252" PREFIX:column="12">char</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="253" PREFIX:column="1">char</name></type> <name PREFIX:line="253" PREFIX:column="6">getch</name><parameter_list PREFIX:line="253" PREFIX:column="11">(<param><decl><type><name PREFIX:line="253" PREFIX:column="12">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="254" PREFIX:column="1">void</name></type> <name PREFIX:line="254" PREFIX:column="6">getNch</name><parameter_list PREFIX:line="254" PREFIX:column="12">(<param><decl><type><name PREFIX:line="254" PREFIX:column="13">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="255" PREFIX:column="1">void</name></type> <name PREFIX:line="255" PREFIX:column="6">byte_response</name><parameter_list PREFIX:line="255" PREFIX:column="19">(<param><decl><type><name PREFIX:line="255" PREFIX:column="20">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="256" PREFIX:column="1">void</name></type> <name PREFIX:line="256" PREFIX:column="6">nothing_response</name><parameter_list PREFIX:line="256" PREFIX:column="22">(<param><decl><type><name PREFIX:line="256" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="257" PREFIX:column="1">char</name></type> <name PREFIX:line="257" PREFIX:column="6">gethex</name><parameter_list PREFIX:line="257" PREFIX:column="12">(<param><decl><type><name PREFIX:line="257" PREFIX:column="13">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="258" PREFIX:column="1">void</name></type> <name PREFIX:line="258" PREFIX:column="6">puthex</name><parameter_list PREFIX:line="258" PREFIX:column="12">(<param><decl><type><name PREFIX:line="258" PREFIX:column="13">char</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name PREFIX:line="259" PREFIX:column="1">void</name></type> <name PREFIX:line="259" PREFIX:column="6">flash_led</name><parameter_list PREFIX:line="259" PREFIX:column="15">(<param><decl><type><name PREFIX:line="259" PREFIX:column="16">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block" PREFIX:line="261" PREFIX:column="1">/* some variables */</comment>
<union PREFIX:line="262" PREFIX:column="1">union <name PREFIX:line="262" PREFIX:column="7">address_union</name> <block PREFIX:line="262" PREFIX:column="21">{
	<decl_stmt><decl><type><name PREFIX:line="263" PREFIX:column="9">uint16_t</name></type> <name PREFIX:line="263" PREFIX:column="18">word</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="264" PREFIX:column="9">uint8_t</name></type>  <name><name PREFIX:line="264" PREFIX:column="18">byte</name><index PREFIX:line="264" PREFIX:column="22">[<expr PREFIX:line="264" PREFIX:column="23">2</expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name PREFIX:line="265" PREFIX:column="3">address</name></decl>;</union>

<union PREFIX:line="267" PREFIX:column="1">union <name PREFIX:line="267" PREFIX:column="7">length_union</name> <block PREFIX:line="267" PREFIX:column="20">{
	<decl_stmt><decl><type><name PREFIX:line="268" PREFIX:column="9">uint16_t</name></type> <name PREFIX:line="268" PREFIX:column="18">word</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="269" PREFIX:column="9">uint8_t</name></type>  <name><name PREFIX:line="269" PREFIX:column="18">byte</name><index PREFIX:line="269" PREFIX:column="22">[<expr PREFIX:line="269" PREFIX:column="23">2</expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name PREFIX:line="270" PREFIX:column="3">length</name></decl>;</union>

<struct PREFIX:line="272" PREFIX:column="1">struct <name PREFIX:line="272" PREFIX:column="8">flags_struct</name> <block PREFIX:line="272" PREFIX:column="21">{
	<expr_stmt><expr><name PREFIX:line="273" PREFIX:column="9">unknowntype</name> <name PREFIX:line="273" PREFIX:column="21">eeprom</name> : 1</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="274" PREFIX:column="9">unknowntype</name> <name PREFIX:line="274" PREFIX:column="21">rampz</name>  : 1</expr>;</expr_stmt>
}</block> <decl><name PREFIX:line="275" PREFIX:column="3">flags</name></decl>;</struct>

<decl_stmt><decl><type><name PREFIX:line="277" PREFIX:column="1">uint8_t</name></type> <name><name PREFIX:line="277" PREFIX:column="9">buff</name><index PREFIX:line="277" PREFIX:column="13">[<expr PREFIX:line="277" PREFIX:column="14">256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="278" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="278" PREFIX:column="9">address_high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name PREFIX:line="280" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="280" PREFIX:column="9">pagesz</name><init PREFIX:line="280" PREFIX:column="15">=<expr PREFIX:line="280" PREFIX:column="16">0x80</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name PREFIX:line="282" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="282" PREFIX:column="9">i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name PREFIX:line="283" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="283" PREFIX:column="9">bootuart</name> <init PREFIX:line="283" PREFIX:column="18">= <expr PREFIX:line="283" PREFIX:column="20">0</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name PREFIX:line="285" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="285" PREFIX:column="9">error_count</name> <init PREFIX:line="285" PREFIX:column="21">= <expr PREFIX:line="285" PREFIX:column="23">0</expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name PREFIX:line="287" PREFIX:column="1">void</name> <argument_list PREFIX:line="287" PREFIX:column="6">(<argument><expr PREFIX:line="287" PREFIX:column="7">*<name PREFIX:line="287" PREFIX:column="8">app_start</name></expr></argument>)</argument_list></call><argument_list PREFIX:line="287" PREFIX:column="18">(<argument><expr><name PREFIX:line="287" PREFIX:column="19">void</name></expr></argument>)</argument_list></call> = 0x0000</expr>;</expr_stmt>


<comment type="block" PREFIX:line="290" PREFIX:column="1">/* main program starts here */</comment>
<function><type><name PREFIX:line="291" PREFIX:column="1">int</name></type> <name PREFIX:line="291" PREFIX:column="5">main</name><parameter_list PREFIX:line="291" PREFIX:column="9">(<param><decl><type><name PREFIX:line="291" PREFIX:column="10">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="292" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="293" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="293" PREFIX:column="17">ch</name></decl>,<decl><type ref="prev"/><name PREFIX:line="293" PREFIX:column="20">ch2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="294" PREFIX:column="9">uint16_t</name></type> <name PREFIX:line="294" PREFIX:column="18">w</name></decl>;</decl_stmt>

<cpp:ifdef PREFIX:line="296" PREFIX:column="1">#<cpp:directive PREFIX:line="296" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="296" PREFIX:column="8">WATCHDOG_MODS</name></cpp:ifdef>
	<expr_stmt><expr><name PREFIX:line="297" PREFIX:column="9">ch</name> = <name PREFIX:line="297" PREFIX:column="14">MCUSR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="298" PREFIX:column="9">MCUSR</name> = 0</expr>;</expr_stmt>

	<expr_stmt><expr><name PREFIX:line="300" PREFIX:column="9">WDTCSR</name> |= <call><name PREFIX:line="300" PREFIX:column="19">_BV</name><argument_list PREFIX:line="300" PREFIX:column="22">(<argument><expr><name PREFIX:line="300" PREFIX:column="23">WDCE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="300" PREFIX:column="31">_BV</name><argument_list PREFIX:line="300" PREFIX:column="34">(<argument><expr><name PREFIX:line="300" PREFIX:column="35">WDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="301" PREFIX:column="9">WDTCSR</name> = 0</expr>;</expr_stmt>

	<comment type="line" PREFIX:line="303" PREFIX:column="9">// Check if the WDT was used to reset, in which case we dont bootload and skip straight to the code. woot.</comment>
	<if PREFIX:line="304" PREFIX:column="9">if <condition PREFIX:line="304" PREFIX:column="12">(<expr PREFIX:line="304" PREFIX:column="13">! (<name PREFIX:line="304" PREFIX:column="16">ch</name> &amp;  <call><name PREFIX:line="304" PREFIX:column="22">_BV</name><argument_list PREFIX:line="304" PREFIX:column="25">(<argument><expr><name PREFIX:line="304" PREFIX:column="26">EXTRF</name></expr></argument>)</argument_list></call>)</expr>)</condition><then PREFIX:line="304" PREFIX:column="34"> <comment type="line" PREFIX:line="304" PREFIX:column="35">// if it's a not an al reset...</comment>
		<expr_stmt><expr><call><name PREFIX:line="305" PREFIX:column="17">app_start</name><argument_list PREFIX:line="305" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt></then></if>  <comment type="line" PREFIX:line="305" PREFIX:column="31">// skip bootloader</comment>
<cpp:else PREFIX:line="306" PREFIX:column="1">#<cpp:directive PREFIX:line="306" PREFIX:column="2">else</cpp:directive></cpp:else>
	<asm PREFIX:line="307" PREFIX:column="9">asm <specifier PREFIX:line="307" PREFIX:column="13">volatile</specifier>("nop\n\t");</asm>
<cpp:endif PREFIX:line="308" PREFIX:column="1">#<cpp:directive PREFIX:line="308" PREFIX:column="2">endif</cpp:directive></cpp:endif>

	<comment type="block" PREFIX:line="310" PREFIX:column="9">/* set pin direction for bootloader pin and enable pullup */</comment>
	<comment type="block" PREFIX:line="311" PREFIX:column="9">/* for ATmega128, two pins need to be initialized */</comment>
<cpp:ifdef PREFIX:line="312" PREFIX:column="1">#<cpp:directive PREFIX:line="312" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="312" PREFIX:column="8">__AVR_ATmega128__</name></cpp:ifdef>
	<expr_stmt><expr><name PREFIX:line="313" PREFIX:column="9">BL_DDR</name> &amp;= ~<call><name PREFIX:line="313" PREFIX:column="20">_BV</name><argument_list PREFIX:line="313" PREFIX:column="23">(<argument><expr><name PREFIX:line="313" PREFIX:column="24">BL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="314" PREFIX:column="9">BL_DDR</name> &amp;= ~<call><name PREFIX:line="314" PREFIX:column="20">_BV</name><argument_list PREFIX:line="314" PREFIX:column="23">(<argument><expr><name PREFIX:line="314" PREFIX:column="24">BL1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="315" PREFIX:column="9">BL_PORT</name> |= <call><name PREFIX:line="315" PREFIX:column="20">_BV</name><argument_list PREFIX:line="315" PREFIX:column="23">(<argument><expr><name PREFIX:line="315" PREFIX:column="24">BL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="316" PREFIX:column="9">BL_PORT</name> |= <call><name PREFIX:line="316" PREFIX:column="20">_BV</name><argument_list PREFIX:line="316" PREFIX:column="23">(<argument><expr><name PREFIX:line="316" PREFIX:column="24">BL1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else PREFIX:line="317" PREFIX:column="1">#<cpp:directive PREFIX:line="317" PREFIX:column="2">else</cpp:directive></cpp:else>
	<comment type="block" PREFIX:line="318" PREFIX:column="9">/* We run the bootloader regardless of the state of this pin.  Thus, don't
	put it in a different state than the other pins.  --DAM, 070709
	This also applies to Arduino Mega -- DC, 080930
	BL_DDR &amp;= ~_BV(BL);
	BL_PORT |= _BV(BL);
	*/</comment>
<cpp:endif PREFIX:line="324" PREFIX:column="1">#<cpp:directive PREFIX:line="324" PREFIX:column="2">endif</cpp:directive></cpp:endif>


<cpp:ifdef PREFIX:line="327" PREFIX:column="1">#<cpp:directive PREFIX:line="327" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="327" PREFIX:column="8">__AVR_ATmega128__</name></cpp:ifdef>
	<comment type="block" PREFIX:line="328" PREFIX:column="9">/* check which UART should be used for booting */</comment>
	<if PREFIX:line="329" PREFIX:column="9">if<condition PREFIX:line="329" PREFIX:column="11">(<expr><call><name PREFIX:line="329" PREFIX:column="12">bit_is_clear</name><argument_list PREFIX:line="329" PREFIX:column="24">(<argument><expr><name PREFIX:line="329" PREFIX:column="25">BL_PIN</name></expr></argument>, <argument><expr><name PREFIX:line="329" PREFIX:column="33">BL0</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="329" PREFIX:column="38"> <block PREFIX:line="329" PREFIX:column="39">{
		<expr_stmt><expr><name PREFIX:line="330" PREFIX:column="17">bootuart</name> = 1</expr>;</expr_stmt>
	}</block></then>
	<else PREFIX:line="332" PREFIX:column="9">else <if PREFIX:line="332" PREFIX:column="14">if<condition PREFIX:line="332" PREFIX:column="16">(<expr><call><name PREFIX:line="332" PREFIX:column="17">bit_is_clear</name><argument_list PREFIX:line="332" PREFIX:column="29">(<argument><expr><name PREFIX:line="332" PREFIX:column="30">BL_PIN</name></expr></argument>, <argument><expr><name PREFIX:line="332" PREFIX:column="38">BL1</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="332" PREFIX:column="43"> <block PREFIX:line="332" PREFIX:column="44">{
		<expr_stmt><expr><name PREFIX:line="333" PREFIX:column="17">bootuart</name> = 2</expr>;</expr_stmt>
	}</block></then></if></else></if>
<cpp:endif PREFIX:line="335" PREFIX:column="1">#<cpp:directive PREFIX:line="335" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="337" PREFIX:column="1">#<cpp:directive PREFIX:line="337" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="337" PREFIX:column="5">defined</name> <name PREFIX:line="337" PREFIX:column="13">__AVR_ATmega1280__</name>  || <name PREFIX:line="337" PREFIX:column="36">defined</name> <name PREFIX:line="337" PREFIX:column="44">__AVR_ATmega1284P__</name> || <name PREFIX:line="337" PREFIX:column="67">defined</name> <name PREFIX:line="337" PREFIX:column="75">__AVR_ATmega644P__</name></expr></cpp:if>
	<comment type="block" PREFIX:line="338" PREFIX:column="9">/* the mega1280 chip has four serial ports ... we could eventually use any of them, or not? */</comment>
	<comment type="block" PREFIX:line="339" PREFIX:column="9">/* however, we don't wanna confuse people, to avoid making a mess, we will stick to RXD0, TXD0 */</comment>
	<expr_stmt><expr><name PREFIX:line="340" PREFIX:column="9">bootuart</name> = 1</expr>;</expr_stmt>
<cpp:endif PREFIX:line="341" PREFIX:column="1">#<cpp:directive PREFIX:line="341" PREFIX:column="2">endif</cpp:directive></cpp:endif>

	<comment type="block" PREFIX:line="343" PREFIX:column="9">/* check if flash is programmed already, if not start bootloader anyway */</comment>
	<if PREFIX:line="344" PREFIX:column="9">if<condition PREFIX:line="344" PREFIX:column="11">(<expr><call><name PREFIX:line="344" PREFIX:column="12">pgm_read_byte_near</name><argument_list PREFIX:line="344" PREFIX:column="30">(<argument><expr PREFIX:line="344" PREFIX:column="31">0x0000</expr></argument>)</argument_list></call> != 0xFF</expr>)</condition><then PREFIX:line="344" PREFIX:column="47"> <block PREFIX:line="344" PREFIX:column="48">{

<cpp:ifdef PREFIX:line="346" PREFIX:column="1">#<cpp:directive PREFIX:line="346" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="346" PREFIX:column="8">__AVR_ATmega128__</name></cpp:ifdef>
	<comment type="block" PREFIX:line="347" PREFIX:column="9">/* no UART was selected, start application */</comment>
	<if PREFIX:line="348" PREFIX:column="9">if<condition PREFIX:line="348" PREFIX:column="11">(<expr PREFIX:line="348" PREFIX:column="12">!<name PREFIX:line="348" PREFIX:column="13">bootuart</name></expr>)</condition><then PREFIX:line="348" PREFIX:column="22"> <block PREFIX:line="348" PREFIX:column="23">{
		<expr_stmt><expr><call><name PREFIX:line="349" PREFIX:column="17">app_start</name><argument_list PREFIX:line="349" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:else PREFIX:line="351" PREFIX:column="1">#<cpp:directive PREFIX:line="351" PREFIX:column="2">else</cpp:directive></cpp:else>
	<comment type="block" PREFIX:line="352" PREFIX:column="9">/* check if bootloader pin is set low */</comment>
	<comment type="block" PREFIX:line="353" PREFIX:column="9">/* we don't start this part neither for the m8, nor m168 */</comment>
	<comment type="line" PREFIX:line="354" PREFIX:column="9">//if(bit_is_set(BL_PIN, BL)) {</comment>
	<comment type="line" PREFIX:line="355" PREFIX:column="9">//      app_start();</comment>
	<comment type="line" PREFIX:line="356" PREFIX:column="9">//    }</comment>
<cpp:endif PREFIX:line="357" PREFIX:column="1">#<cpp:directive PREFIX:line="357" PREFIX:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

<cpp:ifdef PREFIX:line="360" PREFIX:column="1">#<cpp:directive PREFIX:line="360" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="360" PREFIX:column="8">__AVR_ATmega128__</name></cpp:ifdef>    
	<comment type="block" PREFIX:line="361" PREFIX:column="9">/* no bootuart was selected, default to uart 0 */</comment>
	<if PREFIX:line="362" PREFIX:column="9">if<condition PREFIX:line="362" PREFIX:column="11">(<expr PREFIX:line="362" PREFIX:column="12">!<name PREFIX:line="362" PREFIX:column="13">bootuart</name></expr>)</condition><then PREFIX:line="362" PREFIX:column="22"> <block PREFIX:line="362" PREFIX:column="23">{
		<expr_stmt><expr><name PREFIX:line="363" PREFIX:column="17">bootuart</name> = 1</expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif PREFIX:line="365" PREFIX:column="1">#<cpp:directive PREFIX:line="365" PREFIX:column="2">endif</cpp:directive></cpp:endif>


	<comment type="block" PREFIX:line="368" PREFIX:column="9">/* initialize UART(s) depending on CPU defined */</comment>
<cpp:if PREFIX:line="369" PREFIX:column="1">#<cpp:directive PREFIX:line="369" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="369" PREFIX:column="5">defined</name><argument_list PREFIX:line="369" PREFIX:column="12">(<argument><expr><name PREFIX:line="369" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="369" PREFIX:column="35">defined</name><argument_list PREFIX:line="369" PREFIX:column="42">(<argument><expr><name PREFIX:line="369" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call>  || <call><name PREFIX:line="369" PREFIX:column="67">defined</name><argument_list PREFIX:line="369" PREFIX:column="74">(<argument><expr><name PREFIX:line="369" PREFIX:column="75">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="369" PREFIX:column="99">defined</name><argument_list PREFIX:line="369" PREFIX:column="106">(<argument><expr><name PREFIX:line="369" PREFIX:column="107">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if PREFIX:line="370" PREFIX:column="9">if<condition PREFIX:line="370" PREFIX:column="11">(<expr><name PREFIX:line="370" PREFIX:column="12">bootuart</name> == 1</expr>)</condition><then PREFIX:line="370" PREFIX:column="26"> <block PREFIX:line="370" PREFIX:column="27">{
		<expr_stmt><expr><name PREFIX:line="371" PREFIX:column="17">UBRR0L</name> = <call PREFIX:line="371" PREFIX:column="26">(<name PREFIX:line="371" PREFIX:column="27">uint8_t</name>)<argument_list PREFIX:line="371" PREFIX:column="35">(<argument><expr><name PREFIX:line="371" PREFIX:column="36">F_CPU</name>/(<name PREFIX:line="371" PREFIX:column="43">BAUD_RATE</name>*16L)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="372" PREFIX:column="17">UBRR0H</name> = (<name PREFIX:line="372" PREFIX:column="27">F_CPU</name>/(<name PREFIX:line="372" PREFIX:column="34">BAUD_RATE</name>*16L)-1) &gt;&gt; 8</expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="373" PREFIX:column="17">UCSR0A</name> = 0x00</expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="374" PREFIX:column="17">UCSR0C</name> = 0x06</expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="375" PREFIX:column="17">UCSR0B</name> = <call><name PREFIX:line="375" PREFIX:column="26">_BV</name><argument_list PREFIX:line="375" PREFIX:column="29">(<argument><expr><name PREFIX:line="375" PREFIX:column="30">TXEN0</name></expr></argument>)</argument_list></call>|<call><name PREFIX:line="375" PREFIX:column="37">_BV</name><argument_list PREFIX:line="375" PREFIX:column="40">(<argument><expr><name PREFIX:line="375" PREFIX:column="41">RXEN0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if PREFIX:line="377" PREFIX:column="9">if<condition PREFIX:line="377" PREFIX:column="11">(<expr><name PREFIX:line="377" PREFIX:column="12">bootuart</name> == 2</expr>)</condition><then PREFIX:line="377" PREFIX:column="26"> <block PREFIX:line="377" PREFIX:column="27">{
		<expr_stmt><expr><name PREFIX:line="378" PREFIX:column="17">UBRR1L</name> = <call PREFIX:line="378" PREFIX:column="26">(<name PREFIX:line="378" PREFIX:column="27">uint8_t</name>)<argument_list PREFIX:line="378" PREFIX:column="35">(<argument><expr><name PREFIX:line="378" PREFIX:column="36">F_CPU</name>/(<name PREFIX:line="378" PREFIX:column="43">BAUD_RATE</name>*16L)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="379" PREFIX:column="17">UBRR1H</name> = (<name PREFIX:line="379" PREFIX:column="27">F_CPU</name>/(<name PREFIX:line="379" PREFIX:column="34">BAUD_RATE</name>*16L)-1) &gt;&gt; 8</expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="380" PREFIX:column="17">UCSR1A</name> = 0x00</expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="381" PREFIX:column="17">UCSR1C</name> = 0x06</expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="382" PREFIX:column="17">UCSR1B</name> = <call><name PREFIX:line="382" PREFIX:column="26">_BV</name><argument_list PREFIX:line="382" PREFIX:column="29">(<argument><expr><name PREFIX:line="382" PREFIX:column="30">TXEN1</name></expr></argument>)</argument_list></call>|<call><name PREFIX:line="382" PREFIX:column="37">_BV</name><argument_list PREFIX:line="382" PREFIX:column="40">(<argument><expr><name PREFIX:line="382" PREFIX:column="41">RXEN1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:elif PREFIX:line="384" PREFIX:column="1">#<cpp:directive PREFIX:line="384" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="384" PREFIX:column="7">defined</name> <name PREFIX:line="384" PREFIX:column="15">__AVR_ATmega163__</name></expr></cpp:elif>
	<expr_stmt><expr><name PREFIX:line="385" PREFIX:column="9">UBRR</name> = <call PREFIX:line="385" PREFIX:column="16">(<name PREFIX:line="385" PREFIX:column="17">uint8_t</name>)<argument_list PREFIX:line="385" PREFIX:column="25">(<argument><expr><name PREFIX:line="385" PREFIX:column="26">F_CPU</name>/(<name PREFIX:line="385" PREFIX:column="33">BAUD_RATE</name>*16L)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="386" PREFIX:column="9">UBRRHI</name> = (<name PREFIX:line="386" PREFIX:column="19">F_CPU</name>/(<name PREFIX:line="386" PREFIX:column="26">BAUD_RATE</name>*16L)-1) &gt;&gt; 8</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="387" PREFIX:column="9">UCSRA</name> = 0x00</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="388" PREFIX:column="9">UCSRB</name> = <call><name PREFIX:line="388" PREFIX:column="17">_BV</name><argument_list PREFIX:line="388" PREFIX:column="20">(<argument><expr><name PREFIX:line="388" PREFIX:column="21">TXEN</name></expr></argument>)</argument_list></call>|<call><name PREFIX:line="388" PREFIX:column="27">_BV</name><argument_list PREFIX:line="388" PREFIX:column="30">(<argument><expr><name PREFIX:line="388" PREFIX:column="31">RXEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
<cpp:elif PREFIX:line="389" PREFIX:column="1">#<cpp:directive PREFIX:line="389" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="389" PREFIX:column="7">defined</name><argument_list PREFIX:line="389" PREFIX:column="14">(<argument><expr><name PREFIX:line="389" PREFIX:column="15">__AVR_ATmega168__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="389" PREFIX:column="37">defined</name><argument_list PREFIX:line="389" PREFIX:column="44">(<argument><expr><name PREFIX:line="389" PREFIX:column="45">__AVR_ATmega328P__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:ifdef PREFIX:line="391" PREFIX:column="1">#<cpp:directive PREFIX:line="391" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="391" PREFIX:column="8">DOUBLE_SPEED</name></cpp:ifdef>
	<expr_stmt><expr><name PREFIX:line="392" PREFIX:column="9">UCSR0A</name> = (1&lt;&lt;<name PREFIX:line="392" PREFIX:column="22">U2X0</name>)</expr>;</expr_stmt> <comment type="line" PREFIX:line="392" PREFIX:column="29">//Double speed mode USART0</comment>
	<expr_stmt><expr><name PREFIX:line="393" PREFIX:column="9">UBRR0L</name> = <call PREFIX:line="393" PREFIX:column="18">(<name PREFIX:line="393" PREFIX:column="19">uint8_t</name>)<argument_list PREFIX:line="393" PREFIX:column="27">(<argument><expr><name PREFIX:line="393" PREFIX:column="28">F_CPU</name>/(<name PREFIX:line="393" PREFIX:column="35">BAUD_RATE</name>*8L)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="394" PREFIX:column="9">UBRR0H</name> = (<name PREFIX:line="394" PREFIX:column="19">F_CPU</name>/(<name PREFIX:line="394" PREFIX:column="26">BAUD_RATE</name>*8L)-1) &gt;&gt; 8</expr>;</expr_stmt>
<cpp:else PREFIX:line="395" PREFIX:column="1">#<cpp:directive PREFIX:line="395" PREFIX:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name PREFIX:line="396" PREFIX:column="9">UBRR0L</name> = <call PREFIX:line="396" PREFIX:column="18">(<name PREFIX:line="396" PREFIX:column="19">uint8_t</name>)<argument_list PREFIX:line="396" PREFIX:column="27">(<argument><expr><name PREFIX:line="396" PREFIX:column="28">F_CPU</name>/(<name PREFIX:line="396" PREFIX:column="35">BAUD_RATE</name>*16L)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="397" PREFIX:column="9">UBRR0H</name> = (<name PREFIX:line="397" PREFIX:column="19">F_CPU</name>/(<name PREFIX:line="397" PREFIX:column="26">BAUD_RATE</name>*16L)-1) &gt;&gt; 8</expr>;</expr_stmt>
<cpp:endif PREFIX:line="398" PREFIX:column="1">#<cpp:directive PREFIX:line="398" PREFIX:column="2">endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name PREFIX:line="400" PREFIX:column="9">UCSR0B</name> = (1&lt;&lt;<name PREFIX:line="400" PREFIX:column="22">RXEN0</name>) | (1&lt;&lt;<name PREFIX:line="400" PREFIX:column="35">TXEN0</name>)</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="401" PREFIX:column="9">UCSR0C</name> = (1&lt;&lt;<name PREFIX:line="401" PREFIX:column="22">UCSZ00</name>) | (1&lt;&lt;<name PREFIX:line="401" PREFIX:column="36">UCSZ01</name>)</expr>;</expr_stmt>

	<comment type="block" PREFIX:line="403" PREFIX:column="9">/* Enable internal pull-up resistor on pin D0 (RX), in order
	to supress line noise that prevents the bootloader from
	timing out (DAM: 20070509) */</comment>
	<expr_stmt><expr><name PREFIX:line="406" PREFIX:column="9">DDRD</name> &amp;= ~<call><name PREFIX:line="406" PREFIX:column="18">_BV</name><argument_list PREFIX:line="406" PREFIX:column="21">(<argument><expr><name PREFIX:line="406" PREFIX:column="22">PIND0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="407" PREFIX:column="9">PORTD</name> |= <call><name PREFIX:line="407" PREFIX:column="18">_BV</name><argument_list PREFIX:line="407" PREFIX:column="21">(<argument><expr><name PREFIX:line="407" PREFIX:column="22">PIND0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif PREFIX:line="408" PREFIX:column="1">#<cpp:directive PREFIX:line="408" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="408" PREFIX:column="7">defined</name> <name PREFIX:line="408" PREFIX:column="15">__AVR_ATmega8__</name></expr></cpp:elif>
	<comment type="block" PREFIX:line="409" PREFIX:column="9">/* m8 */</comment>
	<expr_stmt><expr><name PREFIX:line="410" PREFIX:column="9">UBRRH</name> = (((<name PREFIX:line="410" PREFIX:column="20">F_CPU</name>/<name PREFIX:line="410" PREFIX:column="26">BAUD_RATE</name>)/16)-1)&gt;&gt;8</expr>;</expr_stmt> 	<comment type="line" PREFIX:line="410" PREFIX:column="49">// set baud rate</comment>
	<expr_stmt><expr><name PREFIX:line="411" PREFIX:column="9">UBRRL</name> = (((<name PREFIX:line="411" PREFIX:column="20">F_CPU</name>/<name PREFIX:line="411" PREFIX:column="26">BAUD_RATE</name>)/16)-1)</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="412" PREFIX:column="9">UCSRB</name> = (1&lt;&lt;<name PREFIX:line="412" PREFIX:column="21">RXEN</name>)|(1&lt;&lt;<name PREFIX:line="412" PREFIX:column="31">TXEN</name>)</expr>;</expr_stmt>  <comment type="line" PREFIX:line="412" PREFIX:column="39">// enable Rx &amp; Tx</comment>
	<expr_stmt><expr><name PREFIX:line="413" PREFIX:column="9">UCSRC</name> = (1&lt;&lt;<name PREFIX:line="413" PREFIX:column="21">URSEL</name>)|(1&lt;&lt;<name PREFIX:line="413" PREFIX:column="32">UCSZ1</name>)|(1&lt;&lt;<name PREFIX:line="413" PREFIX:column="43">UCSZ0</name>)</expr>;</expr_stmt>  <comment type="line" PREFIX:line="413" PREFIX:column="52">// config USART; 8N1</comment>
<cpp:else PREFIX:line="414" PREFIX:column="1">#<cpp:directive PREFIX:line="414" PREFIX:column="2">else</cpp:directive></cpp:else>
	<comment type="block" PREFIX:line="415" PREFIX:column="9">/* m16,m32,m169,m8515,m8535 */</comment>
	<expr_stmt><expr><name PREFIX:line="416" PREFIX:column="9">UBRRL</name> = <call PREFIX:line="416" PREFIX:column="17">(<name PREFIX:line="416" PREFIX:column="18">uint8_t</name>)<argument_list PREFIX:line="416" PREFIX:column="26">(<argument><expr><name PREFIX:line="416" PREFIX:column="27">F_CPU</name>/(<name PREFIX:line="416" PREFIX:column="34">BAUD_RATE</name>*16L)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="417" PREFIX:column="9">UBRRH</name> = (<name PREFIX:line="417" PREFIX:column="18">F_CPU</name>/(<name PREFIX:line="417" PREFIX:column="25">BAUD_RATE</name>*16L)-1) &gt;&gt; 8</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="418" PREFIX:column="9">UCSRA</name> = 0x00</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="419" PREFIX:column="9">UCSRC</name> = 0x06</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="420" PREFIX:column="9">UCSRB</name> = <call><name PREFIX:line="420" PREFIX:column="17">_BV</name><argument_list PREFIX:line="420" PREFIX:column="20">(<argument><expr><name PREFIX:line="420" PREFIX:column="21">TXEN</name></expr></argument>)</argument_list></call>|<call><name PREFIX:line="420" PREFIX:column="27">_BV</name><argument_list PREFIX:line="420" PREFIX:column="30">(<argument><expr><name PREFIX:line="420" PREFIX:column="31">RXEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="421" PREFIX:column="1">#<cpp:directive PREFIX:line="421" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="423" PREFIX:column="1">#<cpp:directive PREFIX:line="423" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="423" PREFIX:column="5">defined</name> <name PREFIX:line="423" PREFIX:column="13">__AVR_ATmega1280__</name></expr></cpp:if>
	<comment type="block" PREFIX:line="424" PREFIX:column="9">/* Enable internal pull-up resistor on pin D0 (RX), in order
	to supress line noise that prevents the bootloader from
	timing out (DAM: 20070509) */</comment>
	<comment type="block" PREFIX:line="427" PREFIX:column="9">/* feature added to the Arduino Mega --DC: 080930 */</comment>
	<expr_stmt><expr><name PREFIX:line="428" PREFIX:column="9">DDRE</name> &amp;= ~<call><name PREFIX:line="428" PREFIX:column="18">_BV</name><argument_list PREFIX:line="428" PREFIX:column="21">(<argument><expr><name PREFIX:line="428" PREFIX:column="22">PINE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="429" PREFIX:column="9">PORTE</name> |= <call><name PREFIX:line="429" PREFIX:column="18">_BV</name><argument_list PREFIX:line="429" PREFIX:column="21">(<argument><expr><name PREFIX:line="429" PREFIX:column="22">PINE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="430" PREFIX:column="1">#<cpp:directive PREFIX:line="430" PREFIX:column="2">endif</cpp:directive></cpp:endif>


	<comment type="block" PREFIX:line="433" PREFIX:column="9">/* set LED pin as output */</comment>
	<expr_stmt><expr><name PREFIX:line="434" PREFIX:column="9">LED_DDR</name> |= <call><name PREFIX:line="434" PREFIX:column="20">_BV</name><argument_list PREFIX:line="434" PREFIX:column="23">(<argument><expr><name PREFIX:line="434" PREFIX:column="24">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block" PREFIX:line="437" PREFIX:column="9">/* flash onboard LED to signal entering of bootloader */</comment>
<cpp:if PREFIX:line="438" PREFIX:column="1">#<cpp:directive PREFIX:line="438" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="438" PREFIX:column="5">defined</name><argument_list PREFIX:line="438" PREFIX:column="12">(<argument><expr><name PREFIX:line="438" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="438" PREFIX:column="35">defined</name><argument_list PREFIX:line="438" PREFIX:column="42">(<argument><expr><name PREFIX:line="438" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="438" PREFIX:column="66">defined</name><argument_list PREFIX:line="438" PREFIX:column="73">(<argument><expr><name PREFIX:line="438" PREFIX:column="74">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="438" PREFIX:column="98">defined</name><argument_list PREFIX:line="438" PREFIX:column="105">(<argument><expr><name PREFIX:line="438" PREFIX:column="106">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="line" PREFIX:line="439" PREFIX:column="9">// 4x for UART0, 5x for UART1</comment>
	<expr_stmt><expr><call><name PREFIX:line="440" PREFIX:column="9">flash_led</name><argument_list PREFIX:line="440" PREFIX:column="18">(<argument><expr><name PREFIX:line="440" PREFIX:column="19">NUM_LED_FLASHES</name> + <name PREFIX:line="440" PREFIX:column="37">bootuart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else PREFIX:line="441" PREFIX:column="1">#<cpp:directive PREFIX:line="441" PREFIX:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name PREFIX:line="442" PREFIX:column="9">flash_led</name><argument_list PREFIX:line="442" PREFIX:column="18">(<argument><expr><name PREFIX:line="442" PREFIX:column="19">NUM_LED_FLASHES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="443" PREFIX:column="1">#<cpp:directive PREFIX:line="443" PREFIX:column="2">endif</cpp:directive></cpp:endif>

	<comment type="block" PREFIX:line="445" PREFIX:column="9">/* 20050803: by DojoCorp, this is one of the parts provoking the
		 system to stop listening, cancelled from the original */</comment>
	<comment type="line" PREFIX:line="447" PREFIX:column="9">//putch('\0');</comment>

	<comment type="block" PREFIX:line="449" PREFIX:column="9">/* forever loop */</comment>
	<for PREFIX:line="450" PREFIX:column="9">for (<init PREFIX:line="450" PREFIX:column="14">;</init><condition PREFIX:line="450" PREFIX:column="15">;</condition><incr/>) <block PREFIX:line="450" PREFIX:column="18">{

	<comment type="block" PREFIX:line="452" PREFIX:column="9">/* get character from UART */</comment>
	<expr_stmt><expr><name PREFIX:line="453" PREFIX:column="9">ch</name> = <call><name PREFIX:line="453" PREFIX:column="14">getch</name><argument_list PREFIX:line="453" PREFIX:column="19">()</argument_list></call></expr>;</expr_stmt>

	<comment type="block" PREFIX:line="455" PREFIX:column="9">/* A bunch of if...else if... gives smaller code than switch...case ! */</comment>

	<comment type="block" PREFIX:line="457" PREFIX:column="9">/* Hello is anyone home ? */</comment> 
	<if PREFIX:line="458" PREFIX:column="9">if<condition PREFIX:line="458" PREFIX:column="11">(<expr><name PREFIX:line="458" PREFIX:column="12">ch</name>=='0'</expr>)</condition><then PREFIX:line="458" PREFIX:column="20"> <block PREFIX:line="458" PREFIX:column="21">{
		<expr_stmt><expr><call><name PREFIX:line="459" PREFIX:column="17">nothing_response</name><argument_list PREFIX:line="459" PREFIX:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></then>


	<comment type="block" PREFIX:line="463" PREFIX:column="9">/* Request programmer ID */</comment>
	<comment type="block" PREFIX:line="464" PREFIX:column="9">/* Not using PROGMEM string due to boot block in m128 being beyond 64kB boundry  */</comment>
	<comment type="block" PREFIX:line="465" PREFIX:column="9">/* Would need to selectively manipulate RAMPZ, and it's only 9 characters anyway so who cares.  */</comment>
	<else PREFIX:line="466" PREFIX:column="9">else <if PREFIX:line="466" PREFIX:column="14">if<condition PREFIX:line="466" PREFIX:column="16">(<expr><name PREFIX:line="466" PREFIX:column="17">ch</name>=='1'</expr>)</condition><then PREFIX:line="466" PREFIX:column="25"> <block PREFIX:line="466" PREFIX:column="26">{
		<if PREFIX:line="467" PREFIX:column="17">if <condition PREFIX:line="467" PREFIX:column="20">(<expr><call><name PREFIX:line="467" PREFIX:column="21">getch</name><argument_list PREFIX:line="467" PREFIX:column="26">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="467" PREFIX:column="36"> <block PREFIX:line="467" PREFIX:column="37">{
			<expr_stmt><expr><call><name PREFIX:line="468" PREFIX:column="25">putch</name><argument_list PREFIX:line="468" PREFIX:column="30">(<argument><expr PREFIX:line="468" PREFIX:column="31">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="469" PREFIX:column="25">putch</name><argument_list PREFIX:line="469" PREFIX:column="30">(<argument><expr PREFIX:line="469" PREFIX:column="31">'A'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="470" PREFIX:column="25">putch</name><argument_list PREFIX:line="470" PREFIX:column="30">(<argument><expr PREFIX:line="470" PREFIX:column="31">'V'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="471" PREFIX:column="25">putch</name><argument_list PREFIX:line="471" PREFIX:column="30">(<argument><expr PREFIX:line="471" PREFIX:column="31">'R'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="472" PREFIX:column="25">putch</name><argument_list PREFIX:line="472" PREFIX:column="30">(<argument><expr PREFIX:line="472" PREFIX:column="31">' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="473" PREFIX:column="25">putch</name><argument_list PREFIX:line="473" PREFIX:column="30">(<argument><expr PREFIX:line="473" PREFIX:column="31">'I'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="474" PREFIX:column="25">putch</name><argument_list PREFIX:line="474" PREFIX:column="30">(<argument><expr PREFIX:line="474" PREFIX:column="31">'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="475" PREFIX:column="25">putch</name><argument_list PREFIX:line="475" PREFIX:column="30">(<argument><expr PREFIX:line="475" PREFIX:column="31">'P'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="476" PREFIX:column="25">putch</name><argument_list PREFIX:line="476" PREFIX:column="30">(<argument><expr PREFIX:line="476" PREFIX:column="31">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else PREFIX:line="477" PREFIX:column="19">else <block PREFIX:line="477" PREFIX:column="24">{
			<if PREFIX:line="478" PREFIX:column="25">if <condition PREFIX:line="478" PREFIX:column="28">(<expr PREFIX:line="478" PREFIX:column="29">++<name PREFIX:line="478" PREFIX:column="31">error_count</name> == <name PREFIX:line="478" PREFIX:column="46">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="478" PREFIX:column="62">
				<expr_stmt><expr><call><name PREFIX:line="479" PREFIX:column="33">app_start</name><argument_list PREFIX:line="479" PREFIX:column="42">()</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></else></if>
	}</block></then>


	<comment type="block" PREFIX:line="484" PREFIX:column="9">/* AVR ISP/STK500 board commands  DON'T CARE so default nothing_response */</comment>
	<else PREFIX:line="485" PREFIX:column="9">else <if PREFIX:line="485" PREFIX:column="14">if<condition PREFIX:line="485" PREFIX:column="16">(<expr><name PREFIX:line="485" PREFIX:column="17">ch</name>=='@'</expr>)</condition><then PREFIX:line="485" PREFIX:column="25"> <block PREFIX:line="485" PREFIX:column="26">{
		<expr_stmt><expr><name PREFIX:line="486" PREFIX:column="17">ch2</name> = <call><name PREFIX:line="486" PREFIX:column="23">getch</name><argument_list PREFIX:line="486" PREFIX:column="28">()</argument_list></call></expr>;</expr_stmt>
		<if PREFIX:line="487" PREFIX:column="17">if <condition PREFIX:line="487" PREFIX:column="20">(<expr><name PREFIX:line="487" PREFIX:column="21">ch2</name>&gt;0x85</expr>)</condition><then PREFIX:line="487" PREFIX:column="30"> <expr_stmt><expr><call><name PREFIX:line="487" PREFIX:column="31">getch</name><argument_list PREFIX:line="487" PREFIX:column="36">()</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name PREFIX:line="488" PREFIX:column="17">nothing_response</name><argument_list PREFIX:line="488" PREFIX:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></then>


	<comment type="block" PREFIX:line="492" PREFIX:column="9">/* AVR ISP/STK500 board requests */</comment>
	<else PREFIX:line="493" PREFIX:column="9">else <if PREFIX:line="493" PREFIX:column="14">if<condition PREFIX:line="493" PREFIX:column="16">(<expr><name PREFIX:line="493" PREFIX:column="17">ch</name>=='A'</expr>)</condition><then PREFIX:line="493" PREFIX:column="25"> <block PREFIX:line="493" PREFIX:column="26">{
		<expr_stmt><expr><name PREFIX:line="494" PREFIX:column="17">ch2</name> = <call><name PREFIX:line="494" PREFIX:column="23">getch</name><argument_list PREFIX:line="494" PREFIX:column="28">()</argument_list></call></expr>;</expr_stmt>
		<if PREFIX:line="495" PREFIX:column="17">if<condition PREFIX:line="495" PREFIX:column="19">(<expr><name PREFIX:line="495" PREFIX:column="20">ch2</name>==0x80</expr>)</condition><then PREFIX:line="495" PREFIX:column="30"> <expr_stmt><expr><call><name PREFIX:line="495" PREFIX:column="31">byte_response</name><argument_list PREFIX:line="495" PREFIX:column="44">(<argument><expr><name PREFIX:line="495" PREFIX:column="45">HW_VER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>		<comment type="line" PREFIX:line="495" PREFIX:column="65">// Hardware version</comment>
		<else PREFIX:line="496" PREFIX:column="17">else <if PREFIX:line="496" PREFIX:column="22">if<condition PREFIX:line="496" PREFIX:column="24">(<expr><name PREFIX:line="496" PREFIX:column="25">ch2</name>==0x81</expr>)</condition><then PREFIX:line="496" PREFIX:column="35"> <expr_stmt><expr><call><name PREFIX:line="496" PREFIX:column="36">byte_response</name><argument_list PREFIX:line="496" PREFIX:column="49">(<argument><expr><name PREFIX:line="496" PREFIX:column="50">SW_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>	<comment type="line" PREFIX:line="496" PREFIX:column="65">// Software major version</comment>
		<else PREFIX:line="497" PREFIX:column="17">else <if PREFIX:line="497" PREFIX:column="22">if<condition PREFIX:line="497" PREFIX:column="24">(<expr><name PREFIX:line="497" PREFIX:column="25">ch2</name>==0x82</expr>)</condition><then PREFIX:line="497" PREFIX:column="35"> <expr_stmt><expr><call><name PREFIX:line="497" PREFIX:column="36">byte_response</name><argument_list PREFIX:line="497" PREFIX:column="49">(<argument><expr><name PREFIX:line="497" PREFIX:column="50">SW_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>	<comment type="line" PREFIX:line="497" PREFIX:column="65">// Software minor version</comment>
		<else PREFIX:line="498" PREFIX:column="17">else <if PREFIX:line="498" PREFIX:column="22">if<condition PREFIX:line="498" PREFIX:column="24">(<expr><name PREFIX:line="498" PREFIX:column="25">ch2</name>==0x98</expr>)</condition><then PREFIX:line="498" PREFIX:column="35"> <expr_stmt><expr><call><name PREFIX:line="498" PREFIX:column="36">byte_response</name><argument_list PREFIX:line="498" PREFIX:column="49">(<argument><expr PREFIX:line="498" PREFIX:column="50">0x03</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>		<comment type="line" PREFIX:line="498" PREFIX:column="65">// Unknown but seems to be required by avr studio 3.56</comment>
		<else PREFIX:line="499" PREFIX:column="17">else <expr_stmt><expr><call><name PREFIX:line="499" PREFIX:column="22">byte_response</name><argument_list PREFIX:line="499" PREFIX:column="35">(<argument><expr PREFIX:line="499" PREFIX:column="36">0x00</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if>				<comment type="line" PREFIX:line="499" PREFIX:column="73">// Covers various unnecessary responses we don't care about</comment>
	}</block></then>


	<comment type="block" PREFIX:line="503" PREFIX:column="9">/* Device Parameters  DON'T CARE, DEVICE IS FIXED  */</comment>
	<else PREFIX:line="504" PREFIX:column="9">else <if PREFIX:line="504" PREFIX:column="14">if<condition PREFIX:line="504" PREFIX:column="16">(<expr><name PREFIX:line="504" PREFIX:column="17">ch</name>=='B'</expr>)</condition><then PREFIX:line="504" PREFIX:column="25"> <block PREFIX:line="504" PREFIX:column="26">{
		<expr_stmt><expr><call><name PREFIX:line="505" PREFIX:column="17">getNch</name><argument_list PREFIX:line="505" PREFIX:column="23">(<argument><expr PREFIX:line="505" PREFIX:column="24">20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="506" PREFIX:column="17">nothing_response</name><argument_list PREFIX:line="506" PREFIX:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></then>


	<comment type="block" PREFIX:line="510" PREFIX:column="9">/* Parallel programming stuff  DON'T CARE  */</comment>
	<else PREFIX:line="511" PREFIX:column="9">else <if PREFIX:line="511" PREFIX:column="14">if<condition PREFIX:line="511" PREFIX:column="16">(<expr><name PREFIX:line="511" PREFIX:column="17">ch</name>=='E'</expr>)</condition><then PREFIX:line="511" PREFIX:column="25"> <block PREFIX:line="511" PREFIX:column="26">{
		<expr_stmt><expr><call><name PREFIX:line="512" PREFIX:column="17">getNch</name><argument_list PREFIX:line="512" PREFIX:column="23">(<argument><expr PREFIX:line="512" PREFIX:column="24">5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="513" PREFIX:column="17">nothing_response</name><argument_list PREFIX:line="513" PREFIX:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></then>


	<comment type="block" PREFIX:line="517" PREFIX:column="9">/* P: Enter programming mode  */</comment>
	<comment type="block" PREFIX:line="518" PREFIX:column="9">/* R: Erase device, don't care as we will erase one page at a time anyway.  */</comment>
	<else PREFIX:line="519" PREFIX:column="9">else <if PREFIX:line="519" PREFIX:column="14">if<condition PREFIX:line="519" PREFIX:column="16">(<expr><name PREFIX:line="519" PREFIX:column="17">ch</name>=='P' || <name PREFIX:line="519" PREFIX:column="28">ch</name>=='R'</expr>)</condition><then PREFIX:line="519" PREFIX:column="36"> <block PREFIX:line="519" PREFIX:column="37">{
		<expr_stmt><expr><call><name PREFIX:line="520" PREFIX:column="17">nothing_response</name><argument_list PREFIX:line="520" PREFIX:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></then>


	<comment type="block" PREFIX:line="524" PREFIX:column="9">/* Leave programming mode  */</comment>
	<else PREFIX:line="525" PREFIX:column="9">else <if PREFIX:line="525" PREFIX:column="14">if<condition PREFIX:line="525" PREFIX:column="16">(<expr><name PREFIX:line="525" PREFIX:column="17">ch</name>=='Q'</expr>)</condition><then PREFIX:line="525" PREFIX:column="25"> <block PREFIX:line="525" PREFIX:column="26">{
		<expr_stmt><expr><call><name PREFIX:line="526" PREFIX:column="17">nothing_response</name><argument_list PREFIX:line="526" PREFIX:column="33">()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef PREFIX:line="527" PREFIX:column="1">#<cpp:directive PREFIX:line="527" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="527" PREFIX:column="8">WATCHDOG_MODS</name></cpp:ifdef>
		<comment type="line" PREFIX:line="528" PREFIX:column="17">// autoreset via watchdog (sneaky!)</comment>
		<expr_stmt><expr><name PREFIX:line="529" PREFIX:column="17">WDTCSR</name> = <call><name PREFIX:line="529" PREFIX:column="26">_BV</name><argument_list PREFIX:line="529" PREFIX:column="29">(<argument><expr><name PREFIX:line="529" PREFIX:column="30">WDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while PREFIX:line="530" PREFIX:column="17">while <condition PREFIX:line="530" PREFIX:column="23">(<expr PREFIX:line="530" PREFIX:column="24">1</expr>)</condition><empty_stmt PREFIX:line="530" PREFIX:column="26">;</empty_stmt></while> <comment type="line" PREFIX:line="530" PREFIX:column="28">// 16 ms</comment>
<cpp:endif PREFIX:line="531" PREFIX:column="1">#<cpp:directive PREFIX:line="531" PREFIX:column="2">endif</cpp:directive></cpp:endif>
	}</block></then>


	<comment type="block" PREFIX:line="535" PREFIX:column="9">/* Set address, little endian. EEPROM in bytes, FLASH in words  */</comment>
	<comment type="block" PREFIX:line="536" PREFIX:column="9">/* Perhaps extra address bytes may be added in future to support &gt; 128kB FLASH.  */</comment>
	<comment type="block" PREFIX:line="537" PREFIX:column="9">/* This might explain why little endian was used here, big endian used everywhere else.  */</comment>
	<else PREFIX:line="538" PREFIX:column="9">else <if PREFIX:line="538" PREFIX:column="14">if<condition PREFIX:line="538" PREFIX:column="16">(<expr><name PREFIX:line="538" PREFIX:column="17">ch</name>=='U'</expr>)</condition><then PREFIX:line="538" PREFIX:column="25"> <block PREFIX:line="538" PREFIX:column="26">{
		<expr_stmt><expr><name><name PREFIX:line="539" PREFIX:column="17">address</name>.<name PREFIX:line="539" PREFIX:column="25">byte</name><index PREFIX:line="539" PREFIX:column="29">[<expr PREFIX:line="539" PREFIX:column="30">0</expr>]</index></name> = <call><name PREFIX:line="539" PREFIX:column="35">getch</name><argument_list PREFIX:line="539" PREFIX:column="40">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name PREFIX:line="540" PREFIX:column="17">address</name>.<name PREFIX:line="540" PREFIX:column="25">byte</name><index PREFIX:line="540" PREFIX:column="29">[<expr PREFIX:line="540" PREFIX:column="30">1</expr>]</index></name> = <call><name PREFIX:line="540" PREFIX:column="35">getch</name><argument_list PREFIX:line="540" PREFIX:column="40">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="541" PREFIX:column="17">nothing_response</name><argument_list PREFIX:line="541" PREFIX:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></then>


	<comment type="block" PREFIX:line="545" PREFIX:column="9">/* Universal SPI programming command, disabled.  Would be used for fuses and lock bits.  */</comment>
	<else PREFIX:line="546" PREFIX:column="9">else <if PREFIX:line="546" PREFIX:column="14">if<condition PREFIX:line="546" PREFIX:column="16">(<expr><name PREFIX:line="546" PREFIX:column="17">ch</name>=='V'</expr>)</condition><then PREFIX:line="546" PREFIX:column="25"> <block PREFIX:line="546" PREFIX:column="26">{
		<if PREFIX:line="547" PREFIX:column="17">if <condition PREFIX:line="547" PREFIX:column="20">(<expr><call><name PREFIX:line="547" PREFIX:column="21">getch</name><argument_list PREFIX:line="547" PREFIX:column="26">()</argument_list></call> == 0x30</expr>)</condition><then PREFIX:line="547" PREFIX:column="37"> <block PREFIX:line="547" PREFIX:column="38">{
			<expr_stmt><expr><call><name PREFIX:line="548" PREFIX:column="25">getch</name><argument_list PREFIX:line="548" PREFIX:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="549" PREFIX:column="25">ch</name> = <call><name PREFIX:line="549" PREFIX:column="30">getch</name><argument_list PREFIX:line="549" PREFIX:column="35">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="550" PREFIX:column="25">getch</name><argument_list PREFIX:line="550" PREFIX:column="30">()</argument_list></call></expr>;</expr_stmt>
			<if PREFIX:line="551" PREFIX:column="25">if <condition PREFIX:line="551" PREFIX:column="28">(<expr><name PREFIX:line="551" PREFIX:column="29">ch</name> == 0</expr>)</condition><then PREFIX:line="551" PREFIX:column="37"> <block PREFIX:line="551" PREFIX:column="38">{
				<expr_stmt><expr><call><name PREFIX:line="552" PREFIX:column="33">byte_response</name><argument_list PREFIX:line="552" PREFIX:column="46">(<argument><expr><name PREFIX:line="552" PREFIX:column="47">SIG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else PREFIX:line="553" PREFIX:column="27">else <if PREFIX:line="553" PREFIX:column="32">if <condition PREFIX:line="553" PREFIX:column="35">(<expr><name PREFIX:line="553" PREFIX:column="36">ch</name> == 1</expr>)</condition><then PREFIX:line="553" PREFIX:column="44"> <block PREFIX:line="553" PREFIX:column="45">{
				<expr_stmt><expr><call><name PREFIX:line="554" PREFIX:column="33">byte_response</name><argument_list PREFIX:line="554" PREFIX:column="46">(<argument><expr><name PREFIX:line="554" PREFIX:column="47">SIG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			}</block></then> <else PREFIX:line="555" PREFIX:column="27">else <block PREFIX:line="555" PREFIX:column="32">{
				<expr_stmt><expr><call><name PREFIX:line="556" PREFIX:column="33">byte_response</name><argument_list PREFIX:line="556" PREFIX:column="46">(<argument><expr><name PREFIX:line="556" PREFIX:column="47">SIG3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if> 
		}</block></then> <else PREFIX:line="558" PREFIX:column="19">else <block PREFIX:line="558" PREFIX:column="24">{
			<expr_stmt><expr><call><name PREFIX:line="559" PREFIX:column="25">getNch</name><argument_list PREFIX:line="559" PREFIX:column="31">(<argument><expr PREFIX:line="559" PREFIX:column="32">3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="560" PREFIX:column="25">byte_response</name><argument_list PREFIX:line="560" PREFIX:column="38">(<argument><expr PREFIX:line="560" PREFIX:column="39">0x00</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then>


	<comment type="block" PREFIX:line="565" PREFIX:column="9">/* Write memory, length is big endian and is in bytes  */</comment>
	<else PREFIX:line="566" PREFIX:column="9">else <if PREFIX:line="566" PREFIX:column="14">if<condition PREFIX:line="566" PREFIX:column="16">(<expr><name PREFIX:line="566" PREFIX:column="17">ch</name>=='d'</expr>)</condition><then PREFIX:line="566" PREFIX:column="25"> <block PREFIX:line="566" PREFIX:column="26">{
		<expr_stmt><expr><name><name PREFIX:line="567" PREFIX:column="17">length</name>.<name PREFIX:line="567" PREFIX:column="24">byte</name><index PREFIX:line="567" PREFIX:column="28">[<expr PREFIX:line="567" PREFIX:column="29">1</expr>]</index></name> = <call><name PREFIX:line="567" PREFIX:column="34">getch</name><argument_list PREFIX:line="567" PREFIX:column="39">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name PREFIX:line="568" PREFIX:column="17">length</name>.<name PREFIX:line="568" PREFIX:column="24">byte</name><index PREFIX:line="568" PREFIX:column="28">[<expr PREFIX:line="568" PREFIX:column="29">0</expr>]</index></name> = <call><name PREFIX:line="568" PREFIX:column="34">getch</name><argument_list PREFIX:line="568" PREFIX:column="39">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name PREFIX:line="569" PREFIX:column="17">flags</name>.<name PREFIX:line="569" PREFIX:column="23">eeprom</name></name> = 0</expr>;</expr_stmt>
		<if PREFIX:line="570" PREFIX:column="17">if <condition PREFIX:line="570" PREFIX:column="20">(<expr><call><name PREFIX:line="570" PREFIX:column="21">getch</name><argument_list PREFIX:line="570" PREFIX:column="26">()</argument_list></call> == 'E'</expr>)</condition><then PREFIX:line="570" PREFIX:column="36"> <expr_stmt><expr><name><name PREFIX:line="570" PREFIX:column="37">flags</name>.<name PREFIX:line="570" PREFIX:column="43">eeprom</name></name> = 1</expr>;</expr_stmt></then></if>
		<for PREFIX:line="571" PREFIX:column="17">for (<init><expr><name PREFIX:line="571" PREFIX:column="22">w</name>=0</expr>;</init><condition><expr><name PREFIX:line="571" PREFIX:column="26">w</name>&lt;<name><name PREFIX:line="571" PREFIX:column="28">length</name>.<name PREFIX:line="571" PREFIX:column="35">word</name></name></expr>;</condition><incr><expr><name PREFIX:line="571" PREFIX:column="40">w</name>++</expr></incr>) <block PREFIX:line="571" PREFIX:column="45">{
			<expr_stmt><expr><name><name PREFIX:line="572" PREFIX:column="25">buff</name><index PREFIX:line="572" PREFIX:column="29">[<expr><name PREFIX:line="572" PREFIX:column="30">w</name></expr>]</index></name> = <call><name PREFIX:line="572" PREFIX:column="35">getch</name><argument_list PREFIX:line="572" PREFIX:column="40">()</argument_list></call></expr>;</expr_stmt>	                        <comment type="line" PREFIX:line="572" PREFIX:column="73">// Store data in buffer, can't keep up with serial data stream whilst programming pages</comment>
		}</block></for>
		<if PREFIX:line="574" PREFIX:column="17">if <condition PREFIX:line="574" PREFIX:column="20">(<expr><call><name PREFIX:line="574" PREFIX:column="21">getch</name><argument_list PREFIX:line="574" PREFIX:column="26">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="574" PREFIX:column="36"> <block PREFIX:line="574" PREFIX:column="37">{
			<if PREFIX:line="575" PREFIX:column="25">if <condition PREFIX:line="575" PREFIX:column="28">(<expr><name><name PREFIX:line="575" PREFIX:column="29">flags</name>.<name PREFIX:line="575" PREFIX:column="35">eeprom</name></name></expr>)</condition><then PREFIX:line="575" PREFIX:column="42"> <block PREFIX:line="575" PREFIX:column="43">{		                <comment type="line" PREFIX:line="575" PREFIX:column="73">//Write to EEPROM one byte at a time</comment>
				<expr_stmt><expr><name><name PREFIX:line="576" PREFIX:column="33">address</name>.<name PREFIX:line="576" PREFIX:column="41">word</name></name> &lt;&lt;= 1</expr>;</expr_stmt>
				<for PREFIX:line="577" PREFIX:column="33">for(<init><expr><name PREFIX:line="577" PREFIX:column="37">w</name>=0</expr>;</init><condition><expr><name PREFIX:line="577" PREFIX:column="41">w</name>&lt;<name><name PREFIX:line="577" PREFIX:column="43">length</name>.<name PREFIX:line="577" PREFIX:column="50">word</name></name></expr>;</condition><incr><expr><name PREFIX:line="577" PREFIX:column="55">w</name>++</expr></incr>) <block PREFIX:line="577" PREFIX:column="60">{
<cpp:if PREFIX:line="578" PREFIX:column="1">#<cpp:directive PREFIX:line="578" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="578" PREFIX:column="5">defined</name><argument_list PREFIX:line="578" PREFIX:column="12">(<argument><expr><name PREFIX:line="578" PREFIX:column="13">__AVR_ATmega168__</name></expr></argument>)</argument_list></call>  || <call><name PREFIX:line="578" PREFIX:column="36">defined</name><argument_list PREFIX:line="578" PREFIX:column="43">(<argument><expr><name PREFIX:line="578" PREFIX:column="44">__AVR_ATmega328P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
					<while PREFIX:line="579" PREFIX:column="41">while<condition PREFIX:line="579" PREFIX:column="46">(<expr><name PREFIX:line="579" PREFIX:column="47">EECR</name> &amp; (1&lt;&lt;<name PREFIX:line="579" PREFIX:column="58">EEPE</name>)</expr>)</condition><empty_stmt PREFIX:line="579" PREFIX:column="64">;</empty_stmt></while>
					<expr_stmt><expr><name PREFIX:line="580" PREFIX:column="41">EEAR</name> = (<name PREFIX:line="580" PREFIX:column="49">uint16_t</name>)<name><name PREFIX:line="580" PREFIX:column="58">address</name>.<name PREFIX:line="580" PREFIX:column="66">word</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="581" PREFIX:column="41">EEDR</name> = <name><name PREFIX:line="581" PREFIX:column="48">buff</name><index PREFIX:line="581" PREFIX:column="52">[<expr><name PREFIX:line="581" PREFIX:column="53">w</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="582" PREFIX:column="41">EECR</name> |= (1&lt;&lt;<name PREFIX:line="582" PREFIX:column="53">EEMPE</name>)</expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="583" PREFIX:column="41">EECR</name> |= (1&lt;&lt;<name PREFIX:line="583" PREFIX:column="53">EEPE</name>)</expr>;</expr_stmt>
<cpp:else PREFIX:line="584" PREFIX:column="1">#<cpp:directive PREFIX:line="584" PREFIX:column="2">else</cpp:directive></cpp:else>
					<expr_stmt><expr><call><name PREFIX:line="585" PREFIX:column="41">eeprom_write_byte</name><argument_list PREFIX:line="585" PREFIX:column="58">(<argument><expr><name><name PREFIX:line="585" PREFIX:column="59">address</name>.<name PREFIX:line="585" PREFIX:column="67">word</name></name></expr></argument>,<argument><expr><name><name PREFIX:line="585" PREFIX:column="72">buff</name><index PREFIX:line="585" PREFIX:column="76">[<expr><name PREFIX:line="585" PREFIX:column="77">w</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="586" PREFIX:column="1">#<cpp:directive PREFIX:line="586" PREFIX:column="2">endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name><name PREFIX:line="587" PREFIX:column="41">address</name>.<name PREFIX:line="587" PREFIX:column="49">word</name></name>++</expr>;</expr_stmt>
				}</block></for>			
			}</block></then>
			<else PREFIX:line="590" PREFIX:column="25">else <block PREFIX:line="590" PREFIX:column="30">{					        <comment type="line" PREFIX:line="590" PREFIX:column="73">//Write to FLASH one page at a time</comment>
				<if PREFIX:line="591" PREFIX:column="33">if <condition PREFIX:line="591" PREFIX:column="36">(<expr><name><name PREFIX:line="591" PREFIX:column="37">address</name>.<name PREFIX:line="591" PREFIX:column="45">byte</name><index PREFIX:line="591" PREFIX:column="49">[<expr PREFIX:line="591" PREFIX:column="50">1</expr>]</index></name>&gt;127</expr>)</condition><then PREFIX:line="591" PREFIX:column="57"> <expr_stmt><expr><name PREFIX:line="591" PREFIX:column="58">address_high</name> = 0x01</expr>;</expr_stmt></then>	<comment type="line" PREFIX:line="591" PREFIX:column="81">//Only possible with m128, m256 will need 3rd address byte. FIXME</comment>
				<else PREFIX:line="592" PREFIX:column="33">else <expr_stmt><expr><name PREFIX:line="592" PREFIX:column="38">address_high</name> = 0x00</expr>;</expr_stmt></else></if>
<cpp:if PREFIX:line="593" PREFIX:column="1">#<cpp:directive PREFIX:line="593" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="593" PREFIX:column="5">defined</name><argument_list PREFIX:line="593" PREFIX:column="12">(<argument><expr><name PREFIX:line="593" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="593" PREFIX:column="35">defined</name><argument_list PREFIX:line="593" PREFIX:column="42">(<argument><expr><name PREFIX:line="593" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="593" PREFIX:column="66">defined</name><argument_list PREFIX:line="593" PREFIX:column="73">(<argument><expr><name PREFIX:line="593" PREFIX:column="74">__AVR_ATmega1281__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="593" PREFIX:column="97">defined</name><argument_list PREFIX:line="593" PREFIX:column="104">(<argument><expr><name PREFIX:line="593" PREFIX:column="105">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call></expr></cpp:if> 
				<expr_stmt><expr><name PREFIX:line="594" PREFIX:column="33">RAMPZ</name> = <name PREFIX:line="594" PREFIX:column="41">address_high</name></expr>;</expr_stmt>
<cpp:endif PREFIX:line="595" PREFIX:column="1">#<cpp:directive PREFIX:line="595" PREFIX:column="2">endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><name><name PREFIX:line="596" PREFIX:column="33">address</name>.<name PREFIX:line="596" PREFIX:column="41">word</name></name> = <name><name PREFIX:line="596" PREFIX:column="48">address</name>.<name PREFIX:line="596" PREFIX:column="56">word</name></name> &lt;&lt; 1</expr>;</expr_stmt>	        <comment type="line" PREFIX:line="596" PREFIX:column="81">//address * 2 -&gt; byte location</comment>
				<comment type="block" PREFIX:line="597" PREFIX:column="33">/* if ((length.byte[0] &amp; 0x01) == 0x01) length.word++;	//Even up an odd number of bytes */</comment>
				<if PREFIX:line="598" PREFIX:column="33">if <condition PREFIX:line="598" PREFIX:column="36">(<expr PREFIX:line="598" PREFIX:column="37">(<name><name PREFIX:line="598" PREFIX:column="38">length</name>.<name PREFIX:line="598" PREFIX:column="45">byte</name><index PREFIX:line="598" PREFIX:column="49">[<expr PREFIX:line="598" PREFIX:column="50">0</expr>]</index></name> &amp; 0x01)</expr>)</condition><then PREFIX:line="598" PREFIX:column="61"> <expr_stmt><expr><name><name PREFIX:line="598" PREFIX:column="62">length</name>.<name PREFIX:line="598" PREFIX:column="69">word</name></name>++</expr>;</expr_stmt></then></if>	<comment type="line" PREFIX:line="598" PREFIX:column="81">//Even up an odd number of bytes</comment>
				<expr_stmt><expr><call><name PREFIX:line="599" PREFIX:column="33">cli</name><argument_list PREFIX:line="599" PREFIX:column="36">()</argument_list></call></expr>;</expr_stmt>					<comment type="line" PREFIX:line="599" PREFIX:column="73">//Disable interrupts, just to be sure</comment>
<cpp:if PREFIX:line="600" PREFIX:column="1">#<cpp:directive PREFIX:line="600" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="600" PREFIX:column="5">defined</name><argument_list PREFIX:line="600" PREFIX:column="12">(<argument><expr><name PREFIX:line="600" PREFIX:column="13">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="600" PREFIX:column="36">defined</name><argument_list PREFIX:line="600" PREFIX:column="43">(<argument><expr><name PREFIX:line="600" PREFIX:column="44">__AVR_ATmega1281__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="600" PREFIX:column="67">defined</name><argument_list PREFIX:line="600" PREFIX:column="74">(<argument><expr><name PREFIX:line="600" PREFIX:column="75">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="600" PREFIX:column="99">defined</name><argument_list PREFIX:line="600" PREFIX:column="106">(<argument><expr><name PREFIX:line="600" PREFIX:column="107">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
				<while PREFIX:line="601" PREFIX:column="33">while<condition PREFIX:line="601" PREFIX:column="38">(<expr><call><name PREFIX:line="601" PREFIX:column="39">bit_is_set</name><argument_list PREFIX:line="601" PREFIX:column="49">(<argument><expr><name PREFIX:line="601" PREFIX:column="50">EECR</name></expr></argument>,<argument><expr><name PREFIX:line="601" PREFIX:column="55">EEPE</name></expr></argument>)</argument_list></call></expr>)</condition><empty_stmt PREFIX:line="601" PREFIX:column="61">;</empty_stmt></while>			<comment type="line" PREFIX:line="601" PREFIX:column="81">//Wait for previous EEPROM writes to complete</comment>
<cpp:else PREFIX:line="602" PREFIX:column="1">#<cpp:directive PREFIX:line="602" PREFIX:column="2">else</cpp:directive></cpp:else>
				<while PREFIX:line="603" PREFIX:column="33">while<condition PREFIX:line="603" PREFIX:column="38">(<expr><call><name PREFIX:line="603" PREFIX:column="39">bit_is_set</name><argument_list PREFIX:line="603" PREFIX:column="49">(<argument><expr><name PREFIX:line="603" PREFIX:column="50">EECR</name></expr></argument>,<argument><expr><name PREFIX:line="603" PREFIX:column="55">EEWE</name></expr></argument>)</argument_list></call></expr>)</condition><empty_stmt PREFIX:line="603" PREFIX:column="61">;</empty_stmt></while>			<comment type="line" PREFIX:line="603" PREFIX:column="81">//Wait for previous EEPROM writes to complete</comment>
<cpp:endif PREFIX:line="604" PREFIX:column="1">#<cpp:directive PREFIX:line="604" PREFIX:column="2">endif</cpp:directive></cpp:endif>
				<asm PREFIX:line="605" PREFIX:column="33">asm <specifier PREFIX:line="605" PREFIX:column="37">volatile</specifier>(
					 "clr	r17		\n\t"	<comment type="line" PREFIX:line="606" PREFIX:column="73">//page_word_count</comment>
					 "lds	r30,address	\n\t"	<comment type="line" PREFIX:line="607" PREFIX:column="73">//Address of FLASH location (in bytes)</comment>
					 "lds	r31,address+1	\n\t"
					 "ldi	r28,lo8(buff)	\n\t"	<comment type="line" PREFIX:line="609" PREFIX:column="73">//Start of buffer array in RAM</comment>
					 "ldi	r29,hi8(buff)	\n\t"
					 "lds	r24,length	\n\t"	<comment type="line" PREFIX:line="611" PREFIX:column="73">//Length of data to be written (in bytes)</comment>
					 "lds	r25,length+1	\n\t"
					 "length_loop:		\n\t"	<comment type="line" PREFIX:line="613" PREFIX:column="73">//Main loop, repeat for number of words in block							 							 </comment>
					 "cpi	r17,0x00	\n\t"	<comment type="line" PREFIX:line="614" PREFIX:column="73">//If page_word_count=0 then erase page</comment>
					 "brne	no_page_erase	\n\t"						 
					 "wait_spm1:		\n\t"
					 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="617" PREFIX:column="73">//Wait for previous spm to complete</comment>
					 "andi	r16,1           \n\t"
					 "cpi	r16,1           \n\t"
					 "breq	wait_spm1       \n\t"
					 "ldi	r16,0x03	\n\t"	<comment type="line" PREFIX:line="621" PREFIX:column="73">//Erase page pointed to by Z</comment>
					 "sts	%0,r16		\n\t"
					 "spm			\n\t"							 
<cpp:ifdef PREFIX:line="624" PREFIX:column="1">#<cpp:directive PREFIX:line="624" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="624" PREFIX:column="8">__AVR_ATmega163__</name></cpp:ifdef>
					 ".word 0xFFFF		\n\t"
					 "nop			\n\t"
<cpp:endif PREFIX:line="627" PREFIX:column="1">#<cpp:directive PREFIX:line="627" PREFIX:column="2">endif</cpp:directive></cpp:endif>
					 "wait_spm2:		\n\t"
					 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="629" PREFIX:column="73">//Wait for previous spm to complete</comment>
					 "andi	r16,1           \n\t"
					 "cpi	r16,1           \n\t"
					 "breq	wait_spm2       \n\t"									 

					 "ldi	r16,0x11	\n\t"	<comment type="line" PREFIX:line="634" PREFIX:column="73">//Re-enable RWW section</comment>
					 "sts	%0,r16		\n\t"						 			 
					 "spm			\n\t"
<cpp:ifdef PREFIX:line="637" PREFIX:column="1">#<cpp:directive PREFIX:line="637" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="637" PREFIX:column="8">__AVR_ATmega163__</name></cpp:ifdef>
					 ".word 0xFFFF		\n\t"
					 "nop			\n\t"
<cpp:endif PREFIX:line="640" PREFIX:column="1">#<cpp:directive PREFIX:line="640" PREFIX:column="2">endif</cpp:directive></cpp:endif>
					 "no_page_erase:		\n\t"							 
					 "ld	r0,Y+		\n\t"	<comment type="line" PREFIX:line="642" PREFIX:column="73">//Write 2 bytes into page buffer</comment>
					 "ld	r1,Y+		\n\t"							 
								 
					 "wait_spm3:		\n\t"
					 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="646" PREFIX:column="73">//Wait for previous spm to complete</comment>
					 "andi	r16,1           \n\t"
					 "cpi	r16,1           \n\t"
					 "breq	wait_spm3       \n\t"
					 "ldi	r16,0x01	\n\t"	<comment type="line" PREFIX:line="650" PREFIX:column="73">//Load r0,r1 into FLASH page buffer</comment>
					 "sts	%0,r16		\n\t"
					 "spm			\n\t"
								 
					 "inc	r17		\n\t"	<comment type="line" PREFIX:line="654" PREFIX:column="73">//page_word_count++</comment>
					 "cpi r17,%1	        \n\t"
					 "brlo	same_page	\n\t"	<comment type="line" PREFIX:line="656" PREFIX:column="73">//Still same page in FLASH</comment>
					 "write_page:		\n\t"
					 "clr	r17		\n\t"	<comment type="line" PREFIX:line="658" PREFIX:column="73">//New page, write current one first</comment>
					 "wait_spm4:		\n\t"
					 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="660" PREFIX:column="73">//Wait for previous spm to complete</comment>
					 "andi	r16,1           \n\t"
					 "cpi	r16,1           \n\t"
					 "breq	wait_spm4       \n\t"
<cpp:ifdef PREFIX:line="664" PREFIX:column="1">#<cpp:directive PREFIX:line="664" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="664" PREFIX:column="8">__AVR_ATmega163__</name></cpp:ifdef>
					 "andi	r30,0x80	\n\t"	<comment type="line" PREFIX:line="665" PREFIX:column="73">// m163 requires Z6:Z1 to be zero during page write</comment>
<cpp:endif PREFIX:line="666" PREFIX:column="1">#<cpp:directive PREFIX:line="666" PREFIX:column="2">endif</cpp:directive></cpp:endif>							 							 
					 "ldi	r16,0x05	\n\t"	<comment type="line" PREFIX:line="667" PREFIX:column="73">//Write page pointed to by Z</comment>
					 "sts	%0,r16		\n\t"
					 "spm			\n\t"
<cpp:ifdef PREFIX:line="670" PREFIX:column="1">#<cpp:directive PREFIX:line="670" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="670" PREFIX:column="8">__AVR_ATmega163__</name></cpp:ifdef>
					 ".word 0xFFFF		\n\t"
					 "nop			\n\t"
					 "ori	r30,0x7E	\n\t"	<comment type="line" PREFIX:line="673" PREFIX:column="73">// recover Z6:Z1 state after page write (had to be zero during write)</comment>
<cpp:endif PREFIX:line="674" PREFIX:column="1">#<cpp:directive PREFIX:line="674" PREFIX:column="2">endif</cpp:directive></cpp:endif>
					 "wait_spm5:		\n\t"
					 "lds	r16,%0		\n\t"	<comment type="line" PREFIX:line="676" PREFIX:column="73">//Wait for previous spm to complete</comment>
					 "andi	r16,1           \n\t"
					 "cpi	r16,1           \n\t"
					 "breq	wait_spm5       \n\t"									 
					 "ldi	r16,0x11	\n\t"	<comment type="line" PREFIX:line="680" PREFIX:column="73">//Re-enable RWW section</comment>
					 "sts	%0,r16		\n\t"						 			 
					 "spm			\n\t"					 		 
<cpp:ifdef PREFIX:line="683" PREFIX:column="1">#<cpp:directive PREFIX:line="683" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="683" PREFIX:column="8">__AVR_ATmega163__</name></cpp:ifdef>
					 ".word 0xFFFF		\n\t"
					 "nop			\n\t"
<cpp:endif PREFIX:line="686" PREFIX:column="1">#<cpp:directive PREFIX:line="686" PREFIX:column="2">endif</cpp:directive></cpp:endif>
					 "same_page:		\n\t"							 
					 "adiw	r30,2		\n\t"	<comment type="line" PREFIX:line="688" PREFIX:column="73">//Next word in FLASH</comment>
					 "sbiw	r24,2		\n\t"	<comment type="line" PREFIX:line="689" PREFIX:column="73">//length-2</comment>
					 "breq	final_write	\n\t"	<comment type="line" PREFIX:line="690" PREFIX:column="73">//Finished</comment>
					 "rjmp	length_loop	\n\t"
					 "final_write:		\n\t"
					 "cpi	r17,0		\n\t"
					 "breq	block_done	\n\t"
					 "adiw	r24,2		\n\t"	<comment type="line" PREFIX:line="695" PREFIX:column="73">//length+2, fool above check on length after short page write</comment>
					 "rjmp	write_page	\n\t"
					 "block_done:		\n\t"
					 "clr	__zero_reg__	\n\t"	<comment type="line" PREFIX:line="698" PREFIX:column="73">//restore zero register</comment>
<cpp:if PREFIX:line="699" PREFIX:column="1">#<cpp:directive PREFIX:line="699" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="699" PREFIX:column="5">defined</name> <name PREFIX:line="699" PREFIX:column="13">__AVR_ATmega168__</name>  || <name PREFIX:line="699" PREFIX:column="35">__AVR_ATmega328P__</name> || <name PREFIX:line="699" PREFIX:column="57">__AVR_ATmega128__</name> || <name PREFIX:line="699" PREFIX:column="78">__AVR_ATmega1280__</name> || <name PREFIX:line="699" PREFIX:column="100">__AVR_ATmega1281__</name> || <name PREFIX:line="699" PREFIX:column="122">__AVR_ATmega1284P__</name> || <name PREFIX:line="699" PREFIX:column="145">__AVR_ATmega644P__</name></expr></cpp:if>
					 : "=m" (SPMCSR) : "M" (PAGE_SIZE) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"
<cpp:else PREFIX:line="701" PREFIX:column="1">#<cpp:directive PREFIX:line="701" PREFIX:column="2">else</cpp:directive></cpp:else>
					 : "=m" (SPMCR) : "M" (PAGE_SIZE) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"
<cpp:endif PREFIX:line="703" PREFIX:column="1">#<cpp:directive PREFIX:line="703" PREFIX:column="2">endif</cpp:directive></cpp:endif>
					 );</asm>
				<comment type="block" PREFIX:line="705" PREFIX:column="33">/* Should really add a wait for RWW section to be enabled, don't actually need it since we never */</comment>
				<comment type="block" PREFIX:line="706" PREFIX:column="33">/* exit the bootloader without a power cycle anyhow */</comment>
			}</block></else></if>
			<expr_stmt><expr><call><name PREFIX:line="708" PREFIX:column="25">putch</name><argument_list PREFIX:line="708" PREFIX:column="30">(<argument><expr PREFIX:line="708" PREFIX:column="31">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="709" PREFIX:column="25">putch</name><argument_list PREFIX:line="709" PREFIX:column="30">(<argument><expr PREFIX:line="709" PREFIX:column="31">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else PREFIX:line="710" PREFIX:column="19">else <block PREFIX:line="710" PREFIX:column="24">{
			<if PREFIX:line="711" PREFIX:column="25">if <condition PREFIX:line="711" PREFIX:column="28">(<expr PREFIX:line="711" PREFIX:column="29">++<name PREFIX:line="711" PREFIX:column="31">error_count</name> == <name PREFIX:line="711" PREFIX:column="46">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="711" PREFIX:column="62">
				<expr_stmt><expr><call><name PREFIX:line="712" PREFIX:column="33">app_start</name><argument_list PREFIX:line="712" PREFIX:column="42">()</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></else></if>		
	}</block></then>


	<comment type="block" PREFIX:line="717" PREFIX:column="9">/* Read memory block mode, length is big endian.  */</comment>
	<else PREFIX:line="718" PREFIX:column="9">else <if PREFIX:line="718" PREFIX:column="14">if<condition PREFIX:line="718" PREFIX:column="16">(<expr><name PREFIX:line="718" PREFIX:column="17">ch</name>=='t'</expr>)</condition><then PREFIX:line="718" PREFIX:column="25"> <block PREFIX:line="718" PREFIX:column="26">{
		<expr_stmt><expr><name><name PREFIX:line="719" PREFIX:column="17">length</name>.<name PREFIX:line="719" PREFIX:column="24">byte</name><index PREFIX:line="719" PREFIX:column="28">[<expr PREFIX:line="719" PREFIX:column="29">1</expr>]</index></name> = <call><name PREFIX:line="719" PREFIX:column="34">getch</name><argument_list PREFIX:line="719" PREFIX:column="39">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name PREFIX:line="720" PREFIX:column="17">length</name>.<name PREFIX:line="720" PREFIX:column="24">byte</name><index PREFIX:line="720" PREFIX:column="28">[<expr PREFIX:line="720" PREFIX:column="29">0</expr>]</index></name> = <call><name PREFIX:line="720" PREFIX:column="34">getch</name><argument_list PREFIX:line="720" PREFIX:column="39">()</argument_list></call></expr>;</expr_stmt>
<cpp:if PREFIX:line="721" PREFIX:column="1">#<cpp:directive PREFIX:line="721" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="721" PREFIX:column="5">defined</name><argument_list PREFIX:line="721" PREFIX:column="12">(<argument><expr><name PREFIX:line="721" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="721" PREFIX:column="35">defined</name><argument_list PREFIX:line="721" PREFIX:column="42">(<argument><expr><name PREFIX:line="721" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="721" PREFIX:column="66">defined</name><argument_list PREFIX:line="721" PREFIX:column="73">(<argument><expr><name PREFIX:line="721" PREFIX:column="74">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="721" PREFIX:column="98">defined</name><argument_list PREFIX:line="721" PREFIX:column="105">(<argument><expr><name PREFIX:line="721" PREFIX:column="106">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if PREFIX:line="722" PREFIX:column="17">if <condition PREFIX:line="722" PREFIX:column="20">(<expr><name><name PREFIX:line="722" PREFIX:column="21">address</name>.<name PREFIX:line="722" PREFIX:column="29">word</name></name>&gt;0x7FFF</expr>)</condition><then PREFIX:line="722" PREFIX:column="41"> <expr_stmt><expr><name><name PREFIX:line="722" PREFIX:column="42">flags</name>.<name PREFIX:line="722" PREFIX:column="48">rampz</name></name> = 1</expr>;</expr_stmt></then>		<comment type="line" PREFIX:line="722" PREFIX:column="73">// No go with m256, FIXME</comment>
		<else PREFIX:line="723" PREFIX:column="17">else <expr_stmt><expr><name><name PREFIX:line="723" PREFIX:column="22">flags</name>.<name PREFIX:line="723" PREFIX:column="28">rampz</name></name> = 0</expr>;</expr_stmt></else></if>
<cpp:endif PREFIX:line="724" PREFIX:column="1">#<cpp:directive PREFIX:line="724" PREFIX:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name PREFIX:line="725" PREFIX:column="17">address</name>.<name PREFIX:line="725" PREFIX:column="25">word</name></name> = <name><name PREFIX:line="725" PREFIX:column="32">address</name>.<name PREFIX:line="725" PREFIX:column="40">word</name></name> &lt;&lt; 1</expr>;</expr_stmt>	        <comment type="line" PREFIX:line="725" PREFIX:column="65">// address * 2 -&gt; byte location</comment>
		<if PREFIX:line="726" PREFIX:column="17">if <condition PREFIX:line="726" PREFIX:column="20">(<expr><call><name PREFIX:line="726" PREFIX:column="21">getch</name><argument_list PREFIX:line="726" PREFIX:column="26">()</argument_list></call> == 'E'</expr>)</condition><then PREFIX:line="726" PREFIX:column="36"> <expr_stmt><expr><name><name PREFIX:line="726" PREFIX:column="37">flags</name>.<name PREFIX:line="726" PREFIX:column="43">eeprom</name></name> = 1</expr>;</expr_stmt></then>
		<else PREFIX:line="727" PREFIX:column="17">else <expr_stmt><expr><name><name PREFIX:line="727" PREFIX:column="22">flags</name>.<name PREFIX:line="727" PREFIX:column="28">eeprom</name></name> = 0</expr>;</expr_stmt></else></if>
		<if PREFIX:line="728" PREFIX:column="17">if <condition PREFIX:line="728" PREFIX:column="20">(<expr><call><name PREFIX:line="728" PREFIX:column="21">getch</name><argument_list PREFIX:line="728" PREFIX:column="26">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="728" PREFIX:column="36"> <block PREFIX:line="728" PREFIX:column="37">{		                <comment type="line" PREFIX:line="728" PREFIX:column="65">// Command terminator</comment>
			<expr_stmt><expr><call><name PREFIX:line="729" PREFIX:column="25">putch</name><argument_list PREFIX:line="729" PREFIX:column="30">(<argument><expr PREFIX:line="729" PREFIX:column="31">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for PREFIX:line="730" PREFIX:column="25">for (<init><expr><name PREFIX:line="730" PREFIX:column="30">w</name>=0</expr>;</init><condition><expr><name PREFIX:line="730" PREFIX:column="34">w</name> &lt; <name><name PREFIX:line="730" PREFIX:column="38">length</name>.<name PREFIX:line="730" PREFIX:column="45">word</name></name></expr>;</condition><incr><expr><name PREFIX:line="730" PREFIX:column="50">w</name>++</expr></incr>) <block PREFIX:line="730" PREFIX:column="55">{		        <comment type="line" PREFIX:line="730" PREFIX:column="73">// Can handle odd and even lengths okay</comment>
				<if PREFIX:line="731" PREFIX:column="33">if <condition PREFIX:line="731" PREFIX:column="36">(<expr><name><name PREFIX:line="731" PREFIX:column="37">flags</name>.<name PREFIX:line="731" PREFIX:column="43">eeprom</name></name></expr>)</condition><then PREFIX:line="731" PREFIX:column="50"> <block PREFIX:line="731" PREFIX:column="51">{	                        <comment type="line" PREFIX:line="731" PREFIX:column="81">// Byte access EEPROM read</comment>
<cpp:if PREFIX:line="732" PREFIX:column="1">#<cpp:directive PREFIX:line="732" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="732" PREFIX:column="5">defined</name><argument_list PREFIX:line="732" PREFIX:column="12">(<argument><expr><name PREFIX:line="732" PREFIX:column="13">__AVR_ATmega168__</name></expr></argument>)</argument_list></call>  || <call><name PREFIX:line="732" PREFIX:column="36">defined</name><argument_list PREFIX:line="732" PREFIX:column="43">(<argument><expr><name PREFIX:line="732" PREFIX:column="44">__AVR_ATmega328P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
					<while PREFIX:line="733" PREFIX:column="41">while<condition PREFIX:line="733" PREFIX:column="46">(<expr><name PREFIX:line="733" PREFIX:column="47">EECR</name> &amp; (1&lt;&lt;<name PREFIX:line="733" PREFIX:column="58">EEPE</name>)</expr>)</condition><empty_stmt PREFIX:line="733" PREFIX:column="64">;</empty_stmt></while>
					<expr_stmt><expr><name PREFIX:line="734" PREFIX:column="41">EEAR</name> = (<name PREFIX:line="734" PREFIX:column="49">uint16_t</name>)<name><name PREFIX:line="734" PREFIX:column="58">address</name>.<name PREFIX:line="734" PREFIX:column="66">word</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="735" PREFIX:column="41">EECR</name> |= (1&lt;&lt;<name PREFIX:line="735" PREFIX:column="53">EERE</name>)</expr>;</expr_stmt>
					<expr_stmt><expr><call><name PREFIX:line="736" PREFIX:column="41">putch</name><argument_list PREFIX:line="736" PREFIX:column="46">(<argument><expr><name PREFIX:line="736" PREFIX:column="47">EEDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else PREFIX:line="737" PREFIX:column="1">#<cpp:directive PREFIX:line="737" PREFIX:column="2">else</cpp:directive></cpp:else>
					<expr_stmt><expr><call><name PREFIX:line="738" PREFIX:column="41">putch</name><argument_list PREFIX:line="738" PREFIX:column="46">(<argument><expr><call><name PREFIX:line="738" PREFIX:column="47">eeprom_read_byte</name><argument_list PREFIX:line="738" PREFIX:column="63">(<argument><expr><name><name PREFIX:line="738" PREFIX:column="64">address</name>.<name PREFIX:line="738" PREFIX:column="72">word</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif PREFIX:line="739" PREFIX:column="1">#<cpp:directive PREFIX:line="739" PREFIX:column="2">endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name><name PREFIX:line="740" PREFIX:column="41">address</name>.<name PREFIX:line="740" PREFIX:column="49">word</name></name>++</expr>;</expr_stmt>
				}</block></then>
				<else PREFIX:line="742" PREFIX:column="33">else <block PREFIX:line="742" PREFIX:column="38">{

					<if PREFIX:line="744" PREFIX:column="41">if <condition PREFIX:line="744" PREFIX:column="44">(<expr PREFIX:line="744" PREFIX:column="45">!<name><name PREFIX:line="744" PREFIX:column="46">flags</name>.<name PREFIX:line="744" PREFIX:column="52">rampz</name></name></expr>)</condition><then PREFIX:line="744" PREFIX:column="58"> <expr_stmt><expr><call><name PREFIX:line="744" PREFIX:column="59">putch</name><argument_list PREFIX:line="744" PREFIX:column="64">(<argument><expr><call><name PREFIX:line="744" PREFIX:column="65">pgm_read_byte_near</name><argument_list PREFIX:line="744" PREFIX:column="83">(<argument><expr><name><name PREFIX:line="744" PREFIX:column="84">address</name>.<name PREFIX:line="744" PREFIX:column="92">word</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<cpp:if PREFIX:line="745" PREFIX:column="1">#<cpp:directive PREFIX:line="745" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="745" PREFIX:column="5">defined</name><argument_list PREFIX:line="745" PREFIX:column="12">(<argument><expr><name PREFIX:line="745" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="745" PREFIX:column="35">defined</name><argument_list PREFIX:line="745" PREFIX:column="42">(<argument><expr><name PREFIX:line="745" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="745" PREFIX:column="66">defined</name><argument_list PREFIX:line="745" PREFIX:column="73">(<argument><expr><name PREFIX:line="745" PREFIX:column="74">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call></expr></cpp:if> 
					<else PREFIX:line="746" PREFIX:column="41">else <expr_stmt><expr><call><name PREFIX:line="746" PREFIX:column="46">putch</name><argument_list PREFIX:line="746" PREFIX:column="51">(<argument><expr><call><name PREFIX:line="746" PREFIX:column="52">pgm_read_byte_far</name><argument_list PREFIX:line="746" PREFIX:column="69">(<argument><expr><name><name PREFIX:line="746" PREFIX:column="70">address</name>.<name PREFIX:line="746" PREFIX:column="78">word</name></name> + 0x10000</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
					<comment type="line" PREFIX:line="747" PREFIX:column="41">// Hmmmm, yuck  FIXME when m256 arrvies</comment>
<cpp:endif PREFIX:line="748" PREFIX:column="1">#<cpp:directive PREFIX:line="748" PREFIX:column="2">endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name><name PREFIX:line="749" PREFIX:column="41">address</name>.<name PREFIX:line="749" PREFIX:column="49">word</name></name>++</expr>;</expr_stmt>
				}</block></else></if>
			}</block></for>
			<expr_stmt><expr><call><name PREFIX:line="752" PREFIX:column="25">putch</name><argument_list PREFIX:line="752" PREFIX:column="30">(<argument><expr PREFIX:line="752" PREFIX:column="31">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then>


	<comment type="block" PREFIX:line="757" PREFIX:column="9">/* Get device signature bytes  */</comment>
	<else PREFIX:line="758" PREFIX:column="9">else <if PREFIX:line="758" PREFIX:column="14">if<condition PREFIX:line="758" PREFIX:column="16">(<expr><name PREFIX:line="758" PREFIX:column="17">ch</name>=='u'</expr>)</condition><then PREFIX:line="758" PREFIX:column="25"> <block PREFIX:line="758" PREFIX:column="26">{
		<if PREFIX:line="759" PREFIX:column="17">if <condition PREFIX:line="759" PREFIX:column="20">(<expr><call><name PREFIX:line="759" PREFIX:column="21">getch</name><argument_list PREFIX:line="759" PREFIX:column="26">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="759" PREFIX:column="36"> <block PREFIX:line="759" PREFIX:column="37">{
			<expr_stmt><expr><call><name PREFIX:line="760" PREFIX:column="25">putch</name><argument_list PREFIX:line="760" PREFIX:column="30">(<argument><expr PREFIX:line="760" PREFIX:column="31">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="761" PREFIX:column="25">putch</name><argument_list PREFIX:line="761" PREFIX:column="30">(<argument><expr><name PREFIX:line="761" PREFIX:column="31">SIG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="762" PREFIX:column="25">putch</name><argument_list PREFIX:line="762" PREFIX:column="30">(<argument><expr><name PREFIX:line="762" PREFIX:column="31">SIG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="763" PREFIX:column="25">putch</name><argument_list PREFIX:line="763" PREFIX:column="30">(<argument><expr><name PREFIX:line="763" PREFIX:column="31">SIG3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name PREFIX:line="764" PREFIX:column="25">putch</name><argument_list PREFIX:line="764" PREFIX:column="30">(<argument><expr PREFIX:line="764" PREFIX:column="31">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else PREFIX:line="765" PREFIX:column="19">else <block PREFIX:line="765" PREFIX:column="24">{
			<if PREFIX:line="766" PREFIX:column="25">if <condition PREFIX:line="766" PREFIX:column="28">(<expr PREFIX:line="766" PREFIX:column="29">++<name PREFIX:line="766" PREFIX:column="31">error_count</name> == <name PREFIX:line="766" PREFIX:column="46">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="766" PREFIX:column="62">
				<expr_stmt><expr><call><name PREFIX:line="767" PREFIX:column="33">app_start</name><argument_list PREFIX:line="767" PREFIX:column="42">()</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></else></if>
	}</block></then>


	<comment type="block" PREFIX:line="772" PREFIX:column="9">/* Read oscillator calibration byte */</comment>
	<else PREFIX:line="773" PREFIX:column="9">else <if PREFIX:line="773" PREFIX:column="14">if<condition PREFIX:line="773" PREFIX:column="16">(<expr><name PREFIX:line="773" PREFIX:column="17">ch</name>=='v'</expr>)</condition><then PREFIX:line="773" PREFIX:column="25"> <block PREFIX:line="773" PREFIX:column="26">{
		<expr_stmt><expr><call><name PREFIX:line="774" PREFIX:column="17">byte_response</name><argument_list PREFIX:line="774" PREFIX:column="30">(<argument><expr PREFIX:line="774" PREFIX:column="31">0x00</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>


<cpp:if PREFIX:line="778" PREFIX:column="1">#<cpp:directive PREFIX:line="778" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="778" PREFIX:column="5">defined</name> <name PREFIX:line="778" PREFIX:column="13">MONITOR</name></expr></cpp:if> 

	<comment type="block" PREFIX:line="780" PREFIX:column="9">/* here come the extended monitor commands by Erik Lins */</comment>

	<comment type="block" PREFIX:line="782" PREFIX:column="9">/* check for three times exclamation mark pressed */</comment>
	<else PREFIX:line="783" PREFIX:column="9">else <if PREFIX:line="783" PREFIX:column="14">if<condition PREFIX:line="783" PREFIX:column="16">(<expr><name PREFIX:line="783" PREFIX:column="17">ch</name>=='!'</expr>)</condition><then PREFIX:line="783" PREFIX:column="25"> <block PREFIX:line="783" PREFIX:column="26">{
		<expr_stmt><expr><name PREFIX:line="784" PREFIX:column="17">ch</name> = <call><name PREFIX:line="784" PREFIX:column="22">getch</name><argument_list PREFIX:line="784" PREFIX:column="27">()</argument_list></call></expr>;</expr_stmt>
		<if PREFIX:line="785" PREFIX:column="17">if<condition PREFIX:line="785" PREFIX:column="19">(<expr><name PREFIX:line="785" PREFIX:column="20">ch</name>=='!'</expr>)</condition><then PREFIX:line="785" PREFIX:column="28"> <block PREFIX:line="785" PREFIX:column="29">{
		<expr_stmt><expr><name PREFIX:line="786" PREFIX:column="17">ch</name> = <call><name PREFIX:line="786" PREFIX:column="22">getch</name><argument_list PREFIX:line="786" PREFIX:column="27">()</argument_list></call></expr>;</expr_stmt>
		<if PREFIX:line="787" PREFIX:column="17">if<condition PREFIX:line="787" PREFIX:column="19">(<expr><name PREFIX:line="787" PREFIX:column="20">ch</name>=='!'</expr>)</condition><then PREFIX:line="787" PREFIX:column="28"> <block PREFIX:line="787" PREFIX:column="29">{
			<decl_stmt><decl><type><name PREFIX:line="788" PREFIX:column="25">PGM_P</name></type> <name PREFIX:line="788" PREFIX:column="31">welcome</name> <init PREFIX:line="788" PREFIX:column="39">= <expr PREFIX:line="788" PREFIX:column="41">""</expr></init></decl>;</decl_stmt>
<cpp:if PREFIX:line="789" PREFIX:column="1">#<cpp:directive PREFIX:line="789" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="789" PREFIX:column="5">defined</name><argument_list PREFIX:line="789" PREFIX:column="12">(<argument><expr><name PREFIX:line="789" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="789" PREFIX:column="35">defined</name><argument_list PREFIX:line="789" PREFIX:column="42">(<argument><expr><name PREFIX:line="789" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<decl_stmt><decl><type><name PREFIX:line="790" PREFIX:column="25">uint16_t</name></type> <name PREFIX:line="790" PREFIX:column="34">extaddr</name></decl>;</decl_stmt>
<cpp:endif PREFIX:line="791" PREFIX:column="1">#<cpp:directive PREFIX:line="791" PREFIX:column="2">endif</cpp:directive></cpp:endif>
			<decl_stmt><decl><type><name PREFIX:line="792" PREFIX:column="25">uint8_t</name></type> <name PREFIX:line="792" PREFIX:column="33">addrl</name></decl>, <decl><type ref="prev"/><name PREFIX:line="792" PREFIX:column="40">addrh</name></decl>;</decl_stmt>

<cpp:ifdef PREFIX:line="794" PREFIX:column="1">#<cpp:directive PREFIX:line="794" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="794" PREFIX:column="8">CRUMB128</name></cpp:ifdef>
			<expr_stmt><expr><name PREFIX:line="795" PREFIX:column="25">welcome</name> = "ATmegaBOOT / Crumb128 - (C) J.P.Kyle, E.Lins - 050815\n\r"</expr>;</expr_stmt>
<cpp:elif PREFIX:line="796" PREFIX:column="1">#<cpp:directive PREFIX:line="796" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="796" PREFIX:column="7">defined</name> <name PREFIX:line="796" PREFIX:column="15">PROBOMEGA128</name></expr></cpp:elif>
			<expr_stmt><expr><name PREFIX:line="797" PREFIX:column="25">welcome</name> = "ATmegaBOOT / PROBOmega128 - (C) J.P.Kyle, E.Lins - 050815\n\r"</expr>;</expr_stmt>
<cpp:elif PREFIX:line="798" PREFIX:column="1">#<cpp:directive PREFIX:line="798" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="798" PREFIX:column="7">defined</name> <name PREFIX:line="798" PREFIX:column="15">SAVVY128</name></expr></cpp:elif>
			<expr_stmt><expr><name PREFIX:line="799" PREFIX:column="25">welcome</name> = "ATmegaBOOT / Savvy128 - (C) J.P.Kyle, E.Lins - 050815\n\r"</expr>;</expr_stmt>
<cpp:elif PREFIX:line="800" PREFIX:column="1">#<cpp:directive PREFIX:line="800" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="800" PREFIX:column="7">defined</name> <name PREFIX:line="800" PREFIX:column="15">__AVR_ATmega1280__</name></expr></cpp:elif> 
			<expr_stmt><expr><name PREFIX:line="801" PREFIX:column="25">welcome</name> = "ATmegaBOOT / Arduino Mega - (C) Arduino LLC - 090930\n\r"</expr>;</expr_stmt>
<cpp:endif PREFIX:line="802" PREFIX:column="1">#<cpp:directive PREFIX:line="802" PREFIX:column="2">endif</cpp:directive></cpp:endif>

			<comment type="block" PREFIX:line="804" PREFIX:column="25">/* turn on LED */</comment>
			<expr_stmt><expr><name PREFIX:line="805" PREFIX:column="25">LED_DDR</name> |= <call><name PREFIX:line="805" PREFIX:column="36">_BV</name><argument_list PREFIX:line="805" PREFIX:column="39">(<argument><expr><name PREFIX:line="805" PREFIX:column="40">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name PREFIX:line="806" PREFIX:column="25">LED_PORT</name> &amp;= ~<call><name PREFIX:line="806" PREFIX:column="38">_BV</name><argument_list PREFIX:line="806" PREFIX:column="41">(<argument><expr><name PREFIX:line="806" PREFIX:column="42">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block" PREFIX:line="808" PREFIX:column="25">/* print a welcome message and command overview */</comment>
			<for PREFIX:line="809" PREFIX:column="25">for(<init><expr><name PREFIX:line="809" PREFIX:column="29">i</name>=0</expr>;</init> <condition><expr><name><name PREFIX:line="809" PREFIX:column="34">welcome</name><index PREFIX:line="809" PREFIX:column="41">[<expr><name PREFIX:line="809" PREFIX:column="42">i</name></expr>]</index></name> != '\0'</expr>;</condition> <incr><expr PREFIX:line="809" PREFIX:column="54">++<name PREFIX:line="809" PREFIX:column="56">i</name></expr></incr>) <block PREFIX:line="809" PREFIX:column="59">{
				<expr_stmt><expr><call><name PREFIX:line="810" PREFIX:column="33">putch</name><argument_list PREFIX:line="810" PREFIX:column="38">(<argument><expr><name><name PREFIX:line="810" PREFIX:column="39">welcome</name><index PREFIX:line="810" PREFIX:column="46">[<expr><name PREFIX:line="810" PREFIX:column="47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>

			<comment type="block" PREFIX:line="813" PREFIX:column="25">/* test for valid commands */</comment>
			<for PREFIX:line="814" PREFIX:column="25">for(<init PREFIX:line="814" PREFIX:column="29">;</init><condition PREFIX:line="814" PREFIX:column="30">;</condition><incr/>) <block PREFIX:line="814" PREFIX:column="33">{
				<expr_stmt><expr><call><name PREFIX:line="815" PREFIX:column="33">putch</name><argument_list PREFIX:line="815" PREFIX:column="38">(<argument><expr PREFIX:line="815" PREFIX:column="39">'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="816" PREFIX:column="33">putch</name><argument_list PREFIX:line="816" PREFIX:column="38">(<argument><expr PREFIX:line="816" PREFIX:column="39">'\r'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="817" PREFIX:column="33">putch</name><argument_list PREFIX:line="817" PREFIX:column="38">(<argument><expr PREFIX:line="817" PREFIX:column="39">':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="818" PREFIX:column="33">putch</name><argument_list PREFIX:line="818" PREFIX:column="38">(<argument><expr PREFIX:line="818" PREFIX:column="39">' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name PREFIX:line="820" PREFIX:column="33">ch</name> = <call><name PREFIX:line="820" PREFIX:column="38">getch</name><argument_list PREFIX:line="820" PREFIX:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name PREFIX:line="821" PREFIX:column="33">putch</name><argument_list PREFIX:line="821" PREFIX:column="38">(<argument><expr><name PREFIX:line="821" PREFIX:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block" PREFIX:line="823" PREFIX:column="33">/* toggle LED */</comment>
				<if PREFIX:line="824" PREFIX:column="33">if<condition PREFIX:line="824" PREFIX:column="35">(<expr><name PREFIX:line="824" PREFIX:column="36">ch</name> == 't'</expr>)</condition><then PREFIX:line="824" PREFIX:column="46"> <block PREFIX:line="824" PREFIX:column="47">{
					<if PREFIX:line="825" PREFIX:column="41">if<condition PREFIX:line="825" PREFIX:column="43">(<expr><call><name PREFIX:line="825" PREFIX:column="44">bit_is_set</name><argument_list PREFIX:line="825" PREFIX:column="54">(<argument><expr><name PREFIX:line="825" PREFIX:column="55">LED_PIN</name></expr></argument>,<argument><expr><name PREFIX:line="825" PREFIX:column="63">LED</name></expr></argument>)</argument_list></call></expr>)</condition><then PREFIX:line="825" PREFIX:column="68"> <block PREFIX:line="825" PREFIX:column="69">{
						<expr_stmt><expr><name PREFIX:line="826" PREFIX:column="49">LED_PORT</name> &amp;= ~<call><name PREFIX:line="826" PREFIX:column="62">_BV</name><argument_list PREFIX:line="826" PREFIX:column="65">(<argument><expr><name PREFIX:line="826" PREFIX:column="66">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name PREFIX:line="827" PREFIX:column="49">putch</name><argument_list PREFIX:line="827" PREFIX:column="54">(<argument><expr PREFIX:line="827" PREFIX:column="55">'1'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else PREFIX:line="828" PREFIX:column="43">else <block PREFIX:line="828" PREFIX:column="48">{
						<expr_stmt><expr><name PREFIX:line="829" PREFIX:column="49">LED_PORT</name> |= <call><name PREFIX:line="829" PREFIX:column="61">_BV</name><argument_list PREFIX:line="829" PREFIX:column="64">(<argument><expr><name PREFIX:line="829" PREFIX:column="65">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name PREFIX:line="830" PREFIX:column="49">putch</name><argument_list PREFIX:line="830" PREFIX:column="54">(<argument><expr PREFIX:line="830" PREFIX:column="55">'0'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> 

				<comment type="block" PREFIX:line="834" PREFIX:column="33">/* read byte from address */</comment>
				<else PREFIX:line="835" PREFIX:column="33">else <if PREFIX:line="835" PREFIX:column="38">if<condition PREFIX:line="835" PREFIX:column="40">(<expr><name PREFIX:line="835" PREFIX:column="41">ch</name> == 'r'</expr>)</condition><then PREFIX:line="835" PREFIX:column="51"> <block PREFIX:line="835" PREFIX:column="52">{
					<expr_stmt><expr><name PREFIX:line="836" PREFIX:column="41">ch</name> = <call><name PREFIX:line="836" PREFIX:column="46">getch</name><argument_list PREFIX:line="836" PREFIX:column="51">()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name PREFIX:line="836" PREFIX:column="55">putch</name><argument_list PREFIX:line="836" PREFIX:column="60">(<argument><expr><name PREFIX:line="836" PREFIX:column="61">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="837" PREFIX:column="41">addrh</name> = <call><name PREFIX:line="837" PREFIX:column="49">gethex</name><argument_list PREFIX:line="837" PREFIX:column="55">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="838" PREFIX:column="41">addrl</name> = <call><name PREFIX:line="838" PREFIX:column="49">gethex</name><argument_list PREFIX:line="838" PREFIX:column="55">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name PREFIX:line="839" PREFIX:column="41">putch</name><argument_list PREFIX:line="839" PREFIX:column="46">(<argument><expr PREFIX:line="839" PREFIX:column="47">'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="840" PREFIX:column="41">ch</name> = *<call PREFIX:line="840" PREFIX:column="47">(<name PREFIX:line="840" PREFIX:column="48">uint8_t</name> *)<argument_list PREFIX:line="840" PREFIX:column="58">(<argument><expr PREFIX:line="840" PREFIX:column="59">(<name PREFIX:line="840" PREFIX:column="60">addrh</name> &lt;&lt; 8) + <name PREFIX:line="840" PREFIX:column="74">addrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name PREFIX:line="841" PREFIX:column="41">puthex</name><argument_list PREFIX:line="841" PREFIX:column="47">(<argument><expr><name PREFIX:line="841" PREFIX:column="48">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>

				<comment type="block" PREFIX:line="844" PREFIX:column="33">/* write a byte to address  */</comment>
				<else PREFIX:line="845" PREFIX:column="33">else <if PREFIX:line="845" PREFIX:column="38">if<condition PREFIX:line="845" PREFIX:column="40">(<expr><name PREFIX:line="845" PREFIX:column="41">ch</name> == 'w'</expr>)</condition><then PREFIX:line="845" PREFIX:column="51"> <block PREFIX:line="845" PREFIX:column="52">{
					<expr_stmt><expr><name PREFIX:line="846" PREFIX:column="41">ch</name> = <call><name PREFIX:line="846" PREFIX:column="46">getch</name><argument_list PREFIX:line="846" PREFIX:column="51">()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name PREFIX:line="846" PREFIX:column="55">putch</name><argument_list PREFIX:line="846" PREFIX:column="60">(<argument><expr><name PREFIX:line="846" PREFIX:column="61">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="847" PREFIX:column="41">addrh</name> = <call><name PREFIX:line="847" PREFIX:column="49">gethex</name><argument_list PREFIX:line="847" PREFIX:column="55">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="848" PREFIX:column="41">addrl</name> = <call><name PREFIX:line="848" PREFIX:column="49">gethex</name><argument_list PREFIX:line="848" PREFIX:column="55">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="849" PREFIX:column="41">ch</name> = <call><name PREFIX:line="849" PREFIX:column="46">getch</name><argument_list PREFIX:line="849" PREFIX:column="51">()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name PREFIX:line="849" PREFIX:column="55">putch</name><argument_list PREFIX:line="849" PREFIX:column="60">(<argument><expr><name PREFIX:line="849" PREFIX:column="61">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="850" PREFIX:column="41">ch</name> = <call><name PREFIX:line="850" PREFIX:column="46">gethex</name><argument_list PREFIX:line="850" PREFIX:column="52">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr PREFIX:line="851" PREFIX:column="41">*<call PREFIX:line="851" PREFIX:column="42">(<name PREFIX:line="851" PREFIX:column="43">uint8_t</name> *)<argument_list PREFIX:line="851" PREFIX:column="53">(<argument><expr PREFIX:line="851" PREFIX:column="54">(<name PREFIX:line="851" PREFIX:column="55">addrh</name> &lt;&lt; 8) + <name PREFIX:line="851" PREFIX:column="69">addrl</name></expr></argument>)</argument_list></call> = <name PREFIX:line="851" PREFIX:column="78">ch</name></expr>;</expr_stmt>
				}</block></then>

				<comment type="block" PREFIX:line="854" PREFIX:column="33">/* read from uart and echo back */</comment>
				<else PREFIX:line="855" PREFIX:column="33">else <if PREFIX:line="855" PREFIX:column="38">if<condition PREFIX:line="855" PREFIX:column="40">(<expr><name PREFIX:line="855" PREFIX:column="41">ch</name> == 'u'</expr>)</condition><then PREFIX:line="855" PREFIX:column="51"> <block PREFIX:line="855" PREFIX:column="52">{
					<for PREFIX:line="856" PREFIX:column="41">for(<init PREFIX:line="856" PREFIX:column="45">;</init><condition PREFIX:line="856" PREFIX:column="46">;</condition><incr/>) <block PREFIX:line="856" PREFIX:column="49">{
						<expr_stmt><expr><call><name PREFIX:line="857" PREFIX:column="49">putch</name><argument_list PREFIX:line="857" PREFIX:column="54">(<argument><expr><call><name PREFIX:line="857" PREFIX:column="55">getch</name><argument_list PREFIX:line="857" PREFIX:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
				}</block></then>
<cpp:if PREFIX:line="860" PREFIX:column="1">#<cpp:directive PREFIX:line="860" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="860" PREFIX:column="5">defined</name><argument_list PREFIX:line="860" PREFIX:column="12">(<argument><expr><name PREFIX:line="860" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="860" PREFIX:column="35">defined</name><argument_list PREFIX:line="860" PREFIX:column="42">(<argument><expr><name PREFIX:line="860" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call></expr></cpp:if>
				<comment type="block" PREFIX:line="861" PREFIX:column="33">/* al bus loop  */</comment>
				<else PREFIX:line="862" PREFIX:column="33">else <if PREFIX:line="862" PREFIX:column="38">if<condition PREFIX:line="862" PREFIX:column="40">(<expr><name PREFIX:line="862" PREFIX:column="41">ch</name> == 'b'</expr>)</condition><then PREFIX:line="862" PREFIX:column="51"> <block PREFIX:line="862" PREFIX:column="52">{
					<expr_stmt><expr><call><name PREFIX:line="863" PREFIX:column="41">putch</name><argument_list PREFIX:line="863" PREFIX:column="46">(<argument><expr PREFIX:line="863" PREFIX:column="47">'b'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name PREFIX:line="864" PREFIX:column="41">putch</name><argument_list PREFIX:line="864" PREFIX:column="46">(<argument><expr PREFIX:line="864" PREFIX:column="47">'u'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name PREFIX:line="865" PREFIX:column="41">putch</name><argument_list PREFIX:line="865" PREFIX:column="46">(<argument><expr PREFIX:line="865" PREFIX:column="47">'s'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="866" PREFIX:column="41">MCUCR</name> = 0x80</expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="867" PREFIX:column="41">XMCRA</name> = 0</expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="868" PREFIX:column="41">XMCRB</name> = 0</expr>;</expr_stmt>
					<expr_stmt><expr><name PREFIX:line="869" PREFIX:column="41">extaddr</name> = 0x1100</expr>;</expr_stmt>
					<for PREFIX:line="870" PREFIX:column="41">for(<init PREFIX:line="870" PREFIX:column="45">;</init><condition PREFIX:line="870" PREFIX:column="46">;</condition><incr/>) <block PREFIX:line="870" PREFIX:column="49">{
						<expr_stmt><expr><name PREFIX:line="871" PREFIX:column="49">ch</name> = *(volatile <name PREFIX:line="871" PREFIX:column="65">uint8_t</name> *)<name PREFIX:line="871" PREFIX:column="75">extaddr</name></expr>;</expr_stmt>
						<if PREFIX:line="872" PREFIX:column="49">if<condition PREFIX:line="872" PREFIX:column="51">(<expr PREFIX:line="872" PREFIX:column="52">++<name PREFIX:line="872" PREFIX:column="54">extaddr</name> == 0</expr>)</condition><then PREFIX:line="872" PREFIX:column="67"> <block PREFIX:line="872" PREFIX:column="68">{
							<expr_stmt><expr><name PREFIX:line="873" PREFIX:column="57">extaddr</name> = 0x1100</expr>;</expr_stmt>
						}</block></then></if>
					}</block></for>
				}</block></then>
<cpp:endif PREFIX:line="877" PREFIX:column="1">#<cpp:directive PREFIX:line="877" PREFIX:column="2">endif</cpp:directive></cpp:endif>

				<else PREFIX:line="879" PREFIX:column="33">else <if PREFIX:line="879" PREFIX:column="38">if<condition PREFIX:line="879" PREFIX:column="40">(<expr><name PREFIX:line="879" PREFIX:column="41">ch</name> == 'j'</expr>)</condition><then PREFIX:line="879" PREFIX:column="51"> <block PREFIX:line="879" PREFIX:column="52">{
					<expr_stmt><expr><call><name PREFIX:line="880" PREFIX:column="41">app_start</name><argument_list PREFIX:line="880" PREFIX:column="50">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if>

			}</block></for> <comment type="block" PREFIX:line="883" PREFIX:column="27">/* end of monitor functions */</comment>

		}</block></then></if>
		}</block></then></if>
	}</block></then>
	<comment type="block" PREFIX:line="888" PREFIX:column="9">/* end of monitor */</comment>
<cpp:endif PREFIX:line="889" PREFIX:column="1">#<cpp:directive PREFIX:line="889" PREFIX:column="2">endif</cpp:directive></cpp:endif>
	<else PREFIX:line="890" PREFIX:column="9">else <if PREFIX:line="890" PREFIX:column="14">if <condition PREFIX:line="890" PREFIX:column="17">(<expr PREFIX:line="890" PREFIX:column="18">++<name PREFIX:line="890" PREFIX:column="20">error_count</name> == <name PREFIX:line="890" PREFIX:column="35">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="890" PREFIX:column="51"> <block PREFIX:line="890" PREFIX:column="52">{
		<expr_stmt><expr><call><name PREFIX:line="891" PREFIX:column="17">app_start</name><argument_list PREFIX:line="891" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
	}</block></for> <comment type="block" PREFIX:line="893" PREFIX:column="11">/* end of forever loop */</comment>

}</block></function>


<function><type><name PREFIX:line="898" PREFIX:column="1">char</name></type> <name PREFIX:line="898" PREFIX:column="6">gethexnib</name><parameter_list PREFIX:line="898" PREFIX:column="15">(<param><decl><type><name PREFIX:line="898" PREFIX:column="16">void</name></type></decl></param>)</parameter_list> <block PREFIX:line="898" PREFIX:column="22">{
	<decl_stmt><decl><type><name PREFIX:line="899" PREFIX:column="9">char</name></type> <name PREFIX:line="899" PREFIX:column="14">a</name></decl>;</decl_stmt>
	<expr_stmt><expr><name PREFIX:line="900" PREFIX:column="9">a</name> = <call><name PREFIX:line="900" PREFIX:column="13">getch</name><argument_list PREFIX:line="900" PREFIX:column="18">()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name PREFIX:line="900" PREFIX:column="22">putch</name><argument_list PREFIX:line="900" PREFIX:column="27">(<argument><expr><name PREFIX:line="900" PREFIX:column="28">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if PREFIX:line="901" PREFIX:column="9">if<condition PREFIX:line="901" PREFIX:column="11">(<expr><name PREFIX:line="901" PREFIX:column="12">a</name> &gt;= 'a'</expr>)</condition><then PREFIX:line="901" PREFIX:column="21"> <block PREFIX:line="901" PREFIX:column="22">{
		<return PREFIX:line="902" PREFIX:column="17">return <expr PREFIX:line="902" PREFIX:column="24">(<name PREFIX:line="902" PREFIX:column="25">a</name> - 'a' + 0x0a)</expr>;</return>
	}</block></then> <else PREFIX:line="903" PREFIX:column="11">else <if PREFIX:line="903" PREFIX:column="16">if<condition PREFIX:line="903" PREFIX:column="18">(<expr><name PREFIX:line="903" PREFIX:column="19">a</name> &gt;= '0'</expr>)</condition><then PREFIX:line="903" PREFIX:column="28"> <block PREFIX:line="903" PREFIX:column="29">{
		<return PREFIX:line="904" PREFIX:column="17">return<expr PREFIX:line="904" PREFIX:column="23">(<name PREFIX:line="904" PREFIX:column="24">a</name> - '0')</expr>;</return>
	}</block></then></if></else></if>
	<return PREFIX:line="906" PREFIX:column="9">return <expr><name PREFIX:line="906" PREFIX:column="16">a</name></expr>;</return>
}</block></function>


<function><type><name PREFIX:line="910" PREFIX:column="1">char</name></type> <name PREFIX:line="910" PREFIX:column="6">gethex</name><parameter_list PREFIX:line="910" PREFIX:column="12">(<param><decl><type><name PREFIX:line="910" PREFIX:column="13">void</name></type></decl></param>)</parameter_list> <block PREFIX:line="910" PREFIX:column="19">{
	<return PREFIX:line="911" PREFIX:column="9">return <expr PREFIX:line="911" PREFIX:column="16">(<call><name PREFIX:line="911" PREFIX:column="17">gethexnib</name><argument_list PREFIX:line="911" PREFIX:column="26">()</argument_list></call> &lt;&lt; 4) + <call><name PREFIX:line="911" PREFIX:column="37">gethexnib</name><argument_list PREFIX:line="911" PREFIX:column="46">()</argument_list></call></expr>;</return>
}</block></function>


<function><type><name PREFIX:line="915" PREFIX:column="1">void</name></type> <name PREFIX:line="915" PREFIX:column="6">puthex</name><parameter_list PREFIX:line="915" PREFIX:column="12">(<param><decl><type><name PREFIX:line="915" PREFIX:column="13">char</name></type> <name PREFIX:line="915" PREFIX:column="18">ch</name></decl></param>)</parameter_list> <block PREFIX:line="915" PREFIX:column="22">{
	<decl_stmt><decl><type><name PREFIX:line="916" PREFIX:column="9">char</name></type> <name PREFIX:line="916" PREFIX:column="14">ah</name></decl>;</decl_stmt>

	<expr_stmt><expr><name PREFIX:line="918" PREFIX:column="9">ah</name> = <name PREFIX:line="918" PREFIX:column="14">ch</name> &gt;&gt; 4</expr>;</expr_stmt>
	<if PREFIX:line="919" PREFIX:column="9">if<condition PREFIX:line="919" PREFIX:column="11">(<expr><name PREFIX:line="919" PREFIX:column="12">ah</name> &gt;= 0x0a</expr>)</condition><then PREFIX:line="919" PREFIX:column="23"> <block PREFIX:line="919" PREFIX:column="24">{
		<expr_stmt><expr><name PREFIX:line="920" PREFIX:column="17">ah</name> = <name PREFIX:line="920" PREFIX:column="22">ah</name> - 0x0a + 'a'</expr>;</expr_stmt>
	}</block></then> <else PREFIX:line="921" PREFIX:column="11">else <block PREFIX:line="921" PREFIX:column="16">{
		<expr_stmt><expr><name PREFIX:line="922" PREFIX:column="17">ah</name> += '0'</expr>;</expr_stmt>
	}</block></else></if>
	
	<expr_stmt><expr><name PREFIX:line="925" PREFIX:column="9">ch</name> &amp;= 0x0f</expr>;</expr_stmt>
	<if PREFIX:line="926" PREFIX:column="9">if<condition PREFIX:line="926" PREFIX:column="11">(<expr><name PREFIX:line="926" PREFIX:column="12">ch</name> &gt;= 0x0a</expr>)</condition><then PREFIX:line="926" PREFIX:column="23"> <block PREFIX:line="926" PREFIX:column="24">{
		<expr_stmt><expr><name PREFIX:line="927" PREFIX:column="17">ch</name> = <name PREFIX:line="927" PREFIX:column="22">ch</name> - 0x0a + 'a'</expr>;</expr_stmt>
	}</block></then> <else PREFIX:line="928" PREFIX:column="11">else <block PREFIX:line="928" PREFIX:column="16">{
		<expr_stmt><expr><name PREFIX:line="929" PREFIX:column="17">ch</name> += '0'</expr>;</expr_stmt>
	}</block></else></if>
	
	<expr_stmt><expr><call><name PREFIX:line="932" PREFIX:column="9">putch</name><argument_list PREFIX:line="932" PREFIX:column="14">(<argument><expr><name PREFIX:line="932" PREFIX:column="15">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="933" PREFIX:column="9">putch</name><argument_list PREFIX:line="933" PREFIX:column="14">(<argument><expr><name PREFIX:line="933" PREFIX:column="15">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name PREFIX:line="937" PREFIX:column="1">void</name></type> <name PREFIX:line="937" PREFIX:column="6">putch</name><parameter_list PREFIX:line="937" PREFIX:column="11">(<param><decl><type><name PREFIX:line="937" PREFIX:column="12">char</name></type> <name PREFIX:line="937" PREFIX:column="17">ch</name></decl></param>)</parameter_list>
<block PREFIX:line="938" PREFIX:column="1">{
<cpp:if PREFIX:line="939" PREFIX:column="1">#<cpp:directive PREFIX:line="939" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="939" PREFIX:column="5">defined</name><argument_list PREFIX:line="939" PREFIX:column="12">(<argument><expr><name PREFIX:line="939" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="939" PREFIX:column="35">defined</name><argument_list PREFIX:line="939" PREFIX:column="42">(<argument><expr><name PREFIX:line="939" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="939" PREFIX:column="66">defined</name><argument_list PREFIX:line="939" PREFIX:column="73">(<argument><expr><name PREFIX:line="939" PREFIX:column="74">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="939" PREFIX:column="98">defined</name><argument_list PREFIX:line="939" PREFIX:column="105">(<argument><expr><name PREFIX:line="939" PREFIX:column="106">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if PREFIX:line="940" PREFIX:column="9">if<condition PREFIX:line="940" PREFIX:column="11">(<expr><name PREFIX:line="940" PREFIX:column="12">bootuart</name> == 1</expr>)</condition><then PREFIX:line="940" PREFIX:column="26"> <block PREFIX:line="940" PREFIX:column="27">{
		<while PREFIX:line="941" PREFIX:column="17">while <condition PREFIX:line="941" PREFIX:column="23">(<expr PREFIX:line="941" PREFIX:column="24">!(<name PREFIX:line="941" PREFIX:column="26">UCSR0A</name> &amp; <call><name PREFIX:line="941" PREFIX:column="35">_BV</name><argument_list PREFIX:line="941" PREFIX:column="38">(<argument><expr><name PREFIX:line="941" PREFIX:column="39">UDRE0</name></expr></argument>)</argument_list></call>)</expr>)</condition><empty_stmt PREFIX:line="941" PREFIX:column="47">;</empty_stmt></while>
		<expr_stmt><expr><name PREFIX:line="942" PREFIX:column="17">UDR0</name> = <name PREFIX:line="942" PREFIX:column="24">ch</name></expr>;</expr_stmt>
	}</block></then>
	<else PREFIX:line="944" PREFIX:column="9">else <if PREFIX:line="944" PREFIX:column="14">if <condition PREFIX:line="944" PREFIX:column="17">(<expr><name PREFIX:line="944" PREFIX:column="18">bootuart</name> == 2</expr>)</condition><then PREFIX:line="944" PREFIX:column="32"> <block PREFIX:line="944" PREFIX:column="33">{
		<while PREFIX:line="945" PREFIX:column="17">while <condition PREFIX:line="945" PREFIX:column="23">(<expr PREFIX:line="945" PREFIX:column="24">!(<name PREFIX:line="945" PREFIX:column="26">UCSR1A</name> &amp; <call><name PREFIX:line="945" PREFIX:column="35">_BV</name><argument_list PREFIX:line="945" PREFIX:column="38">(<argument><expr><name PREFIX:line="945" PREFIX:column="39">UDRE1</name></expr></argument>)</argument_list></call>)</expr>)</condition><empty_stmt PREFIX:line="945" PREFIX:column="47">;</empty_stmt></while>
		<expr_stmt><expr><name PREFIX:line="946" PREFIX:column="17">UDR1</name> = <name PREFIX:line="946" PREFIX:column="24">ch</name></expr>;</expr_stmt>
	}</block></then></if></else></if>
<cpp:elif PREFIX:line="948" PREFIX:column="1">#<cpp:directive PREFIX:line="948" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="948" PREFIX:column="7">defined</name><argument_list PREFIX:line="948" PREFIX:column="14">(<argument><expr><name PREFIX:line="948" PREFIX:column="15">__AVR_ATmega168__</name></expr></argument>)</argument_list></call>  || <call><name PREFIX:line="948" PREFIX:column="38">defined</name><argument_list PREFIX:line="948" PREFIX:column="45">(<argument><expr><name PREFIX:line="948" PREFIX:column="46">__AVR_ATmega328P__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while PREFIX:line="949" PREFIX:column="9">while <condition PREFIX:line="949" PREFIX:column="15">(<expr PREFIX:line="949" PREFIX:column="16">!(<name PREFIX:line="949" PREFIX:column="18">UCSR0A</name> &amp; <call><name PREFIX:line="949" PREFIX:column="27">_BV</name><argument_list PREFIX:line="949" PREFIX:column="30">(<argument><expr><name PREFIX:line="949" PREFIX:column="31">UDRE0</name></expr></argument>)</argument_list></call>)</expr>)</condition><empty_stmt PREFIX:line="949" PREFIX:column="39">;</empty_stmt></while>
	<expr_stmt><expr><name PREFIX:line="950" PREFIX:column="9">UDR0</name> = <name PREFIX:line="950" PREFIX:column="16">ch</name></expr>;</expr_stmt>
<cpp:else PREFIX:line="951" PREFIX:column="1">#<cpp:directive PREFIX:line="951" PREFIX:column="2">else</cpp:directive></cpp:else>
	<comment type="block" PREFIX:line="952" PREFIX:column="9">/* m8,16,32,169,8515,8535,163 */</comment>
	<while PREFIX:line="953" PREFIX:column="9">while <condition PREFIX:line="953" PREFIX:column="15">(<expr PREFIX:line="953" PREFIX:column="16">!(<name PREFIX:line="953" PREFIX:column="18">UCSRA</name> &amp; <call><name PREFIX:line="953" PREFIX:column="26">_BV</name><argument_list PREFIX:line="953" PREFIX:column="29">(<argument><expr><name PREFIX:line="953" PREFIX:column="30">UDRE</name></expr></argument>)</argument_list></call>)</expr>)</condition><empty_stmt PREFIX:line="953" PREFIX:column="37">;</empty_stmt></while>
	<expr_stmt><expr><name PREFIX:line="954" PREFIX:column="9">UDR</name> = <name PREFIX:line="954" PREFIX:column="15">ch</name></expr>;</expr_stmt>
<cpp:endif PREFIX:line="955" PREFIX:column="1">#<cpp:directive PREFIX:line="955" PREFIX:column="2">endif</cpp:directive></cpp:endif>
}</block></function>


<function><type><name PREFIX:line="959" PREFIX:column="1">char</name></type> <name PREFIX:line="959" PREFIX:column="6">getch</name><parameter_list PREFIX:line="959" PREFIX:column="11">(<param><decl><type><name PREFIX:line="959" PREFIX:column="12">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="960" PREFIX:column="1">{
<cpp:if PREFIX:line="961" PREFIX:column="1">#<cpp:directive PREFIX:line="961" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="961" PREFIX:column="5">defined</name><argument_list PREFIX:line="961" PREFIX:column="12">(<argument><expr><name PREFIX:line="961" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="961" PREFIX:column="35">defined</name><argument_list PREFIX:line="961" PREFIX:column="42">(<argument><expr><name PREFIX:line="961" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="961" PREFIX:column="66">defined</name><argument_list PREFIX:line="961" PREFIX:column="73">(<argument><expr><name PREFIX:line="961" PREFIX:column="74">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="961" PREFIX:column="98">defined</name><argument_list PREFIX:line="961" PREFIX:column="105">(<argument><expr><name PREFIX:line="961" PREFIX:column="106">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name PREFIX:line="962" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="962" PREFIX:column="18">count</name> <init PREFIX:line="962" PREFIX:column="24">= <expr PREFIX:line="962" PREFIX:column="26">0</expr></init></decl>;</decl_stmt>
	<if PREFIX:line="963" PREFIX:column="9">if<condition PREFIX:line="963" PREFIX:column="11">(<expr><name PREFIX:line="963" PREFIX:column="12">bootuart</name> == 1</expr>)</condition><then PREFIX:line="963" PREFIX:column="26"> <block PREFIX:line="963" PREFIX:column="27">{
		<while PREFIX:line="964" PREFIX:column="17">while<condition PREFIX:line="964" PREFIX:column="22">(<expr PREFIX:line="964" PREFIX:column="23">!(<name PREFIX:line="964" PREFIX:column="25">UCSR0A</name> &amp; <call><name PREFIX:line="964" PREFIX:column="34">_BV</name><argument_list PREFIX:line="964" PREFIX:column="37">(<argument><expr><name PREFIX:line="964" PREFIX:column="38">RXC0</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block PREFIX:line="964" PREFIX:column="46">{
			<comment type="block" PREFIX:line="965" PREFIX:column="25">/* 20060803 DojoCorp:: Addon coming from the previous Bootloader*/</comment>               
			<comment type="block" PREFIX:line="966" PREFIX:column="25">/* HACKME:: here is a good place to count times*/</comment>
			<expr_stmt><expr><name PREFIX:line="967" PREFIX:column="25">count</name>++</expr>;</expr_stmt>
			<if PREFIX:line="968" PREFIX:column="25">if <condition PREFIX:line="968" PREFIX:column="28">(<expr><name PREFIX:line="968" PREFIX:column="29">count</name> &gt; <name PREFIX:line="968" PREFIX:column="37">MAX_TIME_COUNT</name></expr>)</condition><then PREFIX:line="968" PREFIX:column="52">
				<expr_stmt><expr><call><name PREFIX:line="969" PREFIX:column="33">app_start</name><argument_list PREFIX:line="969" PREFIX:column="42">()</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></while>

			<return PREFIX:line="972" PREFIX:column="25">return <expr><name PREFIX:line="972" PREFIX:column="32">UDR0</name></expr>;</return>
		}</block></then>
	<else PREFIX:line="974" PREFIX:column="9">else <if PREFIX:line="974" PREFIX:column="14">if<condition PREFIX:line="974" PREFIX:column="16">(<expr><name PREFIX:line="974" PREFIX:column="17">bootuart</name> == 2</expr>)</condition><then PREFIX:line="974" PREFIX:column="31"> <block PREFIX:line="974" PREFIX:column="32">{
		<while PREFIX:line="975" PREFIX:column="17">while<condition PREFIX:line="975" PREFIX:column="22">(<expr PREFIX:line="975" PREFIX:column="23">!(<name PREFIX:line="975" PREFIX:column="25">UCSR1A</name> &amp; <call><name PREFIX:line="975" PREFIX:column="34">_BV</name><argument_list PREFIX:line="975" PREFIX:column="37">(<argument><expr><name PREFIX:line="975" PREFIX:column="38">RXC1</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block PREFIX:line="975" PREFIX:column="46">{
			<comment type="block" PREFIX:line="976" PREFIX:column="25">/* 20060803 DojoCorp:: Addon coming from the previous Bootloader*/</comment>               
			<comment type="block" PREFIX:line="977" PREFIX:column="25">/* HACKME:: here is a good place to count times*/</comment>
			<expr_stmt><expr><name PREFIX:line="978" PREFIX:column="25">count</name>++</expr>;</expr_stmt>
			<if PREFIX:line="979" PREFIX:column="25">if <condition PREFIX:line="979" PREFIX:column="28">(<expr><name PREFIX:line="979" PREFIX:column="29">count</name> &gt; <name PREFIX:line="979" PREFIX:column="37">MAX_TIME_COUNT</name></expr>)</condition><then PREFIX:line="979" PREFIX:column="52">
				<expr_stmt><expr><call><name PREFIX:line="980" PREFIX:column="33">app_start</name><argument_list PREFIX:line="980" PREFIX:column="42">()</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></while>

		<return PREFIX:line="983" PREFIX:column="17">return <expr><name PREFIX:line="983" PREFIX:column="24">UDR1</name></expr>;</return>
	}</block></then></if></else></if>
	<return PREFIX:line="985" PREFIX:column="9">return <expr PREFIX:line="985" PREFIX:column="16">0</expr>;</return>
<cpp:elif PREFIX:line="986" PREFIX:column="1">#<cpp:directive PREFIX:line="986" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="986" PREFIX:column="7">defined</name><argument_list PREFIX:line="986" PREFIX:column="14">(<argument><expr><name PREFIX:line="986" PREFIX:column="15">__AVR_ATmega168__</name></expr></argument>)</argument_list></call>  || <call><name PREFIX:line="986" PREFIX:column="38">defined</name><argument_list PREFIX:line="986" PREFIX:column="45">(<argument><expr><name PREFIX:line="986" PREFIX:column="46">__AVR_ATmega328P__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name PREFIX:line="987" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="987" PREFIX:column="18">count</name> <init PREFIX:line="987" PREFIX:column="24">= <expr PREFIX:line="987" PREFIX:column="26">0</expr></init></decl>;</decl_stmt>
	<while PREFIX:line="988" PREFIX:column="9">while<condition PREFIX:line="988" PREFIX:column="14">(<expr PREFIX:line="988" PREFIX:column="15">!(<name PREFIX:line="988" PREFIX:column="17">UCSR0A</name> &amp; <call><name PREFIX:line="988" PREFIX:column="26">_BV</name><argument_list PREFIX:line="988" PREFIX:column="29">(<argument><expr><name PREFIX:line="988" PREFIX:column="30">RXC0</name></expr></argument>)</argument_list></call>)</expr>)</condition><block PREFIX:line="988" PREFIX:column="37">{
		<comment type="block" PREFIX:line="989" PREFIX:column="17">/* 20060803 DojoCorp:: Addon coming from the previous Bootloader*/</comment>               
		<comment type="block" PREFIX:line="990" PREFIX:column="17">/* HACKME:: here is a good place to count times*/</comment>
		<expr_stmt><expr><name PREFIX:line="991" PREFIX:column="17">count</name>++</expr>;</expr_stmt>
		<if PREFIX:line="992" PREFIX:column="17">if <condition PREFIX:line="992" PREFIX:column="20">(<expr><name PREFIX:line="992" PREFIX:column="21">count</name> &gt; <name PREFIX:line="992" PREFIX:column="29">MAX_TIME_COUNT</name></expr>)</condition><then PREFIX:line="992" PREFIX:column="44">
			<expr_stmt><expr><call><name PREFIX:line="993" PREFIX:column="25">app_start</name><argument_list PREFIX:line="993" PREFIX:column="34">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></while>
	<return PREFIX:line="995" PREFIX:column="9">return <expr><name PREFIX:line="995" PREFIX:column="16">UDR0</name></expr>;</return>
<cpp:else PREFIX:line="996" PREFIX:column="1">#<cpp:directive PREFIX:line="996" PREFIX:column="2">else</cpp:directive></cpp:else>
	<comment type="block" PREFIX:line="997" PREFIX:column="9">/* m8,16,32,169,8515,8535,163 */</comment>
	<decl_stmt><decl><type><name PREFIX:line="998" PREFIX:column="9">uint32_t</name></type> <name PREFIX:line="998" PREFIX:column="18">count</name> <init PREFIX:line="998" PREFIX:column="24">= <expr PREFIX:line="998" PREFIX:column="26">0</expr></init></decl>;</decl_stmt>
	<while PREFIX:line="999" PREFIX:column="9">while<condition PREFIX:line="999" PREFIX:column="14">(<expr PREFIX:line="999" PREFIX:column="15">!(<name PREFIX:line="999" PREFIX:column="17">UCSRA</name> &amp; <call><name PREFIX:line="999" PREFIX:column="25">_BV</name><argument_list PREFIX:line="999" PREFIX:column="28">(<argument><expr><name PREFIX:line="999" PREFIX:column="29">RXC</name></expr></argument>)</argument_list></call>)</expr>)</condition><block PREFIX:line="999" PREFIX:column="35">{
		<comment type="block" PREFIX:line="1000" PREFIX:column="17">/* 20060803 DojoCorp:: Addon coming from the previous Bootloader*/</comment>               
		<comment type="block" PREFIX:line="1001" PREFIX:column="17">/* HACKME:: here is a good place to count times*/</comment>
		<expr_stmt><expr><name PREFIX:line="1002" PREFIX:column="17">count</name>++</expr>;</expr_stmt>
		<if PREFIX:line="1003" PREFIX:column="17">if <condition PREFIX:line="1003" PREFIX:column="20">(<expr><name PREFIX:line="1003" PREFIX:column="21">count</name> &gt; <name PREFIX:line="1003" PREFIX:column="29">MAX_TIME_COUNT</name></expr>)</condition><then PREFIX:line="1003" PREFIX:column="44">
			<expr_stmt><expr><call><name PREFIX:line="1004" PREFIX:column="25">app_start</name><argument_list PREFIX:line="1004" PREFIX:column="34">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></while>
	<return PREFIX:line="1006" PREFIX:column="9">return <expr><name PREFIX:line="1006" PREFIX:column="16">UDR</name></expr>;</return>
<cpp:endif PREFIX:line="1007" PREFIX:column="1">#<cpp:directive PREFIX:line="1007" PREFIX:column="2">endif</cpp:directive></cpp:endif>
}</block></function>


<function><type><name PREFIX:line="1011" PREFIX:column="1">void</name></type> <name PREFIX:line="1011" PREFIX:column="6">getNch</name><parameter_list PREFIX:line="1011" PREFIX:column="12">(<param><decl><type><name PREFIX:line="1011" PREFIX:column="13">uint8_t</name></type> <name PREFIX:line="1011" PREFIX:column="21">count</name></decl></param>)</parameter_list>
<block PREFIX:line="1012" PREFIX:column="1">{
	<while PREFIX:line="1013" PREFIX:column="9">while<condition PREFIX:line="1013" PREFIX:column="14">(<expr><name PREFIX:line="1013" PREFIX:column="15">count</name>--</expr>)</condition> <block PREFIX:line="1013" PREFIX:column="24">{
<cpp:if PREFIX:line="1014" PREFIX:column="1">#<cpp:directive PREFIX:line="1014" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="1014" PREFIX:column="5">defined</name><argument_list PREFIX:line="1014" PREFIX:column="12">(<argument><expr><name PREFIX:line="1014" PREFIX:column="13">__AVR_ATmega128__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="1014" PREFIX:column="35">defined</name><argument_list PREFIX:line="1014" PREFIX:column="42">(<argument><expr><name PREFIX:line="1014" PREFIX:column="43">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="1014" PREFIX:column="66">defined</name><argument_list PREFIX:line="1014" PREFIX:column="73">(<argument><expr><name PREFIX:line="1014" PREFIX:column="74">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="1014" PREFIX:column="98">defined</name><argument_list PREFIX:line="1014" PREFIX:column="105">(<argument><expr><name PREFIX:line="1014" PREFIX:column="106">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if PREFIX:line="1015" PREFIX:column="17">if<condition PREFIX:line="1015" PREFIX:column="19">(<expr><name PREFIX:line="1015" PREFIX:column="20">bootuart</name> == 1</expr>)</condition><then PREFIX:line="1015" PREFIX:column="34"> <block PREFIX:line="1015" PREFIX:column="35">{
			<while PREFIX:line="1016" PREFIX:column="25">while<condition PREFIX:line="1016" PREFIX:column="30">(<expr PREFIX:line="1016" PREFIX:column="31">!(<name PREFIX:line="1016" PREFIX:column="33">UCSR0A</name> &amp; <call><name PREFIX:line="1016" PREFIX:column="42">_BV</name><argument_list PREFIX:line="1016" PREFIX:column="45">(<argument><expr><name PREFIX:line="1016" PREFIX:column="46">RXC0</name></expr></argument>)</argument_list></call>)</expr>)</condition><empty_stmt PREFIX:line="1016" PREFIX:column="53">;</empty_stmt></while>
			<expr_stmt><expr><name PREFIX:line="1017" PREFIX:column="25">UDR0</name></expr>;</expr_stmt>
		}</block></then> 
		<else PREFIX:line="1019" PREFIX:column="17">else <if PREFIX:line="1019" PREFIX:column="22">if<condition PREFIX:line="1019" PREFIX:column="24">(<expr><name PREFIX:line="1019" PREFIX:column="25">bootuart</name> == 2</expr>)</condition><then PREFIX:line="1019" PREFIX:column="39"> <block PREFIX:line="1019" PREFIX:column="40">{
			<while PREFIX:line="1020" PREFIX:column="25">while<condition PREFIX:line="1020" PREFIX:column="30">(<expr PREFIX:line="1020" PREFIX:column="31">!(<name PREFIX:line="1020" PREFIX:column="33">UCSR1A</name> &amp; <call><name PREFIX:line="1020" PREFIX:column="42">_BV</name><argument_list PREFIX:line="1020" PREFIX:column="45">(<argument><expr><name PREFIX:line="1020" PREFIX:column="46">RXC1</name></expr></argument>)</argument_list></call>)</expr>)</condition><empty_stmt PREFIX:line="1020" PREFIX:column="53">;</empty_stmt></while>
			<expr_stmt><expr><name PREFIX:line="1021" PREFIX:column="25">UDR1</name></expr>;</expr_stmt>
		}</block></then></if></else></if>
<cpp:elif PREFIX:line="1023" PREFIX:column="1">#<cpp:directive PREFIX:line="1023" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="1023" PREFIX:column="7">defined</name><argument_list PREFIX:line="1023" PREFIX:column="14">(<argument><expr><name PREFIX:line="1023" PREFIX:column="15">__AVR_ATmega168__</name></expr></argument>)</argument_list></call>  || <call><name PREFIX:line="1023" PREFIX:column="38">defined</name><argument_list PREFIX:line="1023" PREFIX:column="45">(<argument><expr><name PREFIX:line="1023" PREFIX:column="46">__AVR_ATmega328P__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr_stmt><expr><call><name PREFIX:line="1024" PREFIX:column="17">getch</name><argument_list PREFIX:line="1024" PREFIX:column="22">()</argument_list></call></expr>;</expr_stmt>
<cpp:else PREFIX:line="1025" PREFIX:column="1">#<cpp:directive PREFIX:line="1025" PREFIX:column="2">else</cpp:directive></cpp:else>
		<comment type="block" PREFIX:line="1026" PREFIX:column="17">/* m8,16,32,169,8515,8535,163 */</comment>
		<comment type="block" PREFIX:line="1027" PREFIX:column="17">/* 20060803 DojoCorp:: Addon coming from the previous Bootloader*/</comment>               
		<comment type="line" PREFIX:line="1028" PREFIX:column="17">//while(!(UCSRA &amp; _BV(RXC)));</comment>
		<comment type="line" PREFIX:line="1029" PREFIX:column="17">//UDR;</comment>
		<expr_stmt><expr><call><name PREFIX:line="1030" PREFIX:column="17">getch</name><argument_list PREFIX:line="1030" PREFIX:column="22">()</argument_list></call></expr>;</expr_stmt> <comment type="line" PREFIX:line="1030" PREFIX:column="26">// need to handle time out</comment>
<cpp:endif PREFIX:line="1031" PREFIX:column="1">#<cpp:directive PREFIX:line="1031" PREFIX:column="2">endif</cpp:directive></cpp:endif>		
	}</block></while>
}</block></function>


<function><type><name PREFIX:line="1036" PREFIX:column="1">void</name></type> <name PREFIX:line="1036" PREFIX:column="6">byte_response</name><parameter_list PREFIX:line="1036" PREFIX:column="19">(<param><decl><type><name PREFIX:line="1036" PREFIX:column="20">uint8_t</name></type> <name PREFIX:line="1036" PREFIX:column="28">val</name></decl></param>)</parameter_list>
<block PREFIX:line="1037" PREFIX:column="1">{
	<if PREFIX:line="1038" PREFIX:column="9">if <condition PREFIX:line="1038" PREFIX:column="12">(<expr><call><name PREFIX:line="1038" PREFIX:column="13">getch</name><argument_list PREFIX:line="1038" PREFIX:column="18">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="1038" PREFIX:column="28"> <block PREFIX:line="1038" PREFIX:column="29">{
		<expr_stmt><expr><call><name PREFIX:line="1039" PREFIX:column="17">putch</name><argument_list PREFIX:line="1039" PREFIX:column="22">(<argument><expr PREFIX:line="1039" PREFIX:column="23">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="1040" PREFIX:column="17">putch</name><argument_list PREFIX:line="1040" PREFIX:column="22">(<argument><expr><name PREFIX:line="1040" PREFIX:column="23">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="1041" PREFIX:column="17">putch</name><argument_list PREFIX:line="1041" PREFIX:column="22">(<argument><expr PREFIX:line="1041" PREFIX:column="23">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else PREFIX:line="1042" PREFIX:column="11">else <block PREFIX:line="1042" PREFIX:column="16">{
		<if PREFIX:line="1043" PREFIX:column="17">if <condition PREFIX:line="1043" PREFIX:column="20">(<expr PREFIX:line="1043" PREFIX:column="21">++<name PREFIX:line="1043" PREFIX:column="23">error_count</name> == <name PREFIX:line="1043" PREFIX:column="38">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="1043" PREFIX:column="54">
			<expr_stmt><expr><call><name PREFIX:line="1044" PREFIX:column="25">app_start</name><argument_list PREFIX:line="1044" PREFIX:column="34">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></else></if>
}</block></function>


<function><type><name PREFIX:line="1049" PREFIX:column="1">void</name></type> <name PREFIX:line="1049" PREFIX:column="6">nothing_response</name><parameter_list PREFIX:line="1049" PREFIX:column="22">(<param><decl><type><name PREFIX:line="1049" PREFIX:column="23">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="1050" PREFIX:column="1">{
	<if PREFIX:line="1051" PREFIX:column="9">if <condition PREFIX:line="1051" PREFIX:column="12">(<expr><call><name PREFIX:line="1051" PREFIX:column="13">getch</name><argument_list PREFIX:line="1051" PREFIX:column="18">()</argument_list></call> == ' '</expr>)</condition><then PREFIX:line="1051" PREFIX:column="28"> <block PREFIX:line="1051" PREFIX:column="29">{
		<expr_stmt><expr><call><name PREFIX:line="1052" PREFIX:column="17">putch</name><argument_list PREFIX:line="1052" PREFIX:column="22">(<argument><expr PREFIX:line="1052" PREFIX:column="23">0x14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="1053" PREFIX:column="17">putch</name><argument_list PREFIX:line="1053" PREFIX:column="22">(<argument><expr PREFIX:line="1053" PREFIX:column="23">0x10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else PREFIX:line="1054" PREFIX:column="11">else <block PREFIX:line="1054" PREFIX:column="16">{
		<if PREFIX:line="1055" PREFIX:column="17">if <condition PREFIX:line="1055" PREFIX:column="20">(<expr PREFIX:line="1055" PREFIX:column="21">++<name PREFIX:line="1055" PREFIX:column="23">error_count</name> == <name PREFIX:line="1055" PREFIX:column="38">MAX_ERROR_COUNT</name></expr>)</condition><then PREFIX:line="1055" PREFIX:column="54">
			<expr_stmt><expr><call><name PREFIX:line="1056" PREFIX:column="25">app_start</name><argument_list PREFIX:line="1056" PREFIX:column="34">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></else></if>
}</block></function>

<function><type><name PREFIX:line="1060" PREFIX:column="1">void</name></type> <name PREFIX:line="1060" PREFIX:column="6">flash_led</name><parameter_list PREFIX:line="1060" PREFIX:column="15">(<param><decl><type><name PREFIX:line="1060" PREFIX:column="16">uint8_t</name></type> <name PREFIX:line="1060" PREFIX:column="24">count</name></decl></param>)</parameter_list>
<block PREFIX:line="1061" PREFIX:column="1">{
	<while PREFIX:line="1062" PREFIX:column="9">while <condition PREFIX:line="1062" PREFIX:column="15">(<expr><name PREFIX:line="1062" PREFIX:column="16">count</name>--</expr>)</condition> <block PREFIX:line="1062" PREFIX:column="25">{
		<expr_stmt><expr><name PREFIX:line="1063" PREFIX:column="17">LED_PORT</name> |= <call><name PREFIX:line="1063" PREFIX:column="29">_BV</name><argument_list PREFIX:line="1063" PREFIX:column="32">(<argument><expr><name PREFIX:line="1063" PREFIX:column="33">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="1064" PREFIX:column="17">_delay_ms</name><argument_list PREFIX:line="1064" PREFIX:column="26">(<argument><expr PREFIX:line="1064" PREFIX:column="27">100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="1065" PREFIX:column="17">LED_PORT</name> &amp;= ~<call><name PREFIX:line="1065" PREFIX:column="30">_BV</name><argument_list PREFIX:line="1065" PREFIX:column="33">(<argument><expr><name PREFIX:line="1065" PREFIX:column="34">LED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name PREFIX:line="1066" PREFIX:column="17">_delay_ms</name><argument_list PREFIX:line="1066" PREFIX:column="26">(<argument><expr PREFIX:line="1066" PREFIX:column="27">100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>


<comment type="block" PREFIX:line="1071" PREFIX:column="1">/* end of file ATmegaBOOT.c */</comment>
</unit>
