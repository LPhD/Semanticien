<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/cores/brainwave/wiring_analog.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  wiring_analog.c - analog input and output
  Part of Arduino - http://www.arduino.cc/

  Copyright (c) 2005-2006 David A. Mellis

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA

  Modified 28 September 2010 by Mark Sproul

  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/</comment>

<cpp:include PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="10">"wiring_private.h"</cpp:file></cpp:include>
<cpp:include PREFIX:line="28" PREFIX:column="1">#<cpp:directive PREFIX:line="28" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="28" PREFIX:column="10">"pins_arduino.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name PREFIX:line="30" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="30" PREFIX:column="9">analog_reference</name> <init PREFIX:line="30" PREFIX:column="26">= <expr><name PREFIX:line="30" PREFIX:column="28">DEFAULT</name></expr></init></decl>;</decl_stmt>

<function><type><name PREFIX:line="32" PREFIX:column="1">void</name></type> <name PREFIX:line="32" PREFIX:column="6">analogReference</name><parameter_list PREFIX:line="32" PREFIX:column="21">(<param><decl><type><name PREFIX:line="32" PREFIX:column="22">uint8_t</name></type> <name PREFIX:line="32" PREFIX:column="30">mode</name></decl></param>)</parameter_list>
<block PREFIX:line="33" PREFIX:column="1">{
	<comment type="line" PREFIX:line="34" PREFIX:column="9">// can't actually set the register here because the default setting</comment>
	<comment type="line" PREFIX:line="35" PREFIX:column="9">// will connect AVCC and the AREF pin, which would cause a short if</comment>
	<comment type="line" PREFIX:line="36" PREFIX:column="9">// there's something connected to AREF.</comment>
	<expr_stmt><expr><name PREFIX:line="37" PREFIX:column="9">analog_reference</name> = <name PREFIX:line="37" PREFIX:column="28">mode</name></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="40" PREFIX:column="1">int</name></type> <name PREFIX:line="40" PREFIX:column="5">analogRead</name><parameter_list PREFIX:line="40" PREFIX:column="15">(<param><decl><type><name PREFIX:line="40" PREFIX:column="16">uint8_t</name></type> <name PREFIX:line="40" PREFIX:column="24">pin</name></decl></param>)</parameter_list>
<block PREFIX:line="41" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="42" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="42" PREFIX:column="17">low</name></decl>, <decl><type ref="prev"/><name PREFIX:line="42" PREFIX:column="22">high</name></decl>;</decl_stmt>

<cpp:if PREFIX:line="44" PREFIX:column="1">#<cpp:directive PREFIX:line="44" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="44" PREFIX:column="5">defined</name><argument_list PREFIX:line="44" PREFIX:column="12">(<argument><expr><name PREFIX:line="44" PREFIX:column="13">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="44" PREFIX:column="36">defined</name><argument_list PREFIX:line="44" PREFIX:column="43">(<argument><expr><name PREFIX:line="44" PREFIX:column="44">__AVR_ATmega2560__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if PREFIX:line="45" PREFIX:column="9">if <condition PREFIX:line="45" PREFIX:column="12">(<expr><name PREFIX:line="45" PREFIX:column="13">pin</name> &gt;= 54</expr>)</condition><then PREFIX:line="45" PREFIX:column="23"> <expr_stmt><expr><name PREFIX:line="45" PREFIX:column="24">pin</name> -= 54</expr>;</expr_stmt></then></if> <comment type="line" PREFIX:line="45" PREFIX:column="35">// allow for channel or pin numbers</comment>
<cpp:elif PREFIX:line="46" PREFIX:column="1">#<cpp:directive PREFIX:line="46" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="46" PREFIX:column="7">defined</name><argument_list PREFIX:line="46" PREFIX:column="14">(<argument><expr><name PREFIX:line="46" PREFIX:column="15">__AVR_ATmega32U4__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if PREFIX:line="47" PREFIX:column="9">if <condition PREFIX:line="47" PREFIX:column="12">(<expr><name PREFIX:line="47" PREFIX:column="13">pin</name> &gt;= 18</expr>)</condition><then PREFIX:line="47" PREFIX:column="23"> <expr_stmt><expr><name PREFIX:line="47" PREFIX:column="24">pin</name> -= 18</expr>;</expr_stmt></then></if> <comment type="line" PREFIX:line="47" PREFIX:column="35">// allow for channel or pin numbers</comment>
<cpp:elif PREFIX:line="48" PREFIX:column="1">#<cpp:directive PREFIX:line="48" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="48" PREFIX:column="7">defined</name><argument_list PREFIX:line="48" PREFIX:column="14">(<argument><expr><name PREFIX:line="48" PREFIX:column="15">__AVR_ATmega1284__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if PREFIX:line="49" PREFIX:column="9">if <condition PREFIX:line="49" PREFIX:column="12">(<expr><name PREFIX:line="49" PREFIX:column="13">pin</name> &gt;= 24</expr>)</condition><then PREFIX:line="49" PREFIX:column="23"> <expr_stmt><expr><name PREFIX:line="49" PREFIX:column="24">pin</name> -= 24</expr>;</expr_stmt></then></if> <comment type="line" PREFIX:line="49" PREFIX:column="35">// allow for channel or pin numbers</comment>
<cpp:else PREFIX:line="50" PREFIX:column="1">#<cpp:directive PREFIX:line="50" PREFIX:column="2">else</cpp:directive></cpp:else>
	<if PREFIX:line="51" PREFIX:column="9">if <condition PREFIX:line="51" PREFIX:column="12">(<expr><name PREFIX:line="51" PREFIX:column="13">pin</name> &gt;= 14</expr>)</condition><then PREFIX:line="51" PREFIX:column="23"> <expr_stmt><expr><name PREFIX:line="51" PREFIX:column="24">pin</name> -= 14</expr>;</expr_stmt></then></if> <comment type="line" PREFIX:line="51" PREFIX:column="35">// allow for channel or pin numbers</comment>
<cpp:endif PREFIX:line="52" PREFIX:column="1">#<cpp:directive PREFIX:line="52" PREFIX:column="2">endif</cpp:directive></cpp:endif>
	
<cpp:if PREFIX:line="54" PREFIX:column="1">#<cpp:directive PREFIX:line="54" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="54" PREFIX:column="5">defined</name><argument_list PREFIX:line="54" PREFIX:column="12">(<argument><expr><name PREFIX:line="54" PREFIX:column="13">__AVR_ATmega32U4__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name PREFIX:line="55" PREFIX:column="9">pin</name> = <call><name PREFIX:line="55" PREFIX:column="15">analogPinToChannel</name><argument_list PREFIX:line="55" PREFIX:column="33">(<argument><expr><name PREFIX:line="55" PREFIX:column="34">pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="56" PREFIX:column="9">ADCSRB</name> = (<name PREFIX:line="56" PREFIX:column="19">ADCSRB</name> &amp; ~(1 &lt;&lt; <name PREFIX:line="56" PREFIX:column="35">MUX5</name>)) | (((<name PREFIX:line="56" PREFIX:column="47">pin</name> &gt;&gt; 3) &amp; 0x01) &lt;&lt; <name PREFIX:line="56" PREFIX:column="68">MUX5</name>)</expr>;</expr_stmt>
<cpp:elif PREFIX:line="57" PREFIX:column="1">#<cpp:directive PREFIX:line="57" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="57" PREFIX:column="7">defined</name><argument_list PREFIX:line="57" PREFIX:column="14">(<argument><expr><name PREFIX:line="57" PREFIX:column="15">ADCSRB</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="57" PREFIX:column="26">defined</name><argument_list PREFIX:line="57" PREFIX:column="33">(<argument><expr><name PREFIX:line="57" PREFIX:column="34">MUX5</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<comment type="line" PREFIX:line="58" PREFIX:column="9">// the MUX5 bit of ADCSRB selects whether we're reading from channels</comment>
	<comment type="line" PREFIX:line="59" PREFIX:column="9">// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).</comment>
	<expr_stmt><expr><name PREFIX:line="60" PREFIX:column="9">ADCSRB</name> = (<name PREFIX:line="60" PREFIX:column="19">ADCSRB</name> &amp; ~(1 &lt;&lt; <name PREFIX:line="60" PREFIX:column="35">MUX5</name>)) | (((<name PREFIX:line="60" PREFIX:column="47">pin</name> &gt;&gt; 3) &amp; 0x01) &lt;&lt; <name PREFIX:line="60" PREFIX:column="68">MUX5</name>)</expr>;</expr_stmt>
<cpp:endif PREFIX:line="61" PREFIX:column="1">#<cpp:directive PREFIX:line="61" PREFIX:column="2">endif</cpp:directive></cpp:endif>
  
	<comment type="line" PREFIX:line="63" PREFIX:column="9">// set the analog reference (high two bits of ADMUX) and select the</comment>
	<comment type="line" PREFIX:line="64" PREFIX:column="9">// channel (low 4 bits).  this also sets ADLAR (left-adjust result)</comment>
	<comment type="line" PREFIX:line="65" PREFIX:column="9">// to 0 (the default).</comment>
<cpp:if PREFIX:line="66" PREFIX:column="1">#<cpp:directive PREFIX:line="66" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="66" PREFIX:column="5">defined</name><argument_list PREFIX:line="66" PREFIX:column="12">(<argument><expr><name PREFIX:line="66" PREFIX:column="13">ADMUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name PREFIX:line="67" PREFIX:column="9">ADMUX</name> = (<name PREFIX:line="67" PREFIX:column="18">analog_reference</name> &lt;&lt; 6) | (<name PREFIX:line="67" PREFIX:column="44">pin</name> &amp; 0x07)</expr>;</expr_stmt>
<cpp:endif PREFIX:line="68" PREFIX:column="1">#<cpp:directive PREFIX:line="68" PREFIX:column="2">endif</cpp:directive></cpp:endif>

	<comment type="line" PREFIX:line="70" PREFIX:column="9">// without a delay, we seem to read from the wrong channel</comment>
	<comment type="line" PREFIX:line="71" PREFIX:column="9">//delay(1);</comment>

<cpp:if PREFIX:line="73" PREFIX:column="1">#<cpp:directive PREFIX:line="73" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="73" PREFIX:column="5">defined</name><argument_list PREFIX:line="73" PREFIX:column="12">(<argument><expr><name PREFIX:line="73" PREFIX:column="13">ADCSRA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="73" PREFIX:column="24">defined</name><argument_list PREFIX:line="73" PREFIX:column="31">(<argument><expr><name PREFIX:line="73" PREFIX:column="32">ADCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="line" PREFIX:line="74" PREFIX:column="9">// start the conversion</comment>
	<expr_stmt><expr><call><name PREFIX:line="75" PREFIX:column="9">sbi</name><argument_list PREFIX:line="75" PREFIX:column="12">(<argument><expr><name PREFIX:line="75" PREFIX:column="13">ADCSRA</name></expr></argument>, <argument><expr><name PREFIX:line="75" PREFIX:column="21">ADSC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" PREFIX:line="77" PREFIX:column="9">// ADSC is cleared when the conversion finishes</comment>
	<while PREFIX:line="78" PREFIX:column="9">while <condition PREFIX:line="78" PREFIX:column="15">(<expr><call><name PREFIX:line="78" PREFIX:column="16">bit_is_set</name><argument_list PREFIX:line="78" PREFIX:column="26">(<argument><expr><name PREFIX:line="78" PREFIX:column="27">ADCSRA</name></expr></argument>, <argument><expr><name PREFIX:line="78" PREFIX:column="35">ADSC</name></expr></argument>)</argument_list></call></expr>)</condition><empty_stmt PREFIX:line="78" PREFIX:column="41">;</empty_stmt></while>

	<comment type="line" PREFIX:line="80" PREFIX:column="9">// we have to read ADCL first; doing so locks both ADCL</comment>
	<comment type="line" PREFIX:line="81" PREFIX:column="9">// and ADCH until ADCH is read.  reading ADCL second would</comment>
	<comment type="line" PREFIX:line="82" PREFIX:column="9">// cause the results of each conversion to be discarded,</comment>
	<comment type="line" PREFIX:line="83" PREFIX:column="9">// as ADCL and ADCH would be locked when it completed.</comment>
	<expr_stmt><expr><name PREFIX:line="84" PREFIX:column="9">low</name>  = <name PREFIX:line="84" PREFIX:column="16">ADCL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="85" PREFIX:column="9">high</name> = <name PREFIX:line="85" PREFIX:column="16">ADCH</name></expr>;</expr_stmt>
<cpp:else PREFIX:line="86" PREFIX:column="1">#<cpp:directive PREFIX:line="86" PREFIX:column="2">else</cpp:directive></cpp:else>
	<comment type="line" PREFIX:line="87" PREFIX:column="9">// we dont have an ADC, return 0</comment>
	<expr_stmt><expr><name PREFIX:line="88" PREFIX:column="9">low</name>  = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="89" PREFIX:column="9">high</name> = 0</expr>;</expr_stmt>
<cpp:endif PREFIX:line="90" PREFIX:column="1">#<cpp:directive PREFIX:line="90" PREFIX:column="2">endif</cpp:directive></cpp:endif>

	<comment type="line" PREFIX:line="92" PREFIX:column="9">// combine the two bytes</comment>
	<return PREFIX:line="93" PREFIX:column="9">return <expr PREFIX:line="93" PREFIX:column="16">(<name PREFIX:line="93" PREFIX:column="17">high</name> &lt;&lt; 8) | <name PREFIX:line="93" PREFIX:column="30">low</name></expr>;</return>
}</block></function>

<comment type="line" PREFIX:line="96" PREFIX:column="1">// Right now, PWM output only works on the pins with</comment>
<comment type="line" PREFIX:line="97" PREFIX:column="1">// hardware support.  These are defined in the appropriate</comment>
<comment type="line" PREFIX:line="98" PREFIX:column="1">// pins_*.c file.  For the rest of the pins, we default</comment>
<comment type="line" PREFIX:line="99" PREFIX:column="1">// to digital output.</comment>
<function><type><name PREFIX:line="100" PREFIX:column="1">void</name></type> <name PREFIX:line="100" PREFIX:column="6">analogWrite</name><parameter_list PREFIX:line="100" PREFIX:column="17">(<param><decl><type><name PREFIX:line="100" PREFIX:column="18">uint8_t</name></type> <name PREFIX:line="100" PREFIX:column="26">pin</name></decl></param>, <param><decl><type><name PREFIX:line="100" PREFIX:column="31">int</name></type> <name PREFIX:line="100" PREFIX:column="35">val</name></decl></param>)</parameter_list>
<block PREFIX:line="101" PREFIX:column="1">{
	<comment type="line" PREFIX:line="102" PREFIX:column="9">// We need to make sure the PWM output is enabled for those pins</comment>
	<comment type="line" PREFIX:line="103" PREFIX:column="9">// that support it, as we turn it off when digitally reading or</comment>
	<comment type="line" PREFIX:line="104" PREFIX:column="9">// writing with them.  Also, make sure the pin is in output mode</comment>
	<comment type="line" PREFIX:line="105" PREFIX:column="9">// for consistenty with Wiring, which doesn't require a pinMode</comment>
	<comment type="line" PREFIX:line="106" PREFIX:column="9">// call for the analog output pins.</comment>
	<expr_stmt><expr><call><name PREFIX:line="107" PREFIX:column="9">pinMode</name><argument_list PREFIX:line="107" PREFIX:column="16">(<argument><expr><name PREFIX:line="107" PREFIX:column="17">pin</name></expr></argument>, <argument><expr><name PREFIX:line="107" PREFIX:column="22">OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if PREFIX:line="108" PREFIX:column="9">if <condition PREFIX:line="108" PREFIX:column="12">(<expr><name PREFIX:line="108" PREFIX:column="13">val</name> == 0</expr>)</condition><then PREFIX:line="108" PREFIX:column="22">
	<block PREFIX:line="109" PREFIX:column="9">{
		<expr_stmt><expr><call><name PREFIX:line="110" PREFIX:column="17">digitalWrite</name><argument_list PREFIX:line="110" PREFIX:column="29">(<argument><expr><name PREFIX:line="110" PREFIX:column="30">pin</name></expr></argument>, <argument><expr><name PREFIX:line="110" PREFIX:column="35">LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else PREFIX:line="112" PREFIX:column="9">else <if PREFIX:line="112" PREFIX:column="14">if <condition PREFIX:line="112" PREFIX:column="17">(<expr><name PREFIX:line="112" PREFIX:column="18">val</name> == 255</expr>)</condition><then PREFIX:line="112" PREFIX:column="29">
	<block PREFIX:line="113" PREFIX:column="9">{
		<expr_stmt><expr><call><name PREFIX:line="114" PREFIX:column="17">digitalWrite</name><argument_list PREFIX:line="114" PREFIX:column="29">(<argument><expr><name PREFIX:line="114" PREFIX:column="30">pin</name></expr></argument>, <argument><expr><name PREFIX:line="114" PREFIX:column="35">HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else PREFIX:line="116" PREFIX:column="9">else
	<block PREFIX:line="117" PREFIX:column="9">{
		<switch PREFIX:line="118" PREFIX:column="17">switch<condition PREFIX:line="118" PREFIX:column="23">(<expr><call><name PREFIX:line="118" PREFIX:column="24">digitalPinToTimer</name><argument_list PREFIX:line="118" PREFIX:column="41">(<argument><expr><name PREFIX:line="118" PREFIX:column="42">pin</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block PREFIX:line="119" PREFIX:column="17">{
			<comment type="line" PREFIX:line="120" PREFIX:column="25">// XXX fix needed for atmega8</comment>
			<cpp:if PREFIX:line="121" PREFIX:column="25">#<cpp:directive PREFIX:line="121" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="121" PREFIX:column="29">defined</name><argument_list PREFIX:line="121" PREFIX:column="36">(<argument><expr><name PREFIX:line="121" PREFIX:column="37">TCCR0</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="121" PREFIX:column="47">defined</name><argument_list PREFIX:line="121" PREFIX:column="54">(<argument><expr><name PREFIX:line="121" PREFIX:column="55">COM00</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name PREFIX:line="121" PREFIX:column="66">defined</name><argument_list PREFIX:line="121" PREFIX:column="73">(<argument><expr><name PREFIX:line="121" PREFIX:column="74">__AVR_ATmega8__</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<case PREFIX:line="122" PREFIX:column="25">case <expr><name PREFIX:line="122" PREFIX:column="30">TIMER0A</name></expr>:
				<comment type="line" PREFIX:line="123" PREFIX:column="33">// connect pwm to pin on timer 0</comment>
				<expr_stmt><expr><call><name PREFIX:line="124" PREFIX:column="33">sbi</name><argument_list PREFIX:line="124" PREFIX:column="36">(<argument><expr><name PREFIX:line="124" PREFIX:column="37">TCCR0</name></expr></argument>, <argument><expr><name PREFIX:line="124" PREFIX:column="44">COM00</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="125" PREFIX:column="33">OCR0</name> = <name PREFIX:line="125" PREFIX:column="40">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="125" PREFIX:column="45">// set pwm duty</comment>
				<break PREFIX:line="126" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="127" PREFIX:column="25">#<cpp:directive PREFIX:line="127" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="129" PREFIX:column="25">#<cpp:directive PREFIX:line="129" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="129" PREFIX:column="29">defined</name><argument_list PREFIX:line="129" PREFIX:column="36">(<argument><expr><name PREFIX:line="129" PREFIX:column="37">TCCR0A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="129" PREFIX:column="48">defined</name><argument_list PREFIX:line="129" PREFIX:column="55">(<argument><expr><name PREFIX:line="129" PREFIX:column="56">COM0A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="130" PREFIX:column="25">case <expr><name PREFIX:line="130" PREFIX:column="30">TIMER0A</name></expr>:
				<comment type="line" PREFIX:line="131" PREFIX:column="33">// connect pwm to pin on timer 0, channel A</comment>
				<expr_stmt><expr><call><name PREFIX:line="132" PREFIX:column="33">sbi</name><argument_list PREFIX:line="132" PREFIX:column="36">(<argument><expr><name PREFIX:line="132" PREFIX:column="37">TCCR0A</name></expr></argument>, <argument><expr><name PREFIX:line="132" PREFIX:column="45">COM0A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="133" PREFIX:column="33">OCR0A</name> = <name PREFIX:line="133" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="133" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="134" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="135" PREFIX:column="25">#<cpp:directive PREFIX:line="135" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="137" PREFIX:column="25">#<cpp:directive PREFIX:line="137" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="137" PREFIX:column="29">defined</name><argument_list PREFIX:line="137" PREFIX:column="36">(<argument><expr><name PREFIX:line="137" PREFIX:column="37">TCCR0A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="137" PREFIX:column="48">defined</name><argument_list PREFIX:line="137" PREFIX:column="55">(<argument><expr><name PREFIX:line="137" PREFIX:column="56">COM0B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="138" PREFIX:column="25">case <expr><name PREFIX:line="138" PREFIX:column="30">TIMER0B</name></expr>:
				<comment type="line" PREFIX:line="139" PREFIX:column="33">// connect pwm to pin on timer 0, channel B</comment>
				<expr_stmt><expr><call><name PREFIX:line="140" PREFIX:column="33">sbi</name><argument_list PREFIX:line="140" PREFIX:column="36">(<argument><expr><name PREFIX:line="140" PREFIX:column="37">TCCR0A</name></expr></argument>, <argument><expr><name PREFIX:line="140" PREFIX:column="45">COM0B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="141" PREFIX:column="33">OCR0B</name> = <name PREFIX:line="141" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="141" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="142" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="143" PREFIX:column="25">#<cpp:directive PREFIX:line="143" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="145" PREFIX:column="25">#<cpp:directive PREFIX:line="145" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="145" PREFIX:column="29">defined</name><argument_list PREFIX:line="145" PREFIX:column="36">(<argument><expr><name PREFIX:line="145" PREFIX:column="37">TCCR1A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="145" PREFIX:column="48">defined</name><argument_list PREFIX:line="145" PREFIX:column="55">(<argument><expr><name PREFIX:line="145" PREFIX:column="56">COM1A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="146" PREFIX:column="25">case <expr><name PREFIX:line="146" PREFIX:column="30">TIMER1A</name></expr>:
				<comment type="line" PREFIX:line="147" PREFIX:column="33">// connect pwm to pin on timer 1, channel A</comment>
				<expr_stmt><expr><call><name PREFIX:line="148" PREFIX:column="33">sbi</name><argument_list PREFIX:line="148" PREFIX:column="36">(<argument><expr><name PREFIX:line="148" PREFIX:column="37">TCCR1A</name></expr></argument>, <argument><expr><name PREFIX:line="148" PREFIX:column="45">COM1A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="149" PREFIX:column="33">OCR1A</name> = <name PREFIX:line="149" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="149" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="150" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="151" PREFIX:column="25">#<cpp:directive PREFIX:line="151" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="153" PREFIX:column="25">#<cpp:directive PREFIX:line="153" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="153" PREFIX:column="29">defined</name><argument_list PREFIX:line="153" PREFIX:column="36">(<argument><expr><name PREFIX:line="153" PREFIX:column="37">TCCR1A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="153" PREFIX:column="48">defined</name><argument_list PREFIX:line="153" PREFIX:column="55">(<argument><expr><name PREFIX:line="153" PREFIX:column="56">COM1B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="154" PREFIX:column="25">case <expr><name PREFIX:line="154" PREFIX:column="30">TIMER1B</name></expr>:
				<comment type="line" PREFIX:line="155" PREFIX:column="33">// connect pwm to pin on timer 1, channel B</comment>
				<expr_stmt><expr><call><name PREFIX:line="156" PREFIX:column="33">sbi</name><argument_list PREFIX:line="156" PREFIX:column="36">(<argument><expr><name PREFIX:line="156" PREFIX:column="37">TCCR1A</name></expr></argument>, <argument><expr><name PREFIX:line="156" PREFIX:column="45">COM1B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="157" PREFIX:column="33">OCR1B</name> = <name PREFIX:line="157" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="157" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="158" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="159" PREFIX:column="25">#<cpp:directive PREFIX:line="159" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="161" PREFIX:column="25">#<cpp:directive PREFIX:line="161" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="161" PREFIX:column="29">defined</name><argument_list PREFIX:line="161" PREFIX:column="36">(<argument><expr><name PREFIX:line="161" PREFIX:column="37">TCCR2</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="161" PREFIX:column="47">defined</name><argument_list PREFIX:line="161" PREFIX:column="54">(<argument><expr><name PREFIX:line="161" PREFIX:column="55">COM21</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="162" PREFIX:column="25">case <expr><name PREFIX:line="162" PREFIX:column="30">TIMER2</name></expr>:
				<comment type="line" PREFIX:line="163" PREFIX:column="33">// connect pwm to pin on timer 2</comment>
				<expr_stmt><expr><call><name PREFIX:line="164" PREFIX:column="33">sbi</name><argument_list PREFIX:line="164" PREFIX:column="36">(<argument><expr><name PREFIX:line="164" PREFIX:column="37">TCCR2</name></expr></argument>, <argument><expr><name PREFIX:line="164" PREFIX:column="44">COM21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="165" PREFIX:column="33">OCR2</name> = <name PREFIX:line="165" PREFIX:column="40">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="165" PREFIX:column="45">// set pwm duty</comment>
				<break PREFIX:line="166" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="167" PREFIX:column="25">#<cpp:directive PREFIX:line="167" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="169" PREFIX:column="25">#<cpp:directive PREFIX:line="169" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="169" PREFIX:column="29">defined</name><argument_list PREFIX:line="169" PREFIX:column="36">(<argument><expr><name PREFIX:line="169" PREFIX:column="37">TCCR2A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="169" PREFIX:column="48">defined</name><argument_list PREFIX:line="169" PREFIX:column="55">(<argument><expr><name PREFIX:line="169" PREFIX:column="56">COM2A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="170" PREFIX:column="25">case <expr><name PREFIX:line="170" PREFIX:column="30">TIMER2A</name></expr>:
				<comment type="line" PREFIX:line="171" PREFIX:column="33">// connect pwm to pin on timer 2, channel A</comment>
				<expr_stmt><expr><call><name PREFIX:line="172" PREFIX:column="33">sbi</name><argument_list PREFIX:line="172" PREFIX:column="36">(<argument><expr><name PREFIX:line="172" PREFIX:column="37">TCCR2A</name></expr></argument>, <argument><expr><name PREFIX:line="172" PREFIX:column="45">COM2A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="173" PREFIX:column="33">OCR2A</name> = <name PREFIX:line="173" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="173" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="174" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="175" PREFIX:column="25">#<cpp:directive PREFIX:line="175" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="177" PREFIX:column="25">#<cpp:directive PREFIX:line="177" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="177" PREFIX:column="29">defined</name><argument_list PREFIX:line="177" PREFIX:column="36">(<argument><expr><name PREFIX:line="177" PREFIX:column="37">TCCR2A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="177" PREFIX:column="48">defined</name><argument_list PREFIX:line="177" PREFIX:column="55">(<argument><expr><name PREFIX:line="177" PREFIX:column="56">COM2B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="178" PREFIX:column="25">case <expr><name PREFIX:line="178" PREFIX:column="30">TIMER2B</name></expr>:
				<comment type="line" PREFIX:line="179" PREFIX:column="33">// connect pwm to pin on timer 2, channel B</comment>
				<expr_stmt><expr><call><name PREFIX:line="180" PREFIX:column="33">sbi</name><argument_list PREFIX:line="180" PREFIX:column="36">(<argument><expr><name PREFIX:line="180" PREFIX:column="37">TCCR2A</name></expr></argument>, <argument><expr><name PREFIX:line="180" PREFIX:column="45">COM2B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="181" PREFIX:column="33">OCR2B</name> = <name PREFIX:line="181" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="181" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="182" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="183" PREFIX:column="25">#<cpp:directive PREFIX:line="183" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="185" PREFIX:column="25">#<cpp:directive PREFIX:line="185" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="185" PREFIX:column="29">defined</name><argument_list PREFIX:line="185" PREFIX:column="36">(<argument><expr><name PREFIX:line="185" PREFIX:column="37">TCCR3A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="185" PREFIX:column="48">defined</name><argument_list PREFIX:line="185" PREFIX:column="55">(<argument><expr><name PREFIX:line="185" PREFIX:column="56">COM3A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="186" PREFIX:column="25">case <expr><name PREFIX:line="186" PREFIX:column="30">TIMER3A</name></expr>:
				<comment type="line" PREFIX:line="187" PREFIX:column="33">// connect pwm to pin on timer 3, channel A</comment>
				<expr_stmt><expr><call><name PREFIX:line="188" PREFIX:column="33">sbi</name><argument_list PREFIX:line="188" PREFIX:column="36">(<argument><expr><name PREFIX:line="188" PREFIX:column="37">TCCR3A</name></expr></argument>, <argument><expr><name PREFIX:line="188" PREFIX:column="45">COM3A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="189" PREFIX:column="33">OCR3A</name> = <name PREFIX:line="189" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="189" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="190" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="191" PREFIX:column="25">#<cpp:directive PREFIX:line="191" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="193" PREFIX:column="25">#<cpp:directive PREFIX:line="193" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="193" PREFIX:column="29">defined</name><argument_list PREFIX:line="193" PREFIX:column="36">(<argument><expr><name PREFIX:line="193" PREFIX:column="37">TCCR3A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="193" PREFIX:column="48">defined</name><argument_list PREFIX:line="193" PREFIX:column="55">(<argument><expr><name PREFIX:line="193" PREFIX:column="56">COM3B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="194" PREFIX:column="25">case <expr><name PREFIX:line="194" PREFIX:column="30">TIMER3B</name></expr>:
				<comment type="line" PREFIX:line="195" PREFIX:column="33">// connect pwm to pin on timer 3, channel B</comment>
				<expr_stmt><expr><call><name PREFIX:line="196" PREFIX:column="33">sbi</name><argument_list PREFIX:line="196" PREFIX:column="36">(<argument><expr><name PREFIX:line="196" PREFIX:column="37">TCCR3A</name></expr></argument>, <argument><expr><name PREFIX:line="196" PREFIX:column="45">COM3B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="197" PREFIX:column="33">OCR3B</name> = <name PREFIX:line="197" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="197" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="198" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="199" PREFIX:column="25">#<cpp:directive PREFIX:line="199" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="201" PREFIX:column="25">#<cpp:directive PREFIX:line="201" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="201" PREFIX:column="29">defined</name><argument_list PREFIX:line="201" PREFIX:column="36">(<argument><expr><name PREFIX:line="201" PREFIX:column="37">TCCR3A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="201" PREFIX:column="48">defined</name><argument_list PREFIX:line="201" PREFIX:column="55">(<argument><expr><name PREFIX:line="201" PREFIX:column="56">COM3C1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="202" PREFIX:column="25">case <expr><name PREFIX:line="202" PREFIX:column="30">TIMER3C</name></expr>:
				<comment type="line" PREFIX:line="203" PREFIX:column="33">// connect pwm to pin on timer 3, channel C</comment>
				<expr_stmt><expr><call><name PREFIX:line="204" PREFIX:column="33">sbi</name><argument_list PREFIX:line="204" PREFIX:column="36">(<argument><expr><name PREFIX:line="204" PREFIX:column="37">TCCR3A</name></expr></argument>, <argument><expr><name PREFIX:line="204" PREFIX:column="45">COM3C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="205" PREFIX:column="33">OCR3C</name> = <name PREFIX:line="205" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="205" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="206" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="207" PREFIX:column="25">#<cpp:directive PREFIX:line="207" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="209" PREFIX:column="25">#<cpp:directive PREFIX:line="209" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="209" PREFIX:column="29">defined</name><argument_list PREFIX:line="209" PREFIX:column="36">(<argument><expr><name PREFIX:line="209" PREFIX:column="37">TCCR4A</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="210" PREFIX:column="25">case <expr><name PREFIX:line="210" PREFIX:column="30">TIMER4A</name></expr>:
				<comment type="line" PREFIX:line="211" PREFIX:column="33">//connect pwm to pin on timer 4, channel A</comment>
				<expr_stmt><expr><call><name PREFIX:line="212" PREFIX:column="33">sbi</name><argument_list PREFIX:line="212" PREFIX:column="36">(<argument><expr><name PREFIX:line="212" PREFIX:column="37">TCCR4A</name></expr></argument>, <argument><expr><name PREFIX:line="212" PREFIX:column="45">COM4A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<cpp:if PREFIX:line="213" PREFIX:column="33">#<cpp:directive PREFIX:line="213" PREFIX:column="34">if</cpp:directive> <expr><call><name PREFIX:line="213" PREFIX:column="37">defined</name><argument_list PREFIX:line="213" PREFIX:column="44">(<argument><expr><name PREFIX:line="213" PREFIX:column="45">COM4A0</name></expr></argument>)</argument_list></call></expr></cpp:if>		<comment type="line" PREFIX:line="213" PREFIX:column="65">// only used on 32U4</comment>
				<expr_stmt><expr><call><name PREFIX:line="214" PREFIX:column="33">cbi</name><argument_list PREFIX:line="214" PREFIX:column="36">(<argument><expr><name PREFIX:line="214" PREFIX:column="37">TCCR4A</name></expr></argument>, <argument><expr><name PREFIX:line="214" PREFIX:column="45">COM4A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<cpp:endif PREFIX:line="215" PREFIX:column="33">#<cpp:directive PREFIX:line="215" PREFIX:column="34">endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><name PREFIX:line="216" PREFIX:column="33">OCR4A</name> = <name PREFIX:line="216" PREFIX:column="41">val</name></expr>;</expr_stmt>	<comment type="line" PREFIX:line="216" PREFIX:column="49">// set pwm duty</comment>
				<break PREFIX:line="217" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="218" PREFIX:column="25">#<cpp:directive PREFIX:line="218" PREFIX:column="26">endif</cpp:directive></cpp:endif>
			
			<cpp:if PREFIX:line="220" PREFIX:column="25">#<cpp:directive PREFIX:line="220" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="220" PREFIX:column="29">defined</name><argument_list PREFIX:line="220" PREFIX:column="36">(<argument><expr><name PREFIX:line="220" PREFIX:column="37">TCCR4A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="220" PREFIX:column="48">defined</name><argument_list PREFIX:line="220" PREFIX:column="55">(<argument><expr><name PREFIX:line="220" PREFIX:column="56">COM4B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="221" PREFIX:column="25">case <expr><name PREFIX:line="221" PREFIX:column="30">TIMER4B</name></expr>:
				<comment type="line" PREFIX:line="222" PREFIX:column="33">// connect pwm to pin on timer 4, channel B</comment>
				<expr_stmt><expr><call><name PREFIX:line="223" PREFIX:column="33">sbi</name><argument_list PREFIX:line="223" PREFIX:column="36">(<argument><expr><name PREFIX:line="223" PREFIX:column="37">TCCR4A</name></expr></argument>, <argument><expr><name PREFIX:line="223" PREFIX:column="45">COM4B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="224" PREFIX:column="33">OCR4B</name> = <name PREFIX:line="224" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="224" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="225" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="226" PREFIX:column="25">#<cpp:directive PREFIX:line="226" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="228" PREFIX:column="25">#<cpp:directive PREFIX:line="228" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="228" PREFIX:column="29">defined</name><argument_list PREFIX:line="228" PREFIX:column="36">(<argument><expr><name PREFIX:line="228" PREFIX:column="37">TCCR4A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="228" PREFIX:column="48">defined</name><argument_list PREFIX:line="228" PREFIX:column="55">(<argument><expr><name PREFIX:line="228" PREFIX:column="56">COM4C1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="229" PREFIX:column="25">case <expr><name PREFIX:line="229" PREFIX:column="30">TIMER4C</name></expr>:
				<comment type="line" PREFIX:line="230" PREFIX:column="33">// connect pwm to pin on timer 4, channel C</comment>
				<expr_stmt><expr><call><name PREFIX:line="231" PREFIX:column="33">sbi</name><argument_list PREFIX:line="231" PREFIX:column="36">(<argument><expr><name PREFIX:line="231" PREFIX:column="37">TCCR4A</name></expr></argument>, <argument><expr><name PREFIX:line="231" PREFIX:column="45">COM4C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="232" PREFIX:column="33">OCR4C</name> = <name PREFIX:line="232" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="232" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="233" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="234" PREFIX:column="25">#<cpp:directive PREFIX:line="234" PREFIX:column="26">endif</cpp:directive></cpp:endif>
				
			<cpp:if PREFIX:line="236" PREFIX:column="25">#<cpp:directive PREFIX:line="236" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="236" PREFIX:column="29">defined</name><argument_list PREFIX:line="236" PREFIX:column="36">(<argument><expr><name PREFIX:line="236" PREFIX:column="37">TCCR4C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="236" PREFIX:column="48">defined</name><argument_list PREFIX:line="236" PREFIX:column="55">(<argument><expr><name PREFIX:line="236" PREFIX:column="56">COM4D1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="237" PREFIX:column="25">case <expr><name PREFIX:line="237" PREFIX:column="30">TIMER4D</name></expr>:				
				<comment type="line" PREFIX:line="238" PREFIX:column="33">// connect pwm to pin on timer 4, channel D</comment>
				<expr_stmt><expr><call><name PREFIX:line="239" PREFIX:column="33">sbi</name><argument_list PREFIX:line="239" PREFIX:column="36">(<argument><expr><name PREFIX:line="239" PREFIX:column="37">TCCR4C</name></expr></argument>, <argument><expr><name PREFIX:line="239" PREFIX:column="45">COM4D1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<cpp:if PREFIX:line="240" PREFIX:column="33">#<cpp:directive PREFIX:line="240" PREFIX:column="34">if</cpp:directive> <expr><call><name PREFIX:line="240" PREFIX:column="37">defined</name><argument_list PREFIX:line="240" PREFIX:column="44">(<argument><expr><name PREFIX:line="240" PREFIX:column="45">COM4D0</name></expr></argument>)</argument_list></call></expr></cpp:if>		<comment type="line" PREFIX:line="240" PREFIX:column="65">// only used on 32U4</comment>
				<expr_stmt><expr><call><name PREFIX:line="241" PREFIX:column="33">cbi</name><argument_list PREFIX:line="241" PREFIX:column="36">(<argument><expr><name PREFIX:line="241" PREFIX:column="37">TCCR4C</name></expr></argument>, <argument><expr><name PREFIX:line="241" PREFIX:column="45">COM4D0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<cpp:endif PREFIX:line="242" PREFIX:column="33">#<cpp:directive PREFIX:line="242" PREFIX:column="34">endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><name PREFIX:line="243" PREFIX:column="33">OCR4D</name> = <name PREFIX:line="243" PREFIX:column="41">val</name></expr>;</expr_stmt>	<comment type="line" PREFIX:line="243" PREFIX:column="49">// set pwm duty</comment>
				<break PREFIX:line="244" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="245" PREFIX:column="25">#<cpp:directive PREFIX:line="245" PREFIX:column="26">endif</cpp:directive></cpp:endif>

							
			<cpp:if PREFIX:line="248" PREFIX:column="25">#<cpp:directive PREFIX:line="248" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="248" PREFIX:column="29">defined</name><argument_list PREFIX:line="248" PREFIX:column="36">(<argument><expr><name PREFIX:line="248" PREFIX:column="37">TCCR5A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="248" PREFIX:column="48">defined</name><argument_list PREFIX:line="248" PREFIX:column="55">(<argument><expr><name PREFIX:line="248" PREFIX:column="56">COM5A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="249" PREFIX:column="25">case <expr><name PREFIX:line="249" PREFIX:column="30">TIMER5A</name></expr>:
				<comment type="line" PREFIX:line="250" PREFIX:column="33">// connect pwm to pin on timer 5, channel A</comment>
				<expr_stmt><expr><call><name PREFIX:line="251" PREFIX:column="33">sbi</name><argument_list PREFIX:line="251" PREFIX:column="36">(<argument><expr><name PREFIX:line="251" PREFIX:column="37">TCCR5A</name></expr></argument>, <argument><expr><name PREFIX:line="251" PREFIX:column="45">COM5A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="252" PREFIX:column="33">OCR5A</name> = <name PREFIX:line="252" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="252" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="253" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="254" PREFIX:column="25">#<cpp:directive PREFIX:line="254" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="256" PREFIX:column="25">#<cpp:directive PREFIX:line="256" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="256" PREFIX:column="29">defined</name><argument_list PREFIX:line="256" PREFIX:column="36">(<argument><expr><name PREFIX:line="256" PREFIX:column="37">TCCR5A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="256" PREFIX:column="48">defined</name><argument_list PREFIX:line="256" PREFIX:column="55">(<argument><expr><name PREFIX:line="256" PREFIX:column="56">COM5B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="257" PREFIX:column="25">case <expr><name PREFIX:line="257" PREFIX:column="30">TIMER5B</name></expr>:
				<comment type="line" PREFIX:line="258" PREFIX:column="33">// connect pwm to pin on timer 5, channel B</comment>
				<expr_stmt><expr><call><name PREFIX:line="259" PREFIX:column="33">sbi</name><argument_list PREFIX:line="259" PREFIX:column="36">(<argument><expr><name PREFIX:line="259" PREFIX:column="37">TCCR5A</name></expr></argument>, <argument><expr><name PREFIX:line="259" PREFIX:column="45">COM5B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="260" PREFIX:column="33">OCR5B</name> = <name PREFIX:line="260" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="260" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="261" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="262" PREFIX:column="25">#<cpp:directive PREFIX:line="262" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			<cpp:if PREFIX:line="264" PREFIX:column="25">#<cpp:directive PREFIX:line="264" PREFIX:column="26">if</cpp:directive> <expr><call><name PREFIX:line="264" PREFIX:column="29">defined</name><argument_list PREFIX:line="264" PREFIX:column="36">(<argument><expr><name PREFIX:line="264" PREFIX:column="37">TCCR5A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="264" PREFIX:column="48">defined</name><argument_list PREFIX:line="264" PREFIX:column="55">(<argument><expr><name PREFIX:line="264" PREFIX:column="56">COM5C1</name></expr></argument>)</argument_list></call></expr></cpp:if>
			</case><case PREFIX:line="265" PREFIX:column="25">case <expr><name PREFIX:line="265" PREFIX:column="30">TIMER5C</name></expr>:
				<comment type="line" PREFIX:line="266" PREFIX:column="33">// connect pwm to pin on timer 5, channel C</comment>
				<expr_stmt><expr><call><name PREFIX:line="267" PREFIX:column="33">sbi</name><argument_list PREFIX:line="267" PREFIX:column="36">(<argument><expr><name PREFIX:line="267" PREFIX:column="37">TCCR5A</name></expr></argument>, <argument><expr><name PREFIX:line="267" PREFIX:column="45">COM5C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name PREFIX:line="268" PREFIX:column="33">OCR5C</name> = <name PREFIX:line="268" PREFIX:column="41">val</name></expr>;</expr_stmt> <comment type="line" PREFIX:line="268" PREFIX:column="46">// set pwm duty</comment>
				<break PREFIX:line="269" PREFIX:column="33">break;</break>
			<cpp:endif PREFIX:line="270" PREFIX:column="25">#<cpp:directive PREFIX:line="270" PREFIX:column="26">endif</cpp:directive></cpp:endif>

			</case><case PREFIX:line="272" PREFIX:column="25">case <expr><name PREFIX:line="272" PREFIX:column="30">NOT_ON_TIMER</name></expr>:
			</case><default PREFIX:line="273" PREFIX:column="25">default:
				<if PREFIX:line="274" PREFIX:column="33">if <condition PREFIX:line="274" PREFIX:column="36">(<expr><name PREFIX:line="274" PREFIX:column="37">val</name> &lt; 128</expr>)</condition><then PREFIX:line="274" PREFIX:column="47"> <block PREFIX:line="274" PREFIX:column="48">{
					<expr_stmt><expr><call><name PREFIX:line="275" PREFIX:column="41">digitalWrite</name><argument_list PREFIX:line="275" PREFIX:column="53">(<argument><expr><name PREFIX:line="275" PREFIX:column="54">pin</name></expr></argument>, <argument><expr><name PREFIX:line="275" PREFIX:column="59">LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else PREFIX:line="276" PREFIX:column="35">else <block PREFIX:line="276" PREFIX:column="40">{
					<expr_stmt><expr><call><name PREFIX:line="277" PREFIX:column="41">digitalWrite</name><argument_list PREFIX:line="277" PREFIX:column="53">(<argument><expr><name PREFIX:line="277" PREFIX:column="54">pin</name></expr></argument>, <argument><expr><name PREFIX:line="277" PREFIX:column="59">HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
		</default>}</block></switch>
	}</block></else></if></else></if>
}</block></function>

</unit>
