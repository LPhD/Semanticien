<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/arduino/wiring_pulse.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  wiring_pulse.c - pulseIn() function
  Part of Arduino - http://www.arduino.cc/

  Copyright (c) 2005-2006 David A. Mellis

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA

  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/</comment>

<cpp:include PREFIX:line="25" PREFIX:column="1">#<cpp:directive PREFIX:line="25" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="25" PREFIX:column="10">"wiring_private.h"</cpp:file></cpp:include>
<cpp:include PREFIX:line="26" PREFIX:column="1">#<cpp:directive PREFIX:line="26" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="26" PREFIX:column="10">"pins_arduino.h"</cpp:file></cpp:include>

<comment type="block" PREFIX:line="28" PREFIX:column="1">/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */</comment>
<function><type><name PREFIX:line="32" PREFIX:column="1">unknowntype</name> <name PREFIX:line="32" PREFIX:column="13">long</name></type> <name PREFIX:line="32" PREFIX:column="18">pulseIn</name><parameter_list PREFIX:line="32" PREFIX:column="25">(<param><decl><type><name PREFIX:line="32" PREFIX:column="26">uint8_t</name></type> <name PREFIX:line="32" PREFIX:column="34">pin</name></decl></param>, <param><decl><type><name PREFIX:line="32" PREFIX:column="39">uint8_t</name></type> <name PREFIX:line="32" PREFIX:column="47">state</name></decl></param>, <param><decl><type><name PREFIX:line="32" PREFIX:column="54">unknowntype</name> <name PREFIX:line="32" PREFIX:column="66">long</name></type> <name PREFIX:line="32" PREFIX:column="71">timeout</name></decl></param>)</parameter_list>
<block PREFIX:line="33" PREFIX:column="1">{
	<comment type="line" PREFIX:line="34" PREFIX:column="9">// cache the port and bit of the pin in order to speed up the</comment>
	<comment type="line" PREFIX:line="35" PREFIX:column="9">// pulse width measuring loop and achieve finer resolution.  calling</comment>
	<comment type="line" PREFIX:line="36" PREFIX:column="9">// digitalRead() instead yields much coarser resolution.</comment>
	<decl_stmt><decl><type><name PREFIX:line="37" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="37" PREFIX:column="17">bit</name> <init PREFIX:line="37" PREFIX:column="21">= <expr><call><name PREFIX:line="37" PREFIX:column="23">digitalPinToBitMask</name><argument_list PREFIX:line="37" PREFIX:column="42">(<argument><expr><name PREFIX:line="37" PREFIX:column="43">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="38" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="38" PREFIX:column="17">port</name> <init PREFIX:line="38" PREFIX:column="22">= <expr><call><name PREFIX:line="38" PREFIX:column="24">digitalPinToPort</name><argument_list PREFIX:line="38" PREFIX:column="40">(<argument><expr><name PREFIX:line="38" PREFIX:column="41">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="39" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="39" PREFIX:column="17">stateMask</name> <init PREFIX:line="39" PREFIX:column="27">= <expr PREFIX:line="39" PREFIX:column="29">(<name PREFIX:line="39" PREFIX:column="30">state</name> ? <name PREFIX:line="39" PREFIX:column="38">bit</name> : 0)</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="40" PREFIX:column="9">unknowntype</name> <name PREFIX:line="40" PREFIX:column="21">long</name></type> <name PREFIX:line="40" PREFIX:column="26">width</name> <init PREFIX:line="40" PREFIX:column="32">= <expr PREFIX:line="40" PREFIX:column="34">0</expr></init></decl>;</decl_stmt> <comment type="line" PREFIX:line="40" PREFIX:column="37">// keep initialization out of time critical area</comment>
	
	<comment type="line" PREFIX:line="42" PREFIX:column="9">// convert the timeout from microseconds to a number of times through</comment>
	<comment type="line" PREFIX:line="43" PREFIX:column="9">// the initial loop; it takes 16 clock cycles per iteration.</comment>
	<decl_stmt><decl><type><name PREFIX:line="44" PREFIX:column="9">unknowntype</name> <name PREFIX:line="44" PREFIX:column="21">long</name></type> <name PREFIX:line="44" PREFIX:column="26">numloops</name> <init PREFIX:line="44" PREFIX:column="35">= <expr PREFIX:line="44" PREFIX:column="37">0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="45" PREFIX:column="9">unknowntype</name> <name PREFIX:line="45" PREFIX:column="21">long</name></type> <name PREFIX:line="45" PREFIX:column="26">maxloops</name> <init PREFIX:line="45" PREFIX:column="35">= <expr><call><name PREFIX:line="45" PREFIX:column="37">microsecondsToClockCycles</name><argument_list PREFIX:line="45" PREFIX:column="62">(<argument><expr><name PREFIX:line="45" PREFIX:column="63">timeout</name></expr></argument>)</argument_list></call> / 16</expr></init></decl>;</decl_stmt>
	
	<comment type="line" PREFIX:line="47" PREFIX:column="9">// wait for any previous pulse to end</comment>
	<while PREFIX:line="48" PREFIX:column="9">while <condition PREFIX:line="48" PREFIX:column="15">(<expr PREFIX:line="48" PREFIX:column="16">(*<call><name PREFIX:line="48" PREFIX:column="18">portInputRegister</name><argument_list PREFIX:line="48" PREFIX:column="35">(<argument><expr><name PREFIX:line="48" PREFIX:column="36">port</name></expr></argument>)</argument_list></call> &amp; <name PREFIX:line="48" PREFIX:column="44">bit</name>) == <name PREFIX:line="48" PREFIX:column="52">stateMask</name></expr>)</condition>
		<if PREFIX:line="49" PREFIX:column="17">if <condition PREFIX:line="49" PREFIX:column="20">(<expr><name PREFIX:line="49" PREFIX:column="21">numloops</name>++ == <name PREFIX:line="49" PREFIX:column="35">maxloops</name></expr>)</condition><then PREFIX:line="49" PREFIX:column="44">
			<return PREFIX:line="50" PREFIX:column="25">return <expr PREFIX:line="50" PREFIX:column="32">0</expr>;</return></then></if></while>
	
	<comment type="line" PREFIX:line="52" PREFIX:column="9">// wait for the pulse to start</comment>
	<while PREFIX:line="53" PREFIX:column="9">while <condition PREFIX:line="53" PREFIX:column="15">(<expr PREFIX:line="53" PREFIX:column="16">(*<call><name PREFIX:line="53" PREFIX:column="18">portInputRegister</name><argument_list PREFIX:line="53" PREFIX:column="35">(<argument><expr><name PREFIX:line="53" PREFIX:column="36">port</name></expr></argument>)</argument_list></call> &amp; <name PREFIX:line="53" PREFIX:column="44">bit</name>) != <name PREFIX:line="53" PREFIX:column="52">stateMask</name></expr>)</condition>
		<if PREFIX:line="54" PREFIX:column="17">if <condition PREFIX:line="54" PREFIX:column="20">(<expr><name PREFIX:line="54" PREFIX:column="21">numloops</name>++ == <name PREFIX:line="54" PREFIX:column="35">maxloops</name></expr>)</condition><then PREFIX:line="54" PREFIX:column="44">
			<return PREFIX:line="55" PREFIX:column="25">return <expr PREFIX:line="55" PREFIX:column="32">0</expr>;</return></then></if></while>
	
	<comment type="line" PREFIX:line="57" PREFIX:column="9">// wait for the pulse to stop</comment>
	<while PREFIX:line="58" PREFIX:column="9">while <condition PREFIX:line="58" PREFIX:column="15">(<expr PREFIX:line="58" PREFIX:column="16">(*<call><name PREFIX:line="58" PREFIX:column="18">portInputRegister</name><argument_list PREFIX:line="58" PREFIX:column="35">(<argument><expr><name PREFIX:line="58" PREFIX:column="36">port</name></expr></argument>)</argument_list></call> &amp; <name PREFIX:line="58" PREFIX:column="44">bit</name>) == <name PREFIX:line="58" PREFIX:column="52">stateMask</name></expr>)</condition> <block PREFIX:line="58" PREFIX:column="63">{
		<if PREFIX:line="59" PREFIX:column="17">if <condition PREFIX:line="59" PREFIX:column="20">(<expr><name PREFIX:line="59" PREFIX:column="21">numloops</name>++ == <name PREFIX:line="59" PREFIX:column="35">maxloops</name></expr>)</condition><then PREFIX:line="59" PREFIX:column="44">
			<return PREFIX:line="60" PREFIX:column="25">return <expr PREFIX:line="60" PREFIX:column="32">0</expr>;</return></then></if>
		<expr_stmt><expr><name PREFIX:line="61" PREFIX:column="17">width</name>++</expr>;</expr_stmt>
	}</block></while>

	<comment type="line" PREFIX:line="64" PREFIX:column="9">// convert the reading to microseconds. There will be some error introduced by</comment>
	<comment type="line" PREFIX:line="65" PREFIX:column="9">// the interrupt handlers.</comment>

	<comment type="line" PREFIX:line="67" PREFIX:column="9">// Conversion ants are compiler-dependent, different compiler versions</comment>
	<comment type="line" PREFIX:line="68" PREFIX:column="9">// have different levels of optimization.</comment>
<cpp:if PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="69" PREFIX:column="5">__GNUC__</name>==4 &amp;&amp; <name PREFIX:line="69" PREFIX:column="20">__GNUC_MINOR__</name>==3 &amp;&amp; <name PREFIX:line="69" PREFIX:column="41">__GNUC_PATCHLEVEL__</name>==2</expr></cpp:if>
	<comment type="line" PREFIX:line="70" PREFIX:column="9">// avr-gcc 4.3.2</comment>
	<return PREFIX:line="71" PREFIX:column="9">return <expr><call><name PREFIX:line="71" PREFIX:column="16">clockCyclesToMicroseconds</name><argument_list PREFIX:line="71" PREFIX:column="41">(<argument><expr><name PREFIX:line="71" PREFIX:column="42">width</name> * 21 + 16</expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif PREFIX:line="72" PREFIX:column="1">#<cpp:directive PREFIX:line="72" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="72" PREFIX:column="7">__GNUC__</name>==4 &amp;&amp; <name PREFIX:line="72" PREFIX:column="22">__GNUC_MINOR__</name>==8 &amp;&amp; <name PREFIX:line="72" PREFIX:column="43">__GNUC_PATCHLEVEL__</name>==1</expr></cpp:elif>
	<comment type="line" PREFIX:line="73" PREFIX:column="9">// avr-gcc 4.8.1</comment>
	<return PREFIX:line="74" PREFIX:column="9">return <expr><call><name PREFIX:line="74" PREFIX:column="16">clockCyclesToMicroseconds</name><argument_list PREFIX:line="74" PREFIX:column="41">(<argument><expr><name PREFIX:line="74" PREFIX:column="42">width</name> * 24 + 16</expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif PREFIX:line="75" PREFIX:column="1">#<cpp:directive PREFIX:line="75" PREFIX:column="2">elif</cpp:directive> <expr><name PREFIX:line="75" PREFIX:column="7">__GNUC__</name>&lt;=4 &amp;&amp; <name PREFIX:line="75" PREFIX:column="22">__GNUC_MINOR__</name>&lt;=3</expr></cpp:elif>
	<comment type="line" PREFIX:line="76" PREFIX:column="9">// avr-gcc &lt;=4.3.x</comment>
	<cpp:error PREFIX:line="77" PREFIX:column="9">#<cpp:directive PREFIX:line="77" PREFIX:column="10">warning</cpp:directive> "pulseIn() results may not be accurate"</cpp:error>
	<return PREFIX:line="78" PREFIX:column="9">return <expr><call><name PREFIX:line="78" PREFIX:column="16">clockCyclesToMicroseconds</name><argument_list PREFIX:line="78" PREFIX:column="41">(<argument><expr><name PREFIX:line="78" PREFIX:column="42">width</name> * 21 + 16</expr></argument>)</argument_list></call></expr>;</return>
<cpp:else PREFIX:line="79" PREFIX:column="1">#<cpp:directive PREFIX:line="79" PREFIX:column="2">else</cpp:directive></cpp:else>
	<comment type="line" PREFIX:line="80" PREFIX:column="9">// avr-gcc &gt;4.3.x</comment>
	<cpp:error PREFIX:line="81" PREFIX:column="9">#<cpp:directive PREFIX:line="81" PREFIX:column="10">warning</cpp:directive> "pulseIn() results may not be accurate"</cpp:error>
	<return PREFIX:line="82" PREFIX:column="9">return <expr><call><name PREFIX:line="82" PREFIX:column="16">clockCyclesToMicroseconds</name><argument_list PREFIX:line="82" PREFIX:column="41">(<argument><expr><name PREFIX:line="82" PREFIX:column="42">width</name> * 24 + 16</expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif PREFIX:line="83" PREFIX:column="1">#<cpp:directive PREFIX:line="83" PREFIX:column="2">endif</cpp:directive></cpp:endif>

}</block></function>
</unit>
