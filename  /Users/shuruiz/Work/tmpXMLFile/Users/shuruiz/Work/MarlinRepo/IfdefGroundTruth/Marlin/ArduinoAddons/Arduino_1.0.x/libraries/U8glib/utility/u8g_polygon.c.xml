<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/libraries/U8glib/utility/u8g_polygon.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*

  u8g_polygon.c

  Implementation of a polygon draw algorithm for "convex" polygons. 
 
  Universal 8bit Graphics Library
  
  Copyright (c) 2013, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
 
  See also:
  http://www.angelfire.com/linux/myp/ConvexPolRas/ConvexPolRas.html
  Computer Graphics, Principles and Practice, Foley, van Dam, Feiner, Hughes (pp 92)
  Michael Abrash's Graphics Programming Black Book, Special Edition (Chapter 38 and 39)

  Optimized for embedded systems
  - static memory usage only
  - consistent data types
  - low flash ROM consumption
  
*/</comment>


<cpp:include PREFIX:line="49" PREFIX:column="1">#<cpp:directive PREFIX:line="49" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="49" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>




<comment type="block" PREFIX:line="54" PREFIX:column="1">/*===========================================*/</comment>
<comment type="block" PREFIX:line="55" PREFIX:column="1">/* procedures, which should not be inlined (save as much flash ROM as possible */</comment>

<decl_stmt><decl><type><specifier PREFIX:line="57" PREFIX:column="1">static</specifier> <name PREFIX:line="57" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="57" PREFIX:column="16">pge_Next</name><argument_list PREFIX:line="57" PREFIX:column="24">(<argument PREFIX:line="57" PREFIX:column="25">struct <expr><name PREFIX:line="57" PREFIX:column="32">pg_edge_struct</name> *<name PREFIX:line="57" PREFIX:column="48">pge</name></expr></argument>)</argument_list> <name PREFIX:line="57" PREFIX:column="53">PG_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="58" PREFIX:column="1">static</specifier> <name PREFIX:line="58" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="58" PREFIX:column="16">pg_inc</name><argument_list PREFIX:line="58" PREFIX:column="22">(<argument><expr><name PREFIX:line="58" PREFIX:column="23">pg_struct</name> *<name PREFIX:line="58" PREFIX:column="34">pg</name></expr></argument>, <argument><expr><name PREFIX:line="58" PREFIX:column="38">uint8_t</name> <name PREFIX:line="58" PREFIX:column="46">i</name></expr></argument>)</argument_list> <name PREFIX:line="58" PREFIX:column="49">PG_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="59" PREFIX:column="1">static</specifier> <name PREFIX:line="59" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="59" PREFIX:column="16">pg_dec</name><argument_list PREFIX:line="59" PREFIX:column="22">(<argument><expr><name PREFIX:line="59" PREFIX:column="23">pg_struct</name> *<name PREFIX:line="59" PREFIX:column="34">pg</name></expr></argument>, <argument><expr><name PREFIX:line="59" PREFIX:column="38">uint8_t</name> <name PREFIX:line="59" PREFIX:column="46">i</name></expr></argument>)</argument_list> <name PREFIX:line="59" PREFIX:column="49">PG_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="60" PREFIX:column="1">static</specifier> <name PREFIX:line="60" PREFIX:column="8">void</name></type> <name PREFIX:line="60" PREFIX:column="13">pg_expand_min_y</name><argument_list PREFIX:line="60" PREFIX:column="28">(<argument><expr><name PREFIX:line="60" PREFIX:column="29">pg_struct</name> *<name PREFIX:line="60" PREFIX:column="40">pg</name></expr></argument>, <argument><expr><name PREFIX:line="60" PREFIX:column="44">pg_word_t</name> <name PREFIX:line="60" PREFIX:column="54">min_y</name></expr></argument>, <argument><expr><name PREFIX:line="60" PREFIX:column="61">uint8_t</name> <name PREFIX:line="60" PREFIX:column="69">pge_idx</name></expr></argument>)</argument_list> <name PREFIX:line="60" PREFIX:column="78">PG_NOINLINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="61" PREFIX:column="1">static</specifier> <name PREFIX:line="61" PREFIX:column="8">void</name></type> <name PREFIX:line="61" PREFIX:column="13">pg_line_init</name><argument_list PREFIX:line="61" PREFIX:column="25">(<argument><expr><name PREFIX:line="61" PREFIX:column="26">pg_struct</name> *  <name PREFIX:line="61" PREFIX:column="39">pg</name></expr></argument>, <argument><expr><name PREFIX:line="61" PREFIX:column="43">uint8_t</name> <name PREFIX:line="61" PREFIX:column="51">pge_index</name></expr></argument>)</argument_list> <name PREFIX:line="61" PREFIX:column="62">PG_NOINLINE</name></decl>;</decl_stmt>

<comment type="block" PREFIX:line="63" PREFIX:column="1">/*===========================================*/</comment>
<comment type="block" PREFIX:line="64" PREFIX:column="1">/* line draw algorithm */</comment>

<function><type><specifier PREFIX:line="66" PREFIX:column="1">static</specifier> <name PREFIX:line="66" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="66" PREFIX:column="16">pge_Next</name><parameter_list PREFIX:line="66" PREFIX:column="24">(<param><decl><type PREFIX:line="66" PREFIX:column="25">struct <name PREFIX:line="66" PREFIX:column="32">pg_edge_struct</name> *</type><name PREFIX:line="66" PREFIX:column="48">pge</name></decl></param>)</parameter_list>
<block PREFIX:line="67" PREFIX:column="1">{
  <if PREFIX:line="68" PREFIX:column="3">if <condition PREFIX:line="68" PREFIX:column="6">( <expr><name><name PREFIX:line="68" PREFIX:column="8">pge</name>-&gt;<name PREFIX:line="68" PREFIX:column="13">current_y</name></name> &gt;= <name><name PREFIX:line="68" PREFIX:column="26">pge</name>-&gt;<name PREFIX:line="68" PREFIX:column="31">max_y</name></name></expr> )</condition><then PREFIX:line="68" PREFIX:column="38">
    <return PREFIX:line="69" PREFIX:column="5">return <expr PREFIX:line="69" PREFIX:column="12">0</expr>;</return></then></if>
  
  <expr_stmt><expr><name><name PREFIX:line="71" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="71" PREFIX:column="8">current_x</name></name> += <name><name PREFIX:line="71" PREFIX:column="21">pge</name>-&gt;<name PREFIX:line="71" PREFIX:column="26">current_x_offset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="72" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="72" PREFIX:column="8">error</name></name> += <name><name PREFIX:line="72" PREFIX:column="17">pge</name>-&gt;<name PREFIX:line="72" PREFIX:column="22">error_offset</name></name></expr>;</expr_stmt>
  <if PREFIX:line="73" PREFIX:column="3">if <condition PREFIX:line="73" PREFIX:column="6">( <expr><name><name PREFIX:line="73" PREFIX:column="8">pge</name>-&gt;<name PREFIX:line="73" PREFIX:column="13">error</name></name> &gt; 0</expr> )</condition><then PREFIX:line="73" PREFIX:column="24">
  <block PREFIX:line="74" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="75" PREFIX:column="5">pge</name>-&gt;<name PREFIX:line="75" PREFIX:column="10">current_x</name></name> += <name><name PREFIX:line="75" PREFIX:column="23">pge</name>-&gt;<name PREFIX:line="75" PREFIX:column="28">x_direction</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="76" PREFIX:column="5">pge</name>-&gt;<name PREFIX:line="76" PREFIX:column="10">error</name></name> -= <name><name PREFIX:line="76" PREFIX:column="19">pge</name>-&gt;<name PREFIX:line="76" PREFIX:column="24">height</name></name></expr>;</expr_stmt>
  }</block></then></if>  
  
  <expr_stmt><expr><name><name PREFIX:line="79" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="79" PREFIX:column="8">current_y</name></name>++</expr>;</expr_stmt>
  <return PREFIX:line="80" PREFIX:column="3">return <expr PREFIX:line="80" PREFIX:column="10">1</expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="83" PREFIX:column="1">/* assumes y2 &gt; y1 */</comment>
<function><type><specifier PREFIX:line="84" PREFIX:column="1">static</specifier> <name PREFIX:line="84" PREFIX:column="8">void</name></type> <name PREFIX:line="84" PREFIX:column="13">pge_Init</name><parameter_list PREFIX:line="84" PREFIX:column="21">(<param><decl><type PREFIX:line="84" PREFIX:column="22">struct <name PREFIX:line="84" PREFIX:column="29">pg_edge_struct</name> *</type><name PREFIX:line="84" PREFIX:column="45">pge</name></decl></param>, <param><decl><type><name PREFIX:line="84" PREFIX:column="50">pg_word_t</name></type> <name PREFIX:line="84" PREFIX:column="60">x1</name></decl></param>, <param><decl><type><name PREFIX:line="84" PREFIX:column="64">pg_word_t</name></type> <name PREFIX:line="84" PREFIX:column="74">y1</name></decl></param>, <param><decl><type><name PREFIX:line="84" PREFIX:column="78">pg_word_t</name></type> <name PREFIX:line="84" PREFIX:column="88">x2</name></decl></param>, <param><decl><type><name PREFIX:line="84" PREFIX:column="92">pg_word_t</name></type> <name PREFIX:line="84" PREFIX:column="102">y2</name></decl></param>)</parameter_list>
<block PREFIX:line="85" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="86" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="86" PREFIX:column="13">dx</name> <init PREFIX:line="86" PREFIX:column="16">= <expr><name PREFIX:line="86" PREFIX:column="18">x2</name> - <name PREFIX:line="86" PREFIX:column="23">x1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="87" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="87" PREFIX:column="13">width</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name PREFIX:line="89" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="89" PREFIX:column="8">height</name></name> = <name PREFIX:line="89" PREFIX:column="17">y2</name> - <name PREFIX:line="89" PREFIX:column="22">y1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="90" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="90" PREFIX:column="8">max_y</name></name> = <name PREFIX:line="90" PREFIX:column="16">y2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="91" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="91" PREFIX:column="8">current_y</name></name> = <name PREFIX:line="91" PREFIX:column="20">y1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="92" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="92" PREFIX:column="8">current_x</name></name> = <name PREFIX:line="92" PREFIX:column="20">x1</name></expr>;</expr_stmt>

  <if PREFIX:line="94" PREFIX:column="3">if <condition PREFIX:line="94" PREFIX:column="6">( <expr><name PREFIX:line="94" PREFIX:column="8">dx</name> &gt;= 0</expr> )</condition><then PREFIX:line="94" PREFIX:column="17">
  <block PREFIX:line="95" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="96" PREFIX:column="5">pge</name>-&gt;<name PREFIX:line="96" PREFIX:column="10">x_direction</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="97" PREFIX:column="5">width</name> = <name PREFIX:line="97" PREFIX:column="13">dx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="98" PREFIX:column="5">pge</name>-&gt;<name PREFIX:line="98" PREFIX:column="10">error</name></name> = 0</expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="100" PREFIX:column="3">else
  <block PREFIX:line="101" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="102" PREFIX:column="5">pge</name>-&gt;<name PREFIX:line="102" PREFIX:column="10">x_direction</name></name> = -1</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="103" PREFIX:column="5">width</name> = -<name PREFIX:line="103" PREFIX:column="14">dx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="104" PREFIX:column="5">pge</name>-&gt;<name PREFIX:line="104" PREFIX:column="10">error</name></name> = 1 - <name><name PREFIX:line="104" PREFIX:column="22">pge</name>-&gt;<name PREFIX:line="104" PREFIX:column="27">height</name></name></expr>;</expr_stmt>
  }</block></else></if>
  
  <expr_stmt><expr><name><name PREFIX:line="107" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="107" PREFIX:column="8">current_x_offset</name></name> = <name PREFIX:line="107" PREFIX:column="27">dx</name> / <name><name PREFIX:line="107" PREFIX:column="32">pge</name>-&gt;<name PREFIX:line="107" PREFIX:column="37">height</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="108" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="108" PREFIX:column="8">error_offset</name></name> = <name PREFIX:line="108" PREFIX:column="23">width</name> % <name><name PREFIX:line="108" PREFIX:column="31">pge</name>-&gt;<name PREFIX:line="108" PREFIX:column="36">height</name></name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="111" PREFIX:column="1">/*===========================================*/</comment>
<comment type="block" PREFIX:line="112" PREFIX:column="1">/* convex polygon algorithm */</comment>

<function><type><specifier PREFIX:line="114" PREFIX:column="1">static</specifier> <name PREFIX:line="114" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="114" PREFIX:column="16">pg_inc</name><parameter_list PREFIX:line="114" PREFIX:column="22">(<param><decl><type><name PREFIX:line="114" PREFIX:column="23">pg_struct</name> *</type><name PREFIX:line="114" PREFIX:column="34">pg</name></decl></param>, <param><decl><type><name PREFIX:line="114" PREFIX:column="38">uint8_t</name></type> <name PREFIX:line="114" PREFIX:column="46">i</name></decl></param>)</parameter_list>
<block PREFIX:line="115" PREFIX:column="1">{
    <expr_stmt><expr><name PREFIX:line="116" PREFIX:column="5">i</name>++</expr>;</expr_stmt>
    <if PREFIX:line="117" PREFIX:column="5">if <condition PREFIX:line="117" PREFIX:column="8">( <expr><name PREFIX:line="117" PREFIX:column="10">i</name> &gt;= <name><name PREFIX:line="117" PREFIX:column="15">pg</name>-&gt;<name PREFIX:line="117" PREFIX:column="19">cnt</name></name></expr> )</condition><then PREFIX:line="117" PREFIX:column="24">
      <expr_stmt><expr><name PREFIX:line="118" PREFIX:column="7">i</name> = 0</expr>;</expr_stmt></then></if>
    <return PREFIX:line="119" PREFIX:column="5">return <expr><name PREFIX:line="119" PREFIX:column="12">i</name></expr>;</return>
}</block></function>

<function><type><specifier PREFIX:line="122" PREFIX:column="1">static</specifier> <name PREFIX:line="122" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="122" PREFIX:column="16">pg_dec</name><parameter_list PREFIX:line="122" PREFIX:column="22">(<param><decl><type><name PREFIX:line="122" PREFIX:column="23">pg_struct</name> *</type><name PREFIX:line="122" PREFIX:column="34">pg</name></decl></param>, <param><decl><type><name PREFIX:line="122" PREFIX:column="38">uint8_t</name></type> <name PREFIX:line="122" PREFIX:column="46">i</name></decl></param>)</parameter_list>
<block PREFIX:line="123" PREFIX:column="1">{
    <expr_stmt><expr><name PREFIX:line="124" PREFIX:column="5">i</name>--</expr>;</expr_stmt>
    <if PREFIX:line="125" PREFIX:column="5">if <condition PREFIX:line="125" PREFIX:column="8">( <expr><name PREFIX:line="125" PREFIX:column="10">i</name> &gt;= <name><name PREFIX:line="125" PREFIX:column="15">pg</name>-&gt;<name PREFIX:line="125" PREFIX:column="19">cnt</name></name></expr> )</condition><then PREFIX:line="125" PREFIX:column="24">
      <expr_stmt><expr><name PREFIX:line="126" PREFIX:column="7">i</name> = <name><name PREFIX:line="126" PREFIX:column="11">pg</name>-&gt;<name PREFIX:line="126" PREFIX:column="15">cnt</name></name>-1</expr>;</expr_stmt></then></if>
    <return PREFIX:line="127" PREFIX:column="5">return <expr><name PREFIX:line="127" PREFIX:column="12">i</name></expr>;</return>
}</block></function>

<function><type><specifier PREFIX:line="130" PREFIX:column="1">static</specifier> <name PREFIX:line="130" PREFIX:column="8">void</name></type> <name PREFIX:line="130" PREFIX:column="13">pg_expand_min_y</name><parameter_list PREFIX:line="130" PREFIX:column="28">(<param><decl><type><name PREFIX:line="130" PREFIX:column="29">pg_struct</name> *</type><name PREFIX:line="130" PREFIX:column="40">pg</name></decl></param>, <param><decl><type><name PREFIX:line="130" PREFIX:column="44">pg_word_t</name></type> <name PREFIX:line="130" PREFIX:column="54">min_y</name></decl></param>, <param><decl><type><name PREFIX:line="130" PREFIX:column="61">uint8_t</name></type> <name PREFIX:line="130" PREFIX:column="69">pge_idx</name></decl></param>)</parameter_list>
<block PREFIX:line="131" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="132" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="132" PREFIX:column="11">i</name> <init PREFIX:line="132" PREFIX:column="13">= <expr><name><name PREFIX:line="132" PREFIX:column="15">pg</name>-&gt;<name PREFIX:line="132" PREFIX:column="19">pge</name><index PREFIX:line="132" PREFIX:column="22">[<expr><name PREFIX:line="132" PREFIX:column="23">pge_idx</name></expr>]</index></name>.<name PREFIX:line="132" PREFIX:column="32">curr_idx</name></expr></init></decl>;</decl_stmt>
  <for PREFIX:line="133" PREFIX:column="3">for(<init PREFIX:line="133" PREFIX:column="7">;</init><condition PREFIX:line="133" PREFIX:column="8">;</condition><incr/>)
  <block PREFIX:line="134" PREFIX:column="3">{
    <expr_stmt><expr><name PREFIX:line="135" PREFIX:column="5">i</name> = <name><name PREFIX:line="135" PREFIX:column="9">pg</name>-&gt;<name PREFIX:line="135" PREFIX:column="13">pge</name><index PREFIX:line="135" PREFIX:column="16">[<expr><name PREFIX:line="135" PREFIX:column="17">pge_idx</name></expr>]</index></name>.<call><name PREFIX:line="135" PREFIX:column="26">next_idx_fn</name><argument_list PREFIX:line="135" PREFIX:column="37">(<argument><expr><name PREFIX:line="135" PREFIX:column="38">pg</name></expr></argument>, <argument><expr><name PREFIX:line="135" PREFIX:column="42">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if PREFIX:line="136" PREFIX:column="5">if <condition PREFIX:line="136" PREFIX:column="8">( <expr><name><name PREFIX:line="136" PREFIX:column="10">pg</name>-&gt;<name PREFIX:line="136" PREFIX:column="14">list</name><index PREFIX:line="136" PREFIX:column="18">[<expr><name PREFIX:line="136" PREFIX:column="19">i</name></expr>]</index></name>.<name PREFIX:line="136" PREFIX:column="22">y</name> != <name PREFIX:line="136" PREFIX:column="27">min_y</name></expr> )</condition><then PREFIX:line="136" PREFIX:column="34">
      <break PREFIX:line="137" PREFIX:column="7">break;</break></then></if>	
    <expr_stmt><expr><name><name PREFIX:line="138" PREFIX:column="5">pg</name>-&gt;<name PREFIX:line="138" PREFIX:column="9">pge</name><index PREFIX:line="138" PREFIX:column="12">[<expr><name PREFIX:line="138" PREFIX:column="13">pge_idx</name></expr>]</index></name>.<name PREFIX:line="138" PREFIX:column="22">curr_idx</name> = <name PREFIX:line="138" PREFIX:column="33">i</name></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><specifier PREFIX:line="142" PREFIX:column="1">static</specifier> <name PREFIX:line="142" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="142" PREFIX:column="16">pg_prepare</name><parameter_list PREFIX:line="142" PREFIX:column="26">(<param><decl><type><name PREFIX:line="142" PREFIX:column="27">pg_struct</name> *</type><name PREFIX:line="142" PREFIX:column="38">pg</name></decl></param>)</parameter_list>
<block PREFIX:line="143" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="144" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="144" PREFIX:column="13">max_y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="145" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="145" PREFIX:column="13">min_y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="146" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="146" PREFIX:column="11">i</name></decl>;</decl_stmt>

  <comment type="block" PREFIX:line="148" PREFIX:column="3">/* setup the next index procedures */</comment>
  <expr_stmt><expr><name><name PREFIX:line="149" PREFIX:column="3">pg</name>-&gt;<name PREFIX:line="149" PREFIX:column="7">pge</name><index PREFIX:line="149" PREFIX:column="10">[<expr><name PREFIX:line="149" PREFIX:column="11">PG_RIGHT</name></expr>]</index></name>.<name PREFIX:line="149" PREFIX:column="21">next_idx_fn</name> = <name PREFIX:line="149" PREFIX:column="35">pg_inc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="150" PREFIX:column="3">pg</name>-&gt;<name PREFIX:line="150" PREFIX:column="7">pge</name><index PREFIX:line="150" PREFIX:column="10">[<expr><name PREFIX:line="150" PREFIX:column="11">PG_LEFT</name></expr>]</index></name>.<name PREFIX:line="150" PREFIX:column="20">next_idx_fn</name> = <name PREFIX:line="150" PREFIX:column="34">pg_dec</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="152" PREFIX:column="3">/* search for highest and lowest point */</comment>
  <expr_stmt><expr><name PREFIX:line="153" PREFIX:column="3">max_y</name> = <name><name PREFIX:line="153" PREFIX:column="11">pg</name>-&gt;<name PREFIX:line="153" PREFIX:column="15">list</name><index PREFIX:line="153" PREFIX:column="19">[<expr PREFIX:line="153" PREFIX:column="20">0</expr>]</index></name>.<name PREFIX:line="153" PREFIX:column="23">y</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="154" PREFIX:column="3">min_y</name> = <name><name PREFIX:line="154" PREFIX:column="11">pg</name>-&gt;<name PREFIX:line="154" PREFIX:column="15">list</name><index PREFIX:line="154" PREFIX:column="19">[<expr PREFIX:line="154" PREFIX:column="20">0</expr>]</index></name>.<name PREFIX:line="154" PREFIX:column="23">y</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="155" PREFIX:column="3">pg</name>-&gt;<name PREFIX:line="155" PREFIX:column="7">pge</name><index PREFIX:line="155" PREFIX:column="10">[<expr><name PREFIX:line="155" PREFIX:column="11">PG_LEFT</name></expr>]</index></name>.<name PREFIX:line="155" PREFIX:column="20">curr_idx</name> = 0</expr>;</expr_stmt>
  <for PREFIX:line="156" PREFIX:column="3">for( <init><expr><name PREFIX:line="156" PREFIX:column="8">i</name> = 1</expr>;</init> <condition><expr><name PREFIX:line="156" PREFIX:column="15">i</name> &lt; <name><name PREFIX:line="156" PREFIX:column="19">pg</name>-&gt;<name PREFIX:line="156" PREFIX:column="23">cnt</name></name></expr>;</condition> <incr><expr><name PREFIX:line="156" PREFIX:column="28">i</name>++</expr></incr> )
  <block PREFIX:line="157" PREFIX:column="3">{
    <if PREFIX:line="158" PREFIX:column="5">if <condition PREFIX:line="158" PREFIX:column="8">( <expr><name PREFIX:line="158" PREFIX:column="10">max_y</name> &lt; <name><name PREFIX:line="158" PREFIX:column="18">pg</name>-&gt;<name PREFIX:line="158" PREFIX:column="22">list</name><index PREFIX:line="158" PREFIX:column="26">[<expr><name PREFIX:line="158" PREFIX:column="27">i</name></expr>]</index></name>.<name PREFIX:line="158" PREFIX:column="30">y</name></expr> )</condition><then PREFIX:line="158" PREFIX:column="33">
    <block PREFIX:line="159" PREFIX:column="5">{
      <expr_stmt><expr><name PREFIX:line="160" PREFIX:column="7">max_y</name> = <name><name PREFIX:line="160" PREFIX:column="15">pg</name>-&gt;<name PREFIX:line="160" PREFIX:column="19">list</name><index PREFIX:line="160" PREFIX:column="23">[<expr><name PREFIX:line="160" PREFIX:column="24">i</name></expr>]</index></name>.<name PREFIX:line="160" PREFIX:column="27">y</name></expr>;</expr_stmt>
    }</block></then></if>
    <if PREFIX:line="162" PREFIX:column="5">if <condition PREFIX:line="162" PREFIX:column="8">( <expr><name PREFIX:line="162" PREFIX:column="10">min_y</name> &gt; <name><name PREFIX:line="162" PREFIX:column="18">pg</name>-&gt;<name PREFIX:line="162" PREFIX:column="22">list</name><index PREFIX:line="162" PREFIX:column="26">[<expr><name PREFIX:line="162" PREFIX:column="27">i</name></expr>]</index></name>.<name PREFIX:line="162" PREFIX:column="30">y</name></expr> )</condition><then PREFIX:line="162" PREFIX:column="33">
    <block PREFIX:line="163" PREFIX:column="5">{
      <expr_stmt><expr><name><name PREFIX:line="164" PREFIX:column="7">pg</name>-&gt;<name PREFIX:line="164" PREFIX:column="11">pge</name><index PREFIX:line="164" PREFIX:column="14">[<expr><name PREFIX:line="164" PREFIX:column="15">PG_LEFT</name></expr>]</index></name>.<name PREFIX:line="164" PREFIX:column="24">curr_idx</name> = <name PREFIX:line="164" PREFIX:column="35">i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="165" PREFIX:column="7">min_y</name> = <name><name PREFIX:line="165" PREFIX:column="15">pg</name>-&gt;<name PREFIX:line="165" PREFIX:column="19">list</name><index PREFIX:line="165" PREFIX:column="23">[<expr><name PREFIX:line="165" PREFIX:column="24">i</name></expr>]</index></name>.<name PREFIX:line="165" PREFIX:column="27">y</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <comment type="block" PREFIX:line="169" PREFIX:column="3">/* calculate total number of scan lines */</comment>
  <expr_stmt><expr><name><name PREFIX:line="170" PREFIX:column="3">pg</name>-&gt;<name PREFIX:line="170" PREFIX:column="7">total_scan_line_cnt</name></name> = <name PREFIX:line="170" PREFIX:column="29">max_y</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name PREFIX:line="171" PREFIX:column="3">pg</name>-&gt;<name PREFIX:line="171" PREFIX:column="7">total_scan_line_cnt</name></name> -= <name PREFIX:line="171" PREFIX:column="30">min_y</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="173" PREFIX:column="3">/* exit if polygon height is zero */</comment>
  <if PREFIX:line="174" PREFIX:column="3">if <condition PREFIX:line="174" PREFIX:column="6">( <expr><name><name PREFIX:line="174" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="174" PREFIX:column="12">total_scan_line_cnt</name></name> == 0</expr> )</condition><then PREFIX:line="174" PREFIX:column="38">
    <return PREFIX:line="175" PREFIX:column="5">return <expr PREFIX:line="175" PREFIX:column="12">0</expr>;</return></then></if>
  
  <comment type="block" PREFIX:line="177" PREFIX:column="3">/* if the minimum y side is flat, try to find the lowest and highest x points */</comment>
  <expr_stmt><expr><name><name PREFIX:line="178" PREFIX:column="3">pg</name>-&gt;<name PREFIX:line="178" PREFIX:column="7">pge</name><index PREFIX:line="178" PREFIX:column="10">[<expr><name PREFIX:line="178" PREFIX:column="11">PG_RIGHT</name></expr>]</index></name>.<name PREFIX:line="178" PREFIX:column="21">curr_idx</name> = <name><name PREFIX:line="178" PREFIX:column="32">pg</name>-&gt;<name PREFIX:line="178" PREFIX:column="36">pge</name><index PREFIX:line="178" PREFIX:column="39">[<expr><name PREFIX:line="178" PREFIX:column="40">PG_LEFT</name></expr>]</index></name>.<name PREFIX:line="178" PREFIX:column="49">curr_idx</name></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name PREFIX:line="179" PREFIX:column="3">pg_expand_min_y</name><argument_list PREFIX:line="179" PREFIX:column="18">(<argument><expr><name PREFIX:line="179" PREFIX:column="19">pg</name></expr></argument>, <argument><expr><name PREFIX:line="179" PREFIX:column="23">min_y</name></expr></argument>, <argument><expr><name PREFIX:line="179" PREFIX:column="30">PG_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="180" PREFIX:column="3">pg_expand_min_y</name><argument_list PREFIX:line="180" PREFIX:column="18">(<argument><expr><name PREFIX:line="180" PREFIX:column="19">pg</name></expr></argument>, <argument><expr><name PREFIX:line="180" PREFIX:column="23">min_y</name></expr></argument>, <argument><expr><name PREFIX:line="180" PREFIX:column="30">PG_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="182" PREFIX:column="3">/* check if the min side is really flat (depends on the x values) */</comment>
  <expr_stmt><expr><name><name PREFIX:line="183" PREFIX:column="3">pg</name>-&gt;<name PREFIX:line="183" PREFIX:column="7">is_min_y_not_flat</name></name> = 1</expr>;</expr_stmt>
  <if PREFIX:line="184" PREFIX:column="3">if <condition PREFIX:line="184" PREFIX:column="6">( <expr><name><name PREFIX:line="184" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="184" PREFIX:column="12">list</name><index PREFIX:line="184" PREFIX:column="16">[<expr><name><name PREFIX:line="184" PREFIX:column="17">pg</name>-&gt;<name PREFIX:line="184" PREFIX:column="21">pge</name><index PREFIX:line="184" PREFIX:column="24">[<expr><name PREFIX:line="184" PREFIX:column="25">PG_LEFT</name></expr>]</index></name>.<name PREFIX:line="184" PREFIX:column="34">curr_idx</name></expr>]</index></name>.<name PREFIX:line="184" PREFIX:column="44">x</name> != <name><name PREFIX:line="184" PREFIX:column="49">pg</name>-&gt;<name PREFIX:line="184" PREFIX:column="53">list</name><index PREFIX:line="184" PREFIX:column="57">[<expr><name><name PREFIX:line="184" PREFIX:column="58">pg</name>-&gt;<name PREFIX:line="184" PREFIX:column="62">pge</name><index PREFIX:line="184" PREFIX:column="65">[<expr><name PREFIX:line="184" PREFIX:column="66">PG_RIGHT</name></expr>]</index></name>.<name PREFIX:line="184" PREFIX:column="76">curr_idx</name></expr>]</index></name>.<name PREFIX:line="184" PREFIX:column="86">x</name></expr> )</condition><then PREFIX:line="184" PREFIX:column="89">
  <block PREFIX:line="185" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="186" PREFIX:column="5">pg</name>-&gt;<name PREFIX:line="186" PREFIX:column="9">is_min_y_not_flat</name></name> = 0</expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="188" PREFIX:column="3">else
  <block PREFIX:line="189" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="190" PREFIX:column="5">pg</name>-&gt;<name PREFIX:line="190" PREFIX:column="9">total_scan_line_cnt</name></name>--</expr>;</expr_stmt>
    <if PREFIX:line="191" PREFIX:column="5">if <condition PREFIX:line="191" PREFIX:column="8">( <expr><name><name PREFIX:line="191" PREFIX:column="10">pg</name>-&gt;<name PREFIX:line="191" PREFIX:column="14">total_scan_line_cnt</name></name> == 0</expr> )</condition><then PREFIX:line="191" PREFIX:column="40">
      <return PREFIX:line="192" PREFIX:column="7">return <expr PREFIX:line="192" PREFIX:column="14">0</expr>;</return></then></if>
  }</block></else></if>

  <return PREFIX:line="195" PREFIX:column="3">return <expr PREFIX:line="195" PREFIX:column="10">1</expr>;</return>
}</block></function>

<function><type><specifier PREFIX:line="198" PREFIX:column="1">static</specifier> <name PREFIX:line="198" PREFIX:column="8">void</name></type> <name PREFIX:line="198" PREFIX:column="13">pg_hline</name><parameter_list PREFIX:line="198" PREFIX:column="21">(<param><decl><type><name PREFIX:line="198" PREFIX:column="22">pg_struct</name> *</type><name PREFIX:line="198" PREFIX:column="33">pg</name></decl></param>, <param><decl><type><name PREFIX:line="198" PREFIX:column="37">u8g_t</name> *</type><name PREFIX:line="198" PREFIX:column="44">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="199" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="200" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="200" PREFIX:column="13">x1</name></decl>, <decl><type ref="prev"/><name PREFIX:line="200" PREFIX:column="17">x2</name></decl>, <decl><type ref="prev"/><name PREFIX:line="200" PREFIX:column="21">y</name></decl>;</decl_stmt>
  <expr_stmt><expr><name PREFIX:line="201" PREFIX:column="3">x1</name> = <name><name PREFIX:line="201" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="201" PREFIX:column="12">pge</name><index PREFIX:line="201" PREFIX:column="15">[<expr><name PREFIX:line="201" PREFIX:column="16">PG_LEFT</name></expr>]</index></name>.<name PREFIX:line="201" PREFIX:column="25">current_x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="202" PREFIX:column="3">x2</name> = <name><name PREFIX:line="202" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="202" PREFIX:column="12">pge</name><index PREFIX:line="202" PREFIX:column="15">[<expr><name PREFIX:line="202" PREFIX:column="16">PG_RIGHT</name></expr>]</index></name>.<name PREFIX:line="202" PREFIX:column="26">current_x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="203" PREFIX:column="3">y</name> = <name><name PREFIX:line="203" PREFIX:column="7">pg</name>-&gt;<name PREFIX:line="203" PREFIX:column="11">pge</name><index PREFIX:line="203" PREFIX:column="14">[<expr><name PREFIX:line="203" PREFIX:column="15">PG_RIGHT</name></expr>]</index></name>.<name PREFIX:line="203" PREFIX:column="25">current_y</name></expr>;</expr_stmt>
  
  <if PREFIX:line="205" PREFIX:column="3">if <condition PREFIX:line="205" PREFIX:column="6">( <expr><name PREFIX:line="205" PREFIX:column="8">y</name> &lt; 0</expr> )</condition><then PREFIX:line="205" PREFIX:column="15">
    <return PREFIX:line="206" PREFIX:column="5">return;</return></then></if>
  <if PREFIX:line="207" PREFIX:column="3">if <condition PREFIX:line="207" PREFIX:column="6">( <expr><name PREFIX:line="207" PREFIX:column="8">y</name> &gt;= <call><name PREFIX:line="207" PREFIX:column="13">u8g_GetHeight</name><argument_list PREFIX:line="207" PREFIX:column="26">(<argument><expr><name PREFIX:line="207" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="207" PREFIX:column="33">
    <return PREFIX:line="208" PREFIX:column="5">return;</return></then></if>
  <if PREFIX:line="209" PREFIX:column="3">if <condition PREFIX:line="209" PREFIX:column="6">( <expr><name PREFIX:line="209" PREFIX:column="8">x1</name> &lt; <name PREFIX:line="209" PREFIX:column="13">x2</name></expr> )</condition><then PREFIX:line="209" PREFIX:column="17">
  <block PREFIX:line="210" PREFIX:column="3">{
    <if PREFIX:line="211" PREFIX:column="5">if <condition PREFIX:line="211" PREFIX:column="8">( <expr><name PREFIX:line="211" PREFIX:column="10">x2</name> &lt; 0</expr> )</condition><then PREFIX:line="211" PREFIX:column="18">
      <return PREFIX:line="212" PREFIX:column="7">return;</return></then></if>
    <if PREFIX:line="213" PREFIX:column="5">if <condition PREFIX:line="213" PREFIX:column="8">( <expr><name PREFIX:line="213" PREFIX:column="10">x1</name> &gt;= <call><name PREFIX:line="213" PREFIX:column="16">u8g_GetWidth</name><argument_list PREFIX:line="213" PREFIX:column="28">(<argument><expr><name PREFIX:line="213" PREFIX:column="29">u8g</name></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="213" PREFIX:column="35">
      <return PREFIX:line="214" PREFIX:column="7">return;</return></then></if>
    <if PREFIX:line="215" PREFIX:column="5">if <condition PREFIX:line="215" PREFIX:column="8">( <expr><name PREFIX:line="215" PREFIX:column="10">x1</name> &lt; 0</expr> )</condition><then PREFIX:line="215" PREFIX:column="18">
      <expr_stmt><expr><name PREFIX:line="216" PREFIX:column="7">x1</name> = 0</expr>;</expr_stmt></then></if>
    <if PREFIX:line="217" PREFIX:column="5">if <condition PREFIX:line="217" PREFIX:column="8">( <expr><name PREFIX:line="217" PREFIX:column="10">x2</name> &gt;= <call><name PREFIX:line="217" PREFIX:column="16">u8g_GetWidth</name><argument_list PREFIX:line="217" PREFIX:column="28">(<argument><expr><name PREFIX:line="217" PREFIX:column="29">u8g</name></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="217" PREFIX:column="35">
      <expr_stmt><expr><name PREFIX:line="218" PREFIX:column="7">x2</name> = <call><name PREFIX:line="218" PREFIX:column="12">u8g_GetWidth</name><argument_list PREFIX:line="218" PREFIX:column="24">(<argument><expr><name PREFIX:line="218" PREFIX:column="25">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name PREFIX:line="219" PREFIX:column="5">u8g_DrawHLine</name><argument_list PREFIX:line="219" PREFIX:column="18">(<argument><expr><name PREFIX:line="219" PREFIX:column="19">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="219" PREFIX:column="24">x1</name></expr></argument>, <argument><expr><name PREFIX:line="219" PREFIX:column="28">y</name></expr></argument>, <argument><expr><name PREFIX:line="219" PREFIX:column="31">x2</name> - <name PREFIX:line="219" PREFIX:column="36">x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="221" PREFIX:column="3">else
  <block PREFIX:line="222" PREFIX:column="3">{
    <if PREFIX:line="223" PREFIX:column="5">if <condition PREFIX:line="223" PREFIX:column="8">( <expr><name PREFIX:line="223" PREFIX:column="10">x1</name> &lt; 0</expr> )</condition><then PREFIX:line="223" PREFIX:column="18">
      <return PREFIX:line="224" PREFIX:column="7">return;</return></then></if>
    <if PREFIX:line="225" PREFIX:column="5">if <condition PREFIX:line="225" PREFIX:column="8">( <expr><name PREFIX:line="225" PREFIX:column="10">x2</name> &gt;= <call><name PREFIX:line="225" PREFIX:column="16">u8g_GetWidth</name><argument_list PREFIX:line="225" PREFIX:column="28">(<argument><expr><name PREFIX:line="225" PREFIX:column="29">u8g</name></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="225" PREFIX:column="35">
      <return PREFIX:line="226" PREFIX:column="7">return;</return></then></if>
    <if PREFIX:line="227" PREFIX:column="5">if <condition PREFIX:line="227" PREFIX:column="8">( <expr><name PREFIX:line="227" PREFIX:column="10">x2</name> &lt; 0</expr> )</condition><then PREFIX:line="227" PREFIX:column="18">
      <expr_stmt><expr><name PREFIX:line="228" PREFIX:column="7">x1</name> = 0</expr>;</expr_stmt></then></if>
    <if PREFIX:line="229" PREFIX:column="5">if <condition PREFIX:line="229" PREFIX:column="8">( <expr><name PREFIX:line="229" PREFIX:column="10">x1</name> &gt;= <call><name PREFIX:line="229" PREFIX:column="16">u8g_GetWidth</name><argument_list PREFIX:line="229" PREFIX:column="28">(<argument><expr><name PREFIX:line="229" PREFIX:column="29">u8g</name></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="229" PREFIX:column="35">
      <expr_stmt><expr><name PREFIX:line="230" PREFIX:column="7">x1</name> = <call><name PREFIX:line="230" PREFIX:column="12">u8g_GetWidth</name><argument_list PREFIX:line="230" PREFIX:column="24">(<argument><expr><name PREFIX:line="230" PREFIX:column="25">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name PREFIX:line="231" PREFIX:column="5">u8g_DrawHLine</name><argument_list PREFIX:line="231" PREFIX:column="18">(<argument><expr><name PREFIX:line="231" PREFIX:column="19">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="231" PREFIX:column="24">x2</name></expr></argument>, <argument><expr><name PREFIX:line="231" PREFIX:column="28">y</name></expr></argument>, <argument><expr><name PREFIX:line="231" PREFIX:column="31">x1</name> - <name PREFIX:line="231" PREFIX:column="36">x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><specifier PREFIX:line="235" PREFIX:column="1">static</specifier> <name PREFIX:line="235" PREFIX:column="8">void</name></type> <name PREFIX:line="235" PREFIX:column="13">pg_line_init</name><parameter_list PREFIX:line="235" PREFIX:column="25">(<param><decl><type><name PREFIX:line="235" PREFIX:column="26">pg_struct</name> *</type> <name PREFIX:line="235" PREFIX:column="38">pg</name></decl></param>, <param><decl><type><name PREFIX:line="235" PREFIX:column="42">uint8_t</name></type> <name PREFIX:line="235" PREFIX:column="50">pge_index</name></decl></param>)</parameter_list>
<block PREFIX:line="236" PREFIX:column="1">{
  <decl_stmt><decl><type PREFIX:line="237" PREFIX:column="3">struct <name PREFIX:line="237" PREFIX:column="10">pg_edge_struct</name>  *</type><name PREFIX:line="237" PREFIX:column="27">pge</name> <init PREFIX:line="237" PREFIX:column="31">= <expr><name><name PREFIX:line="237" PREFIX:column="33">pg</name>-&gt;<name PREFIX:line="237" PREFIX:column="37">pge</name></name>+<name PREFIX:line="237" PREFIX:column="41">pge_index</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="238" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="238" PREFIX:column="11">idx</name></decl>;</decl_stmt>  
  <decl_stmt><decl><type><name PREFIX:line="239" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="239" PREFIX:column="13">x1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="240" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="240" PREFIX:column="13">y1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="241" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="241" PREFIX:column="13">x2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name PREFIX:line="242" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="242" PREFIX:column="13">y2</name></decl>;</decl_stmt>

  <expr_stmt><expr><name PREFIX:line="244" PREFIX:column="3">idx</name> = <name><name PREFIX:line="244" PREFIX:column="9">pge</name>-&gt;<name PREFIX:line="244" PREFIX:column="14">curr_idx</name></name></expr>;</expr_stmt>  
  <expr_stmt><expr><name PREFIX:line="245" PREFIX:column="3">y1</name> = <name><name PREFIX:line="245" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="245" PREFIX:column="12">list</name><index PREFIX:line="245" PREFIX:column="16">[<expr><name PREFIX:line="245" PREFIX:column="17">idx</name></expr>]</index></name>.<name PREFIX:line="245" PREFIX:column="22">y</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="246" PREFIX:column="3">x1</name> = <name><name PREFIX:line="246" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="246" PREFIX:column="12">list</name><index PREFIX:line="246" PREFIX:column="16">[<expr><name PREFIX:line="246" PREFIX:column="17">idx</name></expr>]</index></name>.<name PREFIX:line="246" PREFIX:column="22">x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="247" PREFIX:column="3">idx</name> = <call><name><name PREFIX:line="247" PREFIX:column="9">pge</name>-&gt;<name PREFIX:line="247" PREFIX:column="14">next_idx_fn</name></name><argument_list PREFIX:line="247" PREFIX:column="25">(<argument><expr><name PREFIX:line="247" PREFIX:column="26">pg</name></expr></argument>, <argument><expr><name PREFIX:line="247" PREFIX:column="30">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="248" PREFIX:column="3">y2</name> = <name><name PREFIX:line="248" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="248" PREFIX:column="12">list</name><index PREFIX:line="248" PREFIX:column="16">[<expr><name PREFIX:line="248" PREFIX:column="17">idx</name></expr>]</index></name>.<name PREFIX:line="248" PREFIX:column="22">y</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="249" PREFIX:column="3">x2</name> = <name><name PREFIX:line="249" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="249" PREFIX:column="12">list</name><index PREFIX:line="249" PREFIX:column="16">[<expr><name PREFIX:line="249" PREFIX:column="17">idx</name></expr>]</index></name>.<name PREFIX:line="249" PREFIX:column="22">x</name></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name PREFIX:line="250" PREFIX:column="3">pge</name>-&gt;<name PREFIX:line="250" PREFIX:column="8">curr_idx</name></name> = <name PREFIX:line="250" PREFIX:column="19">idx</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name PREFIX:line="252" PREFIX:column="3">pge_Init</name><argument_list PREFIX:line="252" PREFIX:column="11">(<argument><expr><name PREFIX:line="252" PREFIX:column="12">pge</name></expr></argument>, <argument><expr><name PREFIX:line="252" PREFIX:column="17">x1</name></expr></argument>, <argument><expr><name PREFIX:line="252" PREFIX:column="21">y1</name></expr></argument>, <argument><expr><name PREFIX:line="252" PREFIX:column="25">x2</name></expr></argument>, <argument><expr><name PREFIX:line="252" PREFIX:column="29">y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier PREFIX:line="255" PREFIX:column="1">static</specifier> <name PREFIX:line="255" PREFIX:column="8">void</name></type> <name PREFIX:line="255" PREFIX:column="13">pg_exec</name><parameter_list PREFIX:line="255" PREFIX:column="20">(<param><decl><type><name PREFIX:line="255" PREFIX:column="21">pg_struct</name> *</type><name PREFIX:line="255" PREFIX:column="32">pg</name></decl></param>, <param><decl><type><name PREFIX:line="255" PREFIX:column="36">u8g_t</name> *</type><name PREFIX:line="255" PREFIX:column="43">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="256" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="257" PREFIX:column="3">pg_word_t</name></type> <name PREFIX:line="257" PREFIX:column="13">i</name> <init PREFIX:line="257" PREFIX:column="15">= <expr><name><name PREFIX:line="257" PREFIX:column="17">pg</name>-&gt;<name PREFIX:line="257" PREFIX:column="21">total_scan_line_cnt</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block" PREFIX:line="259" PREFIX:column="3">/* first line is skipped if the min y line is not flat */</comment>
  <expr_stmt><expr><call><name PREFIX:line="260" PREFIX:column="3">pg_line_init</name><argument_list PREFIX:line="260" PREFIX:column="15">(<argument><expr><name PREFIX:line="260" PREFIX:column="16">pg</name></expr></argument>, <argument><expr><name PREFIX:line="260" PREFIX:column="20">PG_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
  <expr_stmt><expr><call><name PREFIX:line="261" PREFIX:column="3">pg_line_init</name><argument_list PREFIX:line="261" PREFIX:column="15">(<argument><expr><name PREFIX:line="261" PREFIX:column="16">pg</name></expr></argument>, <argument><expr><name PREFIX:line="261" PREFIX:column="20">PG_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if PREFIX:line="263" PREFIX:column="3">if <condition PREFIX:line="263" PREFIX:column="6">( <expr><name><name PREFIX:line="263" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="263" PREFIX:column="12">is_min_y_not_flat</name></name> != 0</expr> )</condition><then PREFIX:line="263" PREFIX:column="36">
  <block PREFIX:line="264" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="265" PREFIX:column="5">pge_Next</name><argument_list PREFIX:line="265" PREFIX:column="13">(<argument><expr PREFIX:line="265" PREFIX:column="14">&amp;(<name><name PREFIX:line="265" PREFIX:column="16">pg</name>-&gt;<name PREFIX:line="265" PREFIX:column="20">pge</name><index PREFIX:line="265" PREFIX:column="23">[<expr><name PREFIX:line="265" PREFIX:column="24">PG_LEFT</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name PREFIX:line="266" PREFIX:column="5">pge_Next</name><argument_list PREFIX:line="266" PREFIX:column="13">(<argument><expr PREFIX:line="266" PREFIX:column="14">&amp;(<name><name PREFIX:line="266" PREFIX:column="16">pg</name>-&gt;<name PREFIX:line="266" PREFIX:column="20">pge</name><index PREFIX:line="266" PREFIX:column="23">[<expr><name PREFIX:line="266" PREFIX:column="24">PG_RIGHT</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <do PREFIX:line="269" PREFIX:column="3">do
  <block PREFIX:line="270" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="271" PREFIX:column="5">pg_hline</name><argument_list PREFIX:line="271" PREFIX:column="13">(<argument><expr><name PREFIX:line="271" PREFIX:column="14">pg</name></expr></argument>, <argument><expr><name PREFIX:line="271" PREFIX:column="18">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while PREFIX:line="272" PREFIX:column="5">while <condition PREFIX:line="272" PREFIX:column="11">( <expr><call><name PREFIX:line="272" PREFIX:column="13">pge_Next</name><argument_list PREFIX:line="272" PREFIX:column="21">(<argument><expr PREFIX:line="272" PREFIX:column="22">&amp;(<name><name PREFIX:line="272" PREFIX:column="24">pg</name>-&gt;<name PREFIX:line="272" PREFIX:column="28">pge</name><index PREFIX:line="272" PREFIX:column="31">[<expr><name PREFIX:line="272" PREFIX:column="32">PG_LEFT</name></expr>]</index></name>)</expr></argument>)</argument_list></call> == 0</expr> )</condition>
    <block PREFIX:line="273" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="274" PREFIX:column="7">pg_line_init</name><argument_list PREFIX:line="274" PREFIX:column="19">(<argument><expr><name PREFIX:line="274" PREFIX:column="20">pg</name></expr></argument>, <argument><expr><name PREFIX:line="274" PREFIX:column="24">PG_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <while PREFIX:line="276" PREFIX:column="5">while <condition PREFIX:line="276" PREFIX:column="11">( <expr><call><name PREFIX:line="276" PREFIX:column="13">pge_Next</name><argument_list PREFIX:line="276" PREFIX:column="21">(<argument><expr PREFIX:line="276" PREFIX:column="22">&amp;(<name><name PREFIX:line="276" PREFIX:column="24">pg</name>-&gt;<name PREFIX:line="276" PREFIX:column="28">pge</name><index PREFIX:line="276" PREFIX:column="31">[<expr><name PREFIX:line="276" PREFIX:column="32">PG_RIGHT</name></expr>]</index></name>)</expr></argument>)</argument_list></call> == 0</expr> )</condition>
    <block PREFIX:line="277" PREFIX:column="5">{
      <expr_stmt><expr><call><name PREFIX:line="278" PREFIX:column="7">pg_line_init</name><argument_list PREFIX:line="278" PREFIX:column="19">(<argument><expr><name PREFIX:line="278" PREFIX:column="20">pg</name></expr></argument>, <argument><expr><name PREFIX:line="278" PREFIX:column="24">PG_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name PREFIX:line="280" PREFIX:column="5">i</name>--</expr>;</expr_stmt>
  }</block> while<condition PREFIX:line="281" PREFIX:column="10">( <expr><name PREFIX:line="281" PREFIX:column="12">i</name> &gt; 0</expr> )</condition>;</do>
}</block></function>

<comment type="block" PREFIX:line="284" PREFIX:column="1">/*===========================================*/</comment>
<comment type="block" PREFIX:line="285" PREFIX:column="1">/* API procedures */</comment>

<function><type><name PREFIX:line="287" PREFIX:column="1">void</name></type> <name PREFIX:line="287" PREFIX:column="6">pg_ClearPolygonXY</name><parameter_list PREFIX:line="287" PREFIX:column="23">(<param><decl><type><name PREFIX:line="287" PREFIX:column="24">pg_struct</name> *</type><name PREFIX:line="287" PREFIX:column="35">pg</name></decl></param>)</parameter_list>
<block PREFIX:line="288" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="289" PREFIX:column="3">pg</name>-&gt;<name PREFIX:line="289" PREFIX:column="7">cnt</name></name> = 0</expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="292" PREFIX:column="1">void</name></type> <name PREFIX:line="292" PREFIX:column="6">pg_AddPolygonXY</name><parameter_list PREFIX:line="292" PREFIX:column="21">(<param><decl><type><name PREFIX:line="292" PREFIX:column="22">pg_struct</name> *</type><name PREFIX:line="292" PREFIX:column="33">pg</name></decl></param>, <param><decl><type><name PREFIX:line="292" PREFIX:column="37">u8g_t</name> *</type><name PREFIX:line="292" PREFIX:column="44">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="292" PREFIX:column="49">int16_t</name></type> <name PREFIX:line="292" PREFIX:column="57">x</name></decl></param>, <param><decl><type><name PREFIX:line="292" PREFIX:column="60">int16_t</name></type> <name PREFIX:line="292" PREFIX:column="68">y</name></decl></param>)</parameter_list>
<block PREFIX:line="293" PREFIX:column="1">{
  <if PREFIX:line="294" PREFIX:column="3">if <condition PREFIX:line="294" PREFIX:column="6">( <expr><name><name PREFIX:line="294" PREFIX:column="8">pg</name>-&gt;<name PREFIX:line="294" PREFIX:column="12">cnt</name></name> &lt; <name PREFIX:line="294" PREFIX:column="18">PG_MAX_POINTS</name></expr> )</condition><then PREFIX:line="294" PREFIX:column="33">
  <block PREFIX:line="295" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="296" PREFIX:column="5">pg</name>-&gt;<name PREFIX:line="296" PREFIX:column="9">list</name><index PREFIX:line="296" PREFIX:column="13">[<expr><name><name PREFIX:line="296" PREFIX:column="14">pg</name>-&gt;<name PREFIX:line="296" PREFIX:column="18">cnt</name></name></expr>]</index></name>.<name PREFIX:line="296" PREFIX:column="23">x</name> = <name PREFIX:line="296" PREFIX:column="27">x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="297" PREFIX:column="5">pg</name>-&gt;<name PREFIX:line="297" PREFIX:column="9">list</name><index PREFIX:line="297" PREFIX:column="13">[<expr><name><name PREFIX:line="297" PREFIX:column="14">pg</name>-&gt;<name PREFIX:line="297" PREFIX:column="18">cnt</name></name></expr>]</index></name>.<name PREFIX:line="297" PREFIX:column="23">y</name> = <name PREFIX:line="297" PREFIX:column="27">y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name PREFIX:line="298" PREFIX:column="5">pg</name>-&gt;<name PREFIX:line="298" PREFIX:column="9">cnt</name></name>++</expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="302" PREFIX:column="1">void</name></type> <name PREFIX:line="302" PREFIX:column="6">pg_DrawPolygon</name><parameter_list PREFIX:line="302" PREFIX:column="20">(<param><decl><type><name PREFIX:line="302" PREFIX:column="21">pg_struct</name> *</type><name PREFIX:line="302" PREFIX:column="32">pg</name></decl></param>, <param><decl><type><name PREFIX:line="302" PREFIX:column="36">u8g_t</name> *</type><name PREFIX:line="302" PREFIX:column="43">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="303" PREFIX:column="1">{
  <if PREFIX:line="304" PREFIX:column="3">if <condition PREFIX:line="304" PREFIX:column="6">( <expr><call><name PREFIX:line="304" PREFIX:column="8">pg_prepare</name><argument_list PREFIX:line="304" PREFIX:column="18">(<argument><expr><name PREFIX:line="304" PREFIX:column="19">pg</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="304" PREFIX:column="29">
    <return PREFIX:line="305" PREFIX:column="5">return;</return></then></if>
  <expr_stmt><expr><call><name PREFIX:line="306" PREFIX:column="3">pg_exec</name><argument_list PREFIX:line="306" PREFIX:column="10">(<argument><expr><name PREFIX:line="306" PREFIX:column="11">pg</name></expr></argument>, <argument><expr><name PREFIX:line="306" PREFIX:column="15">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name PREFIX:line="309" PREFIX:column="1">pg_struct</name></type> <name PREFIX:line="309" PREFIX:column="11">u8g_pg</name></decl>;</decl_stmt>

<function><type><name PREFIX:line="311" PREFIX:column="1">void</name></type> <name PREFIX:line="311" PREFIX:column="6">u8g_ClearPolygonXY</name><parameter_list PREFIX:line="311" PREFIX:column="24">(<param><decl><type><name PREFIX:line="311" PREFIX:column="25">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="312" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="313" PREFIX:column="3">pg_ClearPolygonXY</name><argument_list PREFIX:line="313" PREFIX:column="20">(<argument><expr PREFIX:line="313" PREFIX:column="21">&amp;<name PREFIX:line="313" PREFIX:column="22">u8g_pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="316" PREFIX:column="1">void</name></type> <name PREFIX:line="316" PREFIX:column="6">u8g_AddPolygonXY</name><parameter_list PREFIX:line="316" PREFIX:column="22">(<param><decl><type><name PREFIX:line="316" PREFIX:column="23">u8g_t</name> *</type><name PREFIX:line="316" PREFIX:column="30">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="316" PREFIX:column="35">int16_t</name></type> <name PREFIX:line="316" PREFIX:column="43">x</name></decl></param>, <param><decl><type><name PREFIX:line="316" PREFIX:column="46">int16_t</name></type> <name PREFIX:line="316" PREFIX:column="54">y</name></decl></param>)</parameter_list>
<block PREFIX:line="317" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="318" PREFIX:column="3">pg_AddPolygonXY</name><argument_list PREFIX:line="318" PREFIX:column="18">(<argument><expr PREFIX:line="318" PREFIX:column="19">&amp;<name PREFIX:line="318" PREFIX:column="20">u8g_pg</name></expr></argument>, <argument><expr><name PREFIX:line="318" PREFIX:column="28">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="318" PREFIX:column="33">x</name></expr></argument>, <argument><expr><name PREFIX:line="318" PREFIX:column="36">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="321" PREFIX:column="1">void</name></type> <name PREFIX:line="321" PREFIX:column="6">u8g_DrawPolygon</name><parameter_list PREFIX:line="321" PREFIX:column="21">(<param><decl><type><name PREFIX:line="321" PREFIX:column="22">u8g_t</name> *</type><name PREFIX:line="321" PREFIX:column="29">u8g</name></decl></param>)</parameter_list>
<block PREFIX:line="322" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="323" PREFIX:column="3">pg_DrawPolygon</name><argument_list PREFIX:line="323" PREFIX:column="17">(<argument><expr PREFIX:line="323" PREFIX:column="18">&amp;<name PREFIX:line="323" PREFIX:column="19">u8g_pg</name></expr></argument>, <argument><expr><name PREFIX:line="323" PREFIX:column="27">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="326" PREFIX:column="1">void</name></type> <name PREFIX:line="326" PREFIX:column="6">u8g_DrawTriangle</name><parameter_list PREFIX:line="326" PREFIX:column="22">(<param><decl><type><name PREFIX:line="326" PREFIX:column="23">u8g_t</name> *</type><name PREFIX:line="326" PREFIX:column="30">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="326" PREFIX:column="35">int16_t</name></type> <name PREFIX:line="326" PREFIX:column="43">x0</name></decl></param>, <param><decl><type><name PREFIX:line="326" PREFIX:column="47">int16_t</name></type> <name PREFIX:line="326" PREFIX:column="55">y0</name></decl></param>, <param><decl><type><name PREFIX:line="326" PREFIX:column="59">int16_t</name></type> <name PREFIX:line="326" PREFIX:column="67">x1</name></decl></param>, <param><decl><type><name PREFIX:line="326" PREFIX:column="71">int16_t</name></type> <name PREFIX:line="326" PREFIX:column="79">y1</name></decl></param>, <param><decl><type><name PREFIX:line="326" PREFIX:column="83">int16_t</name></type> <name PREFIX:line="326" PREFIX:column="91">x2</name></decl></param>, <param><decl><type><name PREFIX:line="326" PREFIX:column="95">int16_t</name></type> <name PREFIX:line="326" PREFIX:column="103">y2</name></decl></param>)</parameter_list>
<block PREFIX:line="327" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="328" PREFIX:column="3">u8g_ClearPolygonXY</name><argument_list PREFIX:line="328" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="329" PREFIX:column="3">u8g_AddPolygonXY</name><argument_list PREFIX:line="329" PREFIX:column="19">(<argument><expr><name PREFIX:line="329" PREFIX:column="20">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="329" PREFIX:column="25">x0</name></expr></argument>, <argument><expr><name PREFIX:line="329" PREFIX:column="29">y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="330" PREFIX:column="3">u8g_AddPolygonXY</name><argument_list PREFIX:line="330" PREFIX:column="19">(<argument><expr><name PREFIX:line="330" PREFIX:column="20">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="330" PREFIX:column="25">x1</name></expr></argument>, <argument><expr><name PREFIX:line="330" PREFIX:column="29">y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="331" PREFIX:column="3">u8g_AddPolygonXY</name><argument_list PREFIX:line="331" PREFIX:column="19">(<argument><expr><name PREFIX:line="331" PREFIX:column="20">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="331" PREFIX:column="25">x2</name></expr></argument>, <argument><expr><name PREFIX:line="331" PREFIX:column="29">y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="332" PREFIX:column="3">u8g_DrawPolygon</name><argument_list PREFIX:line="332" PREFIX:column="18">(<argument><expr><name PREFIX:line="332" PREFIX:column="19">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

</unit>
