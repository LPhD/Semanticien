<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/WString.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  WString.h - String library for Wiring &amp; Arduino
  ...mostly rewritten by Paul Stoffregen...
  Copyright (c) 2009-10 Hernando Barragan.  All right reserved.
  Copyright 2011, Paul Stoffregen, paul@pjrc.com

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/</comment>

<cpp:ifndef PREFIX:line="22" PREFIX:column="1">#<cpp:directive PREFIX:line="22" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="22" PREFIX:column="9">String_class_h</name></cpp:ifndef>
<cpp:define PREFIX:line="23" PREFIX:column="1">#<cpp:directive PREFIX:line="23" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="23" PREFIX:column="9">String_class_h</name></cpp:macro></cpp:define>
<cpp:ifdef PREFIX:line="24" PREFIX:column="1">#<cpp:directive PREFIX:line="24" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="24" PREFIX:column="8">__cplusplus</name></cpp:ifdef>

<cpp:include PREFIX:line="26" PREFIX:column="1">#<cpp:directive PREFIX:line="26" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="26" PREFIX:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="28" PREFIX:column="1">#<cpp:directive PREFIX:line="28" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="28" PREFIX:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="29" PREFIX:column="1">#<cpp:directive PREFIX:line="29" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="29" PREFIX:column="10">&lt;avr/pgmspace.h&gt;</cpp:file></cpp:include>

<comment type="line" PREFIX:line="31" PREFIX:column="1">// When compiling programs with this class, the following gcc parameters</comment>
<comment type="line" PREFIX:line="32" PREFIX:column="1">// dramatically increase performance and memory (RAM) efficiency, typically</comment>
<comment type="line" PREFIX:line="33" PREFIX:column="1">// with little or no increase in code size.</comment>
<comment type="line" PREFIX:line="34" PREFIX:column="1">//     -felide-ructors</comment>
<comment type="line" PREFIX:line="35" PREFIX:column="1">//     -std=c++0x</comment>

<class_decl PREFIX:line="37" PREFIX:column="1">class <name PREFIX:line="37" PREFIX:column="7">__FlashStringHelper</name>;</class_decl>
<cpp:define PREFIX:line="38" PREFIX:column="1">#<cpp:directive PREFIX:line="38" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="38" PREFIX:column="9">F</name><parameter_list PREFIX:line="38" PREFIX:column="10">(<param><type><name PREFIX:line="38" PREFIX:column="11">string_literal</name></type></param>)</parameter_list></cpp:macro> <cpp:value PREFIX:line="38" PREFIX:column="27">(reinterpret_cast&lt; __FlashStringHelper *&gt;(PSTR(string_literal)))</cpp:value></cpp:define>

<comment type="line" PREFIX:line="40" PREFIX:column="1">// An inherited class for holding the result of a concatenation.  These</comment>
<comment type="line" PREFIX:line="41" PREFIX:column="1">// result objects are assumed to be writable by subsequent concatenations.</comment>
<class_decl PREFIX:line="42" PREFIX:column="1">class <name PREFIX:line="42" PREFIX:column="7">StringSumHelper</name>;</class_decl>

<comment type="line" PREFIX:line="44" PREFIX:column="1">// The string class</comment>
<class PREFIX:line="45" PREFIX:column="1">class <name PREFIX:line="45" PREFIX:column="7">String</name>
<block PREFIX:line="46" PREFIX:column="1">{<private type="default" PREFIX:line="46" PREFIX:column="2">
	<comment type="line" PREFIX:line="47" PREFIX:column="9">// use a function pointer to allow for "if (s)" without the</comment>
	<comment type="line" PREFIX:line="48" PREFIX:column="9">// complications of an operator bool(). for more information, see:</comment>
	<comment type="line" PREFIX:line="49" PREFIX:column="9">// http://www.artima.com/cppsource/safebool.html</comment>
	<typedef PREFIX:line="50" PREFIX:column="9">typedef <function_decl><type><name PREFIX:line="50" PREFIX:column="17">void</name></type> (<name><name PREFIX:line="50" PREFIX:column="23">String</name>::*<name PREFIX:line="50" PREFIX:column="32">StringIfHelperType</name></name>)<parameter_list PREFIX:line="50" PREFIX:column="51">()</parameter_list> ;</function_decl></typedef>
	<function><type><name PREFIX:line="51" PREFIX:column="9">void</name></type> <name PREFIX:line="51" PREFIX:column="14">StringIfHelper</name><parameter_list PREFIX:line="51" PREFIX:column="28">()</parameter_list>  <block PREFIX:line="51" PREFIX:column="32">{}</block></function>

</private><public PREFIX:line="53" PREFIX:column="1">public:
	<comment type="line" PREFIX:line="54" PREFIX:column="9">// ructors</comment>
	<comment type="line" PREFIX:line="55" PREFIX:column="9">// creates a copy of the initial value.</comment>
	<comment type="line" PREFIX:line="56" PREFIX:column="9">// if the initial value is null or invalid, or if memory allocation</comment>
	<comment type="line" PREFIX:line="57" PREFIX:column="9">// fails, the string will be marked as invalid (i.e. "if (s)" will</comment>
	<comment type="line" PREFIX:line="58" PREFIX:column="9">// be false).</comment>
	<constructor_decl><name PREFIX:line="59" PREFIX:column="9">String</name><parameter_list PREFIX:line="59" PREFIX:column="15">( <param><decl><type><name PREFIX:line="59" PREFIX:column="17">char</name> *</type><name PREFIX:line="59" PREFIX:column="23">cstr</name> <init PREFIX:line="59" PREFIX:column="28">= <expr PREFIX:line="59" PREFIX:column="30">""</expr></init></decl></param>)</parameter_list>;</constructor_decl>
	<constructor_decl><name PREFIX:line="60" PREFIX:column="9">String</name><parameter_list PREFIX:line="60" PREFIX:column="15">( <param><decl><type><name PREFIX:line="60" PREFIX:column="17">String</name> &amp;</type><name PREFIX:line="60" PREFIX:column="25">str</name></decl></param>)</parameter_list>;</constructor_decl>
	<cpp:ifdef PREFIX:line="61" PREFIX:column="9">#<cpp:directive PREFIX:line="61" PREFIX:column="10">ifdef</cpp:directive> <name PREFIX:line="61" PREFIX:column="16">__GXX_EXPERIMENTAL_CXX0X__</name></cpp:ifdef>
	<constructor_decl><name PREFIX:line="62" PREFIX:column="9">String</name><parameter_list PREFIX:line="62" PREFIX:column="15">(<param><decl><type><name PREFIX:line="62" PREFIX:column="16">String</name> &amp;&amp;</type><name PREFIX:line="62" PREFIX:column="25">rval</name></decl></param>)</parameter_list>;</constructor_decl>
	<constructor_decl><name PREFIX:line="63" PREFIX:column="9">String</name><parameter_list PREFIX:line="63" PREFIX:column="15">(<param><decl><type><name PREFIX:line="63" PREFIX:column="16">StringSumHelper</name> &amp;&amp;</type><name PREFIX:line="63" PREFIX:column="34">rval</name></decl></param>)</parameter_list>;</constructor_decl>
	<cpp:endif PREFIX:line="64" PREFIX:column="9">#<cpp:directive PREFIX:line="64" PREFIX:column="10">endif</cpp:directive></cpp:endif>
	<constructor_decl><specifier PREFIX:line="65" PREFIX:column="9">explicit</specifier> <name PREFIX:line="65" PREFIX:column="18">String</name><parameter_list PREFIX:line="65" PREFIX:column="24">(<param><decl><type><name PREFIX:line="65" PREFIX:column="25">char</name></type> <name PREFIX:line="65" PREFIX:column="30">c</name></decl></param>)</parameter_list>;</constructor_decl>
	<constructor_decl><specifier PREFIX:line="66" PREFIX:column="9">explicit</specifier> <name PREFIX:line="66" PREFIX:column="18">String</name><parameter_list PREFIX:line="66" PREFIX:column="24">(<param><decl><type><name PREFIX:line="66" PREFIX:column="25">unknowntype</name></type> <name PREFIX:line="66" PREFIX:column="37">char</name></decl></param>, <param><decl><type><name PREFIX:line="66" PREFIX:column="43">unknowntype</name> <name PREFIX:line="66" PREFIX:column="55">char</name></type> <name PREFIX:line="66" PREFIX:column="60">base</name><init PREFIX:line="66" PREFIX:column="64">=<expr PREFIX:line="66" PREFIX:column="65">10</expr></init></decl></param>)</parameter_list>;</constructor_decl>
	<constructor_decl><specifier PREFIX:line="67" PREFIX:column="9">explicit</specifier> <name PREFIX:line="67" PREFIX:column="18">String</name><parameter_list PREFIX:line="67" PREFIX:column="24">(<param><decl><type><name PREFIX:line="67" PREFIX:column="25">int</name></type></decl></param>, <param><decl><type><name PREFIX:line="67" PREFIX:column="30">unknowntype</name> <name PREFIX:line="67" PREFIX:column="42">char</name></type> <name PREFIX:line="67" PREFIX:column="47">base</name><init PREFIX:line="67" PREFIX:column="51">=<expr PREFIX:line="67" PREFIX:column="52">10</expr></init></decl></param>)</parameter_list>;</constructor_decl>
	<constructor_decl><specifier PREFIX:line="68" PREFIX:column="9">explicit</specifier> <name PREFIX:line="68" PREFIX:column="18">String</name><parameter_list PREFIX:line="68" PREFIX:column="24">(<param><decl><type><name PREFIX:line="68" PREFIX:column="25">unknowntype</name></type> <name PREFIX:line="68" PREFIX:column="37">int</name></decl></param>, <param><decl><type><name PREFIX:line="68" PREFIX:column="42">unknowntype</name> <name PREFIX:line="68" PREFIX:column="54">char</name></type> <name PREFIX:line="68" PREFIX:column="59">base</name><init PREFIX:line="68" PREFIX:column="63">=<expr PREFIX:line="68" PREFIX:column="64">10</expr></init></decl></param>)</parameter_list>;</constructor_decl>
	<constructor_decl><specifier PREFIX:line="69" PREFIX:column="9">explicit</specifier> <name PREFIX:line="69" PREFIX:column="18">String</name><parameter_list PREFIX:line="69" PREFIX:column="24">(<param><decl><type><name PREFIX:line="69" PREFIX:column="25">long</name></type></decl></param>, <param><decl><type><name PREFIX:line="69" PREFIX:column="31">unknowntype</name> <name PREFIX:line="69" PREFIX:column="43">char</name></type> <name PREFIX:line="69" PREFIX:column="48">base</name><init PREFIX:line="69" PREFIX:column="52">=<expr PREFIX:line="69" PREFIX:column="53">10</expr></init></decl></param>)</parameter_list>;</constructor_decl>
	<constructor_decl><specifier PREFIX:line="70" PREFIX:column="9">explicit</specifier> <name PREFIX:line="70" PREFIX:column="18">String</name><parameter_list PREFIX:line="70" PREFIX:column="24">(<param><decl><type><name PREFIX:line="70" PREFIX:column="25">unknowntype</name></type> <name PREFIX:line="70" PREFIX:column="37">long</name></decl></param>, <param><decl><type><name PREFIX:line="70" PREFIX:column="43">unknowntype</name> <name PREFIX:line="70" PREFIX:column="55">char</name></type> <name PREFIX:line="70" PREFIX:column="60">base</name><init PREFIX:line="70" PREFIX:column="64">=<expr PREFIX:line="70" PREFIX:column="65">10</expr></init></decl></param>)</parameter_list>;</constructor_decl>
	<destructor_decl><name PREFIX:line="71" PREFIX:column="9">~<name PREFIX:line="71" PREFIX:column="10">String</name></name><parameter_list PREFIX:line="71" PREFIX:column="16">(<param><decl><type><name PREFIX:line="71" PREFIX:column="17">void</name></type></decl></param>)</parameter_list>;</destructor_decl>

	<comment type="line" PREFIX:line="73" PREFIX:column="9">// memory management</comment>
	<comment type="line" PREFIX:line="74" PREFIX:column="9">// return true on success, false on failure (in which case, the string</comment>
	<comment type="line" PREFIX:line="75" PREFIX:column="9">// is left unchanged).  reserve(0), if successful, will validate an</comment>
	<comment type="line" PREFIX:line="76" PREFIX:column="9">// invalid string (i.e., "if (s)" will be true afterwards)</comment>
	<function_decl><type><name PREFIX:line="77" PREFIX:column="9">unknowntype</name> <name PREFIX:line="77" PREFIX:column="21">char</name></type> <name PREFIX:line="77" PREFIX:column="26">reserve</name><parameter_list PREFIX:line="77" PREFIX:column="33">(<param><decl><type><name PREFIX:line="77" PREFIX:column="34">unknowntype</name> <name PREFIX:line="77" PREFIX:column="46">int</name></type> <name PREFIX:line="77" PREFIX:column="50">size</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><specifier PREFIX:line="78" PREFIX:column="9">inline</specifier> <name PREFIX:line="78" PREFIX:column="16">unknowntype</name> <name PREFIX:line="78" PREFIX:column="28">int</name></type> <name PREFIX:line="78" PREFIX:column="32">length</name><parameter_list PREFIX:line="78" PREFIX:column="38">(<param><decl><type><name PREFIX:line="78" PREFIX:column="39">void</name></type></decl></param>)</parameter_list>  <block PREFIX:line="78" PREFIX:column="46">{<return PREFIX:line="78" PREFIX:column="47">return <expr><name PREFIX:line="78" PREFIX:column="54">len</name></expr>;</return>}</block></function>

	<comment type="line" PREFIX:line="80" PREFIX:column="9">// creates a copy of the assigned value.  if the value is null or</comment>
	<comment type="line" PREFIX:line="81" PREFIX:column="9">// invalid, or if the memory allocation fails, the string will be </comment>
	<comment type="line" PREFIX:line="82" PREFIX:column="9">// marked as invalid ("if (s)" will be false).</comment>
	<function_decl><type><name PREFIX:line="83" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="83" PREFIX:column="18">operator =</name> <parameter_list PREFIX:line="83" PREFIX:column="29">( <param><decl><type><name PREFIX:line="83" PREFIX:column="31">String</name> &amp;</type><name PREFIX:line="83" PREFIX:column="39">rhs</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="84" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="84" PREFIX:column="18">operator =</name> <parameter_list PREFIX:line="84" PREFIX:column="29">( <param><decl><type><name PREFIX:line="84" PREFIX:column="31">char</name> *</type><name PREFIX:line="84" PREFIX:column="37">cstr</name></decl></param>)</parameter_list>;</function_decl>
	<cpp:ifdef PREFIX:line="85" PREFIX:column="9">#<cpp:directive PREFIX:line="85" PREFIX:column="10">ifdef</cpp:directive> <name PREFIX:line="85" PREFIX:column="16">__GXX_EXPERIMENTAL_CXX0X__</name></cpp:ifdef>
	<function_decl><type><name PREFIX:line="86" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="86" PREFIX:column="18">operator =</name> <parameter_list PREFIX:line="86" PREFIX:column="29">(<param><decl><type><name PREFIX:line="86" PREFIX:column="30">String</name> &amp;&amp;</type><name PREFIX:line="86" PREFIX:column="39">rval</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="87" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="87" PREFIX:column="18">operator =</name> <parameter_list PREFIX:line="87" PREFIX:column="29">(<param><decl><type><name PREFIX:line="87" PREFIX:column="30">StringSumHelper</name> &amp;&amp;</type><name PREFIX:line="87" PREFIX:column="48">rval</name></decl></param>)</parameter_list>;</function_decl>
	<cpp:endif PREFIX:line="88" PREFIX:column="9">#<cpp:directive PREFIX:line="88" PREFIX:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" PREFIX:line="90" PREFIX:column="9">// concatenate (works w/ built-in types)</comment>
	
	<comment type="line" PREFIX:line="92" PREFIX:column="9">// returns true on success, false on failure (in which case, the string</comment>
	<comment type="line" PREFIX:line="93" PREFIX:column="9">// is left unchanged).  if the argument is null or invalid, the </comment>
	<comment type="line" PREFIX:line="94" PREFIX:column="9">// concatenation is considered unsucessful.  </comment>
	<function_decl><type><name PREFIX:line="95" PREFIX:column="9">unknowntype</name> <name PREFIX:line="95" PREFIX:column="21">char</name></type> <name PREFIX:line="95" PREFIX:column="26">concat</name><parameter_list PREFIX:line="95" PREFIX:column="32">( <param><decl><type><name PREFIX:line="95" PREFIX:column="34">String</name> &amp;</type><name PREFIX:line="95" PREFIX:column="42">str</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="96" PREFIX:column="9">unknowntype</name> <name PREFIX:line="96" PREFIX:column="21">char</name></type> <name PREFIX:line="96" PREFIX:column="26">concat</name><parameter_list PREFIX:line="96" PREFIX:column="32">( <param><decl><type><name PREFIX:line="96" PREFIX:column="34">char</name> *</type><name PREFIX:line="96" PREFIX:column="40">cstr</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="97" PREFIX:column="9">unknowntype</name> <name PREFIX:line="97" PREFIX:column="21">char</name></type> <name PREFIX:line="97" PREFIX:column="26">concat</name><parameter_list PREFIX:line="97" PREFIX:column="32">(<param><decl><type><name PREFIX:line="97" PREFIX:column="33">char</name></type> <name PREFIX:line="97" PREFIX:column="38">c</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="98" PREFIX:column="9">unknowntype</name> <name PREFIX:line="98" PREFIX:column="21">char</name></type> <name PREFIX:line="98" PREFIX:column="26">concat</name><parameter_list PREFIX:line="98" PREFIX:column="32">(<param><decl><type><name PREFIX:line="98" PREFIX:column="33">unknowntype</name> <name PREFIX:line="98" PREFIX:column="45">char</name></type> <name PREFIX:line="98" PREFIX:column="50">c</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="99" PREFIX:column="9">unknowntype</name> <name PREFIX:line="99" PREFIX:column="21">char</name></type> <name PREFIX:line="99" PREFIX:column="26">concat</name><parameter_list PREFIX:line="99" PREFIX:column="32">(<param><decl><type><name PREFIX:line="99" PREFIX:column="33">int</name></type> <name PREFIX:line="99" PREFIX:column="37">num</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="100" PREFIX:column="9">unknowntype</name> <name PREFIX:line="100" PREFIX:column="21">char</name></type> <name PREFIX:line="100" PREFIX:column="26">concat</name><parameter_list PREFIX:line="100" PREFIX:column="32">(<param><decl><type><name PREFIX:line="100" PREFIX:column="33">unknowntype</name> <name PREFIX:line="100" PREFIX:column="45">int</name></type> <name PREFIX:line="100" PREFIX:column="49">num</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="101" PREFIX:column="9">unknowntype</name> <name PREFIX:line="101" PREFIX:column="21">char</name></type> <name PREFIX:line="101" PREFIX:column="26">concat</name><parameter_list PREFIX:line="101" PREFIX:column="32">(<param><decl><type><name PREFIX:line="101" PREFIX:column="33">long</name></type> <name PREFIX:line="101" PREFIX:column="38">num</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="102" PREFIX:column="9">unknowntype</name> <name PREFIX:line="102" PREFIX:column="21">char</name></type> <name PREFIX:line="102" PREFIX:column="26">concat</name><parameter_list PREFIX:line="102" PREFIX:column="32">(<param><decl><type><name PREFIX:line="102" PREFIX:column="33">unknowntype</name> <name PREFIX:line="102" PREFIX:column="45">long</name></type> <name PREFIX:line="102" PREFIX:column="50">num</name></decl></param>)</parameter_list>;</function_decl>
	
	<comment type="line" PREFIX:line="104" PREFIX:column="9">// if there's not enough memory for the concatenated value, the string</comment>
	<comment type="line" PREFIX:line="105" PREFIX:column="9">// will be left unchanged (but this isn't signalled in any way)</comment>
	<function><type><name PREFIX:line="106" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="106" PREFIX:column="18">operator +=</name> <parameter_list PREFIX:line="106" PREFIX:column="30">( <param><decl><type><name PREFIX:line="106" PREFIX:column="32">String</name> &amp;</type><name PREFIX:line="106" PREFIX:column="40">rhs</name></decl></param>)</parameter_list>	<block PREFIX:line="106" PREFIX:column="49">{<expr_stmt><expr><call><name PREFIX:line="106" PREFIX:column="50">concat</name><argument_list PREFIX:line="106" PREFIX:column="56">(<argument><expr><name PREFIX:line="106" PREFIX:column="57">rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return PREFIX:line="106" PREFIX:column="63">return <expr PREFIX:line="106" PREFIX:column="70">(*<name PREFIX:line="106" PREFIX:column="72">this</name>)</expr>;</return>}</block></function>
	<function><type><name PREFIX:line="107" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="107" PREFIX:column="18">operator +=</name> <parameter_list PREFIX:line="107" PREFIX:column="30">( <param><decl><type><name PREFIX:line="107" PREFIX:column="32">char</name> *</type><name PREFIX:line="107" PREFIX:column="38">cstr</name></decl></param>)</parameter_list>		<block PREFIX:line="107" PREFIX:column="57">{<expr_stmt><expr><call><name PREFIX:line="107" PREFIX:column="58">concat</name><argument_list PREFIX:line="107" PREFIX:column="64">(<argument><expr><name PREFIX:line="107" PREFIX:column="65">cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return PREFIX:line="107" PREFIX:column="72">return <expr PREFIX:line="107" PREFIX:column="79">(*<name PREFIX:line="107" PREFIX:column="81">this</name>)</expr>;</return>}</block></function>
	<function><type><name PREFIX:line="108" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="108" PREFIX:column="18">operator +=</name> <parameter_list PREFIX:line="108" PREFIX:column="30">(<param><decl><type><name PREFIX:line="108" PREFIX:column="31">char</name></type> <name PREFIX:line="108" PREFIX:column="36">c</name></decl></param>)</parameter_list>			<block PREFIX:line="108" PREFIX:column="57">{<expr_stmt><expr><call><name PREFIX:line="108" PREFIX:column="58">concat</name><argument_list PREFIX:line="108" PREFIX:column="64">(<argument><expr><name PREFIX:line="108" PREFIX:column="65">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return PREFIX:line="108" PREFIX:column="69">return <expr PREFIX:line="108" PREFIX:column="76">(*<name PREFIX:line="108" PREFIX:column="78">this</name>)</expr>;</return>}</block></function>
	<function><type><name PREFIX:line="109" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="109" PREFIX:column="18">operator +=</name> <parameter_list PREFIX:line="109" PREFIX:column="30">(<param><decl><type><name PREFIX:line="109" PREFIX:column="31">unknowntype</name> <name PREFIX:line="109" PREFIX:column="43">char</name></type> <name PREFIX:line="109" PREFIX:column="48">num</name></decl></param>)</parameter_list>		<block PREFIX:line="109" PREFIX:column="65">{<expr_stmt><expr><call><name PREFIX:line="109" PREFIX:column="66">concat</name><argument_list PREFIX:line="109" PREFIX:column="72">(<argument><expr><name PREFIX:line="109" PREFIX:column="73">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return PREFIX:line="109" PREFIX:column="79">return <expr PREFIX:line="109" PREFIX:column="86">(*<name PREFIX:line="109" PREFIX:column="88">this</name>)</expr>;</return>}</block></function>
	<function><type><name PREFIX:line="110" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="110" PREFIX:column="18">operator +=</name> <parameter_list PREFIX:line="110" PREFIX:column="30">(<param><decl><type><name PREFIX:line="110" PREFIX:column="31">int</name></type> <name PREFIX:line="110" PREFIX:column="35">num</name></decl></param>)</parameter_list>			<block PREFIX:line="110" PREFIX:column="57">{<expr_stmt><expr><call><name PREFIX:line="110" PREFIX:column="58">concat</name><argument_list PREFIX:line="110" PREFIX:column="64">(<argument><expr><name PREFIX:line="110" PREFIX:column="65">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return PREFIX:line="110" PREFIX:column="71">return <expr PREFIX:line="110" PREFIX:column="78">(*<name PREFIX:line="110" PREFIX:column="80">this</name>)</expr>;</return>}</block></function>
	<function><type><name PREFIX:line="111" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="111" PREFIX:column="18">operator +=</name> <parameter_list PREFIX:line="111" PREFIX:column="30">(<param><decl><type><name PREFIX:line="111" PREFIX:column="31">unknowntype</name> <name PREFIX:line="111" PREFIX:column="43">int</name></type> <name PREFIX:line="111" PREFIX:column="47">num</name></decl></param>)</parameter_list>		<block PREFIX:line="111" PREFIX:column="65">{<expr_stmt><expr><call><name PREFIX:line="111" PREFIX:column="66">concat</name><argument_list PREFIX:line="111" PREFIX:column="72">(<argument><expr><name PREFIX:line="111" PREFIX:column="73">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return PREFIX:line="111" PREFIX:column="79">return <expr PREFIX:line="111" PREFIX:column="86">(*<name PREFIX:line="111" PREFIX:column="88">this</name>)</expr>;</return>}</block></function>
	<function><type><name PREFIX:line="112" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="112" PREFIX:column="18">operator +=</name> <parameter_list PREFIX:line="112" PREFIX:column="30">(<param><decl><type><name PREFIX:line="112" PREFIX:column="31">long</name></type> <name PREFIX:line="112" PREFIX:column="36">num</name></decl></param>)</parameter_list>			<block PREFIX:line="112" PREFIX:column="57">{<expr_stmt><expr><call><name PREFIX:line="112" PREFIX:column="58">concat</name><argument_list PREFIX:line="112" PREFIX:column="64">(<argument><expr><name PREFIX:line="112" PREFIX:column="65">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return PREFIX:line="112" PREFIX:column="71">return <expr PREFIX:line="112" PREFIX:column="78">(*<name PREFIX:line="112" PREFIX:column="80">this</name>)</expr>;</return>}</block></function>
	<function><type><name PREFIX:line="113" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="113" PREFIX:column="18">operator +=</name> <parameter_list PREFIX:line="113" PREFIX:column="30">(<param><decl><type><name PREFIX:line="113" PREFIX:column="31">unknowntype</name> <name PREFIX:line="113" PREFIX:column="43">long</name></type> <name PREFIX:line="113" PREFIX:column="48">num</name></decl></param>)</parameter_list>	<block PREFIX:line="113" PREFIX:column="57">{<expr_stmt><expr><call><name PREFIX:line="113" PREFIX:column="58">concat</name><argument_list PREFIX:line="113" PREFIX:column="64">(<argument><expr><name PREFIX:line="113" PREFIX:column="65">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return PREFIX:line="113" PREFIX:column="71">return <expr PREFIX:line="113" PREFIX:column="78">(*<name PREFIX:line="113" PREFIX:column="80">this</name>)</expr>;</return>}</block></function>

	<function_decl><type><specifier PREFIX:line="115" PREFIX:column="9">friend</specifier> <name PREFIX:line="115" PREFIX:column="16">StringSumHelper</name> &amp;</type> <name PREFIX:line="115" PREFIX:column="34">operator +</name> <parameter_list PREFIX:line="115" PREFIX:column="45">( <param><decl><type><name PREFIX:line="115" PREFIX:column="47">StringSumHelper</name> &amp;</type><name PREFIX:line="115" PREFIX:column="64">lhs</name></decl></param>,  <param><decl><type><name PREFIX:line="115" PREFIX:column="70">String</name> &amp;</type><name PREFIX:line="115" PREFIX:column="78">rhs</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier PREFIX:line="116" PREFIX:column="9">friend</specifier> <name PREFIX:line="116" PREFIX:column="16">StringSumHelper</name> &amp;</type> <name PREFIX:line="116" PREFIX:column="34">operator +</name> <parameter_list PREFIX:line="116" PREFIX:column="45">( <param><decl><type><name PREFIX:line="116" PREFIX:column="47">StringSumHelper</name> &amp;</type><name PREFIX:line="116" PREFIX:column="64">lhs</name></decl></param>,  <param><decl><type><name PREFIX:line="116" PREFIX:column="70">char</name> *</type><name PREFIX:line="116" PREFIX:column="76">cstr</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier PREFIX:line="117" PREFIX:column="9">friend</specifier> <name PREFIX:line="117" PREFIX:column="16">StringSumHelper</name> &amp;</type> <name PREFIX:line="117" PREFIX:column="34">operator +</name> <parameter_list PREFIX:line="117" PREFIX:column="45">( <param><decl><type><name PREFIX:line="117" PREFIX:column="47">StringSumHelper</name> &amp;</type><name PREFIX:line="117" PREFIX:column="64">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="117" PREFIX:column="69">char</name></type> <name PREFIX:line="117" PREFIX:column="74">c</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier PREFIX:line="118" PREFIX:column="9">friend</specifier> <name PREFIX:line="118" PREFIX:column="16">StringSumHelper</name> &amp;</type> <name PREFIX:line="118" PREFIX:column="34">operator +</name> <parameter_list PREFIX:line="118" PREFIX:column="45">( <param><decl><type><name PREFIX:line="118" PREFIX:column="47">StringSumHelper</name> &amp;</type><name PREFIX:line="118" PREFIX:column="64">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="118" PREFIX:column="69">unknowntype</name> <name PREFIX:line="118" PREFIX:column="81">char</name></type> <name PREFIX:line="118" PREFIX:column="86">num</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier PREFIX:line="119" PREFIX:column="9">friend</specifier> <name PREFIX:line="119" PREFIX:column="16">StringSumHelper</name> &amp;</type> <name PREFIX:line="119" PREFIX:column="34">operator +</name> <parameter_list PREFIX:line="119" PREFIX:column="45">( <param><decl><type><name PREFIX:line="119" PREFIX:column="47">StringSumHelper</name> &amp;</type><name PREFIX:line="119" PREFIX:column="64">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="119" PREFIX:column="69">int</name></type> <name PREFIX:line="119" PREFIX:column="73">num</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier PREFIX:line="120" PREFIX:column="9">friend</specifier> <name PREFIX:line="120" PREFIX:column="16">StringSumHelper</name> &amp;</type> <name PREFIX:line="120" PREFIX:column="34">operator +</name> <parameter_list PREFIX:line="120" PREFIX:column="45">( <param><decl><type><name PREFIX:line="120" PREFIX:column="47">StringSumHelper</name> &amp;</type><name PREFIX:line="120" PREFIX:column="64">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="120" PREFIX:column="69">unknowntype</name> <name PREFIX:line="120" PREFIX:column="81">int</name></type> <name PREFIX:line="120" PREFIX:column="85">num</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier PREFIX:line="121" PREFIX:column="9">friend</specifier> <name PREFIX:line="121" PREFIX:column="16">StringSumHelper</name> &amp;</type> <name PREFIX:line="121" PREFIX:column="34">operator +</name> <parameter_list PREFIX:line="121" PREFIX:column="45">( <param><decl><type><name PREFIX:line="121" PREFIX:column="47">StringSumHelper</name> &amp;</type><name PREFIX:line="121" PREFIX:column="64">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="121" PREFIX:column="69">long</name></type> <name PREFIX:line="121" PREFIX:column="74">num</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier PREFIX:line="122" PREFIX:column="9">friend</specifier> <name PREFIX:line="122" PREFIX:column="16">StringSumHelper</name> &amp;</type> <name PREFIX:line="122" PREFIX:column="34">operator +</name> <parameter_list PREFIX:line="122" PREFIX:column="45">( <param><decl><type><name PREFIX:line="122" PREFIX:column="47">StringSumHelper</name> &amp;</type><name PREFIX:line="122" PREFIX:column="64">lhs</name></decl></param>, <param><decl><type><name PREFIX:line="122" PREFIX:column="69">unknowntype</name> <name PREFIX:line="122" PREFIX:column="81">long</name></type> <name PREFIX:line="122" PREFIX:column="86">num</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" PREFIX:line="124" PREFIX:column="9">// comparison (only works w/ Strings and "strings")</comment>
	<function><name PREFIX:line="125" PREFIX:column="9">operator StringIfHelperType</name><parameter_list PREFIX:line="125" PREFIX:column="36">()</parameter_list>  <block PREFIX:line="125" PREFIX:column="40">{ <return PREFIX:line="125" PREFIX:column="42">return <expr><name PREFIX:line="125" PREFIX:column="49">buffer</name> ? &amp;<name><name PREFIX:line="125" PREFIX:column="59">String</name>::<name PREFIX:line="125" PREFIX:column="67">StringIfHelper</name></name> : 0</expr>;</return> }</block></function>
	<function_decl><type><name PREFIX:line="126" PREFIX:column="9">int</name></type> <name PREFIX:line="126" PREFIX:column="13">compareTo</name><parameter_list PREFIX:line="126" PREFIX:column="22">( <param><decl><type><name PREFIX:line="126" PREFIX:column="24">String</name> &amp;</type><name PREFIX:line="126" PREFIX:column="32">s</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="127" PREFIX:column="9">unknowntype</name> <name PREFIX:line="127" PREFIX:column="21">char</name></type> <name PREFIX:line="127" PREFIX:column="26">equals</name><parameter_list PREFIX:line="127" PREFIX:column="32">( <param><decl><type><name PREFIX:line="127" PREFIX:column="34">String</name> &amp;</type><name PREFIX:line="127" PREFIX:column="42">s</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="128" PREFIX:column="9">unknowntype</name> <name PREFIX:line="128" PREFIX:column="21">char</name></type> <name PREFIX:line="128" PREFIX:column="26">equals</name><parameter_list PREFIX:line="128" PREFIX:column="32">( <param><decl><type><name PREFIX:line="128" PREFIX:column="34">char</name> *</type><name PREFIX:line="128" PREFIX:column="40">cstr</name></decl></param>)</parameter_list> ;</function_decl>
	<function><type><name PREFIX:line="129" PREFIX:column="9">unknowntype</name> <name PREFIX:line="129" PREFIX:column="21">char</name></type> <name PREFIX:line="129" PREFIX:column="26">operator ==</name> <parameter_list PREFIX:line="129" PREFIX:column="38">( <param><decl><type><name PREFIX:line="129" PREFIX:column="40">String</name> &amp;</type><name PREFIX:line="129" PREFIX:column="48">rhs</name></decl></param>)</parameter_list>  <block PREFIX:line="129" PREFIX:column="54">{<return PREFIX:line="129" PREFIX:column="55">return <expr><call><name PREFIX:line="129" PREFIX:column="62">equals</name><argument_list PREFIX:line="129" PREFIX:column="68">(<argument><expr><name PREFIX:line="129" PREFIX:column="69">rhs</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
	<function><type><name PREFIX:line="130" PREFIX:column="9">unknowntype</name> <name PREFIX:line="130" PREFIX:column="21">char</name></type> <name PREFIX:line="130" PREFIX:column="26">operator ==</name> <parameter_list PREFIX:line="130" PREFIX:column="38">( <param><decl><type><name PREFIX:line="130" PREFIX:column="40">char</name> *</type><name PREFIX:line="130" PREFIX:column="46">cstr</name></decl></param>)</parameter_list>  <block PREFIX:line="130" PREFIX:column="53">{<return PREFIX:line="130" PREFIX:column="54">return <expr><call><name PREFIX:line="130" PREFIX:column="61">equals</name><argument_list PREFIX:line="130" PREFIX:column="67">(<argument><expr><name PREFIX:line="130" PREFIX:column="68">cstr</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
	<function><type><name PREFIX:line="131" PREFIX:column="9">unknowntype</name> <name PREFIX:line="131" PREFIX:column="21">char</name></type> <name PREFIX:line="131" PREFIX:column="26">operator !=</name> <parameter_list PREFIX:line="131" PREFIX:column="38">( <param><decl><type><name PREFIX:line="131" PREFIX:column="40">String</name> &amp;</type><name PREFIX:line="131" PREFIX:column="48">rhs</name></decl></param>)</parameter_list>  <block PREFIX:line="131" PREFIX:column="54">{<return PREFIX:line="131" PREFIX:column="55">return <expr PREFIX:line="131" PREFIX:column="62">!<call><name PREFIX:line="131" PREFIX:column="63">equals</name><argument_list PREFIX:line="131" PREFIX:column="69">(<argument><expr><name PREFIX:line="131" PREFIX:column="70">rhs</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
	<function><type><name PREFIX:line="132" PREFIX:column="9">unknowntype</name> <name PREFIX:line="132" PREFIX:column="21">char</name></type> <name PREFIX:line="132" PREFIX:column="26">operator !=</name> <parameter_list PREFIX:line="132" PREFIX:column="38">( <param><decl><type><name PREFIX:line="132" PREFIX:column="40">char</name> *</type><name PREFIX:line="132" PREFIX:column="46">cstr</name></decl></param>)</parameter_list>  <block PREFIX:line="132" PREFIX:column="53">{<return PREFIX:line="132" PREFIX:column="54">return <expr PREFIX:line="132" PREFIX:column="61">!<call><name PREFIX:line="132" PREFIX:column="62">equals</name><argument_list PREFIX:line="132" PREFIX:column="68">(<argument><expr><name PREFIX:line="132" PREFIX:column="69">cstr</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
	<function_decl><type><name PREFIX:line="133" PREFIX:column="9">unknowntype</name> <name PREFIX:line="133" PREFIX:column="21">char</name></type> <name PREFIX:line="133" PREFIX:column="26">operator &lt;</name>  <parameter_list PREFIX:line="133" PREFIX:column="38">( <param><decl><type><name PREFIX:line="133" PREFIX:column="40">String</name> &amp;</type><name PREFIX:line="133" PREFIX:column="48">rhs</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="134" PREFIX:column="9">unknowntype</name> <name PREFIX:line="134" PREFIX:column="21">char</name></type> <name PREFIX:line="134" PREFIX:column="26">operator &gt;</name>  <parameter_list PREFIX:line="134" PREFIX:column="38">( <param><decl><type><name PREFIX:line="134" PREFIX:column="40">String</name> &amp;</type><name PREFIX:line="134" PREFIX:column="48">rhs</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="135" PREFIX:column="9">unknowntype</name> <name PREFIX:line="135" PREFIX:column="21">char</name></type> <name PREFIX:line="135" PREFIX:column="26">operator &lt;=</name> <parameter_list PREFIX:line="135" PREFIX:column="38">( <param><decl><type><name PREFIX:line="135" PREFIX:column="40">String</name> &amp;</type><name PREFIX:line="135" PREFIX:column="48">rhs</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="136" PREFIX:column="9">unknowntype</name> <name PREFIX:line="136" PREFIX:column="21">char</name></type> <name PREFIX:line="136" PREFIX:column="26">operator &gt;=</name> <parameter_list PREFIX:line="136" PREFIX:column="38">( <param><decl><type><name PREFIX:line="136" PREFIX:column="40">String</name> &amp;</type><name PREFIX:line="136" PREFIX:column="48">rhs</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="137" PREFIX:column="9">unknowntype</name> <name PREFIX:line="137" PREFIX:column="21">char</name></type> <name PREFIX:line="137" PREFIX:column="26">equalsIgnoreCase</name><parameter_list PREFIX:line="137" PREFIX:column="42">( <param><decl><type><name PREFIX:line="137" PREFIX:column="44">String</name> &amp;</type><name PREFIX:line="137" PREFIX:column="52">s</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="138" PREFIX:column="9">unknowntype</name> <name PREFIX:line="138" PREFIX:column="21">char</name></type> <name PREFIX:line="138" PREFIX:column="26">startsWith</name><parameter_list PREFIX:line="138" PREFIX:column="36">(  <param><decl><type><name PREFIX:line="138" PREFIX:column="39">String</name> &amp;</type><name PREFIX:line="138" PREFIX:column="47">prefix</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="139" PREFIX:column="9">unknowntype</name> <name PREFIX:line="139" PREFIX:column="21">char</name></type> <name PREFIX:line="139" PREFIX:column="26">startsWith</name><parameter_list PREFIX:line="139" PREFIX:column="36">( <param><decl><type><name PREFIX:line="139" PREFIX:column="38">String</name> &amp;</type><name PREFIX:line="139" PREFIX:column="46">prefix</name></decl></param>, <param><decl><type><name PREFIX:line="139" PREFIX:column="54">unknowntype</name> <name PREFIX:line="139" PREFIX:column="66">int</name></type> <name PREFIX:line="139" PREFIX:column="70">offset</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="140" PREFIX:column="9">unknowntype</name> <name PREFIX:line="140" PREFIX:column="21">char</name></type> <name PREFIX:line="140" PREFIX:column="26">endsWith</name><parameter_list PREFIX:line="140" PREFIX:column="34">( <param><decl><type><name PREFIX:line="140" PREFIX:column="36">String</name> &amp;</type><name PREFIX:line="140" PREFIX:column="44">suffix</name></decl></param>)</parameter_list> ;</function_decl>

	<comment type="line" PREFIX:line="142" PREFIX:column="9">// character acccess</comment>
	<function_decl><type><name PREFIX:line="143" PREFIX:column="9">char</name></type> <name PREFIX:line="143" PREFIX:column="14">charAt</name><parameter_list PREFIX:line="143" PREFIX:column="20">(<param><decl><type><name PREFIX:line="143" PREFIX:column="21">unknowntype</name> <name PREFIX:line="143" PREFIX:column="33">int</name></type> <name PREFIX:line="143" PREFIX:column="37">index</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="144" PREFIX:column="9">void</name></type> <name PREFIX:line="144" PREFIX:column="14">setCharAt</name><parameter_list PREFIX:line="144" PREFIX:column="23">(<param><decl><type><name PREFIX:line="144" PREFIX:column="24">unknowntype</name> <name PREFIX:line="144" PREFIX:column="36">int</name></type> <name PREFIX:line="144" PREFIX:column="40">index</name></decl></param>, <param><decl><type><name PREFIX:line="144" PREFIX:column="47">char</name></type> <name PREFIX:line="144" PREFIX:column="52">c</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="145" PREFIX:column="9">char</name></type> <name PREFIX:line="145" PREFIX:column="14">operator []</name> <parameter_list PREFIX:line="145" PREFIX:column="26">(<param><decl><type><name PREFIX:line="145" PREFIX:column="27">unknowntype</name> <name PREFIX:line="145" PREFIX:column="39">int</name></type> <name PREFIX:line="145" PREFIX:column="43">index</name></decl></param>)</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="146" PREFIX:column="9">char</name>&amp;</type> <name PREFIX:line="146" PREFIX:column="15">operator []</name> <parameter_list PREFIX:line="146" PREFIX:column="27">(<param><decl><type><name PREFIX:line="146" PREFIX:column="28">unknowntype</name> <name PREFIX:line="146" PREFIX:column="40">int</name></type> <name PREFIX:line="146" PREFIX:column="44">index</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="147" PREFIX:column="9">void</name></type> <name PREFIX:line="147" PREFIX:column="14">getBytes</name><parameter_list PREFIX:line="147" PREFIX:column="22">(<param><decl><type><name PREFIX:line="147" PREFIX:column="23">unknowntype</name> <name PREFIX:line="147" PREFIX:column="35">char</name> *</type><name PREFIX:line="147" PREFIX:column="41">buf</name></decl></param>, <param><decl><type><name PREFIX:line="147" PREFIX:column="46">unknowntype</name> <name PREFIX:line="147" PREFIX:column="58">int</name></type> <name PREFIX:line="147" PREFIX:column="62">bufsize</name></decl></param>, <param><decl><type><name PREFIX:line="147" PREFIX:column="71">unknowntype</name> <name PREFIX:line="147" PREFIX:column="83">int</name></type> <name PREFIX:line="147" PREFIX:column="87">index</name><init PREFIX:line="147" PREFIX:column="92">=<expr PREFIX:line="147" PREFIX:column="93">0</expr></init></decl></param>)</parameter_list> ;</function_decl>
	<function><type><name PREFIX:line="148" PREFIX:column="9">void</name></type> <name PREFIX:line="148" PREFIX:column="14">toCharArray</name><parameter_list PREFIX:line="148" PREFIX:column="25">(<param><decl><type><name PREFIX:line="148" PREFIX:column="26">char</name> *</type><name PREFIX:line="148" PREFIX:column="32">buf</name></decl></param>, <param><decl><type><name PREFIX:line="148" PREFIX:column="37">unknowntype</name> <name PREFIX:line="148" PREFIX:column="49">int</name></type> <name PREFIX:line="148" PREFIX:column="53">bufsize</name></decl></param>, <param><decl><type><name PREFIX:line="148" PREFIX:column="62">unknowntype</name> <name PREFIX:line="148" PREFIX:column="74">int</name></type> <name PREFIX:line="148" PREFIX:column="78">index</name><init PREFIX:line="148" PREFIX:column="83">=<expr PREFIX:line="148" PREFIX:column="84">0</expr></init></decl></param>)</parameter_list> 
		<block PREFIX:line="149" PREFIX:column="17">{<expr_stmt><expr><call><name PREFIX:line="149" PREFIX:column="18">getBytes</name><argument_list PREFIX:line="149" PREFIX:column="26">(<argument><expr PREFIX:line="149" PREFIX:column="27">(<name PREFIX:line="149" PREFIX:column="28">unknowntype</name> <name PREFIX:line="149" PREFIX:column="40">char</name> *)<name PREFIX:line="149" PREFIX:column="47">buf</name></expr></argument>, <argument><expr><name PREFIX:line="149" PREFIX:column="52">bufsize</name></expr></argument>, <argument><expr><name PREFIX:line="149" PREFIX:column="61">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

	<comment type="line" PREFIX:line="151" PREFIX:column="9">// search</comment>
	<function_decl><type><name PREFIX:line="152" PREFIX:column="9">int</name></type> <name PREFIX:line="152" PREFIX:column="13">indexOf</name><parameter_list PREFIX:line="152" PREFIX:column="20">( <param><decl><type><name PREFIX:line="152" PREFIX:column="22">char</name></type> <name PREFIX:line="152" PREFIX:column="27">ch</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="153" PREFIX:column="9">int</name></type> <name PREFIX:line="153" PREFIX:column="13">indexOf</name><parameter_list PREFIX:line="153" PREFIX:column="20">( <param><decl><type><name PREFIX:line="153" PREFIX:column="22">char</name></type> <name PREFIX:line="153" PREFIX:column="27">ch</name></decl></param>, <param><decl><type><name PREFIX:line="153" PREFIX:column="31">unknowntype</name> <name PREFIX:line="153" PREFIX:column="43">int</name></type> <name PREFIX:line="153" PREFIX:column="47">fromIndex</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="154" PREFIX:column="9">int</name></type> <name PREFIX:line="154" PREFIX:column="13">indexOf</name><parameter_list PREFIX:line="154" PREFIX:column="20">(  <param><decl><type><name PREFIX:line="154" PREFIX:column="23">String</name> &amp;</type><name PREFIX:line="154" PREFIX:column="31">str</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="155" PREFIX:column="9">int</name></type> <name PREFIX:line="155" PREFIX:column="13">indexOf</name><parameter_list PREFIX:line="155" PREFIX:column="20">(  <param><decl><type><name PREFIX:line="155" PREFIX:column="23">String</name> &amp;</type><name PREFIX:line="155" PREFIX:column="31">str</name></decl></param>, <param><decl><type><name PREFIX:line="155" PREFIX:column="36">unknowntype</name> <name PREFIX:line="155" PREFIX:column="48">int</name></type> <name PREFIX:line="155" PREFIX:column="52">fromIndex</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="156" PREFIX:column="9">int</name></type> <name PREFIX:line="156" PREFIX:column="13">lastIndexOf</name><parameter_list PREFIX:line="156" PREFIX:column="24">( <param><decl><type><name PREFIX:line="156" PREFIX:column="26">char</name></type> <name PREFIX:line="156" PREFIX:column="31">ch</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="157" PREFIX:column="9">int</name></type> <name PREFIX:line="157" PREFIX:column="13">lastIndexOf</name><parameter_list PREFIX:line="157" PREFIX:column="24">( <param><decl><type><name PREFIX:line="157" PREFIX:column="26">char</name></type> <name PREFIX:line="157" PREFIX:column="31">ch</name></decl></param>, <param><decl><type><name PREFIX:line="157" PREFIX:column="35">unknowntype</name> <name PREFIX:line="157" PREFIX:column="47">int</name></type> <name PREFIX:line="157" PREFIX:column="51">fromIndex</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="158" PREFIX:column="9">int</name></type> <name PREFIX:line="158" PREFIX:column="13">lastIndexOf</name><parameter_list PREFIX:line="158" PREFIX:column="24">(  <param><decl><type><name PREFIX:line="158" PREFIX:column="27">String</name> &amp;</type><name PREFIX:line="158" PREFIX:column="35">str</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="159" PREFIX:column="9">int</name></type> <name PREFIX:line="159" PREFIX:column="13">lastIndexOf</name><parameter_list PREFIX:line="159" PREFIX:column="24">(  <param><decl><type><name PREFIX:line="159" PREFIX:column="27">String</name> &amp;</type><name PREFIX:line="159" PREFIX:column="35">str</name></decl></param>, <param><decl><type><name PREFIX:line="159" PREFIX:column="40">unknowntype</name> <name PREFIX:line="159" PREFIX:column="52">int</name></type> <name PREFIX:line="159" PREFIX:column="56">fromIndex</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="160" PREFIX:column="9">String</name></type> <name PREFIX:line="160" PREFIX:column="16">substring</name><parameter_list PREFIX:line="160" PREFIX:column="25">( <param><decl><type><name PREFIX:line="160" PREFIX:column="27">unknowntype</name> <name PREFIX:line="160" PREFIX:column="39">int</name></type> <name PREFIX:line="160" PREFIX:column="43">beginIndex</name></decl></param> )</parameter_list> ;</function_decl>
	<function_decl><type><name PREFIX:line="161" PREFIX:column="9">String</name></type> <name PREFIX:line="161" PREFIX:column="16">substring</name><parameter_list PREFIX:line="161" PREFIX:column="25">( <param><decl><type><name PREFIX:line="161" PREFIX:column="27">unknowntype</name> <name PREFIX:line="161" PREFIX:column="39">int</name></type> <name PREFIX:line="161" PREFIX:column="43">beginIndex</name></decl></param>, <param><decl><type><name PREFIX:line="161" PREFIX:column="55">unknowntype</name> <name PREFIX:line="161" PREFIX:column="67">int</name></type> <name PREFIX:line="161" PREFIX:column="71">endIndex</name></decl></param> )</parameter_list> ;</function_decl>

	<comment type="line" PREFIX:line="163" PREFIX:column="9">// modification</comment>
	<function_decl><type><name PREFIX:line="164" PREFIX:column="9">void</name></type> <name PREFIX:line="164" PREFIX:column="14">replace</name><parameter_list PREFIX:line="164" PREFIX:column="21">(<param><decl><type><name PREFIX:line="164" PREFIX:column="22">char</name></type> <name PREFIX:line="164" PREFIX:column="27">find</name></decl></param>, <param><decl><type><name PREFIX:line="164" PREFIX:column="33">char</name></type> <name PREFIX:line="164" PREFIX:column="38">replace</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="165" PREFIX:column="9">void</name></type> <name PREFIX:line="165" PREFIX:column="14">replace</name><parameter_list PREFIX:line="165" PREFIX:column="21">( <param><decl><type><name PREFIX:line="165" PREFIX:column="23">String</name>&amp;</type> <name PREFIX:line="165" PREFIX:column="31">find</name></decl></param>,  <param><decl><type><name PREFIX:line="165" PREFIX:column="38">String</name>&amp;</type> <name PREFIX:line="165" PREFIX:column="46">replace</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="166" PREFIX:column="9">void</name></type> <name PREFIX:line="166" PREFIX:column="14">toLowerCase</name><parameter_list PREFIX:line="166" PREFIX:column="25">(<param><decl><type><name PREFIX:line="166" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="167" PREFIX:column="9">void</name></type> <name PREFIX:line="167" PREFIX:column="14">toUpperCase</name><parameter_list PREFIX:line="167" PREFIX:column="25">(<param><decl><type><name PREFIX:line="167" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="168" PREFIX:column="9">void</name></type> <name PREFIX:line="168" PREFIX:column="14">trim</name><parameter_list PREFIX:line="168" PREFIX:column="18">(<param><decl><type><name PREFIX:line="168" PREFIX:column="19">void</name></type></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" PREFIX:line="170" PREFIX:column="9">// parsing/conversion</comment>
	<function_decl><type><name PREFIX:line="171" PREFIX:column="9">long</name></type> <name PREFIX:line="171" PREFIX:column="14">toInt</name><parameter_list PREFIX:line="171" PREFIX:column="19">(<param><decl><type><name PREFIX:line="171" PREFIX:column="20">void</name></type></decl></param>)</parameter_list> ;</function_decl>

</public><protected PREFIX:line="173" PREFIX:column="1">protected:
	<decl_stmt><decl><type><name PREFIX:line="174" PREFIX:column="9">char</name> *</type><name PREFIX:line="174" PREFIX:column="15">buffer</name></decl>;</decl_stmt>	        <comment type="line" PREFIX:line="174" PREFIX:column="33">// the actual char array</comment>
	<decl_stmt><decl><type><name PREFIX:line="175" PREFIX:column="9">unknowntype</name> <name PREFIX:line="175" PREFIX:column="21">int</name></type> <name PREFIX:line="175" PREFIX:column="25">capacity</name></decl>;</decl_stmt>  <comment type="line" PREFIX:line="175" PREFIX:column="36">// the array length minus one (for the '\0')</comment>
	<decl_stmt><decl><type><name PREFIX:line="176" PREFIX:column="9">unknowntype</name> <name PREFIX:line="176" PREFIX:column="21">int</name></type> <name PREFIX:line="176" PREFIX:column="25">len</name></decl>;</decl_stmt>       <comment type="line" PREFIX:line="176" PREFIX:column="36">// the String length (not counting the '\0')</comment>
	<decl_stmt><decl><type><name PREFIX:line="177" PREFIX:column="9">unknowntype</name> <name PREFIX:line="177" PREFIX:column="21">char</name></type> <name PREFIX:line="177" PREFIX:column="26">flags</name></decl>;</decl_stmt>    <comment type="line" PREFIX:line="177" PREFIX:column="36">// unused, for future features</comment>
</protected><protected PREFIX:line="178" PREFIX:column="1">protected:
	<function_decl><type><name PREFIX:line="179" PREFIX:column="9">void</name></type> <name PREFIX:line="179" PREFIX:column="14">init</name><parameter_list PREFIX:line="179" PREFIX:column="18">(<param><decl><type><name PREFIX:line="179" PREFIX:column="19">void</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="180" PREFIX:column="9">void</name></type> <name PREFIX:line="180" PREFIX:column="14">invalidate</name><parameter_list PREFIX:line="180" PREFIX:column="24">(<param><decl><type><name PREFIX:line="180" PREFIX:column="25">void</name></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="181" PREFIX:column="9">unknowntype</name> <name PREFIX:line="181" PREFIX:column="21">char</name></type> <name PREFIX:line="181" PREFIX:column="26">changeBuffer</name><parameter_list PREFIX:line="181" PREFIX:column="38">(<param><decl><type><name PREFIX:line="181" PREFIX:column="39">unknowntype</name> <name PREFIX:line="181" PREFIX:column="51">int</name></type> <name PREFIX:line="181" PREFIX:column="55">maxStrLen</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name PREFIX:line="182" PREFIX:column="9">unknowntype</name> <name PREFIX:line="182" PREFIX:column="21">char</name></type> <name PREFIX:line="182" PREFIX:column="26">concat</name><parameter_list PREFIX:line="182" PREFIX:column="32">( <param><decl><type><name PREFIX:line="182" PREFIX:column="34">char</name> *</type><name PREFIX:line="182" PREFIX:column="40">cstr</name></decl></param>, <param><decl><type><name PREFIX:line="182" PREFIX:column="46">unknowntype</name> <name PREFIX:line="182" PREFIX:column="58">int</name></type> <name PREFIX:line="182" PREFIX:column="62">length</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" PREFIX:line="184" PREFIX:column="9">// copy and move</comment>
	<function_decl><type><name PREFIX:line="185" PREFIX:column="9">String</name> &amp;</type> <name PREFIX:line="185" PREFIX:column="18">copy</name><parameter_list PREFIX:line="185" PREFIX:column="22">( <param><decl><type><name PREFIX:line="185" PREFIX:column="24">char</name> *</type><name PREFIX:line="185" PREFIX:column="30">cstr</name></decl></param>, <param><decl><type><name PREFIX:line="185" PREFIX:column="36">unknowntype</name> <name PREFIX:line="185" PREFIX:column="48">int</name></type> <name PREFIX:line="185" PREFIX:column="52">length</name></decl></param>)</parameter_list>;</function_decl>
	<cpp:ifdef PREFIX:line="186" PREFIX:column="9">#<cpp:directive PREFIX:line="186" PREFIX:column="10">ifdef</cpp:directive> <name PREFIX:line="186" PREFIX:column="16">__GXX_EXPERIMENTAL_CXX0X__</name></cpp:ifdef>
	<function_decl><type><name PREFIX:line="187" PREFIX:column="9">void</name></type> <name PREFIX:line="187" PREFIX:column="14">move</name><parameter_list PREFIX:line="187" PREFIX:column="18">(<param><decl><type><name PREFIX:line="187" PREFIX:column="19">String</name> &amp;</type><name PREFIX:line="187" PREFIX:column="27">rhs</name></decl></param>)</parameter_list>;</function_decl>
	<cpp:endif PREFIX:line="188" PREFIX:column="9">#<cpp:directive PREFIX:line="188" PREFIX:column="10">endif</cpp:directive></cpp:endif>
</protected>}</block>;</class>

<class PREFIX:line="191" PREFIX:column="1">class <name PREFIX:line="191" PREFIX:column="7">StringSumHelper</name> <super PREFIX:line="191" PREFIX:column="23">: <specifier PREFIX:line="191" PREFIX:column="25">public</specifier> <name PREFIX:line="191" PREFIX:column="32">String</name></super>
<block PREFIX:line="192" PREFIX:column="1">{<private type="default" PREFIX:line="192" PREFIX:column="2">
</private><public PREFIX:line="193" PREFIX:column="1">public:
	<constructor><name PREFIX:line="194" PREFIX:column="9">StringSumHelper</name><parameter_list PREFIX:line="194" PREFIX:column="24">( <param><decl><type><name PREFIX:line="194" PREFIX:column="26">String</name> &amp;</type><name PREFIX:line="194" PREFIX:column="34">s</name></decl></param>)</parameter_list> <member_list PREFIX:line="194" PREFIX:column="37">: <call><name PREFIX:line="194" PREFIX:column="39">String</name><argument_list PREFIX:line="194" PREFIX:column="45">(<argument><expr><name PREFIX:line="194" PREFIX:column="46">s</name></expr></argument>)</argument_list></call> </member_list><block PREFIX:line="194" PREFIX:column="49">{}</block></constructor>
	<constructor><name PREFIX:line="195" PREFIX:column="9">StringSumHelper</name><parameter_list PREFIX:line="195" PREFIX:column="24">( <param><decl><type><name PREFIX:line="195" PREFIX:column="26">char</name> *</type><name PREFIX:line="195" PREFIX:column="32">p</name></decl></param>)</parameter_list> <member_list PREFIX:line="195" PREFIX:column="35">: <call><name PREFIX:line="195" PREFIX:column="37">String</name><argument_list PREFIX:line="195" PREFIX:column="43">(<argument><expr><name PREFIX:line="195" PREFIX:column="44">p</name></expr></argument>)</argument_list></call> </member_list><block PREFIX:line="195" PREFIX:column="47">{}</block></constructor>
	<constructor><name PREFIX:line="196" PREFIX:column="9">StringSumHelper</name><parameter_list PREFIX:line="196" PREFIX:column="24">(<param><decl><type><name PREFIX:line="196" PREFIX:column="25">char</name></type> <name PREFIX:line="196" PREFIX:column="30">c</name></decl></param>)</parameter_list> <member_list PREFIX:line="196" PREFIX:column="33">: <call><name PREFIX:line="196" PREFIX:column="35">String</name><argument_list PREFIX:line="196" PREFIX:column="41">(<argument><expr><name PREFIX:line="196" PREFIX:column="42">c</name></expr></argument>)</argument_list></call> </member_list><block PREFIX:line="196" PREFIX:column="45">{}</block></constructor>
	<constructor><name PREFIX:line="197" PREFIX:column="9">StringSumHelper</name><parameter_list PREFIX:line="197" PREFIX:column="24">(<param><decl><type><name PREFIX:line="197" PREFIX:column="25">unknowntype</name> <name PREFIX:line="197" PREFIX:column="37">char</name></type> <name PREFIX:line="197" PREFIX:column="42">num</name></decl></param>)</parameter_list> <member_list PREFIX:line="197" PREFIX:column="47">: <call><name PREFIX:line="197" PREFIX:column="49">String</name><argument_list PREFIX:line="197" PREFIX:column="55">(<argument><expr><name PREFIX:line="197" PREFIX:column="56">num</name></expr></argument>)</argument_list></call> </member_list><block PREFIX:line="197" PREFIX:column="61">{}</block></constructor>
	<constructor><name PREFIX:line="198" PREFIX:column="9">StringSumHelper</name><parameter_list PREFIX:line="198" PREFIX:column="24">(<param><decl><type><name PREFIX:line="198" PREFIX:column="25">int</name></type> <name PREFIX:line="198" PREFIX:column="29">num</name></decl></param>)</parameter_list> <member_list PREFIX:line="198" PREFIX:column="34">: <call><name PREFIX:line="198" PREFIX:column="36">String</name><argument_list PREFIX:line="198" PREFIX:column="42">(<argument><expr><name PREFIX:line="198" PREFIX:column="43">num</name></expr></argument>)</argument_list></call> </member_list><block PREFIX:line="198" PREFIX:column="48">{}</block></constructor>
	<constructor><name PREFIX:line="199" PREFIX:column="9">StringSumHelper</name><parameter_list PREFIX:line="199" PREFIX:column="24">(<param><decl><type><name PREFIX:line="199" PREFIX:column="25">unknowntype</name> <name PREFIX:line="199" PREFIX:column="37">int</name></type> <name PREFIX:line="199" PREFIX:column="41">num</name></decl></param>)</parameter_list> <member_list PREFIX:line="199" PREFIX:column="46">: <call><name PREFIX:line="199" PREFIX:column="48">String</name><argument_list PREFIX:line="199" PREFIX:column="54">(<argument><expr><name PREFIX:line="199" PREFIX:column="55">num</name></expr></argument>)</argument_list></call> </member_list><block PREFIX:line="199" PREFIX:column="60">{}</block></constructor>
	<constructor><name PREFIX:line="200" PREFIX:column="9">StringSumHelper</name><parameter_list PREFIX:line="200" PREFIX:column="24">(<param><decl><type><name PREFIX:line="200" PREFIX:column="25">long</name></type> <name PREFIX:line="200" PREFIX:column="30">num</name></decl></param>)</parameter_list> <member_list PREFIX:line="200" PREFIX:column="35">: <call><name PREFIX:line="200" PREFIX:column="37">String</name><argument_list PREFIX:line="200" PREFIX:column="43">(<argument><expr><name PREFIX:line="200" PREFIX:column="44">num</name></expr></argument>)</argument_list></call> </member_list><block PREFIX:line="200" PREFIX:column="49">{}</block></constructor>
	<constructor><name PREFIX:line="201" PREFIX:column="9">StringSumHelper</name><parameter_list PREFIX:line="201" PREFIX:column="24">(<param><decl><type><name PREFIX:line="201" PREFIX:column="25">unknowntype</name> <name PREFIX:line="201" PREFIX:column="37">long</name></type> <name PREFIX:line="201" PREFIX:column="42">num</name></decl></param>)</parameter_list> <member_list PREFIX:line="201" PREFIX:column="47">: <call><name PREFIX:line="201" PREFIX:column="49">String</name><argument_list PREFIX:line="201" PREFIX:column="55">(<argument><expr><name PREFIX:line="201" PREFIX:column="56">num</name></expr></argument>)</argument_list></call> </member_list><block PREFIX:line="201" PREFIX:column="61">{}</block></constructor>
</public>}</block>;</class>

<cpp:endif PREFIX:line="204" PREFIX:column="1">#<cpp:directive PREFIX:line="204" PREFIX:column="2">endif</cpp:directive></cpp:endif>  <comment type="line" PREFIX:line="204" PREFIX:column="9">// __cplusplus</comment>
<cpp:endif PREFIX:line="205" PREFIX:column="1">#<cpp:directive PREFIX:line="205" PREFIX:column="2">endif</cpp:directive></cpp:endif>  <comment type="line" PREFIX:line="205" PREFIX:column="9">// String_class_h</comment>
</unit>
