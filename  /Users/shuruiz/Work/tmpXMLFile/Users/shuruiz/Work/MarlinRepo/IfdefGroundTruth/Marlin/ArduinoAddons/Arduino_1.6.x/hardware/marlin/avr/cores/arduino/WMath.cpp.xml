<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/cores/arduino/WMath.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block" PREFIX:line="3" PREFIX:column="1">/*
  Part of the Wiring project - http://wiring.org.co
  Copyright (c) 2004-06 Hernando Barragan
  Modified 13 August 2006, David A. Mellis for Arduino - http://www.arduino.cc/
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA
  
  $Id$
*/</comment>

<extern PREFIX:line="26" PREFIX:column="1">extern "C" <block PREFIX:line="26" PREFIX:column="12">{
  <cpp:include PREFIX:line="27" PREFIX:column="3">#<cpp:directive PREFIX:line="27" PREFIX:column="4">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="12">"stdlib.h"</cpp:file></cpp:include>
}</block></extern>

<function><type><name PREFIX:line="30" PREFIX:column="1">void</name></type> <name PREFIX:line="30" PREFIX:column="6">randomSeed</name><parameter_list PREFIX:line="30" PREFIX:column="16">(<param><decl><type><name PREFIX:line="30" PREFIX:column="17">unknowntype</name> <name PREFIX:line="30" PREFIX:column="29">int</name></type> <name PREFIX:line="30" PREFIX:column="33">seed</name></decl></param>)</parameter_list>
<block PREFIX:line="31" PREFIX:column="1">{
  <if PREFIX:line="32" PREFIX:column="3">if <condition PREFIX:line="32" PREFIX:column="6">(<expr><name PREFIX:line="32" PREFIX:column="7">seed</name> != 0</expr>)</condition><then PREFIX:line="32" PREFIX:column="17"> <block PREFIX:line="32" PREFIX:column="18">{
    <expr_stmt><expr><call><name PREFIX:line="33" PREFIX:column="5">srandom</name><argument_list PREFIX:line="33" PREFIX:column="12">(<argument><expr><name PREFIX:line="33" PREFIX:column="13">seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name PREFIX:line="37" PREFIX:column="1">long</name></type> <name PREFIX:line="37" PREFIX:column="6">random</name><parameter_list PREFIX:line="37" PREFIX:column="12">(<param><decl><type><name PREFIX:line="37" PREFIX:column="13">long</name></type> <name PREFIX:line="37" PREFIX:column="18">howbig</name></decl></param>)</parameter_list>
<block PREFIX:line="38" PREFIX:column="1">{
  <if PREFIX:line="39" PREFIX:column="3">if <condition PREFIX:line="39" PREFIX:column="6">(<expr><name PREFIX:line="39" PREFIX:column="7">howbig</name> == 0</expr>)</condition><then PREFIX:line="39" PREFIX:column="19"> <block PREFIX:line="39" PREFIX:column="20">{
    <return PREFIX:line="40" PREFIX:column="5">return <expr PREFIX:line="40" PREFIX:column="12">0</expr>;</return>
  }</block></then></if>
  <return PREFIX:line="42" PREFIX:column="3">return <expr><call><name PREFIX:line="42" PREFIX:column="10">random</name><argument_list PREFIX:line="42" PREFIX:column="16">()</argument_list></call> % <name PREFIX:line="42" PREFIX:column="21">howbig</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="45" PREFIX:column="1">long</name></type> <name PREFIX:line="45" PREFIX:column="6">random</name><parameter_list PREFIX:line="45" PREFIX:column="12">(<param><decl><type><name PREFIX:line="45" PREFIX:column="13">long</name></type> <name PREFIX:line="45" PREFIX:column="18">howsmall</name></decl></param>, <param><decl><type><name PREFIX:line="45" PREFIX:column="28">long</name></type> <name PREFIX:line="45" PREFIX:column="33">howbig</name></decl></param>)</parameter_list>
<block PREFIX:line="46" PREFIX:column="1">{
  <if PREFIX:line="47" PREFIX:column="3">if <condition PREFIX:line="47" PREFIX:column="6">(<expr><name PREFIX:line="47" PREFIX:column="7">howsmall</name> &gt;= <name PREFIX:line="47" PREFIX:column="19">howbig</name></expr>)</condition><then PREFIX:line="47" PREFIX:column="26"> <block PREFIX:line="47" PREFIX:column="27">{
    <return PREFIX:line="48" PREFIX:column="5">return <expr><name PREFIX:line="48" PREFIX:column="12">howsmall</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name PREFIX:line="50" PREFIX:column="3">long</name></type> <name PREFIX:line="50" PREFIX:column="8">diff</name> <init PREFIX:line="50" PREFIX:column="13">= <expr><name PREFIX:line="50" PREFIX:column="15">howbig</name> - <name PREFIX:line="50" PREFIX:column="24">howsmall</name></expr></init></decl>;</decl_stmt>
  <return PREFIX:line="51" PREFIX:column="3">return <expr><call><name PREFIX:line="51" PREFIX:column="10">random</name><argument_list PREFIX:line="51" PREFIX:column="16">(<argument><expr><name PREFIX:line="51" PREFIX:column="17">diff</name></expr></argument>)</argument_list></call> + <name PREFIX:line="51" PREFIX:column="25">howsmall</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="54" PREFIX:column="1">long</name></type> <name PREFIX:line="54" PREFIX:column="6">map</name><parameter_list PREFIX:line="54" PREFIX:column="9">(<param><decl><type><name PREFIX:line="54" PREFIX:column="10">long</name></type> <name PREFIX:line="54" PREFIX:column="15">x</name></decl></param>, <param><decl><type><name PREFIX:line="54" PREFIX:column="18">long</name></type> <name PREFIX:line="54" PREFIX:column="23">in_min</name></decl></param>, <param><decl><type><name PREFIX:line="54" PREFIX:column="31">long</name></type> <name PREFIX:line="54" PREFIX:column="36">in_max</name></decl></param>, <param><decl><type><name PREFIX:line="54" PREFIX:column="44">long</name></type> <name PREFIX:line="54" PREFIX:column="49">out_min</name></decl></param>, <param><decl><type><name PREFIX:line="54" PREFIX:column="58">long</name></type> <name PREFIX:line="54" PREFIX:column="63">out_max</name></decl></param>)</parameter_list>
<block PREFIX:line="55" PREFIX:column="1">{
  <return PREFIX:line="56" PREFIX:column="3">return <expr PREFIX:line="56" PREFIX:column="10">(<name PREFIX:line="56" PREFIX:column="11">x</name> - <name PREFIX:line="56" PREFIX:column="15">in_min</name>) * (<name PREFIX:line="56" PREFIX:column="26">out_max</name> - <name PREFIX:line="56" PREFIX:column="36">out_min</name>) / (<name PREFIX:line="56" PREFIX:column="48">in_max</name> - <name PREFIX:line="56" PREFIX:column="57">in_min</name>) + <name PREFIX:line="56" PREFIX:column="67">out_min</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="59" PREFIX:column="1">unknowntype</name> <name PREFIX:line="59" PREFIX:column="13">int</name></type> <name PREFIX:line="59" PREFIX:column="17">makeWord</name><parameter_list PREFIX:line="59" PREFIX:column="25">(<param><decl><type><name PREFIX:line="59" PREFIX:column="26">unknowntype</name> <name PREFIX:line="59" PREFIX:column="38">int</name></type> <name PREFIX:line="59" PREFIX:column="42">w</name></decl></param>)</parameter_list> <block PREFIX:line="59" PREFIX:column="45">{ <return PREFIX:line="59" PREFIX:column="47">return <expr><name PREFIX:line="59" PREFIX:column="54">w</name></expr>;</return> }</block></function>
<function><type><name PREFIX:line="60" PREFIX:column="1">unknowntype</name> <name PREFIX:line="60" PREFIX:column="13">int</name></type> <name PREFIX:line="60" PREFIX:column="17">makeWord</name><parameter_list PREFIX:line="60" PREFIX:column="25">(<param><decl><type><name PREFIX:line="60" PREFIX:column="26">unknowntype</name> <name PREFIX:line="60" PREFIX:column="38">char</name></type> <name PREFIX:line="60" PREFIX:column="43">h</name></decl></param>, <param><decl><type><name PREFIX:line="60" PREFIX:column="46">unknowntype</name> <name PREFIX:line="60" PREFIX:column="58">char</name></type> <name PREFIX:line="60" PREFIX:column="63">l</name></decl></param>)</parameter_list> <block PREFIX:line="60" PREFIX:column="66">{ <return PREFIX:line="60" PREFIX:column="68">return <expr PREFIX:line="60" PREFIX:column="75">(<name PREFIX:line="60" PREFIX:column="76">h</name> &lt;&lt; 8) | <name PREFIX:line="60" PREFIX:column="86">l</name></expr>;</return> }</block></function>
</unit>
