<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_state.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*

  u8g_state.c
  
  backup and restore hardware state

  Universal 8bit Graphics Library
  
  Copyright (c) 2011, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  

  state callback: backup env U8G_STATE_MSG_BACKUP_ENV
  device callback: DEV_MSG_INIT
  state callback: backup u8g U8G_STATE_MSG_BACKUP_U8G
  state callback: restore env U8G_STATE_MSG_RESTORE_ENV

  state callback: backup env U8G_STATE_MSG_BACKUP_ENV
  state callback: retore u8g U8G_STATE_MSG_RESTORE_U8G
  DEV_MSG_PAGE_FIRST or DEV_MSG_PAGE_NEXT
  state callback: restore env U8G_STATE_MSG_RESTORE_ENV

*/</comment>

<cpp:include PREFIX:line="49" PREFIX:column="1">#<cpp:directive PREFIX:line="49" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="49" PREFIX:column="10">&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="50" PREFIX:column="1">#<cpp:directive PREFIX:line="50" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="50" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>

<function><type><name PREFIX:line="52" PREFIX:column="1">void</name></type> <name PREFIX:line="52" PREFIX:column="6">u8g_state_dummy_cb</name><parameter_list PREFIX:line="52" PREFIX:column="24">(<param><decl><type><name PREFIX:line="52" PREFIX:column="25">uint8_t</name></type> <name PREFIX:line="52" PREFIX:column="33">msg</name></decl></param>)</parameter_list>
<block PREFIX:line="53" PREFIX:column="1">{
  <comment type="block" PREFIX:line="54" PREFIX:column="3">/* the dummy procedure does nothing */</comment>
}</block></function>

<function><type><name PREFIX:line="57" PREFIX:column="1">void</name></type> <name PREFIX:line="57" PREFIX:column="6">u8g_SetHardwareBackup</name><parameter_list PREFIX:line="57" PREFIX:column="27">(<param><decl><type><name PREFIX:line="57" PREFIX:column="28">u8g_t</name> *</type><name PREFIX:line="57" PREFIX:column="35">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="57" PREFIX:column="40">u8g_state_cb</name></type> <name PREFIX:line="57" PREFIX:column="53">backup_cb</name></decl></param>)</parameter_list>
<block PREFIX:line="58" PREFIX:column="1">{
  <expr_stmt><expr><name><name PREFIX:line="59" PREFIX:column="3">u8g</name>-&gt;<name PREFIX:line="59" PREFIX:column="8">state_cb</name></name> = <name PREFIX:line="59" PREFIX:column="19">backup_cb</name></expr>;</expr_stmt>
  <comment type="block" PREFIX:line="60" PREFIX:column="3">/* in most cases the init message was already sent, so this will backup the */</comment>
  <comment type="block" PREFIX:line="61" PREFIX:column="3">/* current u8g state */</comment>
  <expr_stmt><expr><call><name PREFIX:line="62" PREFIX:column="3">backup_cb</name><argument_list PREFIX:line="62" PREFIX:column="12">(<argument><expr><name PREFIX:line="62" PREFIX:column="13">U8G_STATE_MSG_BACKUP_U8G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block" PREFIX:line="66" PREFIX:column="1">/*===============================================================*/</comment>
<comment type="block" PREFIX:line="67" PREFIX:column="1">/* AVR */</comment>

<cpp:if PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="69" PREFIX:column="5">defined</name><argument_list PREFIX:line="69" PREFIX:column="12">(<argument><expr><name PREFIX:line="69" PREFIX:column="13">__AVR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="70" PREFIX:column="1">#<cpp:directive PREFIX:line="70" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="70" PREFIX:column="9">U8G_ATMEGA_HW_SPI</name></cpp:macro></cpp:define>

<comment type="block" PREFIX:line="72" PREFIX:column="1">/* remove the definition for attiny */</comment>
<cpp:if PREFIX:line="73" PREFIX:column="1">#<cpp:directive PREFIX:line="73" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="73" PREFIX:column="5">__AVR_ARCH__</name> == 2</expr></cpp:if>
<cpp:undef PREFIX:line="74" PREFIX:column="1">#<cpp:directive PREFIX:line="74" PREFIX:column="2">undef</cpp:directive> <name PREFIX:line="74" PREFIX:column="8">U8G_ATMEGA_HW_SPI</name></cpp:undef>
<cpp:endif PREFIX:line="75" PREFIX:column="1">#<cpp:directive PREFIX:line="75" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="76" PREFIX:column="1">#<cpp:directive PREFIX:line="76" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="76" PREFIX:column="5">__AVR_ARCH__</name> == 25</expr></cpp:if>
<cpp:undef PREFIX:line="77" PREFIX:column="1">#<cpp:directive PREFIX:line="77" PREFIX:column="2">undef</cpp:directive> <name PREFIX:line="77" PREFIX:column="8">U8G_ATMEGA_HW_SPI</name></cpp:undef>
<cpp:endif PREFIX:line="78" PREFIX:column="1">#<cpp:directive PREFIX:line="78" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif PREFIX:line="79" PREFIX:column="1">#<cpp:directive PREFIX:line="79" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="81" PREFIX:column="1">#<cpp:directive PREFIX:line="81" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="81" PREFIX:column="5">defined</name><argument_list PREFIX:line="81" PREFIX:column="12">(<argument><expr><name PREFIX:line="81" PREFIX:column="13">U8G_ATMEGA_HW_SPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include PREFIX:line="82" PREFIX:column="1">#<cpp:directive PREFIX:line="82" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="82" PREFIX:column="10">&lt;avr/interrupt.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier PREFIX:line="83" PREFIX:column="1">static</specifier> <name PREFIX:line="83" PREFIX:column="8">uint8_t</name></type> <name><name PREFIX:line="83" PREFIX:column="16">u8g_state_avr_spi_memory</name><index PREFIX:line="83" PREFIX:column="40">[<expr PREFIX:line="83" PREFIX:column="41">2</expr>]</index></name></decl>;</decl_stmt>

<function><type><name PREFIX:line="85" PREFIX:column="1">void</name></type> <name PREFIX:line="85" PREFIX:column="6">u8g_backup_avr_spi</name><parameter_list PREFIX:line="85" PREFIX:column="24">(<param><decl><type><name PREFIX:line="85" PREFIX:column="25">uint8_t</name></type> <name PREFIX:line="85" PREFIX:column="33">msg</name></decl></param>)</parameter_list>
<block PREFIX:line="86" PREFIX:column="1">{
  <if PREFIX:line="87" PREFIX:column="3">if <condition PREFIX:line="87" PREFIX:column="6">( <expr><call><name PREFIX:line="87" PREFIX:column="8">U8G_STATE_MSG_IS_BACKUP</name><argument_list PREFIX:line="87" PREFIX:column="31">(<argument><expr><name PREFIX:line="87" PREFIX:column="32">msg</name></expr></argument>)</argument_list></call></expr> )</condition><then PREFIX:line="87" PREFIX:column="38">
  <block PREFIX:line="88" PREFIX:column="3">{
    <expr_stmt><expr><name><name PREFIX:line="89" PREFIX:column="5">u8g_state_avr_spi_memory</name><index PREFIX:line="89" PREFIX:column="29">[<expr><call><name PREFIX:line="89" PREFIX:column="30">U8G_STATE_MSG_GET_IDX</name><argument_list PREFIX:line="89" PREFIX:column="51">(<argument><expr><name PREFIX:line="89" PREFIX:column="52">msg</name></expr></argument>)</argument_list></call></expr>]</index></name> = <name PREFIX:line="89" PREFIX:column="60">SPCR</name></expr>;</expr_stmt>
  }</block></then>
  <else PREFIX:line="91" PREFIX:column="3">else
  <block PREFIX:line="92" PREFIX:column="3">{
    <decl_stmt><decl><type><name PREFIX:line="93" PREFIX:column="5">uint8_t</name></type> <name PREFIX:line="93" PREFIX:column="13">tmp</name> <init PREFIX:line="93" PREFIX:column="17">= <expr><name PREFIX:line="93" PREFIX:column="19">SREG</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name PREFIX:line="94" PREFIX:column="5">cli</name><argument_list PREFIX:line="94" PREFIX:column="8">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="95" PREFIX:column="5">SPCR</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="96" PREFIX:column="5">SPCR</name> = <name><name PREFIX:line="96" PREFIX:column="12">u8g_state_avr_spi_memory</name><index PREFIX:line="96" PREFIX:column="36">[<expr><call><name PREFIX:line="96" PREFIX:column="37">U8G_STATE_MSG_GET_IDX</name><argument_list PREFIX:line="96" PREFIX:column="58">(<argument><expr><name PREFIX:line="96" PREFIX:column="59">msg</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="97" PREFIX:column="5">SREG</name> = <name PREFIX:line="97" PREFIX:column="12">tmp</name></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<cpp:endif PREFIX:line="101" PREFIX:column="1">#<cpp:directive PREFIX:line="101" PREFIX:column="2">endif</cpp:directive></cpp:endif>

</unit>
