<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_arduino_hw_spi.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  
  u8g_com_arduino_hw_spi.c

  Universal 8bit Graphics Library
  
  Copyright (c) 2011, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  

  SPI Clock Cycle Type
  
  SSD1351	  50ns		20 MHz
  SSD1322	300ns		  3.3 MHz
  SSD1327	300ns
  SSD1306	300ns
  ST7565		400ns 		  2.5 MHz
  ST7920		400ns

  Arduino DUE
  
  PA25	MISO
  PA26	MOSI	75
  PA27	SCLK	76
  
  
typedef struct {
  WoReg SPI_CR;        (Spi Offset: 0x00) Control Register 
  RwReg SPI_MR;        (Spi Offset: 0x04) Mode Register 
  RoReg SPI_RDR;       (Spi Offset: 0x08) Receive Data Register 
  WoReg SPI_TDR;       (Spi Offset: 0x0C) Transmit Data Register 
  RoReg SPI_SR;        (Spi Offset: 0x10) Status Register 
  WoReg SPI_IER;       (Spi Offset: 0x14) Interrupt Enable Register 
  WoReg SPI_IDR;       (Spi Offset: 0x18) Interrupt Disable Register 
  RoReg SPI_IMR;       (Spi Offset: 0x1C) Interrupt Mask Register 
  RoReg Reserved1[4];
  RwReg SPI_CSR[4];    (Spi Offset: 0x30) Chip Select Register 
  RoReg Reserved2[41];
  RwReg SPI_WPMR;      (Spi Offset: 0xE4) Write Protection Control Register 
  RoReg SPI_WPSR;      (Spi Offset: 0xE8) Write Protection Status Register 
} Spi;
  
  Power Management Controller (PMC)
  arduino-1.5.2/hardware/arduino/sam/system/CMSIS/Device/ATMEL/sam3xa/include/instance/instance_pmc.h
    - enable PIO
      
      REG_PMC_PCER0 = 1UL &lt;&lt; ID_PIOA
    - enable SPI
      REG_PMC_PCER0 = 1UL &lt;&lt; ID_SPI0


    - enable PIOA and SPI0
      REG_PMC_PCER0 = (1UL &lt;&lt; ID_PIOA) | (1UL &lt;&lt; ID_SPI0);

  Parallel Input/Output Controller (PIO)
  arduino-1.5.2/hardware/arduino/sam/system/CMSIS/Device/ATMEL/sam3xa/include/instance/instance_pioa.h
    - enable special function of the pin: disable PIO on A26 and A27:
	REG_PIOA_PDR = 0x0c000000
	PIOA-&gt;PIO_PDR = 0x0c000000

  SPI
    SPI0-&gt;SPI_CR = SPI_CR_SPIDIS
    SPI0-&gt;SPI_CR = SPI_CR_SWRST ;
    SPI0-&gt;SPI_CR = SPI_CR_SWRST ;
    SPI0-&gt;SPI_CR = SPI_CR_SPIEN
  
    Bit 0: Master Mode = 1 (active)
    Bit 1: Peripheral Select = 0 (fixed)
    Bit 2: Chip Select Decode Mode = 1 (4 to 16)
    Bit 4: Mode Fault Detection = 1 (disabled)
    Bit 5: Wait Data Read = 0 (disabled) 
    Bit 7: Loop Back Mode = 0 (disabled)
    Bit 16-19: Peripheral Chip Select = 0 (chip select 0)    
    SPI0-&gt;SPI_MR = SPI_MR_MSTR | SPI_MR_PCSDEC | SPI_MR_MODFDIS
    
    Bit 0: Clock Polarity = 0
    Bit 1: Clock Phase = 0
    Bit 4-7: Bits = 0 (8 Bit)
    Bit 8-15: SCBR = 1
    SPI0-&gt;SPI_CSR[0] = SPI_CSR_SCBR(x)	Serial Baud Rate
	SCBR / 84000000 &gt; 50 / 1000000000 
	SCBR / 84 &gt; 5 / 100 
	SCBR  &gt; 50 *84 / 1000 --&gt; SCBR=5
	SCBR  &gt; 300*84 / 1000 --&gt; SCBR=26
	SCBR  &gt; 400*84 / 1000 --&gt; SCBR=34

  Arduino Due test code:
    REG_PMC_PCER0 = (1UL &lt;&lt; ID_PIOA) | (1UL &lt;&lt; ID_SPI0);
    REG_PIOA_PDR = 0x0c000000;
    SPI0-&gt;SPI_CR = SPI_CR_SPIDIS;
    SPI0-&gt;SPI_CR = SPI_CR_SWRST;
    SPI0-&gt;SPI_CR = SPI_CR_SWRST;
    SPI0-&gt;SPI_CR = SPI_CR_SPIEN;
    SPI0-&gt;SPI_MR = SPI_MR_MSTR | SPI_MR_PCSDEC | SPI_MR_MODFDIS;
    SPI0-&gt;SPI_CSR[0] = SPI_CSR_SCBR(30);

    for(;;)
    {
      while( (SPI0-&gt;SPI_SR &amp; SPI_SR_TDRE) == 0 )
	;
      SPI0-&gt;SPI_TDR = 0x050;
    }

*/</comment>

<cpp:include PREFIX:line="129" PREFIX:column="1">#<cpp:directive PREFIX:line="129" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="129" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>

<cpp:if PREFIX:line="131" PREFIX:column="1">#<cpp:directive PREFIX:line="131" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="131" PREFIX:column="5">defined</name><argument_list PREFIX:line="131" PREFIX:column="12">(<argument><expr><name PREFIX:line="131" PREFIX:column="13">ARDUINO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if PREFIX:line="133" PREFIX:column="1">#<cpp:directive PREFIX:line="133" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="133" PREFIX:column="5">defined</name><argument_list PREFIX:line="133" PREFIX:column="12">(<argument><expr><name PREFIX:line="133" PREFIX:column="13">__AVR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="134" PREFIX:column="1">#<cpp:directive PREFIX:line="134" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="134" PREFIX:column="9">U8G_ARDUINO_ATMEGA_HW_SPI</name></cpp:macro></cpp:define>
<comment type="block" PREFIX:line="135" PREFIX:column="1">/* remove the definition for attiny */</comment>
<cpp:if PREFIX:line="136" PREFIX:column="1">#<cpp:directive PREFIX:line="136" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="136" PREFIX:column="5">__AVR_ARCH__</name> == 2</expr></cpp:if>
<cpp:undef PREFIX:line="137" PREFIX:column="1">#<cpp:directive PREFIX:line="137" PREFIX:column="2">undef</cpp:directive> <name PREFIX:line="137" PREFIX:column="8">U8G_ARDUINO_ATMEGA_HW_SPI</name></cpp:undef>
<cpp:endif PREFIX:line="138" PREFIX:column="1">#<cpp:directive PREFIX:line="138" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="139" PREFIX:column="1">#<cpp:directive PREFIX:line="139" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="139" PREFIX:column="5">__AVR_ARCH__</name> == 25</expr></cpp:if>
<cpp:undef PREFIX:line="140" PREFIX:column="1">#<cpp:directive PREFIX:line="140" PREFIX:column="2">undef</cpp:directive> <name PREFIX:line="140" PREFIX:column="8">U8G_ARDUINO_ATMEGA_HW_SPI</name></cpp:undef>
<cpp:endif PREFIX:line="141" PREFIX:column="1">#<cpp:directive PREFIX:line="141" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif PREFIX:line="142" PREFIX:column="1">#<cpp:directive PREFIX:line="142" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="144" PREFIX:column="1">#<cpp:directive PREFIX:line="144" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="144" PREFIX:column="5">defined</name><argument_list PREFIX:line="144" PREFIX:column="12">(<argument><expr><name PREFIX:line="144" PREFIX:column="13">U8G_ARDUINO_ATMEGA_HW_SPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include PREFIX:line="146" PREFIX:column="1">#<cpp:directive PREFIX:line="146" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="146" PREFIX:column="10">&lt;avr/interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="147" PREFIX:column="1">#<cpp:directive PREFIX:line="147" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="147" PREFIX:column="10">&lt;avr/io.h&gt;</cpp:file></cpp:include>

<cpp:if PREFIX:line="149" PREFIX:column="1">#<cpp:directive PREFIX:line="149" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="149" PREFIX:column="5">ARDUINO</name> &lt; 100</expr></cpp:if> 
<cpp:include PREFIX:line="150" PREFIX:column="1">#<cpp:directive PREFIX:line="150" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="150" PREFIX:column="10">&lt;WProgram.h&gt;</cpp:file></cpp:include> 

<comment type="block" PREFIX:line="152" PREFIX:column="1">/* fixed pins */</comment>
<cpp:if PREFIX:line="153" PREFIX:column="1">#<cpp:directive PREFIX:line="153" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="153" PREFIX:column="5">defined</name><argument_list PREFIX:line="153" PREFIX:column="12">(<argument><expr><name PREFIX:line="153" PREFIX:column="13">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="153" PREFIX:column="36">defined</name><argument_list PREFIX:line="153" PREFIX:column="43">(<argument><expr><name PREFIX:line="153" PREFIX:column="44">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call></expr></cpp:if> <comment type="line" PREFIX:line="153" PREFIX:column="65">// Sanguino.cc board</comment>
<cpp:define PREFIX:line="154" PREFIX:column="1">#<cpp:directive PREFIX:line="154" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="154" PREFIX:column="9">PIN_SCK</name></cpp:macro>         <cpp:value PREFIX:line="154" PREFIX:column="25">7</cpp:value></cpp:define>
<cpp:define PREFIX:line="155" PREFIX:column="1">#<cpp:directive PREFIX:line="155" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="155" PREFIX:column="9">PIN_MISO</name></cpp:macro>        <cpp:value PREFIX:line="155" PREFIX:column="25">6</cpp:value></cpp:define>
<cpp:define PREFIX:line="156" PREFIX:column="1">#<cpp:directive PREFIX:line="156" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="156" PREFIX:column="9">PIN_MOSI</name></cpp:macro>        <cpp:value PREFIX:line="156" PREFIX:column="25">5</cpp:value></cpp:define>
<cpp:define PREFIX:line="157" PREFIX:column="1">#<cpp:directive PREFIX:line="157" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="157" PREFIX:column="9">PIN_CS</name></cpp:macro>          <cpp:value PREFIX:line="157" PREFIX:column="25">4</cpp:value></cpp:define>
<cpp:else PREFIX:line="158" PREFIX:column="1">#<cpp:directive PREFIX:line="158" PREFIX:column="2">else</cpp:directive></cpp:else>                                   <comment type="line" PREFIX:line="158" PREFIX:column="41">// Arduino Board</comment>
<cpp:define PREFIX:line="159" PREFIX:column="1">#<cpp:directive PREFIX:line="159" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="159" PREFIX:column="9">PIN_SCK</name></cpp:macro> <cpp:value PREFIX:line="159" PREFIX:column="17">13</cpp:value></cpp:define>
<cpp:define PREFIX:line="160" PREFIX:column="1">#<cpp:directive PREFIX:line="160" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="160" PREFIX:column="9">PIN_MISO</name></cpp:macro>  <cpp:value PREFIX:line="160" PREFIX:column="19">12</cpp:value></cpp:define>
<cpp:define PREFIX:line="161" PREFIX:column="1">#<cpp:directive PREFIX:line="161" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="161" PREFIX:column="9">PIN_MOSI</name></cpp:macro> <cpp:value PREFIX:line="161" PREFIX:column="18">11</cpp:value></cpp:define>
<cpp:define PREFIX:line="162" PREFIX:column="1">#<cpp:directive PREFIX:line="162" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="162" PREFIX:column="9">PIN_CS</name></cpp:macro> <cpp:value PREFIX:line="162" PREFIX:column="16">10</cpp:value></cpp:define>
<cpp:endif PREFIX:line="163" PREFIX:column="1">#<cpp:directive PREFIX:line="163" PREFIX:column="2">endif</cpp:directive></cpp:endif> <comment type="line" PREFIX:line="163" PREFIX:column="8">// (__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__)</comment>

<cpp:else PREFIX:line="165" PREFIX:column="1">#<cpp:directive PREFIX:line="165" PREFIX:column="2">else</cpp:directive></cpp:else> 

<cpp:include PREFIX:line="167" PREFIX:column="1">#<cpp:directive PREFIX:line="167" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="167" PREFIX:column="10">&lt;Arduino.h&gt;</cpp:file></cpp:include> 

<comment type="block" PREFIX:line="169" PREFIX:column="1">/* use Arduino pin definitions */</comment>
<cpp:define PREFIX:line="170" PREFIX:column="1">#<cpp:directive PREFIX:line="170" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="170" PREFIX:column="9">PIN_SCK</name></cpp:macro> <cpp:value PREFIX:line="170" PREFIX:column="17">SCK</cpp:value></cpp:define>
<cpp:define PREFIX:line="171" PREFIX:column="1">#<cpp:directive PREFIX:line="171" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="171" PREFIX:column="9">PIN_MISO</name></cpp:macro>  <cpp:value PREFIX:line="171" PREFIX:column="19">MISO</cpp:value></cpp:define>
<cpp:define PREFIX:line="172" PREFIX:column="1">#<cpp:directive PREFIX:line="172" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="172" PREFIX:column="9">PIN_MOSI</name></cpp:macro> <cpp:value PREFIX:line="172" PREFIX:column="18">MOSI</cpp:value></cpp:define>
<cpp:define PREFIX:line="173" PREFIX:column="1">#<cpp:directive PREFIX:line="173" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="173" PREFIX:column="9">PIN_CS</name></cpp:macro> <cpp:value PREFIX:line="173" PREFIX:column="16">SS</cpp:value></cpp:define>

<cpp:endif PREFIX:line="175" PREFIX:column="1">#<cpp:directive PREFIX:line="175" PREFIX:column="2">endif</cpp:directive></cpp:endif>



<comment type="line" PREFIX:line="179" PREFIX:column="1">//static uint8_t u8g_spi_out(uint8_t data) U8G_NOINLINE;</comment>
<function><type><specifier PREFIX:line="180" PREFIX:column="1">static</specifier> <name PREFIX:line="180" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="180" PREFIX:column="16">u8g_spi_out</name><parameter_list PREFIX:line="180" PREFIX:column="27">(<param><decl><type><name PREFIX:line="180" PREFIX:column="28">uint8_t</name></type> <name PREFIX:line="180" PREFIX:column="36">data</name></decl></param>)</parameter_list>
<block PREFIX:line="181" PREFIX:column="1">{
  <comment type="block" PREFIX:line="182" PREFIX:column="3">/* unknowntype char x = 100; */</comment>
  <comment type="block" PREFIX:line="183" PREFIX:column="3">/* send data */</comment>
  <expr_stmt><expr><name PREFIX:line="184" PREFIX:column="3">SPDR</name> = <name PREFIX:line="184" PREFIX:column="10">data</name></expr>;</expr_stmt>
  <comment type="block" PREFIX:line="185" PREFIX:column="3">/* wait for transmission */</comment>
  <while PREFIX:line="186" PREFIX:column="3">while <condition PREFIX:line="186" PREFIX:column="9">(<expr PREFIX:line="186" PREFIX:column="10">!(<name PREFIX:line="186" PREFIX:column="12">SPSR</name> &amp; (1&lt;&lt;<name PREFIX:line="186" PREFIX:column="23">SPIF</name>))</expr>)</condition> 
    <empty_stmt PREFIX:line="187" PREFIX:column="5">;</empty_stmt></while>
  <comment type="block" PREFIX:line="188" PREFIX:column="3">/* clear the SPIF flag by reading SPDR */</comment>
  <return PREFIX:line="189" PREFIX:column="3">return  <expr><name PREFIX:line="189" PREFIX:column="11">SPDR</name></expr>;</return>
}</block></function>


<function><type><name PREFIX:line="193" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="193" PREFIX:column="9">u8g_com_arduino_hw_spi_fn</name><parameter_list PREFIX:line="193" PREFIX:column="34">(<param><decl><type><name PREFIX:line="193" PREFIX:column="35">u8g_t</name> *</type><name PREFIX:line="193" PREFIX:column="42">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="193" PREFIX:column="47">uint8_t</name></type> <name PREFIX:line="193" PREFIX:column="55">msg</name></decl></param>, <param><decl><type><name PREFIX:line="193" PREFIX:column="60">uint8_t</name></type> <name PREFIX:line="193" PREFIX:column="68">arg_val</name></decl></param>, <param><decl><type><name PREFIX:line="193" PREFIX:column="77">void</name> *</type><name PREFIX:line="193" PREFIX:column="83">arg_ptr</name></decl></param>)</parameter_list>
<block PREFIX:line="194" PREFIX:column="1">{
  <switch PREFIX:line="195" PREFIX:column="3">switch<condition PREFIX:line="195" PREFIX:column="9">(<expr><name PREFIX:line="195" PREFIX:column="10">msg</name></expr>)</condition>
  <block PREFIX:line="196" PREFIX:column="3">{
    <case PREFIX:line="197" PREFIX:column="5">case <expr><name PREFIX:line="197" PREFIX:column="10">U8G_COM_MSG_STOP</name></expr>:
      <break PREFIX:line="198" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="200" PREFIX:column="5">case <expr><name PREFIX:line="200" PREFIX:column="10">U8G_COM_MSG_INIT</name></expr>:
      <expr_stmt><expr><call><name PREFIX:line="201" PREFIX:column="7">u8g_com_arduino_assign_pin_output_high</name><argument_list PREFIX:line="201" PREFIX:column="45">(<argument><expr><name PREFIX:line="201" PREFIX:column="46">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="202" PREFIX:column="7">pinMode</name><argument_list PREFIX:line="202" PREFIX:column="14">(<argument><expr><name PREFIX:line="202" PREFIX:column="15">PIN_SCK</name></expr></argument>, <argument><expr><name PREFIX:line="202" PREFIX:column="24">OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="203" PREFIX:column="7">digitalWrite</name><argument_list PREFIX:line="203" PREFIX:column="19">(<argument><expr><name PREFIX:line="203" PREFIX:column="20">PIN_SCK</name></expr></argument>, <argument><expr><name PREFIX:line="203" PREFIX:column="29">LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="204" PREFIX:column="7">pinMode</name><argument_list PREFIX:line="204" PREFIX:column="14">(<argument><expr><name PREFIX:line="204" PREFIX:column="15">PIN_MOSI</name></expr></argument>, <argument><expr><name PREFIX:line="204" PREFIX:column="25">OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="205" PREFIX:column="7">digitalWrite</name><argument_list PREFIX:line="205" PREFIX:column="19">(<argument><expr><name PREFIX:line="205" PREFIX:column="20">PIN_MOSI</name></expr></argument>, <argument><expr><name PREFIX:line="205" PREFIX:column="30">LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block" PREFIX:line="206" PREFIX:column="7">/* pinMode(PIN_MISO, INPUT); */</comment>

      <expr_stmt><expr><call><name PREFIX:line="208" PREFIX:column="7">pinMode</name><argument_list PREFIX:line="208" PREFIX:column="14">(<argument><expr><name PREFIX:line="208" PREFIX:column="15">PIN_CS</name></expr></argument>, <argument><expr><name PREFIX:line="208" PREFIX:column="23">OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" PREFIX:line="208" PREFIX:column="49">/* system chip select for the atmega board */</comment>
      <expr_stmt><expr><call><name PREFIX:line="209" PREFIX:column="7">digitalWrite</name><argument_list PREFIX:line="209" PREFIX:column="19">(<argument><expr><name PREFIX:line="209" PREFIX:column="20">PIN_CS</name></expr></argument>, <argument><expr><name PREFIX:line="209" PREFIX:column="28">HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    


      <comment type="block" PREFIX:line="213" PREFIX:column="7">/*
        SPR1 SPR0
            0	0		fclk/4
            0	1		fclk/16
            1	0		fclk/64
            1	1		fclk/128
      */</comment>
      <expr_stmt><expr><name PREFIX:line="220" PREFIX:column="7">SPCR</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name PREFIX:line="221" PREFIX:column="7">SPCR</name> =  (1&lt;&lt;<name PREFIX:line="221" PREFIX:column="19">SPE</name>) | (1&lt;&lt;<name PREFIX:line="221" PREFIX:column="30">MSTR</name>)|(0&lt;&lt;<name PREFIX:line="221" PREFIX:column="40">SPR1</name>)|(0&lt;&lt;<name PREFIX:line="221" PREFIX:column="50">SPR0</name>)|(0&lt;&lt;<name PREFIX:line="221" PREFIX:column="60">CPOL</name>)|(0&lt;&lt;<name PREFIX:line="221" PREFIX:column="70">CPHA</name>)</expr>;</expr_stmt>
<cpp:ifdef PREFIX:line="222" PREFIX:column="1">#<cpp:directive PREFIX:line="222" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="222" PREFIX:column="8">U8G_HW_SPI_2X</name></cpp:ifdef>
      <expr_stmt><expr><name PREFIX:line="223" PREFIX:column="7">SPSR</name> = (1 &lt;&lt; <name PREFIX:line="223" PREFIX:column="20">SPI2X</name>)</expr>;</expr_stmt>  <comment type="block" PREFIX:line="223" PREFIX:column="29">/* double speed, issue 89 */</comment>
<cpp:else PREFIX:line="224" PREFIX:column="1">#<cpp:directive PREFIX:line="224" PREFIX:column="2">else</cpp:directive></cpp:else>
      <if PREFIX:line="225" PREFIX:column="7">if <condition PREFIX:line="225" PREFIX:column="10">( <expr><name PREFIX:line="225" PREFIX:column="12">arg_val</name>  &lt;= <name PREFIX:line="225" PREFIX:column="24">U8G_SPI_CLK_CYCLE_50NS</name></expr> )</condition><then PREFIX:line="225" PREFIX:column="48">
      <block PREFIX:line="226" PREFIX:column="7">{
	<expr_stmt><expr><name PREFIX:line="227" PREFIX:column="9">SPSR</name> = (1 &lt;&lt; <name PREFIX:line="227" PREFIX:column="22">SPI2X</name>)</expr>;</expr_stmt>  <comment type="block" PREFIX:line="227" PREFIX:column="31">/* double speed, issue 89 */</comment>
      }</block></then></if>
<cpp:endif PREFIX:line="229" PREFIX:column="1">#<cpp:directive PREFIX:line="229" PREFIX:column="2">endif</cpp:directive></cpp:endif>
      
      
      <break PREFIX:line="232" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="234" PREFIX:column="5">case <expr><name PREFIX:line="234" PREFIX:column="10">U8G_COM_MSG_ADDRESS</name></expr>:                     <comment type="block" PREFIX:line="234" PREFIX:column="51">/* define cmd (arg_val = 0) or data mode (arg_val = 1) */</comment>
      <expr_stmt><expr><call><name PREFIX:line="235" PREFIX:column="7">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="235" PREFIX:column="36">(<argument><expr><name PREFIX:line="235" PREFIX:column="37">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="235" PREFIX:column="42">U8G_PI_A0</name></expr></argument>, <argument><expr><name PREFIX:line="235" PREFIX:column="53">arg_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="236" PREFIX:column="7">break;</break>

    </case><case PREFIX:line="238" PREFIX:column="5">case <expr><name PREFIX:line="238" PREFIX:column="10">U8G_COM_MSG_CHIP_SELECT</name></expr>:
      <if PREFIX:line="239" PREFIX:column="7">if <condition PREFIX:line="239" PREFIX:column="10">( <expr><name PREFIX:line="239" PREFIX:column="12">arg_val</name> == 0</expr> )</condition><then PREFIX:line="239" PREFIX:column="26">
      <block PREFIX:line="240" PREFIX:column="7">{
        <comment type="block" PREFIX:line="241" PREFIX:column="9">/* disable */</comment>
        <expr_stmt><expr><call><name PREFIX:line="242" PREFIX:column="9">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="242" PREFIX:column="38">(<argument><expr><name PREFIX:line="242" PREFIX:column="39">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="242" PREFIX:column="44">U8G_PI_CS</name></expr></argument>, <argument><expr><name PREFIX:line="242" PREFIX:column="55">HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="244" PREFIX:column="7">else
      <block PREFIX:line="245" PREFIX:column="7">{
        <comment type="block" PREFIX:line="246" PREFIX:column="9">/* enable */</comment>
        <expr_stmt><expr><call><name PREFIX:line="247" PREFIX:column="9">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="247" PREFIX:column="38">(<argument><expr><name PREFIX:line="247" PREFIX:column="39">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="247" PREFIX:column="44">U8G_PI_SCK</name></expr></argument>, <argument><expr><name PREFIX:line="247" PREFIX:column="56">LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name PREFIX:line="248" PREFIX:column="9">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="248" PREFIX:column="38">(<argument><expr><name PREFIX:line="248" PREFIX:column="39">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="248" PREFIX:column="44">U8G_PI_CS</name></expr></argument>, <argument><expr><name PREFIX:line="248" PREFIX:column="55">LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <break PREFIX:line="250" PREFIX:column="7">break;</break>
      
    </case><case PREFIX:line="252" PREFIX:column="5">case <expr><name PREFIX:line="252" PREFIX:column="10">U8G_COM_MSG_RESET</name></expr>:
      <if PREFIX:line="253" PREFIX:column="7">if <condition PREFIX:line="253" PREFIX:column="10">( <expr><name><name PREFIX:line="253" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="253" PREFIX:column="17">pin_list</name><index PREFIX:line="253" PREFIX:column="25">[<expr><name PREFIX:line="253" PREFIX:column="26">U8G_PI_RESET</name></expr>]</index></name> != <name PREFIX:line="253" PREFIX:column="43">U8G_PIN_NONE</name></expr> )</condition><then PREFIX:line="253" PREFIX:column="57">
        <expr_stmt><expr><call><name PREFIX:line="254" PREFIX:column="9">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="254" PREFIX:column="38">(<argument><expr><name PREFIX:line="254" PREFIX:column="39">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="254" PREFIX:column="44">U8G_PI_RESET</name></expr></argument>, <argument><expr><name PREFIX:line="254" PREFIX:column="58">arg_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <break PREFIX:line="255" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="257" PREFIX:column="5">case <expr><name PREFIX:line="257" PREFIX:column="10">U8G_COM_MSG_WRITE_BYTE</name></expr>:
      <expr_stmt><expr><call><name PREFIX:line="258" PREFIX:column="7">u8g_spi_out</name><argument_list PREFIX:line="258" PREFIX:column="18">(<argument><expr><name PREFIX:line="258" PREFIX:column="19">arg_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="259" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="261" PREFIX:column="5">case <expr><name PREFIX:line="261" PREFIX:column="10">U8G_COM_MSG_WRITE_SEQ</name></expr>:
      <block PREFIX:line="262" PREFIX:column="7">{
        <decl_stmt><decl><type><name PREFIX:line="263" PREFIX:column="9">register</name> <name PREFIX:line="263" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="263" PREFIX:column="27">ptr</name> <init PREFIX:line="263" PREFIX:column="31">= <expr><name PREFIX:line="263" PREFIX:column="33">arg_ptr</name></expr></init></decl>;</decl_stmt>
        <while PREFIX:line="264" PREFIX:column="9">while<condition PREFIX:line="264" PREFIX:column="14">( <expr><name PREFIX:line="264" PREFIX:column="16">arg_val</name> &gt; 0</expr> )</condition>
        <block PREFIX:line="265" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="266" PREFIX:column="11">u8g_spi_out</name><argument_list PREFIX:line="266" PREFIX:column="22">(<argument><expr PREFIX:line="266" PREFIX:column="23">*<name PREFIX:line="266" PREFIX:column="24">ptr</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="267" PREFIX:column="11">arg_val</name>--</expr>;</expr_stmt>
        }</block></while>
      }</block>
      <break PREFIX:line="270" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="271" PREFIX:column="5">case <expr><name PREFIX:line="271" PREFIX:column="10">U8G_COM_MSG_WRITE_SEQ_P</name></expr>:
      <block PREFIX:line="272" PREFIX:column="7">{
        <decl_stmt><decl><type><name PREFIX:line="273" PREFIX:column="9">register</name> <name PREFIX:line="273" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="273" PREFIX:column="27">ptr</name> <init PREFIX:line="273" PREFIX:column="31">= <expr><name PREFIX:line="273" PREFIX:column="33">arg_ptr</name></expr></init></decl>;</decl_stmt>
        <while PREFIX:line="274" PREFIX:column="9">while<condition PREFIX:line="274" PREFIX:column="14">( <expr><name PREFIX:line="274" PREFIX:column="16">arg_val</name> &gt; 0</expr> )</condition>
        <block PREFIX:line="275" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="276" PREFIX:column="11">u8g_spi_out</name><argument_list PREFIX:line="276" PREFIX:column="22">(<argument><expr><call><name PREFIX:line="276" PREFIX:column="23">u8g_pgm_read</name><argument_list PREFIX:line="276" PREFIX:column="35">(<argument><expr><name PREFIX:line="276" PREFIX:column="36">ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="277" PREFIX:column="11">ptr</name>++</expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="278" PREFIX:column="11">arg_val</name>--</expr>;</expr_stmt>
        }</block></while>
      }</block>
      <break PREFIX:line="281" PREFIX:column="7">break;</break>
  </case>}</block></switch>
  <return PREFIX:line="283" PREFIX:column="3">return <expr PREFIX:line="283" PREFIX:column="10">1</expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="286" PREFIX:column="1">/* #elif defined(__18CXX) || defined(__PIC32MX) */</comment>

<cpp:elif PREFIX:line="288" PREFIX:column="1">#<cpp:directive PREFIX:line="288" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="288" PREFIX:column="7">defined</name><argument_list PREFIX:line="288" PREFIX:column="14">(<argument><expr><name PREFIX:line="288" PREFIX:column="15">__SAM3X8E__</name></expr></argument>)</argument_list></call></expr></cpp:elif>		<comment type="line" PREFIX:line="288" PREFIX:column="41">// Arduino Due, maybe we should better check for __SAM3X8E__</comment>

<cpp:include PREFIX:line="290" PREFIX:column="1">#<cpp:directive PREFIX:line="290" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="290" PREFIX:column="10">&lt;Arduino.h&gt;</cpp:file></cpp:include> 

<comment type="block" PREFIX:line="292" PREFIX:column="1">/* use Arduino pin definitions */</comment>
<cpp:define PREFIX:line="293" PREFIX:column="1">#<cpp:directive PREFIX:line="293" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="293" PREFIX:column="9">PIN_SCK</name></cpp:macro> <cpp:value PREFIX:line="293" PREFIX:column="17">SCK</cpp:value></cpp:define>
<cpp:define PREFIX:line="294" PREFIX:column="1">#<cpp:directive PREFIX:line="294" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="294" PREFIX:column="9">PIN_MISO</name></cpp:macro>  <cpp:value PREFIX:line="294" PREFIX:column="19">MISO</cpp:value></cpp:define>
<cpp:define PREFIX:line="295" PREFIX:column="1">#<cpp:directive PREFIX:line="295" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="295" PREFIX:column="9">PIN_MOSI</name></cpp:macro> <cpp:value PREFIX:line="295" PREFIX:column="18">MOSI</cpp:value></cpp:define>
<cpp:define PREFIX:line="296" PREFIX:column="1">#<cpp:directive PREFIX:line="296" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="296" PREFIX:column="9">PIN_CS</name></cpp:macro> <cpp:value PREFIX:line="296" PREFIX:column="16">SS</cpp:value></cpp:define>


<function><type><specifier PREFIX:line="299" PREFIX:column="1">static</specifier> <name PREFIX:line="299" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="299" PREFIX:column="16">u8g_spi_out</name><parameter_list PREFIX:line="299" PREFIX:column="27">(<param><decl><type><name PREFIX:line="299" PREFIX:column="28">uint8_t</name></type> <name PREFIX:line="299" PREFIX:column="36">data</name></decl></param>)</parameter_list>
<block PREFIX:line="300" PREFIX:column="1">{
  <comment type="block" PREFIX:line="301" PREFIX:column="3">/* wait until tx register is empty */</comment>
  <while PREFIX:line="302" PREFIX:column="3">while<condition PREFIX:line="302" PREFIX:column="8">( <expr PREFIX:line="302" PREFIX:column="10">(<name><name PREFIX:line="302" PREFIX:column="11">SPI0</name>-&gt;<name PREFIX:line="302" PREFIX:column="17">SPI_SR</name></name> &amp; <name PREFIX:line="302" PREFIX:column="26">SPI_SR_TDRE</name>) == 0</expr> )</condition>
    <empty_stmt PREFIX:line="303" PREFIX:column="5">;</empty_stmt></while>
  <comment type="block" PREFIX:line="304" PREFIX:column="3">/* send data */</comment>
  <expr_stmt><expr><name><name PREFIX:line="305" PREFIX:column="3">SPI0</name>-&gt;<name PREFIX:line="305" PREFIX:column="9">SPI_TDR</name></name> = (<name PREFIX:line="305" PREFIX:column="20">uint32_t</name>)<name PREFIX:line="305" PREFIX:column="29">data</name></expr>;</expr_stmt>
  <return PREFIX:line="306" PREFIX:column="3">return  <expr><name PREFIX:line="306" PREFIX:column="11">data</name></expr>;</return>
}</block></function>


<function><type><name PREFIX:line="310" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="310" PREFIX:column="9">u8g_com_arduino_hw_spi_fn</name><parameter_list PREFIX:line="310" PREFIX:column="34">(<param><decl><type><name PREFIX:line="310" PREFIX:column="35">u8g_t</name> *</type><name PREFIX:line="310" PREFIX:column="42">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="310" PREFIX:column="47">uint8_t</name></type> <name PREFIX:line="310" PREFIX:column="55">msg</name></decl></param>, <param><decl><type><name PREFIX:line="310" PREFIX:column="60">uint8_t</name></type> <name PREFIX:line="310" PREFIX:column="68">arg_val</name></decl></param>, <param><decl><type><name PREFIX:line="310" PREFIX:column="77">void</name> *</type><name PREFIX:line="310" PREFIX:column="83">arg_ptr</name></decl></param>)</parameter_list>
<block PREFIX:line="311" PREFIX:column="1">{
  <switch PREFIX:line="312" PREFIX:column="3">switch<condition PREFIX:line="312" PREFIX:column="9">(<expr><name PREFIX:line="312" PREFIX:column="10">msg</name></expr>)</condition>
  <block PREFIX:line="313" PREFIX:column="3">{
    <case PREFIX:line="314" PREFIX:column="5">case <expr><name PREFIX:line="314" PREFIX:column="10">U8G_COM_MSG_STOP</name></expr>:
      <break PREFIX:line="315" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="317" PREFIX:column="5">case <expr><name PREFIX:line="317" PREFIX:column="10">U8G_COM_MSG_INIT</name></expr>:
      <expr_stmt><expr><call><name PREFIX:line="318" PREFIX:column="7">u8g_com_arduino_assign_pin_output_high</name><argument_list PREFIX:line="318" PREFIX:column="45">(<argument><expr><name PREFIX:line="318" PREFIX:column="46">u8g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="319" PREFIX:column="7">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="319" PREFIX:column="36">(<argument><expr><name PREFIX:line="319" PREFIX:column="37">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="319" PREFIX:column="42">U8G_PI_CS</name></expr></argument>, <argument><expr><name PREFIX:line="319" PREFIX:column="53">HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <comment type="block" PREFIX:line="321" PREFIX:column="7">/* Arduino Due specific code */</comment>
      
      <comment type="block" PREFIX:line="323" PREFIX:column="7">/* enable PIOA and SPI0 */</comment>
      <expr_stmt><expr><name PREFIX:line="324" PREFIX:column="7">REG_PMC_PCER0</name> = (1UL &lt;&lt; <name PREFIX:line="324" PREFIX:column="31">ID_PIOA</name>) | (1UL &lt;&lt; <name PREFIX:line="324" PREFIX:column="50">ID_SPI0</name>)</expr>;</expr_stmt>

      <comment type="block" PREFIX:line="326" PREFIX:column="7">/* disable PIO on A26 and A27 */</comment>
      <expr_stmt><expr><name PREFIX:line="327" PREFIX:column="7">REG_PIOA_PDR</name> = 0x0c000000</expr>;</expr_stmt>

      <comment type="block" PREFIX:line="329" PREFIX:column="7">/* reset SPI0 (from sam lib) */</comment>
      <expr_stmt><expr><name><name PREFIX:line="330" PREFIX:column="7">SPI0</name>-&gt;<name PREFIX:line="330" PREFIX:column="13">SPI_CR</name></name> = <name PREFIX:line="330" PREFIX:column="22">SPI_CR_SPIDIS</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="331" PREFIX:column="7">SPI0</name>-&gt;<name PREFIX:line="331" PREFIX:column="13">SPI_CR</name></name> = <name PREFIX:line="331" PREFIX:column="22">SPI_CR_SWRST</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="332" PREFIX:column="7">SPI0</name>-&gt;<name PREFIX:line="332" PREFIX:column="13">SPI_CR</name></name> = <name PREFIX:line="332" PREFIX:column="22">SPI_CR_SWRST</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name PREFIX:line="333" PREFIX:column="7">SPI0</name>-&gt;<name PREFIX:line="333" PREFIX:column="13">SPI_CR</name></name> = <name PREFIX:line="333" PREFIX:column="22">SPI_CR_SPIEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="334" PREFIX:column="7">u8g_MicroDelay</name><argument_list PREFIX:line="334" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block" PREFIX:line="336" PREFIX:column="7">/* master mode, no fault detection, chip select 0 */</comment>
      <expr_stmt><expr><name><name PREFIX:line="337" PREFIX:column="7">SPI0</name>-&gt;<name PREFIX:line="337" PREFIX:column="13">SPI_MR</name></name> = <name PREFIX:line="337" PREFIX:column="22">SPI_MR_MSTR</name> | <name PREFIX:line="337" PREFIX:column="36">SPI_MR_PCSDEC</name> | <name PREFIX:line="337" PREFIX:column="52">SPI_MR_MODFDIS</name></expr>;</expr_stmt>
      
      <comment type="block" PREFIX:line="339" PREFIX:column="7">/* Polarity, Phase, 8 Bit data transfer, baud rate */</comment>
      <comment type="block" PREFIX:line="340" PREFIX:column="7">/* x * 1000 / 84 --&gt; clock cycle in ns 
        5 * 1000 / 84 = 58 ns       
	SCBR  &gt; 50 *84 / 1000 --&gt; SCBR=5
	SCBR  &gt; 300*84 / 1000 --&gt; SCBR=26
	SCBR  &gt; 400*84 / 1000 --&gt; SCBR=34
      */</comment>
      
      <if PREFIX:line="347" PREFIX:column="7">if <condition PREFIX:line="347" PREFIX:column="10">( <expr><name PREFIX:line="347" PREFIX:column="12">arg_val</name> &lt;= <name PREFIX:line="347" PREFIX:column="23">U8G_SPI_CLK_CYCLE_50NS</name></expr> )</condition><then PREFIX:line="347" PREFIX:column="47">
      <block PREFIX:line="348" PREFIX:column="7">{
	<expr_stmt><expr><name><name PREFIX:line="349" PREFIX:column="9">SPI0</name>-&gt;<name PREFIX:line="349" PREFIX:column="15">SPI_CSR</name><index PREFIX:line="349" PREFIX:column="22">[<expr PREFIX:line="349" PREFIX:column="23">0</expr>]</index></name> = <call><name PREFIX:line="349" PREFIX:column="28">SPI_CSR_SCBR</name><argument_list PREFIX:line="349" PREFIX:column="40">(<argument><expr PREFIX:line="349" PREFIX:column="41">5</expr></argument>)</argument_list></call> | 1</expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="351" PREFIX:column="7">else <if PREFIX:line="351" PREFIX:column="12">if <condition PREFIX:line="351" PREFIX:column="15">( <expr><name PREFIX:line="351" PREFIX:column="17">arg_val</name> &lt;= <name PREFIX:line="351" PREFIX:column="28">U8G_SPI_CLK_CYCLE_300NS</name></expr> )</condition><then PREFIX:line="351" PREFIX:column="53">
      <block PREFIX:line="352" PREFIX:column="7">{
	<expr_stmt><expr><name><name PREFIX:line="353" PREFIX:column="9">SPI0</name>-&gt;<name PREFIX:line="353" PREFIX:column="15">SPI_CSR</name><index PREFIX:line="353" PREFIX:column="22">[<expr PREFIX:line="353" PREFIX:column="23">0</expr>]</index></name> = <call><name PREFIX:line="353" PREFIX:column="28">SPI_CSR_SCBR</name><argument_list PREFIX:line="353" PREFIX:column="40">(<argument><expr PREFIX:line="353" PREFIX:column="41">26</expr></argument>)</argument_list></call> | 1</expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="355" PREFIX:column="7">else <if PREFIX:line="355" PREFIX:column="12">if <condition PREFIX:line="355" PREFIX:column="15">( <expr><name PREFIX:line="355" PREFIX:column="17">arg_val</name> &lt;= <name PREFIX:line="355" PREFIX:column="28">U8G_SPI_CLK_CYCLE_400NS</name></expr> )</condition><then PREFIX:line="355" PREFIX:column="53">
      <block PREFIX:line="356" PREFIX:column="7">{
	<expr_stmt><expr><name><name PREFIX:line="357" PREFIX:column="9">SPI0</name>-&gt;<name PREFIX:line="357" PREFIX:column="15">SPI_CSR</name><index PREFIX:line="357" PREFIX:column="22">[<expr PREFIX:line="357" PREFIX:column="23">0</expr>]</index></name> = <call><name PREFIX:line="357" PREFIX:column="28">SPI_CSR_SCBR</name><argument_list PREFIX:line="357" PREFIX:column="40">(<argument><expr PREFIX:line="357" PREFIX:column="41">34</expr></argument>)</argument_list></call> | 1</expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="359" PREFIX:column="7">else
      <block PREFIX:line="360" PREFIX:column="7">{
	<expr_stmt><expr><name><name PREFIX:line="361" PREFIX:column="9">SPI0</name>-&gt;<name PREFIX:line="361" PREFIX:column="15">SPI_CSR</name><index PREFIX:line="361" PREFIX:column="22">[<expr PREFIX:line="361" PREFIX:column="23">0</expr>]</index></name> = <call><name PREFIX:line="361" PREFIX:column="28">SPI_CSR_SCBR</name><argument_list PREFIX:line="361" PREFIX:column="40">(<argument><expr PREFIX:line="361" PREFIX:column="41">84</expr></argument>)</argument_list></call> | 1</expr>;</expr_stmt>
      }</block></else></if></else></if></else></if>
      
      <expr_stmt><expr><call><name PREFIX:line="364" PREFIX:column="7">u8g_MicroDelay</name><argument_list PREFIX:line="364" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>      
      <break PREFIX:line="365" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="367" PREFIX:column="5">case <expr><name PREFIX:line="367" PREFIX:column="10">U8G_COM_MSG_ADDRESS</name></expr>:                     <comment type="block" PREFIX:line="367" PREFIX:column="51">/* define cmd (arg_val = 0) or data mode (arg_val = 1) */</comment>
      <expr_stmt><expr><call><name PREFIX:line="368" PREFIX:column="7">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="368" PREFIX:column="36">(<argument><expr><name PREFIX:line="368" PREFIX:column="37">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="368" PREFIX:column="42">U8G_PI_A0</name></expr></argument>, <argument><expr><name PREFIX:line="368" PREFIX:column="53">arg_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="369" PREFIX:column="7">u8g_MicroDelay</name><argument_list PREFIX:line="369" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="370" PREFIX:column="7">break;</break>

    </case><case PREFIX:line="372" PREFIX:column="5">case <expr><name PREFIX:line="372" PREFIX:column="10">U8G_COM_MSG_CHIP_SELECT</name></expr>:
      <if PREFIX:line="373" PREFIX:column="7">if <condition PREFIX:line="373" PREFIX:column="10">( <expr><name PREFIX:line="373" PREFIX:column="12">arg_val</name> == 0</expr> )</condition><then PREFIX:line="373" PREFIX:column="26">
      <block PREFIX:line="374" PREFIX:column="7">{
        <comment type="block" PREFIX:line="375" PREFIX:column="9">/* disable */</comment>
	<expr_stmt><expr><call><name PREFIX:line="376" PREFIX:column="9">u8g_MicroDelay</name><argument_list PREFIX:line="376" PREFIX:column="23">()</argument_list></call></expr>;</expr_stmt>		<comment type="block" PREFIX:line="376" PREFIX:column="41">/* this delay is required to avoid that the display is switched off too early --&gt; DOGS102 with DUE */</comment>
        <expr_stmt><expr><call><name PREFIX:line="377" PREFIX:column="9">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="377" PREFIX:column="38">(<argument><expr><name PREFIX:line="377" PREFIX:column="39">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="377" PREFIX:column="44">U8G_PI_CS</name></expr></argument>, <argument><expr><name PREFIX:line="377" PREFIX:column="55">HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="378" PREFIX:column="9">u8g_MicroDelay</name><argument_list PREFIX:line="378" PREFIX:column="23">()</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else PREFIX:line="380" PREFIX:column="7">else
      <block PREFIX:line="381" PREFIX:column="7">{
        <comment type="block" PREFIX:line="382" PREFIX:column="9">/* enable */</comment>
        <comment type="line" PREFIX:line="383" PREFIX:column="9">//u8g_com_arduino_digital_write(u8g, U8G_PI_SCK, LOW);</comment>
        <expr_stmt><expr><call><name PREFIX:line="384" PREFIX:column="9">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="384" PREFIX:column="38">(<argument><expr><name PREFIX:line="384" PREFIX:column="39">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="384" PREFIX:column="44">U8G_PI_CS</name></expr></argument>, <argument><expr><name PREFIX:line="384" PREFIX:column="55">LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name PREFIX:line="385" PREFIX:column="9">u8g_MicroDelay</name><argument_list PREFIX:line="385" PREFIX:column="23">()</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <break PREFIX:line="387" PREFIX:column="7">break;</break>
      
    </case><case PREFIX:line="389" PREFIX:column="5">case <expr><name PREFIX:line="389" PREFIX:column="10">U8G_COM_MSG_RESET</name></expr>:
      <if PREFIX:line="390" PREFIX:column="7">if <condition PREFIX:line="390" PREFIX:column="10">( <expr><name><name PREFIX:line="390" PREFIX:column="12">u8g</name>-&gt;<name PREFIX:line="390" PREFIX:column="17">pin_list</name><index PREFIX:line="390" PREFIX:column="25">[<expr><name PREFIX:line="390" PREFIX:column="26">U8G_PI_RESET</name></expr>]</index></name> != <name PREFIX:line="390" PREFIX:column="43">U8G_PIN_NONE</name></expr> )</condition><then PREFIX:line="390" PREFIX:column="57">
        <expr_stmt><expr><call><name PREFIX:line="391" PREFIX:column="9">u8g_com_arduino_digital_write</name><argument_list PREFIX:line="391" PREFIX:column="38">(<argument><expr><name PREFIX:line="391" PREFIX:column="39">u8g</name></expr></argument>, <argument><expr><name PREFIX:line="391" PREFIX:column="44">U8G_PI_RESET</name></expr></argument>, <argument><expr><name PREFIX:line="391" PREFIX:column="58">arg_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <break PREFIX:line="392" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="394" PREFIX:column="5">case <expr><name PREFIX:line="394" PREFIX:column="10">U8G_COM_MSG_WRITE_BYTE</name></expr>:
      <expr_stmt><expr><call><name PREFIX:line="395" PREFIX:column="7">u8g_spi_out</name><argument_list PREFIX:line="395" PREFIX:column="18">(<argument><expr><name PREFIX:line="395" PREFIX:column="19">arg_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="396" PREFIX:column="7">u8g_MicroDelay</name><argument_list PREFIX:line="396" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="397" PREFIX:column="7">break;</break>
    
    </case><case PREFIX:line="399" PREFIX:column="5">case <expr><name PREFIX:line="399" PREFIX:column="10">U8G_COM_MSG_WRITE_SEQ</name></expr>:
      <block PREFIX:line="400" PREFIX:column="7">{
        <decl_stmt><decl><type><name PREFIX:line="401" PREFIX:column="9">register</name> <name PREFIX:line="401" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="401" PREFIX:column="27">ptr</name> <init PREFIX:line="401" PREFIX:column="31">= <expr><name PREFIX:line="401" PREFIX:column="33">arg_ptr</name></expr></init></decl>;</decl_stmt>
        <while PREFIX:line="402" PREFIX:column="9">while<condition PREFIX:line="402" PREFIX:column="14">( <expr><name PREFIX:line="402" PREFIX:column="16">arg_val</name> &gt; 0</expr> )</condition>
        <block PREFIX:line="403" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="404" PREFIX:column="11">u8g_spi_out</name><argument_list PREFIX:line="404" PREFIX:column="22">(<argument><expr PREFIX:line="404" PREFIX:column="23">*<name PREFIX:line="404" PREFIX:column="24">ptr</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="405" PREFIX:column="11">arg_val</name>--</expr>;</expr_stmt>
        }</block></while>
      }</block>
      <break PREFIX:line="408" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="409" PREFIX:column="5">case <expr><name PREFIX:line="409" PREFIX:column="10">U8G_COM_MSG_WRITE_SEQ_P</name></expr>:
      <block PREFIX:line="410" PREFIX:column="7">{
        <decl_stmt><decl><type><name PREFIX:line="411" PREFIX:column="9">register</name> <name PREFIX:line="411" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="411" PREFIX:column="27">ptr</name> <init PREFIX:line="411" PREFIX:column="31">= <expr><name PREFIX:line="411" PREFIX:column="33">arg_ptr</name></expr></init></decl>;</decl_stmt>
        <while PREFIX:line="412" PREFIX:column="9">while<condition PREFIX:line="412" PREFIX:column="14">( <expr><name PREFIX:line="412" PREFIX:column="16">arg_val</name> &gt; 0</expr> )</condition>
        <block PREFIX:line="413" PREFIX:column="9">{
          <expr_stmt><expr><call><name PREFIX:line="414" PREFIX:column="11">u8g_spi_out</name><argument_list PREFIX:line="414" PREFIX:column="22">(<argument><expr><call><name PREFIX:line="414" PREFIX:column="23">u8g_pgm_read</name><argument_list PREFIX:line="414" PREFIX:column="35">(<argument><expr><name PREFIX:line="414" PREFIX:column="36">ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="415" PREFIX:column="11">ptr</name>++</expr>;</expr_stmt>
          <expr_stmt><expr><name PREFIX:line="416" PREFIX:column="11">arg_val</name>--</expr>;</expr_stmt>
        }</block></while>
      }</block>
      <break PREFIX:line="419" PREFIX:column="7">break;</break>
  </case>}</block></switch>
  <return PREFIX:line="421" PREFIX:column="3">return <expr PREFIX:line="421" PREFIX:column="10">1</expr>;</return>
}</block></function>



<cpp:else PREFIX:line="426" PREFIX:column="1">#<cpp:directive PREFIX:line="426" PREFIX:column="2">else</cpp:directive></cpp:else> <comment type="block" PREFIX:line="426" PREFIX:column="7">/* U8G_ARDUINO_ATMEGA_HW_SPI */</comment>

<cpp:endif PREFIX:line="428" PREFIX:column="1">#<cpp:directive PREFIX:line="428" PREFIX:column="2">endif</cpp:directive></cpp:endif> <comment type="block" PREFIX:line="428" PREFIX:column="8">/* U8G_ARDUINO_ATMEGA_HW_SPI */</comment>

<cpp:else PREFIX:line="430" PREFIX:column="1">#<cpp:directive PREFIX:line="430" PREFIX:column="2">else</cpp:directive></cpp:else> <comment type="block" PREFIX:line="430" PREFIX:column="7">/* ARDUINO */</comment>

<function><type><name PREFIX:line="432" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="432" PREFIX:column="9">u8g_com_arduino_hw_spi_fn</name><parameter_list PREFIX:line="432" PREFIX:column="34">(<param><decl><type><name PREFIX:line="432" PREFIX:column="35">u8g_t</name> *</type><name PREFIX:line="432" PREFIX:column="42">u8g</name></decl></param>, <param><decl><type><name PREFIX:line="432" PREFIX:column="47">uint8_t</name></type> <name PREFIX:line="432" PREFIX:column="55">msg</name></decl></param>, <param><decl><type><name PREFIX:line="432" PREFIX:column="60">uint8_t</name></type> <name PREFIX:line="432" PREFIX:column="68">arg_val</name></decl></param>, <param><decl><type><name PREFIX:line="432" PREFIX:column="77">void</name> *</type><name PREFIX:line="432" PREFIX:column="83">arg_ptr</name></decl></param>)</parameter_list>
<block PREFIX:line="433" PREFIX:column="1">{
  <return PREFIX:line="434" PREFIX:column="3">return <expr PREFIX:line="434" PREFIX:column="10">1</expr>;</return>
}</block></function>

<cpp:endif PREFIX:line="437" PREFIX:column="1">#<cpp:directive PREFIX:line="437" PREFIX:column="2">endif</cpp:directive></cpp:endif> <comment type="block" PREFIX:line="437" PREFIX:column="8">/* ARDUINO */</comment>

</unit>
