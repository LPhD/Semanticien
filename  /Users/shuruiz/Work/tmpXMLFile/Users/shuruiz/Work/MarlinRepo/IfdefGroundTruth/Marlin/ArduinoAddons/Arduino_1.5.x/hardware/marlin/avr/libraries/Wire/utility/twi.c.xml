<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/Wire/utility/twi.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  twi.c - TWI/I2C library for Wiring &amp; Arduino
  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Modified 2012 by Todd Krein (todd@krein.org) to implement repeated starts
*/</comment>

<cpp:include PREFIX:line="22" PREFIX:column="1">#<cpp:directive PREFIX:line="22" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="22" PREFIX:column="10">&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="23" PREFIX:column="1">#<cpp:directive PREFIX:line="23" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="23" PREFIX:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="24" PREFIX:column="1">#<cpp:directive PREFIX:line="24" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="24" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="25" PREFIX:column="1">#<cpp:directive PREFIX:line="25" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="25" PREFIX:column="10">&lt;avr/io.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="26" PREFIX:column="1">#<cpp:directive PREFIX:line="26" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="26" PREFIX:column="10">&lt;avr/interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="10">&lt;compat/twi.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="28" PREFIX:column="1">#<cpp:directive PREFIX:line="28" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="28" PREFIX:column="10">"Arduino.h"</cpp:file></cpp:include> <comment type="line" PREFIX:line="28" PREFIX:column="22">// for digitalWrite</comment>

<cpp:ifndef PREFIX:line="30" PREFIX:column="1">#<cpp:directive PREFIX:line="30" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="30" PREFIX:column="9">cbi</name></cpp:ifndef>
<cpp:define PREFIX:line="31" PREFIX:column="1">#<cpp:directive PREFIX:line="31" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="31" PREFIX:column="9">cbi</name><parameter_list PREFIX:line="31" PREFIX:column="12">(<param><type><name PREFIX:line="31" PREFIX:column="13">sfr</name></type></param>, <param><type><name PREFIX:line="31" PREFIX:column="18">bit</name></type></param>)</parameter_list></cpp:macro> <cpp:value PREFIX:line="31" PREFIX:column="23">(_SFR_BYTE(sfr) &amp;= ~_BV(bit))</cpp:value></cpp:define>
<cpp:endif PREFIX:line="32" PREFIX:column="1">#<cpp:directive PREFIX:line="32" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef PREFIX:line="34" PREFIX:column="1">#<cpp:directive PREFIX:line="34" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="34" PREFIX:column="9">sbi</name></cpp:ifndef>
<cpp:define PREFIX:line="35" PREFIX:column="1">#<cpp:directive PREFIX:line="35" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="35" PREFIX:column="9">sbi</name><parameter_list PREFIX:line="35" PREFIX:column="12">(<param><type><name PREFIX:line="35" PREFIX:column="13">sfr</name></type></param>, <param><type><name PREFIX:line="35" PREFIX:column="18">bit</name></type></param>)</parameter_list></cpp:macro> <cpp:value PREFIX:line="35" PREFIX:column="23">(_SFR_BYTE(sfr) |= _BV(bit))</cpp:value></cpp:define>
<cpp:endif PREFIX:line="36" PREFIX:column="1">#<cpp:directive PREFIX:line="36" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:include PREFIX:line="38" PREFIX:column="1">#<cpp:directive PREFIX:line="38" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="38" PREFIX:column="10">"pins_arduino.h"</cpp:file></cpp:include>
<cpp:include PREFIX:line="39" PREFIX:column="1">#<cpp:directive PREFIX:line="39" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="39" PREFIX:column="10">"twi.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier PREFIX:line="41" PREFIX:column="1">static</specifier> <specifier PREFIX:line="41" PREFIX:column="8">volatile</specifier> <name PREFIX:line="41" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="41" PREFIX:column="25">twi_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="42" PREFIX:column="1">static</specifier> <specifier PREFIX:line="42" PREFIX:column="8">volatile</specifier> <name PREFIX:line="42" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="42" PREFIX:column="25">twi_slarw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="43" PREFIX:column="1">static</specifier> <specifier PREFIX:line="43" PREFIX:column="8">volatile</specifier> <name PREFIX:line="43" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="43" PREFIX:column="25">twi_sendStop</name></decl>;</decl_stmt>			<comment type="line" PREFIX:line="43" PREFIX:column="57">// should the transaction end with a stop</comment>
<decl_stmt><decl><type><specifier PREFIX:line="44" PREFIX:column="1">static</specifier> <specifier PREFIX:line="44" PREFIX:column="8">volatile</specifier> <name PREFIX:line="44" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="44" PREFIX:column="25">twi_inRepStart</name></decl>;</decl_stmt>			<comment type="line" PREFIX:line="44" PREFIX:column="57">// in the middle of a repeated start</comment>

<function_decl><type><specifier PREFIX:line="46" PREFIX:column="1">static</specifier> <name PREFIX:line="46" PREFIX:column="8">void</name></type> (*<name PREFIX:line="46" PREFIX:column="15">twi_onSlaveTransmit</name>)<parameter_list PREFIX:line="46" PREFIX:column="35">(<param><decl><type><name PREFIX:line="46" PREFIX:column="36">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier PREFIX:line="47" PREFIX:column="1">static</specifier> <name PREFIX:line="47" PREFIX:column="8">void</name></type> (*<name PREFIX:line="47" PREFIX:column="15">twi_onSlaveReceive</name>)<parameter_list PREFIX:line="47" PREFIX:column="34">(<param><decl><type><name PREFIX:line="47" PREFIX:column="35">uint8_t</name>*</type></decl></param>, <param><decl><type><name PREFIX:line="47" PREFIX:column="45">int</name></type></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier PREFIX:line="49" PREFIX:column="1">static</specifier> <name PREFIX:line="49" PREFIX:column="8">uint8_t</name></type> <name><name PREFIX:line="49" PREFIX:column="16">twi_masterBuffer</name><index PREFIX:line="49" PREFIX:column="32">[<expr><name PREFIX:line="49" PREFIX:column="33">TWI_BUFFER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="50" PREFIX:column="1">static</specifier> <specifier PREFIX:line="50" PREFIX:column="8">volatile</specifier> <name PREFIX:line="50" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="50" PREFIX:column="25">twi_masterBufferIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="51" PREFIX:column="1">static</specifier> <specifier PREFIX:line="51" PREFIX:column="8">volatile</specifier> <name PREFIX:line="51" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="51" PREFIX:column="25">twi_masterBufferLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier PREFIX:line="53" PREFIX:column="1">static</specifier> <name PREFIX:line="53" PREFIX:column="8">uint8_t</name></type> <name><name PREFIX:line="53" PREFIX:column="16">twi_txBuffer</name><index PREFIX:line="53" PREFIX:column="28">[<expr><name PREFIX:line="53" PREFIX:column="29">TWI_BUFFER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="54" PREFIX:column="1">static</specifier> <specifier PREFIX:line="54" PREFIX:column="8">volatile</specifier> <name PREFIX:line="54" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="54" PREFIX:column="25">twi_txBufferIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="55" PREFIX:column="1">static</specifier> <specifier PREFIX:line="55" PREFIX:column="8">volatile</specifier> <name PREFIX:line="55" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="55" PREFIX:column="25">twi_txBufferLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier PREFIX:line="57" PREFIX:column="1">static</specifier> <name PREFIX:line="57" PREFIX:column="8">uint8_t</name></type> <name><name PREFIX:line="57" PREFIX:column="16">twi_rxBuffer</name><index PREFIX:line="57" PREFIX:column="28">[<expr><name PREFIX:line="57" PREFIX:column="29">TWI_BUFFER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier PREFIX:line="58" PREFIX:column="1">static</specifier> <specifier PREFIX:line="58" PREFIX:column="8">volatile</specifier> <name PREFIX:line="58" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="58" PREFIX:column="25">twi_rxBufferIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier PREFIX:line="60" PREFIX:column="1">static</specifier> <specifier PREFIX:line="60" PREFIX:column="8">volatile</specifier> <name PREFIX:line="60" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="60" PREFIX:column="25">twi_error</name></decl>;</decl_stmt>

<comment type="block" PREFIX:line="62" PREFIX:column="1">/* 
 * Function twi_init
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */</comment>
<function><type><name PREFIX:line="68" PREFIX:column="1">void</name></type> <name PREFIX:line="68" PREFIX:column="6">twi_init</name><parameter_list PREFIX:line="68" PREFIX:column="14">(<param><decl><type><name PREFIX:line="68" PREFIX:column="15">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="69" PREFIX:column="1">{
  <comment type="line" PREFIX:line="70" PREFIX:column="3">// initialize state</comment>
  <expr_stmt><expr><name PREFIX:line="71" PREFIX:column="3">twi_state</name> = <name PREFIX:line="71" PREFIX:column="15">TWI_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="72" PREFIX:column="3">twi_sendStop</name> = <name PREFIX:line="72" PREFIX:column="18">true</name></expr>;</expr_stmt>		<comment type="line" PREFIX:line="72" PREFIX:column="33">// default value</comment>
  <expr_stmt><expr><name PREFIX:line="73" PREFIX:column="3">twi_inRepStart</name> = <name PREFIX:line="73" PREFIX:column="20">false</name></expr>;</expr_stmt>
  
  <comment type="line" PREFIX:line="75" PREFIX:column="3">// activate internal pullups for twi.</comment>
  <expr_stmt><expr><call><name PREFIX:line="76" PREFIX:column="3">digitalWrite</name><argument_list PREFIX:line="76" PREFIX:column="15">(<argument><expr><name PREFIX:line="76" PREFIX:column="16">SDA</name></expr></argument>, <argument><expr PREFIX:line="76" PREFIX:column="21">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="77" PREFIX:column="3">digitalWrite</name><argument_list PREFIX:line="77" PREFIX:column="15">(<argument><expr><name PREFIX:line="77" PREFIX:column="16">SCL</name></expr></argument>, <argument><expr PREFIX:line="77" PREFIX:column="21">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line" PREFIX:line="79" PREFIX:column="3">// initialize twi prescaler and bit rate</comment>
  <expr_stmt><expr><call><name PREFIX:line="80" PREFIX:column="3">cbi</name><argument_list PREFIX:line="80" PREFIX:column="6">(<argument><expr><name PREFIX:line="80" PREFIX:column="7">TWSR</name></expr></argument>, <argument><expr><name PREFIX:line="80" PREFIX:column="13">TWPS0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="81" PREFIX:column="3">cbi</name><argument_list PREFIX:line="81" PREFIX:column="6">(<argument><expr><name PREFIX:line="81" PREFIX:column="7">TWSR</name></expr></argument>, <argument><expr><name PREFIX:line="81" PREFIX:column="13">TWPS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="82" PREFIX:column="3">TWBR</name> = ((<name PREFIX:line="82" PREFIX:column="12">F_CPU</name> / <name PREFIX:line="82" PREFIX:column="20">TWI_FREQ</name>) - 16) / 2</expr>;</expr_stmt>

  <comment type="block" PREFIX:line="84" PREFIX:column="3">/* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */</comment>

  <comment type="line" PREFIX:line="89" PREFIX:column="3">// enable twi module, acks, and twi interrupt</comment>
  <expr_stmt><expr><name PREFIX:line="90" PREFIX:column="3">TWCR</name> = <call><name PREFIX:line="90" PREFIX:column="10">_BV</name><argument_list PREFIX:line="90" PREFIX:column="13">(<argument><expr><name PREFIX:line="90" PREFIX:column="14">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="90" PREFIX:column="22">_BV</name><argument_list PREFIX:line="90" PREFIX:column="25">(<argument><expr><name PREFIX:line="90" PREFIX:column="26">TWIE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="90" PREFIX:column="34">_BV</name><argument_list PREFIX:line="90" PREFIX:column="37">(<argument><expr><name PREFIX:line="90" PREFIX:column="38">TWEA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="93" PREFIX:column="1">/* 
 * Function twi_slaveInit
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */</comment>
<function><type><name PREFIX:line="99" PREFIX:column="1">void</name></type> <name PREFIX:line="99" PREFIX:column="6">twi_setAddress</name><parameter_list PREFIX:line="99" PREFIX:column="20">(<param><decl><type><name PREFIX:line="99" PREFIX:column="21">uint8_t</name></type> <name PREFIX:line="99" PREFIX:column="29">address</name></decl></param>)</parameter_list>
<block PREFIX:line="100" PREFIX:column="1">{
  <comment type="line" PREFIX:line="101" PREFIX:column="3">// set twi slave address (skip over TWGCE bit)</comment>
  <expr_stmt><expr><name PREFIX:line="102" PREFIX:column="3">TWAR</name> = <name PREFIX:line="102" PREFIX:column="10">address</name> &lt;&lt; 1</expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="105" PREFIX:column="1">/* 
 * Function twi_readFrom
 * Desc     attempts to become twi bus master and read a
 *          series of bytes from a device on the bus
 * Input    address: 7bit i2c device address
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */</comment>
<function><type><name PREFIX:line="115" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="115" PREFIX:column="9">twi_readFrom</name><parameter_list PREFIX:line="115" PREFIX:column="21">(<param><decl><type><name PREFIX:line="115" PREFIX:column="22">uint8_t</name></type> <name PREFIX:line="115" PREFIX:column="30">address</name></decl></param>, <param><decl><type><name PREFIX:line="115" PREFIX:column="39">uint8_t</name>*</type> <name PREFIX:line="115" PREFIX:column="48">data</name></decl></param>, <param><decl><type><name PREFIX:line="115" PREFIX:column="54">uint8_t</name></type> <name PREFIX:line="115" PREFIX:column="62">length</name></decl></param>, <param><decl><type><name PREFIX:line="115" PREFIX:column="70">uint8_t</name></type> <name PREFIX:line="115" PREFIX:column="78">sendStop</name></decl></param>)</parameter_list>
<block PREFIX:line="116" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="117" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="117" PREFIX:column="11">i</name></decl>;</decl_stmt>

  <comment type="line" PREFIX:line="119" PREFIX:column="3">// ensure data will fit into buffer</comment>
  <if PREFIX:line="120" PREFIX:column="3">if<condition PREFIX:line="120" PREFIX:column="5">(<expr><name PREFIX:line="120" PREFIX:column="6">TWI_BUFFER_LENGTH</name> &lt; <name PREFIX:line="120" PREFIX:column="26">length</name></expr>)</condition><then><block PREFIX:line="120" PREFIX:column="33">{
    <return PREFIX:line="121" PREFIX:column="5">return <expr PREFIX:line="121" PREFIX:column="12">0</expr>;</return>
  }</block></then></if>

  <comment type="line" PREFIX:line="124" PREFIX:column="3">// wait until twi is ready, become master receiver</comment>
  <while PREFIX:line="125" PREFIX:column="3">while<condition PREFIX:line="125" PREFIX:column="8">(<expr><name PREFIX:line="125" PREFIX:column="9">TWI_READY</name> != <name PREFIX:line="125" PREFIX:column="22">twi_state</name></expr>)</condition><block PREFIX:line="125" PREFIX:column="32">{
    <continue PREFIX:line="126" PREFIX:column="5">continue;</continue>
  }</block></while>
  <expr_stmt><expr><name PREFIX:line="128" PREFIX:column="3">twi_state</name> = <name PREFIX:line="128" PREFIX:column="15">TWI_MRX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="129" PREFIX:column="3">twi_sendStop</name> = <name PREFIX:line="129" PREFIX:column="18">sendStop</name></expr>;</expr_stmt>
  <comment type="line" PREFIX:line="130" PREFIX:column="3">// reset error state (0xFF.. no error occured)</comment>
  <expr_stmt><expr><name PREFIX:line="131" PREFIX:column="3">twi_error</name> = 0xFF</expr>;</expr_stmt>

  <comment type="line" PREFIX:line="133" PREFIX:column="3">// initialize buffer iteration vars</comment>
  <expr_stmt><expr><name PREFIX:line="134" PREFIX:column="3">twi_masterBufferIndex</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="135" PREFIX:column="3">twi_masterBufferLength</name> = <name PREFIX:line="135" PREFIX:column="28">length</name>-1</expr>;</expr_stmt>  <comment type="line" PREFIX:line="135" PREFIX:column="39">// This is not intuitive, read on...</comment>
  <comment type="line" PREFIX:line="136" PREFIX:column="3">// On receive, the previously configured ACK/NACK setting is transmitted in</comment>
  <comment type="line" PREFIX:line="137" PREFIX:column="3">// response to the received byte before the interrupt is signalled. </comment>
  <comment type="line" PREFIX:line="138" PREFIX:column="3">// Therefor we must actually set NACK when the _next_ to last byte is</comment>
  <comment type="line" PREFIX:line="139" PREFIX:column="3">// received, causing that NACK to be sent in response to receiving the last</comment>
  <comment type="line" PREFIX:line="140" PREFIX:column="3">// expected byte of data.</comment>

  <comment type="line" PREFIX:line="142" PREFIX:column="3">// build sla+w, slave device address + w bit</comment>
  <expr_stmt><expr><name PREFIX:line="143" PREFIX:column="3">twi_slarw</name> = <name PREFIX:line="143" PREFIX:column="15">TW_READ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="144" PREFIX:column="3">twi_slarw</name> |= <name PREFIX:line="144" PREFIX:column="16">address</name> &lt;&lt; 1</expr>;</expr_stmt>

  <if PREFIX:line="146" PREFIX:column="3">if <condition PREFIX:line="146" PREFIX:column="6">(<expr><name PREFIX:line="146" PREFIX:column="7">true</name> == <name PREFIX:line="146" PREFIX:column="15">twi_inRepStart</name></expr>)</condition><then PREFIX:line="146" PREFIX:column="30"> <block PREFIX:line="146" PREFIX:column="31">{
    <comment type="line" PREFIX:line="147" PREFIX:column="5">// if we're in the repeated start state, then we've already sent the start,</comment>
    <comment type="line" PREFIX:line="148" PREFIX:column="5">// (@@@ we hope), and the TWI statemachine is just waiting for the address byte.</comment>
    <comment type="line" PREFIX:line="149" PREFIX:column="5">// We need to remove ourselves from the repeated start state before we enable interrupts,</comment>
    <comment type="line" PREFIX:line="150" PREFIX:column="5">// since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning</comment>
    <comment type="line" PREFIX:line="151" PREFIX:column="5">// up. Also, don't enable the START interrupt. There may be one pending from the </comment>
    <comment type="line" PREFIX:line="152" PREFIX:column="5">// repeated start that we sent outselves, and that would really confuse things.</comment>
    <expr_stmt><expr><name PREFIX:line="153" PREFIX:column="5">twi_inRepStart</name> = <name PREFIX:line="153" PREFIX:column="22">false</name></expr>;</expr_stmt>			<comment type="line" PREFIX:line="153" PREFIX:column="49">// remember, we're dealing with an ASYNC ISR</comment>
    <expr_stmt><expr><name PREFIX:line="154" PREFIX:column="5">TWDR</name> = <name PREFIX:line="154" PREFIX:column="12">twi_slarw</name></expr>;</expr_stmt>
    <expr_stmt><expr><name PREFIX:line="155" PREFIX:column="5">TWCR</name> = <call><name PREFIX:line="155" PREFIX:column="12">_BV</name><argument_list PREFIX:line="155" PREFIX:column="15">(<argument><expr><name PREFIX:line="155" PREFIX:column="16">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="155" PREFIX:column="25">_BV</name><argument_list PREFIX:line="155" PREFIX:column="28">(<argument><expr><name PREFIX:line="155" PREFIX:column="29">TWEA</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="155" PREFIX:column="37">_BV</name><argument_list PREFIX:line="155" PREFIX:column="40">(<argument><expr><name PREFIX:line="155" PREFIX:column="41">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="155" PREFIX:column="49">_BV</name><argument_list PREFIX:line="155" PREFIX:column="52">(<argument><expr><name PREFIX:line="155" PREFIX:column="53">TWIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" PREFIX:line="155" PREFIX:column="65">// enable INTs, but not START</comment>
  }</block></then>
  <else PREFIX:line="157" PREFIX:column="3">else
    <comment type="line" PREFIX:line="158" PREFIX:column="5">// send start condition</comment>
    <expr_stmt><expr><name PREFIX:line="159" PREFIX:column="5">TWCR</name> = <call><name PREFIX:line="159" PREFIX:column="12">_BV</name><argument_list PREFIX:line="159" PREFIX:column="15">(<argument><expr><name PREFIX:line="159" PREFIX:column="16">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="159" PREFIX:column="24">_BV</name><argument_list PREFIX:line="159" PREFIX:column="27">(<argument><expr><name PREFIX:line="159" PREFIX:column="28">TWIE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="159" PREFIX:column="36">_BV</name><argument_list PREFIX:line="159" PREFIX:column="39">(<argument><expr><name PREFIX:line="159" PREFIX:column="40">TWEA</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="159" PREFIX:column="48">_BV</name><argument_list PREFIX:line="159" PREFIX:column="51">(<argument><expr><name PREFIX:line="159" PREFIX:column="52">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="159" PREFIX:column="61">_BV</name><argument_list PREFIX:line="159" PREFIX:column="64">(<argument><expr><name PREFIX:line="159" PREFIX:column="65">TWSTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <comment type="line" PREFIX:line="161" PREFIX:column="3">// wait for read operation to complete</comment>
  <while PREFIX:line="162" PREFIX:column="3">while<condition PREFIX:line="162" PREFIX:column="8">(<expr><name PREFIX:line="162" PREFIX:column="9">TWI_MRX</name> == <name PREFIX:line="162" PREFIX:column="20">twi_state</name></expr>)</condition><block PREFIX:line="162" PREFIX:column="30">{
    <continue PREFIX:line="163" PREFIX:column="5">continue;</continue>
  }</block></while>

  <if PREFIX:line="166" PREFIX:column="3">if <condition PREFIX:line="166" PREFIX:column="6">(<expr><name PREFIX:line="166" PREFIX:column="7">twi_masterBufferIndex</name> &lt; <name PREFIX:line="166" PREFIX:column="31">length</name></expr>)</condition><then PREFIX:line="166" PREFIX:column="38">
    <expr_stmt><expr><name PREFIX:line="167" PREFIX:column="5">length</name> = <name PREFIX:line="167" PREFIX:column="14">twi_masterBufferIndex</name></expr>;</expr_stmt></then></if>

  <comment type="line" PREFIX:line="169" PREFIX:column="3">// copy twi buffer to data</comment>
  <for PREFIX:line="170" PREFIX:column="3">for(<init><expr><name PREFIX:line="170" PREFIX:column="7">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="170" PREFIX:column="14">i</name> &lt; <name PREFIX:line="170" PREFIX:column="18">length</name></expr>;</condition> <incr><expr PREFIX:line="170" PREFIX:column="26">++<name PREFIX:line="170" PREFIX:column="28">i</name></expr></incr>)<block PREFIX:line="170" PREFIX:column="30">{
    <expr_stmt><expr><name><name PREFIX:line="171" PREFIX:column="5">data</name><index PREFIX:line="171" PREFIX:column="9">[<expr><name PREFIX:line="171" PREFIX:column="10">i</name></expr>]</index></name> = <name><name PREFIX:line="171" PREFIX:column="15">twi_masterBuffer</name><index PREFIX:line="171" PREFIX:column="31">[<expr><name PREFIX:line="171" PREFIX:column="32">i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
	
  <return PREFIX:line="174" PREFIX:column="3">return <expr><name PREFIX:line="174" PREFIX:column="10">length</name></expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="177" PREFIX:column="1">/* 
 * Function twi_writeTo
 * Desc     attempts to become twi bus master and write a
 *          series of bytes to a device on the bus
 * Input    address: 7bit i2c device address
 *          data: pointer to byte array
 *          length: number of bytes in array
 *          wait: boolean indicating to wait for write or not
 *          sendStop: boolean indicating whether or not to send a stop at the end
 * Output   0 .. success
 *          1 .. length to long for buffer
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */</comment>
<function><type><name PREFIX:line="192" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="192" PREFIX:column="9">twi_writeTo</name><parameter_list PREFIX:line="192" PREFIX:column="20">(<param><decl><type><name PREFIX:line="192" PREFIX:column="21">uint8_t</name></type> <name PREFIX:line="192" PREFIX:column="29">address</name></decl></param>, <param><decl><type><name PREFIX:line="192" PREFIX:column="38">uint8_t</name>*</type> <name PREFIX:line="192" PREFIX:column="47">data</name></decl></param>, <param><decl><type><name PREFIX:line="192" PREFIX:column="53">uint8_t</name></type> <name PREFIX:line="192" PREFIX:column="61">length</name></decl></param>, <param><decl><type><name PREFIX:line="192" PREFIX:column="69">uint8_t</name></type> <name PREFIX:line="192" PREFIX:column="77">wait</name></decl></param>, <param><decl><type><name PREFIX:line="192" PREFIX:column="83">uint8_t</name></type> <name PREFIX:line="192" PREFIX:column="91">sendStop</name></decl></param>)</parameter_list>
<block PREFIX:line="193" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="194" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="194" PREFIX:column="11">i</name></decl>;</decl_stmt>

  <comment type="line" PREFIX:line="196" PREFIX:column="3">// ensure data will fit into buffer</comment>
  <if PREFIX:line="197" PREFIX:column="3">if<condition PREFIX:line="197" PREFIX:column="5">(<expr><name PREFIX:line="197" PREFIX:column="6">TWI_BUFFER_LENGTH</name> &lt; <name PREFIX:line="197" PREFIX:column="26">length</name></expr>)</condition><then><block PREFIX:line="197" PREFIX:column="33">{
    <return PREFIX:line="198" PREFIX:column="5">return <expr PREFIX:line="198" PREFIX:column="12">1</expr>;</return>
  }</block></then></if>

  <comment type="line" PREFIX:line="201" PREFIX:column="3">// wait until twi is ready, become master transmitter</comment>
  <while PREFIX:line="202" PREFIX:column="3">while<condition PREFIX:line="202" PREFIX:column="8">(<expr><name PREFIX:line="202" PREFIX:column="9">TWI_READY</name> != <name PREFIX:line="202" PREFIX:column="22">twi_state</name></expr>)</condition><block PREFIX:line="202" PREFIX:column="32">{
    <continue PREFIX:line="203" PREFIX:column="5">continue;</continue>
  }</block></while>
  <expr_stmt><expr><name PREFIX:line="205" PREFIX:column="3">twi_state</name> = <name PREFIX:line="205" PREFIX:column="15">TWI_MTX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="206" PREFIX:column="3">twi_sendStop</name> = <name PREFIX:line="206" PREFIX:column="18">sendStop</name></expr>;</expr_stmt>
  <comment type="line" PREFIX:line="207" PREFIX:column="3">// reset error state (0xFF.. no error occured)</comment>
  <expr_stmt><expr><name PREFIX:line="208" PREFIX:column="3">twi_error</name> = 0xFF</expr>;</expr_stmt>

  <comment type="line" PREFIX:line="210" PREFIX:column="3">// initialize buffer iteration vars</comment>
  <expr_stmt><expr><name PREFIX:line="211" PREFIX:column="3">twi_masterBufferIndex</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="212" PREFIX:column="3">twi_masterBufferLength</name> = <name PREFIX:line="212" PREFIX:column="28">length</name></expr>;</expr_stmt>
  
  <comment type="line" PREFIX:line="214" PREFIX:column="3">// copy data to twi buffer</comment>
  <for PREFIX:line="215" PREFIX:column="3">for(<init><expr><name PREFIX:line="215" PREFIX:column="7">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="215" PREFIX:column="14">i</name> &lt; <name PREFIX:line="215" PREFIX:column="18">length</name></expr>;</condition> <incr><expr PREFIX:line="215" PREFIX:column="26">++<name PREFIX:line="215" PREFIX:column="28">i</name></expr></incr>)<block PREFIX:line="215" PREFIX:column="30">{
    <expr_stmt><expr><name><name PREFIX:line="216" PREFIX:column="5">twi_masterBuffer</name><index PREFIX:line="216" PREFIX:column="21">[<expr><name PREFIX:line="216" PREFIX:column="22">i</name></expr>]</index></name> = <name><name PREFIX:line="216" PREFIX:column="27">data</name><index PREFIX:line="216" PREFIX:column="31">[<expr><name PREFIX:line="216" PREFIX:column="32">i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  
  <comment type="line" PREFIX:line="219" PREFIX:column="3">// build sla+w, slave device address + w bit</comment>
  <expr_stmt><expr><name PREFIX:line="220" PREFIX:column="3">twi_slarw</name> = <name PREFIX:line="220" PREFIX:column="15">TW_WRITE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="221" PREFIX:column="3">twi_slarw</name> |= <name PREFIX:line="221" PREFIX:column="16">address</name> &lt;&lt; 1</expr>;</expr_stmt>
  
  <comment type="line" PREFIX:line="223" PREFIX:column="3">// if we're in a repeated start, then we've already sent the START</comment>
  <comment type="line" PREFIX:line="224" PREFIX:column="3">// in the ISR. Don't do it again.</comment>
  <comment type="line" PREFIX:line="225" PREFIX:column="3">//</comment>
  <if PREFIX:line="226" PREFIX:column="3">if <condition PREFIX:line="226" PREFIX:column="6">(<expr><name PREFIX:line="226" PREFIX:column="7">true</name> == <name PREFIX:line="226" PREFIX:column="15">twi_inRepStart</name></expr>)</condition><then PREFIX:line="226" PREFIX:column="30"> <block PREFIX:line="226" PREFIX:column="31">{
    <comment type="line" PREFIX:line="227" PREFIX:column="5">// if we're in the repeated start state, then we've already sent the start,</comment>
    <comment type="line" PREFIX:line="228" PREFIX:column="5">// (@@@ we hope), and the TWI statemachine is just waiting for the address byte.</comment>
    <comment type="line" PREFIX:line="229" PREFIX:column="5">// We need to remove ourselves from the repeated start state before we enable interrupts,</comment>
    <comment type="line" PREFIX:line="230" PREFIX:column="5">// since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning</comment>
    <comment type="line" PREFIX:line="231" PREFIX:column="5">// up. Also, don't enable the START interrupt. There may be one pending from the </comment>
    <comment type="line" PREFIX:line="232" PREFIX:column="5">// repeated start that we sent outselves, and that would really confuse things.</comment>
    <expr_stmt><expr><name PREFIX:line="233" PREFIX:column="5">twi_inRepStart</name> = <name PREFIX:line="233" PREFIX:column="22">false</name></expr>;</expr_stmt>			<comment type="line" PREFIX:line="233" PREFIX:column="49">// remember, we're dealing with an ASYNC ISR</comment>
    <expr_stmt><expr><name PREFIX:line="234" PREFIX:column="5">TWDR</name> = <name PREFIX:line="234" PREFIX:column="12">twi_slarw</name></expr>;</expr_stmt>				
    <expr_stmt><expr><name PREFIX:line="235" PREFIX:column="5">TWCR</name> = <call><name PREFIX:line="235" PREFIX:column="12">_BV</name><argument_list PREFIX:line="235" PREFIX:column="15">(<argument><expr><name PREFIX:line="235" PREFIX:column="16">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="235" PREFIX:column="25">_BV</name><argument_list PREFIX:line="235" PREFIX:column="28">(<argument><expr><name PREFIX:line="235" PREFIX:column="29">TWEA</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="235" PREFIX:column="37">_BV</name><argument_list PREFIX:line="235" PREFIX:column="40">(<argument><expr><name PREFIX:line="235" PREFIX:column="41">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="235" PREFIX:column="49">_BV</name><argument_list PREFIX:line="235" PREFIX:column="52">(<argument><expr><name PREFIX:line="235" PREFIX:column="53">TWIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" PREFIX:line="235" PREFIX:column="65">// enable INTs, but not START</comment>
  }</block></then>
  <else PREFIX:line="237" PREFIX:column="3">else
    <comment type="line" PREFIX:line="238" PREFIX:column="5">// send start condition</comment>
    <expr_stmt><expr><name PREFIX:line="239" PREFIX:column="5">TWCR</name> = <call><name PREFIX:line="239" PREFIX:column="12">_BV</name><argument_list PREFIX:line="239" PREFIX:column="15">(<argument><expr><name PREFIX:line="239" PREFIX:column="16">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="239" PREFIX:column="25">_BV</name><argument_list PREFIX:line="239" PREFIX:column="28">(<argument><expr><name PREFIX:line="239" PREFIX:column="29">TWEA</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="239" PREFIX:column="37">_BV</name><argument_list PREFIX:line="239" PREFIX:column="40">(<argument><expr><name PREFIX:line="239" PREFIX:column="41">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="239" PREFIX:column="49">_BV</name><argument_list PREFIX:line="239" PREFIX:column="52">(<argument><expr><name PREFIX:line="239" PREFIX:column="53">TWIE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="239" PREFIX:column="61">_BV</name><argument_list PREFIX:line="239" PREFIX:column="64">(<argument><expr><name PREFIX:line="239" PREFIX:column="65">TWSTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>	<comment type="line" PREFIX:line="239" PREFIX:column="73">// enable INTs</comment>

  <comment type="line" PREFIX:line="241" PREFIX:column="3">// wait for write operation to complete</comment>
  <while PREFIX:line="242" PREFIX:column="3">while<condition PREFIX:line="242" PREFIX:column="8">(<expr><name PREFIX:line="242" PREFIX:column="9">wait</name> &amp;&amp; (<name PREFIX:line="242" PREFIX:column="18">TWI_MTX</name> == <name PREFIX:line="242" PREFIX:column="29">twi_state</name>)</expr>)</condition><block PREFIX:line="242" PREFIX:column="40">{
    <continue PREFIX:line="243" PREFIX:column="5">continue;</continue>
  }</block></while>
  
  <if PREFIX:line="246" PREFIX:column="3">if <condition PREFIX:line="246" PREFIX:column="6">(<expr><name PREFIX:line="246" PREFIX:column="7">twi_error</name> == 0xFF</expr>)</condition><then PREFIX:line="246" PREFIX:column="25">
    <return PREFIX:line="247" PREFIX:column="5">return <expr PREFIX:line="247" PREFIX:column="12">0</expr>;</return></then>	<comment type="line" PREFIX:line="247" PREFIX:column="17">// success</comment>
  <else PREFIX:line="248" PREFIX:column="3">else <if PREFIX:line="248" PREFIX:column="8">if <condition PREFIX:line="248" PREFIX:column="11">(<expr><name PREFIX:line="248" PREFIX:column="12">twi_error</name> == <name PREFIX:line="248" PREFIX:column="25">TW_MT_SLA_NACK</name></expr>)</condition><then PREFIX:line="248" PREFIX:column="40">
    <return PREFIX:line="249" PREFIX:column="5">return <expr PREFIX:line="249" PREFIX:column="12">2</expr>;</return></then>	<comment type="line" PREFIX:line="249" PREFIX:column="17">// error: address send, nack received</comment>
  <else PREFIX:line="250" PREFIX:column="3">else <if PREFIX:line="250" PREFIX:column="8">if <condition PREFIX:line="250" PREFIX:column="11">(<expr><name PREFIX:line="250" PREFIX:column="12">twi_error</name> == <name PREFIX:line="250" PREFIX:column="25">TW_MT_DATA_NACK</name></expr>)</condition><then PREFIX:line="250" PREFIX:column="41">
    <return PREFIX:line="251" PREFIX:column="5">return <expr PREFIX:line="251" PREFIX:column="12">3</expr>;</return></then>	<comment type="line" PREFIX:line="251" PREFIX:column="17">// error: data send, nack received</comment>
  <else PREFIX:line="252" PREFIX:column="3">else
    <return PREFIX:line="253" PREFIX:column="5">return <expr PREFIX:line="253" PREFIX:column="12">4</expr>;</return></else></if></else></if></else></if>	<comment type="line" PREFIX:line="253" PREFIX:column="17">// other twi error</comment>
}</block></function>

<comment type="block" PREFIX:line="256" PREFIX:column="1">/* 
 * Function twi_transmit
 * Desc     fills slave tx buffer with data
 *          must be called in slave tx event callback
 * Input    data: pointer to byte array
 *          length: number of bytes in array
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */</comment>
<function><type><name PREFIX:line="266" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="266" PREFIX:column="9">twi_transmit</name><parameter_list PREFIX:line="266" PREFIX:column="21">( <param><decl><type><name PREFIX:line="266" PREFIX:column="23">uint8_t</name>*</type> <name PREFIX:line="266" PREFIX:column="32">data</name></decl></param>, <param><decl><type><name PREFIX:line="266" PREFIX:column="38">uint8_t</name></type> <name PREFIX:line="266" PREFIX:column="46">length</name></decl></param>)</parameter_list>
<block PREFIX:line="267" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="268" PREFIX:column="3">uint8_t</name></type> <name PREFIX:line="268" PREFIX:column="11">i</name></decl>;</decl_stmt>

  <comment type="line" PREFIX:line="270" PREFIX:column="3">// ensure data will fit into buffer</comment>
  <if PREFIX:line="271" PREFIX:column="3">if<condition PREFIX:line="271" PREFIX:column="5">(<expr><name PREFIX:line="271" PREFIX:column="6">TWI_BUFFER_LENGTH</name> &lt; <name PREFIX:line="271" PREFIX:column="26">length</name></expr>)</condition><then><block PREFIX:line="271" PREFIX:column="33">{
    <return PREFIX:line="272" PREFIX:column="5">return <expr PREFIX:line="272" PREFIX:column="12">1</expr>;</return>
  }</block></then></if>
  
  <comment type="line" PREFIX:line="275" PREFIX:column="3">// ensure we are currently a slave transmitter</comment>
  <if PREFIX:line="276" PREFIX:column="3">if<condition PREFIX:line="276" PREFIX:column="5">(<expr><name PREFIX:line="276" PREFIX:column="6">TWI_STX</name> != <name PREFIX:line="276" PREFIX:column="17">twi_state</name></expr>)</condition><then><block PREFIX:line="276" PREFIX:column="27">{
    <return PREFIX:line="277" PREFIX:column="5">return <expr PREFIX:line="277" PREFIX:column="12">2</expr>;</return>
  }</block></then></if>
  
  <comment type="line" PREFIX:line="280" PREFIX:column="3">// set length and copy data into tx buffer</comment>
  <expr_stmt><expr><name PREFIX:line="281" PREFIX:column="3">twi_txBufferLength</name> = <name PREFIX:line="281" PREFIX:column="24">length</name></expr>;</expr_stmt>
  <for PREFIX:line="282" PREFIX:column="3">for(<init><expr><name PREFIX:line="282" PREFIX:column="7">i</name> = 0</expr>;</init> <condition><expr><name PREFIX:line="282" PREFIX:column="14">i</name> &lt; <name PREFIX:line="282" PREFIX:column="18">length</name></expr>;</condition> <incr><expr PREFIX:line="282" PREFIX:column="26">++<name PREFIX:line="282" PREFIX:column="28">i</name></expr></incr>)<block PREFIX:line="282" PREFIX:column="30">{
    <expr_stmt><expr><name><name PREFIX:line="283" PREFIX:column="5">twi_txBuffer</name><index PREFIX:line="283" PREFIX:column="17">[<expr><name PREFIX:line="283" PREFIX:column="18">i</name></expr>]</index></name> = <name><name PREFIX:line="283" PREFIX:column="23">data</name><index PREFIX:line="283" PREFIX:column="27">[<expr><name PREFIX:line="283" PREFIX:column="28">i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  
  <return PREFIX:line="286" PREFIX:column="3">return <expr PREFIX:line="286" PREFIX:column="10">0</expr>;</return>
}</block></function>

<comment type="block" PREFIX:line="289" PREFIX:column="1">/* 
 * Function twi_attachSlaveRxEvent
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */</comment>
<function><type><name PREFIX:line="295" PREFIX:column="1">void</name></type> <name PREFIX:line="295" PREFIX:column="6">twi_attachSlaveRxEvent</name><parameter_list PREFIX:line="295" PREFIX:column="28">( <param><function_decl><type><name PREFIX:line="295" PREFIX:column="30">void</name></type> (*<name PREFIX:line="295" PREFIX:column="37">function</name>)<parameter_list PREFIX:line="295" PREFIX:column="46">(<param><decl><type><name PREFIX:line="295" PREFIX:column="47">uint8_t</name>*</type></decl></param>, <param><decl><type><name PREFIX:line="295" PREFIX:column="57">int</name></type></decl></param>)</parameter_list></function_decl></param> )</parameter_list>
<block PREFIX:line="296" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="297" PREFIX:column="3">twi_onSlaveReceive</name> = <name PREFIX:line="297" PREFIX:column="24">function</name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="300" PREFIX:column="1">/* 
 * Function twi_attachSlaveTxEvent
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */</comment>
<function><type><name PREFIX:line="306" PREFIX:column="1">void</name></type> <name PREFIX:line="306" PREFIX:column="6">twi_attachSlaveTxEvent</name><parameter_list PREFIX:line="306" PREFIX:column="28">( <param><function_decl><type><name PREFIX:line="306" PREFIX:column="30">void</name></type> (*<name PREFIX:line="306" PREFIX:column="37">function</name>)<parameter_list PREFIX:line="306" PREFIX:column="46">(<param><decl><type><name PREFIX:line="306" PREFIX:column="47">void</name></type></decl></param>)</parameter_list></function_decl></param> )</parameter_list>
<block PREFIX:line="307" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="308" PREFIX:column="3">twi_onSlaveTransmit</name> = <name PREFIX:line="308" PREFIX:column="25">function</name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="311" PREFIX:column="1">/* 
 * Function twi_reply
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */</comment>
<function><type><name PREFIX:line="317" PREFIX:column="1">void</name></type> <name PREFIX:line="317" PREFIX:column="6">twi_reply</name><parameter_list PREFIX:line="317" PREFIX:column="15">(<param><decl><type><name PREFIX:line="317" PREFIX:column="16">uint8_t</name></type> <name PREFIX:line="317" PREFIX:column="24">ack</name></decl></param>)</parameter_list>
<block PREFIX:line="318" PREFIX:column="1">{
  <comment type="line" PREFIX:line="319" PREFIX:column="3">// transmit master read ready signal, with or without ack</comment>
  <if PREFIX:line="320" PREFIX:column="3">if<condition PREFIX:line="320" PREFIX:column="5">(<expr><name PREFIX:line="320" PREFIX:column="6">ack</name></expr>)</condition><then><block PREFIX:line="320" PREFIX:column="10">{
    <expr_stmt><expr><name PREFIX:line="321" PREFIX:column="5">TWCR</name> = <call><name PREFIX:line="321" PREFIX:column="12">_BV</name><argument_list PREFIX:line="321" PREFIX:column="15">(<argument><expr><name PREFIX:line="321" PREFIX:column="16">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="321" PREFIX:column="24">_BV</name><argument_list PREFIX:line="321" PREFIX:column="27">(<argument><expr><name PREFIX:line="321" PREFIX:column="28">TWIE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="321" PREFIX:column="36">_BV</name><argument_list PREFIX:line="321" PREFIX:column="39">(<argument><expr><name PREFIX:line="321" PREFIX:column="40">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="321" PREFIX:column="49">_BV</name><argument_list PREFIX:line="321" PREFIX:column="52">(<argument><expr><name PREFIX:line="321" PREFIX:column="53">TWEA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else PREFIX:line="322" PREFIX:column="4">else<block PREFIX:line="322" PREFIX:column="8">{
	  <expr_stmt><expr><name PREFIX:line="323" PREFIX:column="11">TWCR</name> = <call><name PREFIX:line="323" PREFIX:column="18">_BV</name><argument_list PREFIX:line="323" PREFIX:column="21">(<argument><expr><name PREFIX:line="323" PREFIX:column="22">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="323" PREFIX:column="30">_BV</name><argument_list PREFIX:line="323" PREFIX:column="33">(<argument><expr><name PREFIX:line="323" PREFIX:column="34">TWIE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="323" PREFIX:column="42">_BV</name><argument_list PREFIX:line="323" PREFIX:column="45">(<argument><expr><name PREFIX:line="323" PREFIX:column="46">TWINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<comment type="block" PREFIX:line="327" PREFIX:column="1">/* 
 * Function twi_stop
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */</comment>
<function><type><name PREFIX:line="333" PREFIX:column="1">void</name></type> <name PREFIX:line="333" PREFIX:column="6">twi_stop</name><parameter_list PREFIX:line="333" PREFIX:column="14">(<param><decl><type><name PREFIX:line="333" PREFIX:column="15">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="334" PREFIX:column="1">{
  <comment type="line" PREFIX:line="335" PREFIX:column="3">// send stop condition</comment>
  <expr_stmt><expr><name PREFIX:line="336" PREFIX:column="3">TWCR</name> = <call><name PREFIX:line="336" PREFIX:column="10">_BV</name><argument_list PREFIX:line="336" PREFIX:column="13">(<argument><expr><name PREFIX:line="336" PREFIX:column="14">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="336" PREFIX:column="22">_BV</name><argument_list PREFIX:line="336" PREFIX:column="25">(<argument><expr><name PREFIX:line="336" PREFIX:column="26">TWIE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="336" PREFIX:column="34">_BV</name><argument_list PREFIX:line="336" PREFIX:column="37">(<argument><expr><name PREFIX:line="336" PREFIX:column="38">TWEA</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="336" PREFIX:column="46">_BV</name><argument_list PREFIX:line="336" PREFIX:column="49">(<argument><expr><name PREFIX:line="336" PREFIX:column="50">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="336" PREFIX:column="59">_BV</name><argument_list PREFIX:line="336" PREFIX:column="62">(<argument><expr><name PREFIX:line="336" PREFIX:column="63">TWSTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line" PREFIX:line="338" PREFIX:column="3">// wait for stop condition to be exectued on bus</comment>
  <comment type="line" PREFIX:line="339" PREFIX:column="3">// TWINT is not set after a stop condition!</comment>
  <while PREFIX:line="340" PREFIX:column="3">while<condition PREFIX:line="340" PREFIX:column="8">(<expr><name PREFIX:line="340" PREFIX:column="9">TWCR</name> &amp; <call><name PREFIX:line="340" PREFIX:column="16">_BV</name><argument_list PREFIX:line="340" PREFIX:column="19">(<argument><expr><name PREFIX:line="340" PREFIX:column="20">TWSTO</name></expr></argument>)</argument_list></call></expr>)</condition><block PREFIX:line="340" PREFIX:column="27">{
    <continue PREFIX:line="341" PREFIX:column="5">continue;</continue>
  }</block></while>

  <comment type="line" PREFIX:line="344" PREFIX:column="3">// update twi state</comment>
  <expr_stmt><expr><name PREFIX:line="345" PREFIX:column="3">twi_state</name> = <name PREFIX:line="345" PREFIX:column="15">TWI_READY</name></expr>;</expr_stmt>
}</block></function>

<comment type="block" PREFIX:line="348" PREFIX:column="1">/* 
 * Function twi_releaseBus
 * Desc     releases bus control
 * Input    none
 * Output   none
 */</comment>
<function><type><name PREFIX:line="354" PREFIX:column="1">void</name></type> <name PREFIX:line="354" PREFIX:column="6">twi_releaseBus</name><parameter_list PREFIX:line="354" PREFIX:column="20">(<param><decl><type><name PREFIX:line="354" PREFIX:column="21">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="355" PREFIX:column="1">{
  <comment type="line" PREFIX:line="356" PREFIX:column="3">// release bus</comment>
  <expr_stmt><expr><name PREFIX:line="357" PREFIX:column="3">TWCR</name> = <call><name PREFIX:line="357" PREFIX:column="10">_BV</name><argument_list PREFIX:line="357" PREFIX:column="13">(<argument><expr><name PREFIX:line="357" PREFIX:column="14">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="357" PREFIX:column="22">_BV</name><argument_list PREFIX:line="357" PREFIX:column="25">(<argument><expr><name PREFIX:line="357" PREFIX:column="26">TWIE</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="357" PREFIX:column="34">_BV</name><argument_list PREFIX:line="357" PREFIX:column="37">(<argument><expr><name PREFIX:line="357" PREFIX:column="38">TWEA</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="357" PREFIX:column="46">_BV</name><argument_list PREFIX:line="357" PREFIX:column="49">(<argument><expr><name PREFIX:line="357" PREFIX:column="50">TWINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line" PREFIX:line="359" PREFIX:column="3">// update twi state</comment>
  <expr_stmt><expr><name PREFIX:line="360" PREFIX:column="3">twi_state</name> = <name PREFIX:line="360" PREFIX:column="15">TWI_READY</name></expr>;</expr_stmt>
}</block></function>

<macro><name PREFIX:line="363" PREFIX:column="1">ISR</name><argument_list PREFIX:line="363" PREFIX:column="4">(<argument PREFIX:line="363" PREFIX:column="5">TWI_vect</argument>)</argument_list></macro>
<block PREFIX:line="364" PREFIX:column="1">{
  <switch PREFIX:line="365" PREFIX:column="3">switch<condition PREFIX:line="365" PREFIX:column="9">(<expr><name PREFIX:line="365" PREFIX:column="10">TW_STATUS</name></expr>)</condition><block PREFIX:line="365" PREFIX:column="20">{
    <comment type="line" PREFIX:line="366" PREFIX:column="5">// All Master</comment>
    <case PREFIX:line="367" PREFIX:column="5">case <expr><name PREFIX:line="367" PREFIX:column="10">TW_START</name></expr>:     <comment type="line" PREFIX:line="367" PREFIX:column="24">// sent start condition</comment>
    </case><case PREFIX:line="368" PREFIX:column="5">case <expr><name PREFIX:line="368" PREFIX:column="10">TW_REP_START</name></expr>: <comment type="line" PREFIX:line="368" PREFIX:column="24">// sent repeated start condition</comment>
      <comment type="line" PREFIX:line="369" PREFIX:column="7">// copy device address and r/w bit to output register and ack</comment>
      <expr_stmt><expr><name PREFIX:line="370" PREFIX:column="7">TWDR</name> = <name PREFIX:line="370" PREFIX:column="14">twi_slarw</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="371" PREFIX:column="7">twi_reply</name><argument_list PREFIX:line="371" PREFIX:column="16">(<argument><expr PREFIX:line="371" PREFIX:column="17">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="372" PREFIX:column="7">break;</break>

    <comment type="line" PREFIX:line="374" PREFIX:column="5">// Master Transmitter</comment>
    </case><case PREFIX:line="375" PREFIX:column="5">case <expr><name PREFIX:line="375" PREFIX:column="10">TW_MT_SLA_ACK</name></expr>:  <comment type="line" PREFIX:line="375" PREFIX:column="26">// slave receiver acked address</comment>
    </case><case PREFIX:line="376" PREFIX:column="5">case <expr><name PREFIX:line="376" PREFIX:column="10">TW_MT_DATA_ACK</name></expr>: <comment type="line" PREFIX:line="376" PREFIX:column="26">// slave receiver acked data</comment>
      <comment type="line" PREFIX:line="377" PREFIX:column="7">// if there is data to send, send it, otherwise stop </comment>
      <if PREFIX:line="378" PREFIX:column="7">if<condition PREFIX:line="378" PREFIX:column="9">(<expr><name PREFIX:line="378" PREFIX:column="10">twi_masterBufferIndex</name> &lt; <name PREFIX:line="378" PREFIX:column="34">twi_masterBufferLength</name></expr>)</condition><then><block PREFIX:line="378" PREFIX:column="57">{
        <comment type="line" PREFIX:line="379" PREFIX:column="9">// copy data to output register and ack</comment>
        <expr_stmt><expr><name PREFIX:line="380" PREFIX:column="9">TWDR</name> = <name><name PREFIX:line="380" PREFIX:column="16">twi_masterBuffer</name><index PREFIX:line="380" PREFIX:column="32">[<expr><name PREFIX:line="380" PREFIX:column="33">twi_masterBufferIndex</name>++</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name PREFIX:line="381" PREFIX:column="9">twi_reply</name><argument_list PREFIX:line="381" PREFIX:column="18">(<argument><expr PREFIX:line="381" PREFIX:column="19">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else PREFIX:line="382" PREFIX:column="8">else<block PREFIX:line="382" PREFIX:column="12">{
	<if PREFIX:line="383" PREFIX:column="9">if <condition PREFIX:line="383" PREFIX:column="12">(<expr><name PREFIX:line="383" PREFIX:column="13">twi_sendStop</name></expr>)</condition><then PREFIX:line="383" PREFIX:column="26">
          <expr_stmt><expr><call><name PREFIX:line="384" PREFIX:column="11">twi_stop</name><argument_list PREFIX:line="384" PREFIX:column="19">()</argument_list></call></expr>;</expr_stmt></then>
	<else PREFIX:line="385" PREFIX:column="9">else <block PREFIX:line="385" PREFIX:column="14">{
	  <expr_stmt><expr><name PREFIX:line="386" PREFIX:column="11">twi_inRepStart</name> = <name PREFIX:line="386" PREFIX:column="28">true</name></expr>;</expr_stmt>	<comment type="line" PREFIX:line="386" PREFIX:column="41">// we're gonna send the START</comment>
	  <comment type="line" PREFIX:line="387" PREFIX:column="11">// don't enable the interrupt. We'll generate the start, but we </comment>
	  <comment type="line" PREFIX:line="388" PREFIX:column="11">// avoid handling the interrupt until we're in the next transaction,</comment>
	  <comment type="line" PREFIX:line="389" PREFIX:column="11">// at the point where we would normally issue the start.</comment>
	  <expr_stmt><expr><name PREFIX:line="390" PREFIX:column="11">TWCR</name> = <call><name PREFIX:line="390" PREFIX:column="18">_BV</name><argument_list PREFIX:line="390" PREFIX:column="21">(<argument><expr><name PREFIX:line="390" PREFIX:column="22">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="390" PREFIX:column="31">_BV</name><argument_list PREFIX:line="390" PREFIX:column="34">(<argument><expr><name PREFIX:line="390" PREFIX:column="35">TWSTA</name></expr></argument>)</argument_list></call>| <call><name PREFIX:line="390" PREFIX:column="43">_BV</name><argument_list PREFIX:line="390" PREFIX:column="46">(<argument><expr><name PREFIX:line="390" PREFIX:column="47">TWEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	  <expr_stmt><expr><name PREFIX:line="391" PREFIX:column="11">twi_state</name> = <name PREFIX:line="391" PREFIX:column="23">TWI_READY</name></expr>;</expr_stmt>
	}</block></else></if>
      }</block></else></if>
      <break PREFIX:line="394" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="395" PREFIX:column="5">case <expr><name PREFIX:line="395" PREFIX:column="10">TW_MT_SLA_NACK</name></expr>:  <comment type="line" PREFIX:line="395" PREFIX:column="27">// address sent, nack received</comment>
      <expr_stmt><expr><name PREFIX:line="396" PREFIX:column="7">twi_error</name> = <name PREFIX:line="396" PREFIX:column="19">TW_MT_SLA_NACK</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="397" PREFIX:column="7">twi_stop</name><argument_list PREFIX:line="397" PREFIX:column="15">()</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="398" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="399" PREFIX:column="5">case <expr><name PREFIX:line="399" PREFIX:column="10">TW_MT_DATA_NACK</name></expr>: <comment type="line" PREFIX:line="399" PREFIX:column="27">// data sent, nack received</comment>
      <expr_stmt><expr><name PREFIX:line="400" PREFIX:column="7">twi_error</name> = <name PREFIX:line="400" PREFIX:column="19">TW_MT_DATA_NACK</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="401" PREFIX:column="7">twi_stop</name><argument_list PREFIX:line="401" PREFIX:column="15">()</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="402" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="403" PREFIX:column="5">case <expr><name PREFIX:line="403" PREFIX:column="10">TW_MT_ARB_LOST</name></expr>: <comment type="line" PREFIX:line="403" PREFIX:column="26">// lost bus arbitration</comment>
      <expr_stmt><expr><name PREFIX:line="404" PREFIX:column="7">twi_error</name> = <name PREFIX:line="404" PREFIX:column="19">TW_MT_ARB_LOST</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="405" PREFIX:column="7">twi_releaseBus</name><argument_list PREFIX:line="405" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="406" PREFIX:column="7">break;</break>

    <comment type="line" PREFIX:line="408" PREFIX:column="5">// Master Receiver</comment>
    </case><case PREFIX:line="409" PREFIX:column="5">case <expr><name PREFIX:line="409" PREFIX:column="10">TW_MR_DATA_ACK</name></expr>: <comment type="line" PREFIX:line="409" PREFIX:column="26">// data received, ack sent</comment>
      <comment type="line" PREFIX:line="410" PREFIX:column="7">// put byte into buffer</comment>
      <expr_stmt><expr><name><name PREFIX:line="411" PREFIX:column="7">twi_masterBuffer</name><index PREFIX:line="411" PREFIX:column="23">[<expr><name PREFIX:line="411" PREFIX:column="24">twi_masterBufferIndex</name>++</expr>]</index></name> = <name PREFIX:line="411" PREFIX:column="51">TWDR</name></expr>;</expr_stmt>
    </case><case PREFIX:line="412" PREFIX:column="5">case <expr><name PREFIX:line="412" PREFIX:column="10">TW_MR_SLA_ACK</name></expr>:  <comment type="line" PREFIX:line="412" PREFIX:column="26">// address sent, ack received</comment>
      <comment type="line" PREFIX:line="413" PREFIX:column="7">// ack if more bytes are expected, otherwise nack</comment>
      <if PREFIX:line="414" PREFIX:column="7">if<condition PREFIX:line="414" PREFIX:column="9">(<expr><name PREFIX:line="414" PREFIX:column="10">twi_masterBufferIndex</name> &lt; <name PREFIX:line="414" PREFIX:column="34">twi_masterBufferLength</name></expr>)</condition><then><block PREFIX:line="414" PREFIX:column="57">{
        <expr_stmt><expr><call><name PREFIX:line="415" PREFIX:column="9">twi_reply</name><argument_list PREFIX:line="415" PREFIX:column="18">(<argument><expr PREFIX:line="415" PREFIX:column="19">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else PREFIX:line="416" PREFIX:column="8">else<block PREFIX:line="416" PREFIX:column="12">{
        <expr_stmt><expr><call><name PREFIX:line="417" PREFIX:column="9">twi_reply</name><argument_list PREFIX:line="417" PREFIX:column="18">(<argument><expr PREFIX:line="417" PREFIX:column="19">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <break PREFIX:line="419" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="420" PREFIX:column="5">case <expr><name PREFIX:line="420" PREFIX:column="10">TW_MR_DATA_NACK</name></expr>: <comment type="line" PREFIX:line="420" PREFIX:column="27">// data received, nack sent</comment>
      <comment type="line" PREFIX:line="421" PREFIX:column="7">// put final byte into buffer</comment>
      <expr_stmt><expr><name><name PREFIX:line="422" PREFIX:column="7">twi_masterBuffer</name><index PREFIX:line="422" PREFIX:column="23">[<expr><name PREFIX:line="422" PREFIX:column="24">twi_masterBufferIndex</name>++</expr>]</index></name> = <name PREFIX:line="422" PREFIX:column="51">TWDR</name></expr>;</expr_stmt>
	<if PREFIX:line="423" PREFIX:column="9">if <condition PREFIX:line="423" PREFIX:column="12">(<expr><name PREFIX:line="423" PREFIX:column="13">twi_sendStop</name></expr>)</condition><then PREFIX:line="423" PREFIX:column="26">
          <expr_stmt><expr><call><name PREFIX:line="424" PREFIX:column="11">twi_stop</name><argument_list PREFIX:line="424" PREFIX:column="19">()</argument_list></call></expr>;</expr_stmt></then>
	<else PREFIX:line="425" PREFIX:column="9">else <block PREFIX:line="425" PREFIX:column="14">{
	  <expr_stmt><expr><name PREFIX:line="426" PREFIX:column="11">twi_inRepStart</name> = <name PREFIX:line="426" PREFIX:column="28">true</name></expr>;</expr_stmt>	<comment type="line" PREFIX:line="426" PREFIX:column="41">// we're gonna send the START</comment>
	  <comment type="line" PREFIX:line="427" PREFIX:column="11">// don't enable the interrupt. We'll generate the start, but we </comment>
	  <comment type="line" PREFIX:line="428" PREFIX:column="11">// avoid handling the interrupt until we're in the next transaction,</comment>
	  <comment type="line" PREFIX:line="429" PREFIX:column="11">// at the point where we would normally issue the start.</comment>
	  <expr_stmt><expr><name PREFIX:line="430" PREFIX:column="11">TWCR</name> = <call><name PREFIX:line="430" PREFIX:column="18">_BV</name><argument_list PREFIX:line="430" PREFIX:column="21">(<argument><expr><name PREFIX:line="430" PREFIX:column="22">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="430" PREFIX:column="31">_BV</name><argument_list PREFIX:line="430" PREFIX:column="34">(<argument><expr><name PREFIX:line="430" PREFIX:column="35">TWSTA</name></expr></argument>)</argument_list></call>| <call><name PREFIX:line="430" PREFIX:column="43">_BV</name><argument_list PREFIX:line="430" PREFIX:column="46">(<argument><expr><name PREFIX:line="430" PREFIX:column="47">TWEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	  <expr_stmt><expr><name PREFIX:line="431" PREFIX:column="11">twi_state</name> = <name PREFIX:line="431" PREFIX:column="23">TWI_READY</name></expr>;</expr_stmt>
	}</block></else></if>    
	<break PREFIX:line="433" PREFIX:column="9">break;</break>
    </case><case PREFIX:line="434" PREFIX:column="5">case <expr><name PREFIX:line="434" PREFIX:column="10">TW_MR_SLA_NACK</name></expr>: <comment type="line" PREFIX:line="434" PREFIX:column="26">// address sent, nack received</comment>
      <expr_stmt><expr><call><name PREFIX:line="435" PREFIX:column="7">twi_stop</name><argument_list PREFIX:line="435" PREFIX:column="15">()</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="436" PREFIX:column="7">break;</break>
    <comment type="line" PREFIX:line="437" PREFIX:column="5">// TW_MR_ARB_LOST handled by TW_MT_ARB_LOST case</comment>

    <comment type="line" PREFIX:line="439" PREFIX:column="5">// Slave Receiver</comment>
    </case><case PREFIX:line="440" PREFIX:column="5">case <expr><name PREFIX:line="440" PREFIX:column="10">TW_SR_SLA_ACK</name></expr>:   <comment type="line" PREFIX:line="440" PREFIX:column="27">// addressed, returned ack</comment>
    </case><case PREFIX:line="441" PREFIX:column="5">case <expr><name PREFIX:line="441" PREFIX:column="10">TW_SR_GCALL_ACK</name></expr>: <comment type="line" PREFIX:line="441" PREFIX:column="27">// addressed generally, returned ack</comment>
    </case><case PREFIX:line="442" PREFIX:column="5">case <expr><name PREFIX:line="442" PREFIX:column="10">TW_SR_ARB_LOST_SLA_ACK</name></expr>:   <comment type="line" PREFIX:line="442" PREFIX:column="36">// lost arbitration, returned ack</comment>
    </case><case PREFIX:line="443" PREFIX:column="5">case <expr><name PREFIX:line="443" PREFIX:column="10">TW_SR_ARB_LOST_GCALL_ACK</name></expr>: <comment type="line" PREFIX:line="443" PREFIX:column="36">// lost arbitration, returned ack</comment>
      <comment type="line" PREFIX:line="444" PREFIX:column="7">// enter slave receiver mode</comment>
      <expr_stmt><expr><name PREFIX:line="445" PREFIX:column="7">twi_state</name> = <name PREFIX:line="445" PREFIX:column="19">TWI_SRX</name></expr>;</expr_stmt>
      <comment type="line" PREFIX:line="446" PREFIX:column="7">// indicate that rx buffer can be overwritten and ack</comment>
      <expr_stmt><expr><name PREFIX:line="447" PREFIX:column="7">twi_rxBufferIndex</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="448" PREFIX:column="7">twi_reply</name><argument_list PREFIX:line="448" PREFIX:column="16">(<argument><expr PREFIX:line="448" PREFIX:column="17">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="449" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="450" PREFIX:column="5">case <expr><name PREFIX:line="450" PREFIX:column="10">TW_SR_DATA_ACK</name></expr>:       <comment type="line" PREFIX:line="450" PREFIX:column="32">// data received, returned ack</comment>
    </case><case PREFIX:line="451" PREFIX:column="5">case <expr><name PREFIX:line="451" PREFIX:column="10">TW_SR_GCALL_DATA_ACK</name></expr>: <comment type="line" PREFIX:line="451" PREFIX:column="32">// data received generally, returned ack</comment>
      <comment type="line" PREFIX:line="452" PREFIX:column="7">// if there is still room in the rx buffer</comment>
      <if PREFIX:line="453" PREFIX:column="7">if<condition PREFIX:line="453" PREFIX:column="9">(<expr><name PREFIX:line="453" PREFIX:column="10">twi_rxBufferIndex</name> &lt; <name PREFIX:line="453" PREFIX:column="30">TWI_BUFFER_LENGTH</name></expr>)</condition><then><block PREFIX:line="453" PREFIX:column="48">{
        <comment type="line" PREFIX:line="454" PREFIX:column="9">// put byte in buffer and ack</comment>
        <expr_stmt><expr><name><name PREFIX:line="455" PREFIX:column="9">twi_rxBuffer</name><index PREFIX:line="455" PREFIX:column="21">[<expr><name PREFIX:line="455" PREFIX:column="22">twi_rxBufferIndex</name>++</expr>]</index></name> = <name PREFIX:line="455" PREFIX:column="45">TWDR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name PREFIX:line="456" PREFIX:column="9">twi_reply</name><argument_list PREFIX:line="456" PREFIX:column="18">(<argument><expr PREFIX:line="456" PREFIX:column="19">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else PREFIX:line="457" PREFIX:column="8">else<block PREFIX:line="457" PREFIX:column="12">{
        <comment type="line" PREFIX:line="458" PREFIX:column="9">// otherwise nack</comment>
        <expr_stmt><expr><call><name PREFIX:line="459" PREFIX:column="9">twi_reply</name><argument_list PREFIX:line="459" PREFIX:column="18">(<argument><expr PREFIX:line="459" PREFIX:column="19">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <break PREFIX:line="461" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="462" PREFIX:column="5">case <expr><name PREFIX:line="462" PREFIX:column="10">TW_SR_STOP</name></expr>: <comment type="line" PREFIX:line="462" PREFIX:column="22">// stop or repeated start condition received</comment>
      <comment type="line" PREFIX:line="463" PREFIX:column="7">// put a null char after data if there's room</comment>
      <if PREFIX:line="464" PREFIX:column="7">if<condition PREFIX:line="464" PREFIX:column="9">(<expr><name PREFIX:line="464" PREFIX:column="10">twi_rxBufferIndex</name> &lt; <name PREFIX:line="464" PREFIX:column="30">TWI_BUFFER_LENGTH</name></expr>)</condition><then><block PREFIX:line="464" PREFIX:column="48">{
        <expr_stmt><expr><name><name PREFIX:line="465" PREFIX:column="9">twi_rxBuffer</name><index PREFIX:line="465" PREFIX:column="21">[<expr><name PREFIX:line="465" PREFIX:column="22">twi_rxBufferIndex</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
      }</block></then></if>
      <comment type="line" PREFIX:line="467" PREFIX:column="7">// sends ack and stops interface for clock stretching</comment>
      <expr_stmt><expr><call><name PREFIX:line="468" PREFIX:column="7">twi_stop</name><argument_list PREFIX:line="468" PREFIX:column="15">()</argument_list></call></expr>;</expr_stmt>
      <comment type="line" PREFIX:line="469" PREFIX:column="7">// callback to user defined callback</comment>
      <expr_stmt><expr><call><name PREFIX:line="470" PREFIX:column="7">twi_onSlaveReceive</name><argument_list PREFIX:line="470" PREFIX:column="25">(<argument><expr><name PREFIX:line="470" PREFIX:column="26">twi_rxBuffer</name></expr></argument>, <argument><expr><name PREFIX:line="470" PREFIX:column="40">twi_rxBufferIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line" PREFIX:line="471" PREFIX:column="7">// since we submit rx buffer to "wire" library, we can reset it</comment>
      <expr_stmt><expr><name PREFIX:line="472" PREFIX:column="7">twi_rxBufferIndex</name> = 0</expr>;</expr_stmt>
      <comment type="line" PREFIX:line="473" PREFIX:column="7">// ack future responses and leave slave receiver state</comment>
      <expr_stmt><expr><call><name PREFIX:line="474" PREFIX:column="7">twi_releaseBus</name><argument_list PREFIX:line="474" PREFIX:column="21">()</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="475" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="476" PREFIX:column="5">case <expr><name PREFIX:line="476" PREFIX:column="10">TW_SR_DATA_NACK</name></expr>:       <comment type="line" PREFIX:line="476" PREFIX:column="33">// data received, returned nack</comment>
    </case><case PREFIX:line="477" PREFIX:column="5">case <expr><name PREFIX:line="477" PREFIX:column="10">TW_SR_GCALL_DATA_NACK</name></expr>: <comment type="line" PREFIX:line="477" PREFIX:column="33">// data received generally, returned nack</comment>
      <comment type="line" PREFIX:line="478" PREFIX:column="7">// nack back at master</comment>
      <expr_stmt><expr><call><name PREFIX:line="479" PREFIX:column="7">twi_reply</name><argument_list PREFIX:line="479" PREFIX:column="16">(<argument><expr PREFIX:line="479" PREFIX:column="17">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="480" PREFIX:column="7">break;</break>
    
    <comment type="line" PREFIX:line="482" PREFIX:column="5">// Slave Transmitter</comment>
    </case><case PREFIX:line="483" PREFIX:column="5">case <expr><name PREFIX:line="483" PREFIX:column="10">TW_ST_SLA_ACK</name></expr>:          <comment type="line" PREFIX:line="483" PREFIX:column="34">// addressed, returned ack</comment>
    </case><case PREFIX:line="484" PREFIX:column="5">case <expr><name PREFIX:line="484" PREFIX:column="10">TW_ST_ARB_LOST_SLA_ACK</name></expr>: <comment type="line" PREFIX:line="484" PREFIX:column="34">// arbitration lost, returned ack</comment>
      <comment type="line" PREFIX:line="485" PREFIX:column="7">// enter slave transmitter mode</comment>
      <expr_stmt><expr><name PREFIX:line="486" PREFIX:column="7">twi_state</name> = <name PREFIX:line="486" PREFIX:column="19">TWI_STX</name></expr>;</expr_stmt>
      <comment type="line" PREFIX:line="487" PREFIX:column="7">// ready the tx buffer index for iteration</comment>
      <expr_stmt><expr><name PREFIX:line="488" PREFIX:column="7">twi_txBufferIndex</name> = 0</expr>;</expr_stmt>
      <comment type="line" PREFIX:line="489" PREFIX:column="7">// set tx buffer length to be zero, to verify if user changes it</comment>
      <expr_stmt><expr><name PREFIX:line="490" PREFIX:column="7">twi_txBufferLength</name> = 0</expr>;</expr_stmt>
      <comment type="line" PREFIX:line="491" PREFIX:column="7">// request for txBuffer to be filled and length to be set</comment>
      <comment type="line" PREFIX:line="492" PREFIX:column="7">// note: user must call twi_transmit(bytes, length) to do this</comment>
      <expr_stmt><expr><call><name PREFIX:line="493" PREFIX:column="7">twi_onSlaveTransmit</name><argument_list PREFIX:line="493" PREFIX:column="26">()</argument_list></call></expr>;</expr_stmt>
      <comment type="line" PREFIX:line="494" PREFIX:column="7">// if they didn't change buffer &amp; length, initialize it</comment>
      <if PREFIX:line="495" PREFIX:column="7">if<condition PREFIX:line="495" PREFIX:column="9">(<expr PREFIX:line="495" PREFIX:column="10">0 == <name PREFIX:line="495" PREFIX:column="15">twi_txBufferLength</name></expr>)</condition><then><block PREFIX:line="495" PREFIX:column="34">{
        <expr_stmt><expr><name PREFIX:line="496" PREFIX:column="9">twi_txBufferLength</name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name PREFIX:line="497" PREFIX:column="9">twi_txBuffer</name><index PREFIX:line="497" PREFIX:column="21">[<expr PREFIX:line="497" PREFIX:column="22">0</expr>]</index></name> = 0x00</expr>;</expr_stmt>
      }</block></then></if>
      <comment type="line" PREFIX:line="499" PREFIX:column="7">// transmit first byte from buffer, fall</comment>
    </case><case PREFIX:line="500" PREFIX:column="5">case <expr><name PREFIX:line="500" PREFIX:column="10">TW_ST_DATA_ACK</name></expr>: <comment type="line" PREFIX:line="500" PREFIX:column="26">// byte sent, ack returned</comment>
      <comment type="line" PREFIX:line="501" PREFIX:column="7">// copy data to output register</comment>
      <expr_stmt><expr><name PREFIX:line="502" PREFIX:column="7">TWDR</name> = <name><name PREFIX:line="502" PREFIX:column="14">twi_txBuffer</name><index PREFIX:line="502" PREFIX:column="26">[<expr><name PREFIX:line="502" PREFIX:column="27">twi_txBufferIndex</name>++</expr>]</index></name></expr>;</expr_stmt>
      <comment type="line" PREFIX:line="503" PREFIX:column="7">// if there is more to send, ack, otherwise nack</comment>
      <if PREFIX:line="504" PREFIX:column="7">if<condition PREFIX:line="504" PREFIX:column="9">(<expr><name PREFIX:line="504" PREFIX:column="10">twi_txBufferIndex</name> &lt; <name PREFIX:line="504" PREFIX:column="30">twi_txBufferLength</name></expr>)</condition><then><block PREFIX:line="504" PREFIX:column="49">{
        <expr_stmt><expr><call><name PREFIX:line="505" PREFIX:column="9">twi_reply</name><argument_list PREFIX:line="505" PREFIX:column="18">(<argument><expr PREFIX:line="505" PREFIX:column="19">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else PREFIX:line="506" PREFIX:column="8">else<block PREFIX:line="506" PREFIX:column="12">{
        <expr_stmt><expr><call><name PREFIX:line="507" PREFIX:column="9">twi_reply</name><argument_list PREFIX:line="507" PREFIX:column="18">(<argument><expr PREFIX:line="507" PREFIX:column="19">0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <break PREFIX:line="509" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="510" PREFIX:column="5">case <expr><name PREFIX:line="510" PREFIX:column="10">TW_ST_DATA_NACK</name></expr>: <comment type="line" PREFIX:line="510" PREFIX:column="27">// received nack, we are done </comment>
    </case><case PREFIX:line="511" PREFIX:column="5">case <expr><name PREFIX:line="511" PREFIX:column="10">TW_ST_LAST_DATA</name></expr>: <comment type="line" PREFIX:line="511" PREFIX:column="27">// received ack, but we are done already!</comment>
      <comment type="line" PREFIX:line="512" PREFIX:column="7">// ack future responses</comment>
      <expr_stmt><expr><call><name PREFIX:line="513" PREFIX:column="7">twi_reply</name><argument_list PREFIX:line="513" PREFIX:column="16">(<argument><expr PREFIX:line="513" PREFIX:column="17">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line" PREFIX:line="514" PREFIX:column="7">// leave slave receiver state</comment>
      <expr_stmt><expr><name PREFIX:line="515" PREFIX:column="7">twi_state</name> = <name PREFIX:line="515" PREFIX:column="19">TWI_READY</name></expr>;</expr_stmt>
      <break PREFIX:line="516" PREFIX:column="7">break;</break>

    <comment type="line" PREFIX:line="518" PREFIX:column="5">// All</comment>
    </case><case PREFIX:line="519" PREFIX:column="5">case <expr><name PREFIX:line="519" PREFIX:column="10">TW_NO_INFO</name></expr>:   <comment type="line" PREFIX:line="519" PREFIX:column="24">// no state information</comment>
      <break PREFIX:line="520" PREFIX:column="7">break;</break>
    </case><case PREFIX:line="521" PREFIX:column="5">case <expr><name PREFIX:line="521" PREFIX:column="10">TW_BUS_ERROR</name></expr>: <comment type="line" PREFIX:line="521" PREFIX:column="24">// bus error, illegal stop/start</comment>
      <expr_stmt><expr><name PREFIX:line="522" PREFIX:column="7">twi_error</name> = <name PREFIX:line="522" PREFIX:column="19">TW_BUS_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name PREFIX:line="523" PREFIX:column="7">twi_stop</name><argument_list PREFIX:line="523" PREFIX:column="15">()</argument_list></call></expr>;</expr_stmt>
      <break PREFIX:line="524" PREFIX:column="7">break;</break>
  </case>}</block></switch>
}</block>

</unit>
