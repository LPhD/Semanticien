<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/libraries/U8glib/utility/u8g_com_i2c.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  
  u8g_com_i2c.c

  generic i2c interface

  Universal 8bit Graphics Library
  
  Copyright (c) 2011, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  
*/</comment>

<cpp:include PREFIX:line="38" PREFIX:column="1">#<cpp:directive PREFIX:line="38" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="38" PREFIX:column="10">"u8g.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier PREFIX:line="40" PREFIX:column="1">static</specifier> <name PREFIX:line="40" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="40" PREFIX:column="16">u8g_i2c_err_code</name></decl>;</decl_stmt>

<comment type="block" PREFIX:line="42" PREFIX:column="1">/*
  position values
    1: start condition
    2: sla transfer
*/</comment>
<decl_stmt><decl><type><specifier PREFIX:line="47" PREFIX:column="1">static</specifier> <name PREFIX:line="47" PREFIX:column="8">uint8_t</name></type> <name PREFIX:line="47" PREFIX:column="16">u8g_i2c_err_pos</name></decl>;</decl_stmt>


<function><type><name PREFIX:line="50" PREFIX:column="1">void</name></type> <name PREFIX:line="50" PREFIX:column="6">u8g_i2c_clear_error</name><parameter_list PREFIX:line="50" PREFIX:column="25">(<param><decl><type><name PREFIX:line="50" PREFIX:column="26">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="51" PREFIX:column="1">{
  <expr_stmt><expr><name PREFIX:line="52" PREFIX:column="3">u8g_i2c_err_code</name> = <name PREFIX:line="52" PREFIX:column="22">U8G_I2C_ERR_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="53" PREFIX:column="3">u8g_i2c_err_pos</name> = 0</expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="56" PREFIX:column="1">uint8_t</name></type>  <name PREFIX:line="56" PREFIX:column="10">u8g_i2c_get_error</name><parameter_list PREFIX:line="56" PREFIX:column="27">(<param><decl><type><name PREFIX:line="56" PREFIX:column="28">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="57" PREFIX:column="1">{
  <return PREFIX:line="58" PREFIX:column="3">return <expr><name PREFIX:line="58" PREFIX:column="10">u8g_i2c_err_code</name></expr>;</return>
}</block></function>

<function><type><name PREFIX:line="61" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="61" PREFIX:column="9">u8g_i2c_get_err_pos</name><parameter_list PREFIX:line="61" PREFIX:column="28">(<param><decl><type><name PREFIX:line="61" PREFIX:column="29">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="62" PREFIX:column="1">{
  <return PREFIX:line="63" PREFIX:column="3">return <expr><name PREFIX:line="63" PREFIX:column="10">u8g_i2c_err_pos</name></expr>;</return>
}</block></function>

<function><type><specifier PREFIX:line="66" PREFIX:column="1">static</specifier> <name PREFIX:line="66" PREFIX:column="8">void</name></type> <name PREFIX:line="66" PREFIX:column="13">u8g_i2c_set_error</name><parameter_list PREFIX:line="66" PREFIX:column="30">(<param><decl><type><name PREFIX:line="66" PREFIX:column="31">uint8_t</name></type> <name PREFIX:line="66" PREFIX:column="39">code</name></decl></param>, <param><decl><type><name PREFIX:line="66" PREFIX:column="45">uint8_t</name></type> <name PREFIX:line="66" PREFIX:column="53">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="67" PREFIX:column="1">{
  <if PREFIX:line="68" PREFIX:column="3">if <condition PREFIX:line="68" PREFIX:column="6">( <expr><name PREFIX:line="68" PREFIX:column="8">u8g_i2c_err_code</name> &gt; 0</expr> )</condition><then PREFIX:line="68" PREFIX:column="30">
    <return PREFIX:line="69" PREFIX:column="5">return;</return></then></if>
  <expr_stmt><expr><name PREFIX:line="70" PREFIX:column="3">u8g_i2c_err_code</name> |= <name PREFIX:line="70" PREFIX:column="23">code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="71" PREFIX:column="3">u8g_i2c_err_pos</name> = <name PREFIX:line="71" PREFIX:column="21">pos</name></expr>;</expr_stmt>
}</block></function>



<cpp:if PREFIX:line="76" PREFIX:column="1">#<cpp:directive PREFIX:line="76" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="76" PREFIX:column="5">defined</name><argument_list PREFIX:line="76" PREFIX:column="12">(<argument><expr><name PREFIX:line="76" PREFIX:column="13">__AVR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="77" PREFIX:column="1">#<cpp:directive PREFIX:line="77" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="77" PREFIX:column="9">U8G_ATMEGA_HW_TWI</name></cpp:macro></cpp:define>

<comment type="block" PREFIX:line="79" PREFIX:column="1">/* remove the definition for attiny */</comment>
<cpp:if PREFIX:line="80" PREFIX:column="1">#<cpp:directive PREFIX:line="80" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="80" PREFIX:column="5">__AVR_ARCH__</name> == 2</expr></cpp:if>
<cpp:undef PREFIX:line="81" PREFIX:column="1">#<cpp:directive PREFIX:line="81" PREFIX:column="2">undef</cpp:directive> <name PREFIX:line="81" PREFIX:column="8">U8G_ATMEGA_HW_TWI</name></cpp:undef>
<cpp:endif PREFIX:line="82" PREFIX:column="1">#<cpp:directive PREFIX:line="82" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:if PREFIX:line="83" PREFIX:column="1">#<cpp:directive PREFIX:line="83" PREFIX:column="2">if</cpp:directive> <expr><name PREFIX:line="83" PREFIX:column="5">__AVR_ARCH__</name> == 25</expr></cpp:if>
<cpp:undef PREFIX:line="84" PREFIX:column="1">#<cpp:directive PREFIX:line="84" PREFIX:column="2">undef</cpp:directive> <name PREFIX:line="84" PREFIX:column="8">U8G_ATMEGA_HW_TWI</name></cpp:undef>
<cpp:endif PREFIX:line="85" PREFIX:column="1">#<cpp:directive PREFIX:line="85" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif PREFIX:line="86" PREFIX:column="1">#<cpp:directive PREFIX:line="86" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:if PREFIX:line="88" PREFIX:column="1">#<cpp:directive PREFIX:line="88" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="88" PREFIX:column="5">defined</name><argument_list PREFIX:line="88" PREFIX:column="12">(<argument><expr><name PREFIX:line="88" PREFIX:column="13">U8G_ATMEGA_HW_TWI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include PREFIX:line="90" PREFIX:column="1">#<cpp:directive PREFIX:line="90" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="90" PREFIX:column="10">&lt;avr/io.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="91" PREFIX:column="1">#<cpp:directive PREFIX:line="91" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="91" PREFIX:column="10">&lt;util/twi.h&gt;</cpp:file></cpp:include>



<function><type><name PREFIX:line="95" PREFIX:column="1">void</name></type> <name PREFIX:line="95" PREFIX:column="6">u8g_i2c_init</name><parameter_list PREFIX:line="95" PREFIX:column="18">(<param><decl><type><name PREFIX:line="95" PREFIX:column="19">uint8_t</name></type> <name PREFIX:line="95" PREFIX:column="27">options</name></decl></param>)</parameter_list>
<block PREFIX:line="96" PREFIX:column="1">{
  <comment type="block" PREFIX:line="97" PREFIX:column="3">/*
  TWBR: bit rate register
  TWSR: status register (contains preselector bits)

  prescalar
    0		1
    1		4
    2		16
    3		64

  f = F_CPU/(16+2*TWBR*prescalar)
  
  F_CPU = 16MHz
    TWBR = 152;
    TWSR = 0;
	--&gt; 50KHz

    TWBR = 72;
    TWSR = 0;
	--&gt; 100KHz

    F_CPU/(2*100000)-8  --&gt; calculate TWBR value for 100KHz
*/</comment>
  <expr_stmt><expr><name PREFIX:line="120" PREFIX:column="3">TWSR</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="121" PREFIX:column="3">TWBR</name> = <name PREFIX:line="121" PREFIX:column="10">F_CPU</name>/(2*100000)-8</expr>;</expr_stmt>
  <expr_stmt><expr><call><name PREFIX:line="122" PREFIX:column="3">u8g_i2c_clear_error</name><argument_list PREFIX:line="122" PREFIX:column="22">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="125" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="125" PREFIX:column="9">u8g_i2c_wait</name><parameter_list PREFIX:line="125" PREFIX:column="21">(<param><decl><type><name PREFIX:line="125" PREFIX:column="22">uint8_t</name></type> <name PREFIX:line="125" PREFIX:column="30">mask</name></decl></param>, <param><decl><type><name PREFIX:line="125" PREFIX:column="36">uint8_t</name></type> <name PREFIX:line="125" PREFIX:column="44">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="126" PREFIX:column="1">{
  <decl_stmt><decl><type><specifier PREFIX:line="127" PREFIX:column="3">volatile</specifier> <name PREFIX:line="127" PREFIX:column="12">uint16_t</name></type> <name PREFIX:line="127" PREFIX:column="21">cnt</name> <init PREFIX:line="127" PREFIX:column="25">= <expr PREFIX:line="127" PREFIX:column="27">2000</expr></init></decl>;</decl_stmt>	<comment type="block" PREFIX:line="127" PREFIX:column="33">/* timout value should be &gt; 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */</comment>
  <while PREFIX:line="128" PREFIX:column="3">while<condition PREFIX:line="128" PREFIX:column="8">( <expr PREFIX:line="128" PREFIX:column="10">!(<name PREFIX:line="128" PREFIX:column="12">TWCR</name> &amp; <name PREFIX:line="128" PREFIX:column="19">mask</name>)</expr> )</condition>
  <block PREFIX:line="129" PREFIX:column="3">{
      <if PREFIX:line="130" PREFIX:column="7">if <condition PREFIX:line="130" PREFIX:column="10">( <expr><name PREFIX:line="130" PREFIX:column="12">cnt</name> == 0</expr> )</condition><then PREFIX:line="130" PREFIX:column="22">
      <block PREFIX:line="131" PREFIX:column="7">{
	<expr_stmt><expr><call><name PREFIX:line="132" PREFIX:column="9">u8g_i2c_set_error</name><argument_list PREFIX:line="132" PREFIX:column="26">(<argument><expr><name PREFIX:line="132" PREFIX:column="27">U8G_I2C_ERR_TIMEOUT</name></expr></argument>, <argument><expr><name PREFIX:line="132" PREFIX:column="48">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return PREFIX:line="133" PREFIX:column="9">return <expr PREFIX:line="133" PREFIX:column="16">0</expr>;</return> <comment type="block" PREFIX:line="133" PREFIX:column="19">/* error */</comment>
      }</block></then></if>
      <expr_stmt><expr><name PREFIX:line="135" PREFIX:column="7">cnt</name>--</expr>;</expr_stmt>
    }</block></while>
  <return PREFIX:line="137" PREFIX:column="3">return <expr PREFIX:line="137" PREFIX:column="10">1</expr>;</return>	<comment type="block" PREFIX:line="137" PREFIX:column="17">/* all ok */</comment>
}</block></function>

<comment type="block" PREFIX:line="140" PREFIX:column="1">/* sla includes all 8 bits (with r/w bit), assums master transmit */</comment>
<function><type><name PREFIX:line="141" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="141" PREFIX:column="9">u8g_i2c_start</name><parameter_list PREFIX:line="141" PREFIX:column="22">(<param><decl><type><name PREFIX:line="141" PREFIX:column="23">uint8_t</name></type> <name PREFIX:line="141" PREFIX:column="31">sla</name></decl></param>)</parameter_list>
<block PREFIX:line="142" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="143" PREFIX:column="3">register</name> <name PREFIX:line="143" PREFIX:column="12">uint8_t</name></type> <name PREFIX:line="143" PREFIX:column="20">status</name></decl>;</decl_stmt>
  
  <comment type="block" PREFIX:line="145" PREFIX:column="3">/* send start */</comment>
  <expr_stmt><expr><name PREFIX:line="146" PREFIX:column="3">TWCR</name> = <call><name PREFIX:line="146" PREFIX:column="10">_BV</name><argument_list PREFIX:line="146" PREFIX:column="13">(<argument><expr><name PREFIX:line="146" PREFIX:column="14">TWINT</name></expr></argument>)</argument_list></call> |  <call><name PREFIX:line="146" PREFIX:column="24">_BV</name><argument_list PREFIX:line="146" PREFIX:column="27">(<argument><expr><name PREFIX:line="146" PREFIX:column="28">TWSTA</name></expr></argument>)</argument_list></call>  |  <call><name PREFIX:line="146" PREFIX:column="39">_BV</name><argument_list PREFIX:line="146" PREFIX:column="42">(<argument><expr><name PREFIX:line="146" PREFIX:column="43">TWEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
  <comment type="block" PREFIX:line="148" PREFIX:column="3">/* wait */</comment>
  <if PREFIX:line="149" PREFIX:column="3">if <condition PREFIX:line="149" PREFIX:column="6">( <expr><call><name PREFIX:line="149" PREFIX:column="8">u8g_i2c_wait</name><argument_list PREFIX:line="149" PREFIX:column="20">(<argument><expr><call><name PREFIX:line="149" PREFIX:column="21">_BV</name><argument_list PREFIX:line="149" PREFIX:column="24">(<argument><expr><name PREFIX:line="149" PREFIX:column="25">TWINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr PREFIX:line="149" PREFIX:column="33">1</expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="149" PREFIX:column="42">
    <return PREFIX:line="150" PREFIX:column="5">return <expr PREFIX:line="150" PREFIX:column="12">0</expr>;</return></then></if>
  
  <expr_stmt><expr><name PREFIX:line="152" PREFIX:column="3">status</name> = <name PREFIX:line="152" PREFIX:column="12">TW_STATUS</name></expr>;</expr_stmt>
 
  <comment type="block" PREFIX:line="154" PREFIX:column="3">/* check status after start */</comment>  
  <if PREFIX:line="155" PREFIX:column="3">if <condition PREFIX:line="155" PREFIX:column="6">( <expr><name PREFIX:line="155" PREFIX:column="8">status</name> != <name PREFIX:line="155" PREFIX:column="18">TW_START</name> &amp;&amp; <name PREFIX:line="155" PREFIX:column="30">status</name> != <name PREFIX:line="155" PREFIX:column="40">TW_REP_START</name></expr> )</condition><then PREFIX:line="155" PREFIX:column="54">
  <block PREFIX:line="156" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="157" PREFIX:column="5">u8g_i2c_set_error</name><argument_list PREFIX:line="157" PREFIX:column="22">(<argument><expr><name PREFIX:line="157" PREFIX:column="23">U8G_I2C_ERR_BUS</name></expr></argument>, <argument><expr PREFIX:line="157" PREFIX:column="40">1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return PREFIX:line="158" PREFIX:column="5">return <expr PREFIX:line="158" PREFIX:column="12">0</expr>;</return>
  }</block></then></if>

  <comment type="block" PREFIX:line="161" PREFIX:column="3">/* set slave address */</comment>  
  <expr_stmt><expr><name PREFIX:line="162" PREFIX:column="3">TWDR</name> = <name PREFIX:line="162" PREFIX:column="10">sla</name></expr>;</expr_stmt>
  
  <comment type="block" PREFIX:line="164" PREFIX:column="3">/* enable sla transfer */</comment>
  <expr_stmt><expr><name PREFIX:line="165" PREFIX:column="3">TWCR</name> = <call><name PREFIX:line="165" PREFIX:column="10">_BV</name><argument_list PREFIX:line="165" PREFIX:column="13">(<argument><expr><name PREFIX:line="165" PREFIX:column="14">TWINT</name></expr></argument>)</argument_list></call>  |  <call><name PREFIX:line="165" PREFIX:column="25">_BV</name><argument_list PREFIX:line="165" PREFIX:column="28">(<argument><expr><name PREFIX:line="165" PREFIX:column="29">TWEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" PREFIX:line="167" PREFIX:column="3">/* wait */</comment>
  <if PREFIX:line="168" PREFIX:column="3">if <condition PREFIX:line="168" PREFIX:column="6">( <expr><call><name PREFIX:line="168" PREFIX:column="8">u8g_i2c_wait</name><argument_list PREFIX:line="168" PREFIX:column="20">(<argument><expr><call><name PREFIX:line="168" PREFIX:column="21">_BV</name><argument_list PREFIX:line="168" PREFIX:column="24">(<argument><expr><name PREFIX:line="168" PREFIX:column="25">TWINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr PREFIX:line="168" PREFIX:column="33">2</expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="168" PREFIX:column="42">
    <return PREFIX:line="169" PREFIX:column="5">return <expr PREFIX:line="169" PREFIX:column="12">0</expr>;</return></then></if>
  <expr_stmt><expr><name PREFIX:line="170" PREFIX:column="3">status</name> = <name PREFIX:line="170" PREFIX:column="12">TW_STATUS</name></expr>;</expr_stmt>

  <comment type="block" PREFIX:line="172" PREFIX:column="3">/* check status after sla */</comment>  
  <if PREFIX:line="173" PREFIX:column="3">if <condition PREFIX:line="173" PREFIX:column="6">( <expr><name PREFIX:line="173" PREFIX:column="8">status</name> != <name PREFIX:line="173" PREFIX:column="18">TW_MT_SLA_ACK</name></expr> )</condition><then PREFIX:line="173" PREFIX:column="33">
  <block PREFIX:line="174" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="175" PREFIX:column="5">u8g_i2c_set_error</name><argument_list PREFIX:line="175" PREFIX:column="22">(<argument><expr><name PREFIX:line="175" PREFIX:column="23">U8G_I2C_ERR_BUS</name></expr></argument>, <argument><expr PREFIX:line="175" PREFIX:column="40">2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return PREFIX:line="176" PREFIX:column="5">return <expr PREFIX:line="176" PREFIX:column="12">0</expr>;</return>
  }</block></then></if>

   <return PREFIX:line="179" PREFIX:column="4">return <expr PREFIX:line="179" PREFIX:column="11">1</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="182" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="182" PREFIX:column="9">u8g_i2c_send_byte</name><parameter_list PREFIX:line="182" PREFIX:column="26">(<param><decl><type><name PREFIX:line="182" PREFIX:column="27">uint8_t</name></type> <name PREFIX:line="182" PREFIX:column="35">data</name></decl></param>)</parameter_list>
<block PREFIX:line="183" PREFIX:column="1">{
  <decl_stmt><decl><type><name PREFIX:line="184" PREFIX:column="3">register</name> <name PREFIX:line="184" PREFIX:column="12">uint8_t</name></type> <name PREFIX:line="184" PREFIX:column="20">status</name></decl>;</decl_stmt>
  <expr_stmt><expr><name PREFIX:line="185" PREFIX:column="3">TWDR</name> = <name PREFIX:line="185" PREFIX:column="10">data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name PREFIX:line="186" PREFIX:column="3">TWCR</name> = <call><name PREFIX:line="186" PREFIX:column="10">_BV</name><argument_list PREFIX:line="186" PREFIX:column="13">(<argument><expr><name PREFIX:line="186" PREFIX:column="14">TWINT</name></expr></argument>)</argument_list></call>  |  <call><name PREFIX:line="186" PREFIX:column="25">_BV</name><argument_list PREFIX:line="186" PREFIX:column="28">(<argument><expr><name PREFIX:line="186" PREFIX:column="29">TWEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if PREFIX:line="187" PREFIX:column="3">if <condition PREFIX:line="187" PREFIX:column="6">( <expr><call><name PREFIX:line="187" PREFIX:column="8">u8g_i2c_wait</name><argument_list PREFIX:line="187" PREFIX:column="20">(<argument><expr><call><name PREFIX:line="187" PREFIX:column="21">_BV</name><argument_list PREFIX:line="187" PREFIX:column="24">(<argument><expr><name PREFIX:line="187" PREFIX:column="25">TWINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr PREFIX:line="187" PREFIX:column="33">3</expr></argument>)</argument_list></call> == 0</expr> )</condition><then PREFIX:line="187" PREFIX:column="42">
    <return PREFIX:line="188" PREFIX:column="5">return <expr PREFIX:line="188" PREFIX:column="12">0</expr>;</return></then></if>
  <expr_stmt><expr><name PREFIX:line="189" PREFIX:column="3">status</name> = <name PREFIX:line="189" PREFIX:column="12">TW_STATUS</name></expr>;</expr_stmt>
  
  <if PREFIX:line="191" PREFIX:column="3">if <condition PREFIX:line="191" PREFIX:column="6">( <expr><name PREFIX:line="191" PREFIX:column="8">status</name> != <name PREFIX:line="191" PREFIX:column="18">TW_MT_DATA_ACK</name></expr> )</condition><then PREFIX:line="191" PREFIX:column="34">
  <block PREFIX:line="192" PREFIX:column="3">{
    <expr_stmt><expr><call><name PREFIX:line="193" PREFIX:column="5">u8g_i2c_set_error</name><argument_list PREFIX:line="193" PREFIX:column="22">(<argument><expr><name PREFIX:line="193" PREFIX:column="23">U8G_I2C_ERR_BUS</name></expr></argument>, <argument><expr PREFIX:line="193" PREFIX:column="40">3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return PREFIX:line="194" PREFIX:column="5">return <expr PREFIX:line="194" PREFIX:column="12">0</expr>;</return>
  }</block></then></if>
  
  <return PREFIX:line="197" PREFIX:column="3">return <expr PREFIX:line="197" PREFIX:column="10">1</expr>;</return>  
}</block></function>

<function><type><name PREFIX:line="200" PREFIX:column="1">void</name></type> <name PREFIX:line="200" PREFIX:column="6">u8g_i2c_stop</name><parameter_list PREFIX:line="200" PREFIX:column="18">(<param><decl><type><name PREFIX:line="200" PREFIX:column="19">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="201" PREFIX:column="1">{
  <comment type="block" PREFIX:line="202" PREFIX:column="3">/* write stop */</comment>
  <expr_stmt><expr><name PREFIX:line="203" PREFIX:column="3">TWCR</name> = <call><name PREFIX:line="203" PREFIX:column="10">_BV</name><argument_list PREFIX:line="203" PREFIX:column="13">(<argument><expr><name PREFIX:line="203" PREFIX:column="14">TWINT</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="203" PREFIX:column="23">_BV</name><argument_list PREFIX:line="203" PREFIX:column="26">(<argument><expr><name PREFIX:line="203" PREFIX:column="27">TWEN</name></expr></argument>)</argument_list></call> | <call><name PREFIX:line="203" PREFIX:column="35">_BV</name><argument_list PREFIX:line="203" PREFIX:column="38">(<argument><expr><name PREFIX:line="203" PREFIX:column="39">TWSTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" PREFIX:line="205" PREFIX:column="3">/* no error is checked for the stop condition */</comment>  
  <expr_stmt><expr><call><name PREFIX:line="206" PREFIX:column="3">u8g_i2c_wait</name><argument_list PREFIX:line="206" PREFIX:column="15">(<argument><expr><call><name PREFIX:line="206" PREFIX:column="16">_BV</name><argument_list PREFIX:line="206" PREFIX:column="19">(<argument><expr><name PREFIX:line="206" PREFIX:column="20">TWSTO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr PREFIX:line="206" PREFIX:column="28">4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
}</block></function>

<comment type="block" PREFIX:line="210" PREFIX:column="1">/*
void twi_send(uint8_t adr, uint8_t data1, uint8_t data2)
{
  u8g_i2c_start(adr&lt;&lt;1);
  u8g_i2c_send_byte(data1);
  u8g_i2c_send_byte(data2);
  u8g_i2c_stop();
}
*/</comment>

<cpp:else PREFIX:line="220" PREFIX:column="1">#<cpp:directive PREFIX:line="220" PREFIX:column="2">else</cpp:directive></cpp:else>

<comment type="block" PREFIX:line="222" PREFIX:column="1">/* empty interface */</comment>

<function><type><name PREFIX:line="224" PREFIX:column="1">void</name></type> <name PREFIX:line="224" PREFIX:column="6">u8g_i2c_init</name><parameter_list PREFIX:line="224" PREFIX:column="18">(<param><decl><type><name PREFIX:line="224" PREFIX:column="19">uint8_t</name></type> <name PREFIX:line="224" PREFIX:column="27">options</name></decl></param>)</parameter_list>
<block PREFIX:line="225" PREFIX:column="1">{
  <expr_stmt><expr><call><name PREFIX:line="226" PREFIX:column="3">u8g_i2c_clear_error</name><argument_list PREFIX:line="226" PREFIX:column="22">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="229" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="229" PREFIX:column="9">u8g_i2c_wait</name><parameter_list PREFIX:line="229" PREFIX:column="21">(<param><decl><type><name PREFIX:line="229" PREFIX:column="22">uint8_t</name></type> <name PREFIX:line="229" PREFIX:column="30">mask</name></decl></param>, <param><decl><type><name PREFIX:line="229" PREFIX:column="36">uint8_t</name></type> <name PREFIX:line="229" PREFIX:column="44">pos</name></decl></param>)</parameter_list>
<block PREFIX:line="230" PREFIX:column="1">{
  <return PREFIX:line="231" PREFIX:column="3">return <expr PREFIX:line="231" PREFIX:column="10">1</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="234" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="234" PREFIX:column="9">u8g_i2c_start</name><parameter_list PREFIX:line="234" PREFIX:column="22">(<param><decl><type><name PREFIX:line="234" PREFIX:column="23">uint8_t</name></type> <name PREFIX:line="234" PREFIX:column="31">sla</name></decl></param>)</parameter_list>
<block PREFIX:line="235" PREFIX:column="1">{
  <return PREFIX:line="236" PREFIX:column="3">return <expr PREFIX:line="236" PREFIX:column="10">1</expr>;</return>
}</block></function>
<function><type><name PREFIX:line="238" PREFIX:column="1">uint8_t</name></type> <name PREFIX:line="238" PREFIX:column="9">u8g_i2c_send_byte</name><parameter_list PREFIX:line="238" PREFIX:column="26">(<param><decl><type><name PREFIX:line="238" PREFIX:column="27">uint8_t</name></type> <name PREFIX:line="238" PREFIX:column="35">data</name></decl></param>)</parameter_list>
<block PREFIX:line="239" PREFIX:column="1">{
  <return PREFIX:line="240" PREFIX:column="3">return <expr PREFIX:line="240" PREFIX:column="10">1</expr>;</return>
}</block></function>

<function><type><name PREFIX:line="243" PREFIX:column="1">void</name></type> <name PREFIX:line="243" PREFIX:column="6">u8g_i2c_stop</name><parameter_list PREFIX:line="243" PREFIX:column="18">(<param><decl><type><name PREFIX:line="243" PREFIX:column="19">void</name></type></decl></param>)</parameter_list>
<block PREFIX:line="244" PREFIX:column="1">{
}</block></function>


<cpp:endif PREFIX:line="248" PREFIX:column="1">#<cpp:directive PREFIX:line="248" PREFIX:column="2">endif</cpp:directive></cpp:endif>

</unit>
