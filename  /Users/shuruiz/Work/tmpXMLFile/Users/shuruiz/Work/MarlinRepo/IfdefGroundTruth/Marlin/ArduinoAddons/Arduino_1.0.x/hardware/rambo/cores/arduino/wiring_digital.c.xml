<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/rambo/cores/arduino/wiring_digital.c" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  wiring_digital.c - digital input and output functions
  Part of Arduino - http://www.arduino.cc/

  Copyright (c) 2005-2006 David A. Mellis

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA

  Modified 28 September 2010 by Mark Sproul

  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/</comment>

<cpp:define PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="27" PREFIX:column="9">ARDUINO_MAIN</name></cpp:macro></cpp:define>
<cpp:include PREFIX:line="28" PREFIX:column="1">#<cpp:directive PREFIX:line="28" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="28" PREFIX:column="10">"wiring_private.h"</cpp:file></cpp:include>
<cpp:include PREFIX:line="29" PREFIX:column="1">#<cpp:directive PREFIX:line="29" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="29" PREFIX:column="10">"pins_arduino.h"</cpp:file></cpp:include>

<function><type><name PREFIX:line="31" PREFIX:column="1">void</name></type> <name PREFIX:line="31" PREFIX:column="6">pinMode</name><parameter_list PREFIX:line="31" PREFIX:column="13">(<param><decl><type><name PREFIX:line="31" PREFIX:column="14">uint8_t</name></type> <name PREFIX:line="31" PREFIX:column="22">pin</name></decl></param>, <param><decl><type><name PREFIX:line="31" PREFIX:column="27">uint8_t</name></type> <name PREFIX:line="31" PREFIX:column="35">mode</name></decl></param>)</parameter_list>
<block PREFIX:line="32" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="33" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="33" PREFIX:column="17">bit</name> <init PREFIX:line="33" PREFIX:column="21">= <expr><call><name PREFIX:line="33" PREFIX:column="23">digitalPinToBitMask</name><argument_list PREFIX:line="33" PREFIX:column="42">(<argument><expr><name PREFIX:line="33" PREFIX:column="43">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="34" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="34" PREFIX:column="17">port</name> <init PREFIX:line="34" PREFIX:column="22">= <expr><call><name PREFIX:line="34" PREFIX:column="24">digitalPinToPort</name><argument_list PREFIX:line="34" PREFIX:column="40">(<argument><expr><name PREFIX:line="34" PREFIX:column="41">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier PREFIX:line="35" PREFIX:column="9">volatile</specifier> <name PREFIX:line="35" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="35" PREFIX:column="27">reg</name></decl>, *<decl><type ref="prev"/><name PREFIX:line="35" PREFIX:column="33">out</name></decl>;</decl_stmt>

	<if PREFIX:line="37" PREFIX:column="9">if <condition PREFIX:line="37" PREFIX:column="12">(<expr><name PREFIX:line="37" PREFIX:column="13">port</name> == <name PREFIX:line="37" PREFIX:column="21">NOT_A_PIN</name></expr>)</condition><then PREFIX:line="37" PREFIX:column="31"> <return PREFIX:line="37" PREFIX:column="32">return;</return></then></if>

	<comment type="line" PREFIX:line="39" PREFIX:column="9">// JWS: can I let the optimizer do this?</comment>
	<expr_stmt><expr><name PREFIX:line="40" PREFIX:column="9">reg</name> = <call><name PREFIX:line="40" PREFIX:column="15">portModeRegister</name><argument_list PREFIX:line="40" PREFIX:column="31">(<argument><expr><name PREFIX:line="40" PREFIX:column="32">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name PREFIX:line="41" PREFIX:column="9">out</name> = <call><name PREFIX:line="41" PREFIX:column="15">portOutputRegister</name><argument_list PREFIX:line="41" PREFIX:column="33">(<argument><expr><name PREFIX:line="41" PREFIX:column="34">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if PREFIX:line="43" PREFIX:column="9">if <condition PREFIX:line="43" PREFIX:column="12">(<expr><name PREFIX:line="43" PREFIX:column="13">mode</name> == <name PREFIX:line="43" PREFIX:column="21">INPUT</name></expr>)</condition><then PREFIX:line="43" PREFIX:column="27"> <block PREFIX:line="43" PREFIX:column="28">{ 
		<decl_stmt><decl><type><name PREFIX:line="44" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="44" PREFIX:column="25">oldSREG</name> <init PREFIX:line="44" PREFIX:column="33">= <expr><name PREFIX:line="44" PREFIX:column="35">SREG</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name PREFIX:line="45" PREFIX:column="17">cli</name><argument_list PREFIX:line="45" PREFIX:column="20">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr PREFIX:line="46" PREFIX:column="17">*<name PREFIX:line="46" PREFIX:column="18">reg</name> &amp;= ~<name PREFIX:line="46" PREFIX:column="26">bit</name></expr>;</expr_stmt>
		<expr_stmt><expr PREFIX:line="47" PREFIX:column="17">*<name PREFIX:line="47" PREFIX:column="18">out</name> &amp;= ~<name PREFIX:line="47" PREFIX:column="26">bit</name></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="48" PREFIX:column="17">SREG</name> = <name PREFIX:line="48" PREFIX:column="24">oldSREG</name></expr>;</expr_stmt>
	}</block></then> <else PREFIX:line="49" PREFIX:column="11">else <if PREFIX:line="49" PREFIX:column="16">if <condition PREFIX:line="49" PREFIX:column="19">(<expr><name PREFIX:line="49" PREFIX:column="20">mode</name> == <name PREFIX:line="49" PREFIX:column="28">INPUT_PULLUP</name></expr>)</condition><then PREFIX:line="49" PREFIX:column="41"> <block PREFIX:line="49" PREFIX:column="42">{
		<decl_stmt><decl><type><name PREFIX:line="50" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="50" PREFIX:column="25">oldSREG</name> <init PREFIX:line="50" PREFIX:column="33">= <expr><name PREFIX:line="50" PREFIX:column="35">SREG</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name PREFIX:line="51" PREFIX:column="17">cli</name><argument_list PREFIX:line="51" PREFIX:column="20">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr PREFIX:line="52" PREFIX:column="17">*<name PREFIX:line="52" PREFIX:column="18">reg</name> &amp;= ~<name PREFIX:line="52" PREFIX:column="26">bit</name></expr>;</expr_stmt>
		<expr_stmt><expr PREFIX:line="53" PREFIX:column="17">*<name PREFIX:line="53" PREFIX:column="18">out</name> |= <name PREFIX:line="53" PREFIX:column="25">bit</name></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="54" PREFIX:column="17">SREG</name> = <name PREFIX:line="54" PREFIX:column="24">oldSREG</name></expr>;</expr_stmt>
	}</block></then> <else PREFIX:line="55" PREFIX:column="11">else <block PREFIX:line="55" PREFIX:column="16">{
		<decl_stmt><decl><type><name PREFIX:line="56" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="56" PREFIX:column="25">oldSREG</name> <init PREFIX:line="56" PREFIX:column="33">= <expr><name PREFIX:line="56" PREFIX:column="35">SREG</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name PREFIX:line="57" PREFIX:column="17">cli</name><argument_list PREFIX:line="57" PREFIX:column="20">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr PREFIX:line="58" PREFIX:column="17">*<name PREFIX:line="58" PREFIX:column="18">reg</name> |= <name PREFIX:line="58" PREFIX:column="25">bit</name></expr>;</expr_stmt>
		<expr_stmt><expr><name PREFIX:line="59" PREFIX:column="17">SREG</name> = <name PREFIX:line="59" PREFIX:column="24">oldSREG</name></expr>;</expr_stmt>
	}</block></else></if></else></if>
}</block></function>

<comment type="line" PREFIX:line="63" PREFIX:column="1">// Forcing this inline keeps the callers from having to push their own stuff</comment>
<comment type="line" PREFIX:line="64" PREFIX:column="1">// on the stack. It is a good performance win and only takes 1 more byte per</comment>
<comment type="line" PREFIX:line="65" PREFIX:column="1">// user than calling. (It will take more bytes on the 168.)</comment>
<comment type="line" PREFIX:line="66" PREFIX:column="1">//</comment>
<comment type="line" PREFIX:line="67" PREFIX:column="1">// But shouldn't this be moved into pinMode? Seems silly to check and do on</comment>
<comment type="line" PREFIX:line="68" PREFIX:column="1">// each digitalread or write.</comment>
<comment type="line" PREFIX:line="69" PREFIX:column="1">//</comment>
<comment type="line" PREFIX:line="70" PREFIX:column="1">// Mark Sproul:</comment>
<comment type="line" PREFIX:line="71" PREFIX:column="1">// - Removed inline. Save 170 bytes on atmega1280</comment>
<comment type="line" PREFIX:line="72" PREFIX:column="1">// - changed to a switch statment; added 32 bytes but much easier to read and maintain.</comment>
<comment type="line" PREFIX:line="73" PREFIX:column="1">// - Added more #ifdefs, now compiles for atmega645</comment>
<comment type="line" PREFIX:line="74" PREFIX:column="1">//</comment>
<comment type="line" PREFIX:line="75" PREFIX:column="1">//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));</comment>
<comment type="line" PREFIX:line="76" PREFIX:column="1">//static inline void turnOffPWM(uint8_t timer)</comment>
<function><type><specifier PREFIX:line="77" PREFIX:column="1">static</specifier> <name PREFIX:line="77" PREFIX:column="8">void</name></type> <name PREFIX:line="77" PREFIX:column="13">turnOffPWM</name><parameter_list PREFIX:line="77" PREFIX:column="23">(<param><decl><type><name PREFIX:line="77" PREFIX:column="24">uint8_t</name></type> <name PREFIX:line="77" PREFIX:column="32">timer</name></decl></param>)</parameter_list>
<block PREFIX:line="78" PREFIX:column="1">{
	<switch PREFIX:line="79" PREFIX:column="9">switch <condition PREFIX:line="79" PREFIX:column="16">(<expr><name PREFIX:line="79" PREFIX:column="17">timer</name></expr>)</condition>
	<block PREFIX:line="80" PREFIX:column="9">{
		<cpp:if PREFIX:line="81" PREFIX:column="17">#<cpp:directive PREFIX:line="81" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="81" PREFIX:column="21">defined</name><argument_list PREFIX:line="81" PREFIX:column="28">(<argument><expr><name PREFIX:line="81" PREFIX:column="29">TCCR1A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="81" PREFIX:column="40">defined</name><argument_list PREFIX:line="81" PREFIX:column="47">(<argument><expr><name PREFIX:line="81" PREFIX:column="48">COM1A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<case PREFIX:line="82" PREFIX:column="17">case <expr><name PREFIX:line="82" PREFIX:column="22">TIMER1A</name></expr>:   <expr_stmt><expr><call><name PREFIX:line="82" PREFIX:column="33">cbi</name><argument_list PREFIX:line="82" PREFIX:column="36">(<argument><expr><name PREFIX:line="82" PREFIX:column="37">TCCR1A</name></expr></argument>, <argument><expr><name PREFIX:line="82" PREFIX:column="45">COM1A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="82" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="83" PREFIX:column="17">#<cpp:directive PREFIX:line="83" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		<cpp:if PREFIX:line="84" PREFIX:column="17">#<cpp:directive PREFIX:line="84" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="84" PREFIX:column="21">defined</name><argument_list PREFIX:line="84" PREFIX:column="28">(<argument><expr><name PREFIX:line="84" PREFIX:column="29">TCCR1A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="84" PREFIX:column="40">defined</name><argument_list PREFIX:line="84" PREFIX:column="47">(<argument><expr><name PREFIX:line="84" PREFIX:column="48">COM1B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="85" PREFIX:column="17">case <expr><name PREFIX:line="85" PREFIX:column="22">TIMER1B</name></expr>:   <expr_stmt><expr><call><name PREFIX:line="85" PREFIX:column="33">cbi</name><argument_list PREFIX:line="85" PREFIX:column="36">(<argument><expr><name PREFIX:line="85" PREFIX:column="37">TCCR1A</name></expr></argument>, <argument><expr><name PREFIX:line="85" PREFIX:column="45">COM1B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="85" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="86" PREFIX:column="17">#<cpp:directive PREFIX:line="86" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		
		<cpp:if PREFIX:line="88" PREFIX:column="17">#<cpp:directive PREFIX:line="88" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="88" PREFIX:column="21">defined</name><argument_list PREFIX:line="88" PREFIX:column="28">(<argument><expr><name PREFIX:line="88" PREFIX:column="29">TCCR2</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="88" PREFIX:column="39">defined</name><argument_list PREFIX:line="88" PREFIX:column="46">(<argument><expr><name PREFIX:line="88" PREFIX:column="47">COM21</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="89" PREFIX:column="17">case  <expr><name PREFIX:line="89" PREFIX:column="23">TIMER2</name></expr>:   <expr_stmt><expr><call><name PREFIX:line="89" PREFIX:column="33">cbi</name><argument_list PREFIX:line="89" PREFIX:column="36">(<argument><expr><name PREFIX:line="89" PREFIX:column="37">TCCR2</name></expr></argument>, <argument><expr><name PREFIX:line="89" PREFIX:column="44">COM21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <break PREFIX:line="89" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="90" PREFIX:column="17">#<cpp:directive PREFIX:line="90" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		
		<cpp:if PREFIX:line="92" PREFIX:column="17">#<cpp:directive PREFIX:line="92" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="92" PREFIX:column="21">defined</name><argument_list PREFIX:line="92" PREFIX:column="28">(<argument><expr><name PREFIX:line="92" PREFIX:column="29">TCCR0A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="92" PREFIX:column="40">defined</name><argument_list PREFIX:line="92" PREFIX:column="47">(<argument><expr><name PREFIX:line="92" PREFIX:column="48">COM0A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="93" PREFIX:column="17">case  <expr><name PREFIX:line="93" PREFIX:column="23">TIMER0A</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="93" PREFIX:column="33">cbi</name><argument_list PREFIX:line="93" PREFIX:column="36">(<argument><expr><name PREFIX:line="93" PREFIX:column="37">TCCR0A</name></expr></argument>, <argument><expr><name PREFIX:line="93" PREFIX:column="45">COM0A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="93" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="94" PREFIX:column="17">#<cpp:directive PREFIX:line="94" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		
		<cpp:if PREFIX:line="96" PREFIX:column="17">#<cpp:directive PREFIX:line="96" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="96" PREFIX:column="21">defined</name><argument_list PREFIX:line="96" PREFIX:column="28">(<argument><expr><name PREFIX:line="96" PREFIX:column="29">TIMER0B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="96" PREFIX:column="41">defined</name><argument_list PREFIX:line="96" PREFIX:column="48">(<argument><expr><name PREFIX:line="96" PREFIX:column="49">COM0B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="97" PREFIX:column="17">case  <expr><name PREFIX:line="97" PREFIX:column="23">TIMER0B</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="97" PREFIX:column="33">cbi</name><argument_list PREFIX:line="97" PREFIX:column="36">(<argument><expr><name PREFIX:line="97" PREFIX:column="37">TCCR0A</name></expr></argument>, <argument><expr><name PREFIX:line="97" PREFIX:column="45">COM0B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="97" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="98" PREFIX:column="17">#<cpp:directive PREFIX:line="98" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		<cpp:if PREFIX:line="99" PREFIX:column="17">#<cpp:directive PREFIX:line="99" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="99" PREFIX:column="21">defined</name><argument_list PREFIX:line="99" PREFIX:column="28">(<argument><expr><name PREFIX:line="99" PREFIX:column="29">TCCR2A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="99" PREFIX:column="40">defined</name><argument_list PREFIX:line="99" PREFIX:column="47">(<argument><expr><name PREFIX:line="99" PREFIX:column="48">COM2A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="100" PREFIX:column="17">case  <expr><name PREFIX:line="100" PREFIX:column="23">TIMER2A</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="100" PREFIX:column="33">cbi</name><argument_list PREFIX:line="100" PREFIX:column="36">(<argument><expr><name PREFIX:line="100" PREFIX:column="37">TCCR2A</name></expr></argument>, <argument><expr><name PREFIX:line="100" PREFIX:column="45">COM2A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="100" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="101" PREFIX:column="17">#<cpp:directive PREFIX:line="101" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		<cpp:if PREFIX:line="102" PREFIX:column="17">#<cpp:directive PREFIX:line="102" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="102" PREFIX:column="21">defined</name><argument_list PREFIX:line="102" PREFIX:column="28">(<argument><expr><name PREFIX:line="102" PREFIX:column="29">TCCR2A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="102" PREFIX:column="40">defined</name><argument_list PREFIX:line="102" PREFIX:column="47">(<argument><expr><name PREFIX:line="102" PREFIX:column="48">COM2B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="103" PREFIX:column="17">case  <expr><name PREFIX:line="103" PREFIX:column="23">TIMER2B</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="103" PREFIX:column="33">cbi</name><argument_list PREFIX:line="103" PREFIX:column="36">(<argument><expr><name PREFIX:line="103" PREFIX:column="37">TCCR2A</name></expr></argument>, <argument><expr><name PREFIX:line="103" PREFIX:column="45">COM2B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="103" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="104" PREFIX:column="17">#<cpp:directive PREFIX:line="104" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		
		<cpp:if PREFIX:line="106" PREFIX:column="17">#<cpp:directive PREFIX:line="106" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="106" PREFIX:column="21">defined</name><argument_list PREFIX:line="106" PREFIX:column="28">(<argument><expr><name PREFIX:line="106" PREFIX:column="29">TCCR3A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="106" PREFIX:column="40">defined</name><argument_list PREFIX:line="106" PREFIX:column="47">(<argument><expr><name PREFIX:line="106" PREFIX:column="48">COM3A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="107" PREFIX:column="17">case  <expr><name PREFIX:line="107" PREFIX:column="23">TIMER3A</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="107" PREFIX:column="33">cbi</name><argument_list PREFIX:line="107" PREFIX:column="36">(<argument><expr><name PREFIX:line="107" PREFIX:column="37">TCCR3A</name></expr></argument>, <argument><expr><name PREFIX:line="107" PREFIX:column="45">COM3A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="107" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="108" PREFIX:column="17">#<cpp:directive PREFIX:line="108" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		<cpp:if PREFIX:line="109" PREFIX:column="17">#<cpp:directive PREFIX:line="109" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="109" PREFIX:column="21">defined</name><argument_list PREFIX:line="109" PREFIX:column="28">(<argument><expr><name PREFIX:line="109" PREFIX:column="29">TCCR3A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="109" PREFIX:column="40">defined</name><argument_list PREFIX:line="109" PREFIX:column="47">(<argument><expr><name PREFIX:line="109" PREFIX:column="48">COM3B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="110" PREFIX:column="17">case  <expr><name PREFIX:line="110" PREFIX:column="23">TIMER3B</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="110" PREFIX:column="33">cbi</name><argument_list PREFIX:line="110" PREFIX:column="36">(<argument><expr><name PREFIX:line="110" PREFIX:column="37">TCCR3A</name></expr></argument>, <argument><expr><name PREFIX:line="110" PREFIX:column="45">COM3B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="110" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="111" PREFIX:column="17">#<cpp:directive PREFIX:line="111" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		<cpp:if PREFIX:line="112" PREFIX:column="17">#<cpp:directive PREFIX:line="112" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="112" PREFIX:column="21">defined</name><argument_list PREFIX:line="112" PREFIX:column="28">(<argument><expr><name PREFIX:line="112" PREFIX:column="29">TCCR3A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="112" PREFIX:column="40">defined</name><argument_list PREFIX:line="112" PREFIX:column="47">(<argument><expr><name PREFIX:line="112" PREFIX:column="48">COM3C1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="113" PREFIX:column="17">case  <expr><name PREFIX:line="113" PREFIX:column="23">TIMER3C</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="113" PREFIX:column="33">cbi</name><argument_list PREFIX:line="113" PREFIX:column="36">(<argument><expr><name PREFIX:line="113" PREFIX:column="37">TCCR3A</name></expr></argument>, <argument><expr><name PREFIX:line="113" PREFIX:column="45">COM3C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="113" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="114" PREFIX:column="17">#<cpp:directive PREFIX:line="114" PREFIX:column="18">endif</cpp:directive></cpp:endif>

		<cpp:if PREFIX:line="116" PREFIX:column="17">#<cpp:directive PREFIX:line="116" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="116" PREFIX:column="21">defined</name><argument_list PREFIX:line="116" PREFIX:column="28">(<argument><expr><name PREFIX:line="116" PREFIX:column="29">TCCR4A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="116" PREFIX:column="40">defined</name><argument_list PREFIX:line="116" PREFIX:column="47">(<argument><expr><name PREFIX:line="116" PREFIX:column="48">COM4A1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="117" PREFIX:column="17">case  <expr><name PREFIX:line="117" PREFIX:column="23">TIMER4A</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="117" PREFIX:column="33">cbi</name><argument_list PREFIX:line="117" PREFIX:column="36">(<argument><expr><name PREFIX:line="117" PREFIX:column="37">TCCR4A</name></expr></argument>, <argument><expr><name PREFIX:line="117" PREFIX:column="45">COM4A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="117" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="118" PREFIX:column="17">#<cpp:directive PREFIX:line="118" PREFIX:column="18">endif</cpp:directive></cpp:endif>					
		<cpp:if PREFIX:line="119" PREFIX:column="17">#<cpp:directive PREFIX:line="119" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="119" PREFIX:column="21">defined</name><argument_list PREFIX:line="119" PREFIX:column="28">(<argument><expr><name PREFIX:line="119" PREFIX:column="29">TCCR4A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="119" PREFIX:column="40">defined</name><argument_list PREFIX:line="119" PREFIX:column="47">(<argument><expr><name PREFIX:line="119" PREFIX:column="48">COM4B1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="120" PREFIX:column="17">case  <expr><name PREFIX:line="120" PREFIX:column="23">TIMER4B</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="120" PREFIX:column="33">cbi</name><argument_list PREFIX:line="120" PREFIX:column="36">(<argument><expr><name PREFIX:line="120" PREFIX:column="37">TCCR4A</name></expr></argument>, <argument><expr><name PREFIX:line="120" PREFIX:column="45">COM4B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="120" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="121" PREFIX:column="17">#<cpp:directive PREFIX:line="121" PREFIX:column="18">endif</cpp:directive></cpp:endif>
		<cpp:if PREFIX:line="122" PREFIX:column="17">#<cpp:directive PREFIX:line="122" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="122" PREFIX:column="21">defined</name><argument_list PREFIX:line="122" PREFIX:column="28">(<argument><expr><name PREFIX:line="122" PREFIX:column="29">TCCR4A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="122" PREFIX:column="40">defined</name><argument_list PREFIX:line="122" PREFIX:column="47">(<argument><expr><name PREFIX:line="122" PREFIX:column="48">COM4C1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="123" PREFIX:column="17">case  <expr><name PREFIX:line="123" PREFIX:column="23">TIMER4C</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="123" PREFIX:column="33">cbi</name><argument_list PREFIX:line="123" PREFIX:column="36">(<argument><expr><name PREFIX:line="123" PREFIX:column="37">TCCR4A</name></expr></argument>, <argument><expr><name PREFIX:line="123" PREFIX:column="45">COM4C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="123" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="124" PREFIX:column="17">#<cpp:directive PREFIX:line="124" PREFIX:column="18">endif</cpp:directive></cpp:endif>			
		<cpp:if PREFIX:line="125" PREFIX:column="17">#<cpp:directive PREFIX:line="125" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="125" PREFIX:column="21">defined</name><argument_list PREFIX:line="125" PREFIX:column="28">(<argument><expr><name PREFIX:line="125" PREFIX:column="29">TCCR4C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name PREFIX:line="125" PREFIX:column="40">defined</name><argument_list PREFIX:line="125" PREFIX:column="47">(<argument><expr><name PREFIX:line="125" PREFIX:column="48">COM4D1</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="126" PREFIX:column="17">case <expr><name PREFIX:line="126" PREFIX:column="22">TIMER4D</name></expr>:	<expr_stmt><expr><call><name PREFIX:line="126" PREFIX:column="33">cbi</name><argument_list PREFIX:line="126" PREFIX:column="36">(<argument><expr><name PREFIX:line="126" PREFIX:column="37">TCCR4C</name></expr></argument>, <argument><expr><name PREFIX:line="126" PREFIX:column="45">COM4D1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<break PREFIX:line="126" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="127" PREFIX:column="17">#<cpp:directive PREFIX:line="127" PREFIX:column="18">endif</cpp:directive></cpp:endif>			
			
		<cpp:if PREFIX:line="129" PREFIX:column="17">#<cpp:directive PREFIX:line="129" PREFIX:column="18">if</cpp:directive> <expr><call><name PREFIX:line="129" PREFIX:column="21">defined</name><argument_list PREFIX:line="129" PREFIX:column="28">(<argument><expr><name PREFIX:line="129" PREFIX:column="29">TCCR5A</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</case><case PREFIX:line="130" PREFIX:column="17">case  <expr><name PREFIX:line="130" PREFIX:column="23">TIMER5A</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="130" PREFIX:column="33">cbi</name><argument_list PREFIX:line="130" PREFIX:column="36">(<argument><expr><name PREFIX:line="130" PREFIX:column="37">TCCR5A</name></expr></argument>, <argument><expr><name PREFIX:line="130" PREFIX:column="45">COM5A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="130" PREFIX:column="57">break;</break>
		</case><case PREFIX:line="131" PREFIX:column="17">case  <expr><name PREFIX:line="131" PREFIX:column="23">TIMER5B</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="131" PREFIX:column="33">cbi</name><argument_list PREFIX:line="131" PREFIX:column="36">(<argument><expr><name PREFIX:line="131" PREFIX:column="37">TCCR5A</name></expr></argument>, <argument><expr><name PREFIX:line="131" PREFIX:column="45">COM5B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="131" PREFIX:column="57">break;</break>
		</case><case PREFIX:line="132" PREFIX:column="17">case  <expr><name PREFIX:line="132" PREFIX:column="23">TIMER5C</name></expr>:  <expr_stmt><expr><call><name PREFIX:line="132" PREFIX:column="33">cbi</name><argument_list PREFIX:line="132" PREFIX:column="36">(<argument><expr><name PREFIX:line="132" PREFIX:column="37">TCCR5A</name></expr></argument>, <argument><expr><name PREFIX:line="132" PREFIX:column="45">COM5C1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break PREFIX:line="132" PREFIX:column="57">break;</break>
		<cpp:endif PREFIX:line="133" PREFIX:column="17">#<cpp:directive PREFIX:line="133" PREFIX:column="18">endif</cpp:directive></cpp:endif>
	</case>}</block></switch>
}</block></function>

<function><type><name PREFIX:line="137" PREFIX:column="1">void</name></type> <name PREFIX:line="137" PREFIX:column="6">digitalWrite</name><parameter_list PREFIX:line="137" PREFIX:column="18">(<param><decl><type><name PREFIX:line="137" PREFIX:column="19">uint8_t</name></type> <name PREFIX:line="137" PREFIX:column="27">pin</name></decl></param>, <param><decl><type><name PREFIX:line="137" PREFIX:column="32">uint8_t</name></type> <name PREFIX:line="137" PREFIX:column="40">val</name></decl></param>)</parameter_list>
<block PREFIX:line="138" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="139" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="139" PREFIX:column="17">timer</name> <init PREFIX:line="139" PREFIX:column="23">= <expr><call><name PREFIX:line="139" PREFIX:column="25">digitalPinToTimer</name><argument_list PREFIX:line="139" PREFIX:column="42">(<argument><expr><name PREFIX:line="139" PREFIX:column="43">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="140" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="140" PREFIX:column="17">bit</name> <init PREFIX:line="140" PREFIX:column="21">= <expr><call><name PREFIX:line="140" PREFIX:column="23">digitalPinToBitMask</name><argument_list PREFIX:line="140" PREFIX:column="42">(<argument><expr><name PREFIX:line="140" PREFIX:column="43">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="141" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="141" PREFIX:column="17">port</name> <init PREFIX:line="141" PREFIX:column="22">= <expr><call><name PREFIX:line="141" PREFIX:column="24">digitalPinToPort</name><argument_list PREFIX:line="141" PREFIX:column="40">(<argument><expr><name PREFIX:line="141" PREFIX:column="41">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier PREFIX:line="142" PREFIX:column="9">volatile</specifier> <name PREFIX:line="142" PREFIX:column="18">uint8_t</name> *</type><name PREFIX:line="142" PREFIX:column="27">out</name></decl>;</decl_stmt>

	<if PREFIX:line="144" PREFIX:column="9">if <condition PREFIX:line="144" PREFIX:column="12">(<expr><name PREFIX:line="144" PREFIX:column="13">port</name> == <name PREFIX:line="144" PREFIX:column="21">NOT_A_PIN</name></expr>)</condition><then PREFIX:line="144" PREFIX:column="31"> <return PREFIX:line="144" PREFIX:column="32">return;</return></then></if>

	<comment type="line" PREFIX:line="146" PREFIX:column="9">// If the pin that support PWM output, we need to turn it off</comment>
	<comment type="line" PREFIX:line="147" PREFIX:column="9">// before doing a digital write.</comment>
	<if PREFIX:line="148" PREFIX:column="9">if <condition PREFIX:line="148" PREFIX:column="12">(<expr><name PREFIX:line="148" PREFIX:column="13">timer</name> != <name PREFIX:line="148" PREFIX:column="22">NOT_ON_TIMER</name></expr>)</condition><then PREFIX:line="148" PREFIX:column="35"> <expr_stmt><expr><call><name PREFIX:line="148" PREFIX:column="36">turnOffPWM</name><argument_list PREFIX:line="148" PREFIX:column="46">(<argument><expr><name PREFIX:line="148" PREFIX:column="47">timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name PREFIX:line="150" PREFIX:column="9">out</name> = <call><name PREFIX:line="150" PREFIX:column="15">portOutputRegister</name><argument_list PREFIX:line="150" PREFIX:column="33">(<argument><expr><name PREFIX:line="150" PREFIX:column="34">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name PREFIX:line="152" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="152" PREFIX:column="17">oldSREG</name> <init PREFIX:line="152" PREFIX:column="25">= <expr><name PREFIX:line="152" PREFIX:column="27">SREG</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name PREFIX:line="153" PREFIX:column="9">cli</name><argument_list PREFIX:line="153" PREFIX:column="12">()</argument_list></call></expr>;</expr_stmt>

	<if PREFIX:line="155" PREFIX:column="9">if <condition PREFIX:line="155" PREFIX:column="12">(<expr><name PREFIX:line="155" PREFIX:column="13">val</name> == <name PREFIX:line="155" PREFIX:column="20">LOW</name></expr>)</condition><then PREFIX:line="155" PREFIX:column="24"> <block PREFIX:line="155" PREFIX:column="25">{
		<expr_stmt><expr PREFIX:line="156" PREFIX:column="17">*<name PREFIX:line="156" PREFIX:column="18">out</name> &amp;= ~<name PREFIX:line="156" PREFIX:column="26">bit</name></expr>;</expr_stmt>
	}</block></then> <else PREFIX:line="157" PREFIX:column="11">else <block PREFIX:line="157" PREFIX:column="16">{
		<expr_stmt><expr PREFIX:line="158" PREFIX:column="17">*<name PREFIX:line="158" PREFIX:column="18">out</name> |= <name PREFIX:line="158" PREFIX:column="25">bit</name></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><name PREFIX:line="161" PREFIX:column="9">SREG</name> = <name PREFIX:line="161" PREFIX:column="16">oldSREG</name></expr>;</expr_stmt>
}</block></function>

<function><type><name PREFIX:line="164" PREFIX:column="1">int</name></type> <name PREFIX:line="164" PREFIX:column="5">digitalRead</name><parameter_list PREFIX:line="164" PREFIX:column="16">(<param><decl><type><name PREFIX:line="164" PREFIX:column="17">uint8_t</name></type> <name PREFIX:line="164" PREFIX:column="25">pin</name></decl></param>)</parameter_list>
<block PREFIX:line="165" PREFIX:column="1">{
	<decl_stmt><decl><type><name PREFIX:line="166" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="166" PREFIX:column="17">timer</name> <init PREFIX:line="166" PREFIX:column="23">= <expr><call><name PREFIX:line="166" PREFIX:column="25">digitalPinToTimer</name><argument_list PREFIX:line="166" PREFIX:column="42">(<argument><expr><name PREFIX:line="166" PREFIX:column="43">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="167" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="167" PREFIX:column="17">bit</name> <init PREFIX:line="167" PREFIX:column="21">= <expr><call><name PREFIX:line="167" PREFIX:column="23">digitalPinToBitMask</name><argument_list PREFIX:line="167" PREFIX:column="42">(<argument><expr><name PREFIX:line="167" PREFIX:column="43">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name PREFIX:line="168" PREFIX:column="9">uint8_t</name></type> <name PREFIX:line="168" PREFIX:column="17">port</name> <init PREFIX:line="168" PREFIX:column="22">= <expr><call><name PREFIX:line="168" PREFIX:column="24">digitalPinToPort</name><argument_list PREFIX:line="168" PREFIX:column="40">(<argument><expr><name PREFIX:line="168" PREFIX:column="41">pin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if PREFIX:line="170" PREFIX:column="9">if <condition PREFIX:line="170" PREFIX:column="12">(<expr><name PREFIX:line="170" PREFIX:column="13">port</name> == <name PREFIX:line="170" PREFIX:column="21">NOT_A_PIN</name></expr>)</condition><then PREFIX:line="170" PREFIX:column="31"> <return PREFIX:line="170" PREFIX:column="32">return <expr><name PREFIX:line="170" PREFIX:column="39">LOW</name></expr>;</return></then></if>

	<comment type="line" PREFIX:line="172" PREFIX:column="9">// If the pin that support PWM output, we need to turn it off</comment>
	<comment type="line" PREFIX:line="173" PREFIX:column="9">// before getting a digital reading.</comment>
	<if PREFIX:line="174" PREFIX:column="9">if <condition PREFIX:line="174" PREFIX:column="12">(<expr><name PREFIX:line="174" PREFIX:column="13">timer</name> != <name PREFIX:line="174" PREFIX:column="22">NOT_ON_TIMER</name></expr>)</condition><then PREFIX:line="174" PREFIX:column="35"> <expr_stmt><expr><call><name PREFIX:line="174" PREFIX:column="36">turnOffPWM</name><argument_list PREFIX:line="174" PREFIX:column="46">(<argument><expr><name PREFIX:line="174" PREFIX:column="47">timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<if PREFIX:line="176" PREFIX:column="9">if <condition PREFIX:line="176" PREFIX:column="12">(<expr PREFIX:line="176" PREFIX:column="13">*<call><name PREFIX:line="176" PREFIX:column="14">portInputRegister</name><argument_list PREFIX:line="176" PREFIX:column="31">(<argument><expr><name PREFIX:line="176" PREFIX:column="32">port</name></expr></argument>)</argument_list></call> &amp; <name PREFIX:line="176" PREFIX:column="40">bit</name></expr>)</condition><then PREFIX:line="176" PREFIX:column="44"> <return PREFIX:line="176" PREFIX:column="45">return <expr><name PREFIX:line="176" PREFIX:column="52">HIGH</name></expr>;</return></then></if>
	<return PREFIX:line="177" PREFIX:column="9">return <expr><name PREFIX:line="177" PREFIX:column="16">LOW</name></expr>;</return>
}</block></function>
</unit>
