<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/cores/arduino/wiring_private.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  wiring_private.h - Internal header file.
  Part of Arduino - http://www.arduino.cc/

  Copyright (c) 2005-2006 David A. Mellis

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA

  $Id: wiring.h 239 2007-01-12 17:58:39Z mellis $
*/</comment>

<cpp:ifndef PREFIX:line="25" PREFIX:column="1">#<cpp:directive PREFIX:line="25" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="25" PREFIX:column="9">WiringPrivate_h</name></cpp:ifndef>
<cpp:define PREFIX:line="26" PREFIX:column="1">#<cpp:directive PREFIX:line="26" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="26" PREFIX:column="9">WiringPrivate_h</name></cpp:macro></cpp:define>

<cpp:include PREFIX:line="28" PREFIX:column="1">#<cpp:directive PREFIX:line="28" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="28" PREFIX:column="10">&lt;avr/io.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="29" PREFIX:column="1">#<cpp:directive PREFIX:line="29" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="29" PREFIX:column="10">&lt;avr/interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="30" PREFIX:column="1">#<cpp:directive PREFIX:line="30" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="30" PREFIX:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="31" PREFIX:column="1">#<cpp:directive PREFIX:line="31" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="31" PREFIX:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include PREFIX:line="33" PREFIX:column="1">#<cpp:directive PREFIX:line="33" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="33" PREFIX:column="10">"Arduino.h"</cpp:file></cpp:include>

<cpp:ifdef PREFIX:line="35" PREFIX:column="1">#<cpp:directive PREFIX:line="35" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="35" PREFIX:column="8">__cplusplus</name></cpp:ifdef>

<cpp:endif PREFIX:line="37" PREFIX:column="1">#<cpp:directive PREFIX:line="37" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef PREFIX:line="39" PREFIX:column="1">#<cpp:directive PREFIX:line="39" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="39" PREFIX:column="9">cbi</name></cpp:ifndef>
<cpp:define PREFIX:line="40" PREFIX:column="1">#<cpp:directive PREFIX:line="40" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="40" PREFIX:column="9">cbi</name><parameter_list PREFIX:line="40" PREFIX:column="12">(<param><type><name PREFIX:line="40" PREFIX:column="13">sfr</name></type></param>, <param><type><name PREFIX:line="40" PREFIX:column="18">bit</name></type></param>)</parameter_list></cpp:macro> <cpp:value PREFIX:line="40" PREFIX:column="23">(_SFR_BYTE(sfr) &amp;= ~_BV(bit))</cpp:value></cpp:define>
<cpp:endif PREFIX:line="41" PREFIX:column="1">#<cpp:directive PREFIX:line="41" PREFIX:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifndef PREFIX:line="42" PREFIX:column="1">#<cpp:directive PREFIX:line="42" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="42" PREFIX:column="9">sbi</name></cpp:ifndef>
<cpp:define PREFIX:line="43" PREFIX:column="1">#<cpp:directive PREFIX:line="43" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="43" PREFIX:column="9">sbi</name><parameter_list PREFIX:line="43" PREFIX:column="12">(<param><type><name PREFIX:line="43" PREFIX:column="13">sfr</name></type></param>, <param><type><name PREFIX:line="43" PREFIX:column="18">bit</name></type></param>)</parameter_list></cpp:macro> <cpp:value PREFIX:line="43" PREFIX:column="23">(_SFR_BYTE(sfr) |= _BV(bit))</cpp:value></cpp:define>
<cpp:endif PREFIX:line="44" PREFIX:column="1">#<cpp:directive PREFIX:line="44" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:define PREFIX:line="46" PREFIX:column="1">#<cpp:directive PREFIX:line="46" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="46" PREFIX:column="9">EXTERNAL_INT_0</name></cpp:macro> <cpp:value PREFIX:line="46" PREFIX:column="24">0</cpp:value></cpp:define>
<cpp:define PREFIX:line="47" PREFIX:column="1">#<cpp:directive PREFIX:line="47" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="47" PREFIX:column="9">EXTERNAL_INT_1</name></cpp:macro> <cpp:value PREFIX:line="47" PREFIX:column="24">1</cpp:value></cpp:define>
<cpp:define PREFIX:line="48" PREFIX:column="1">#<cpp:directive PREFIX:line="48" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="48" PREFIX:column="9">EXTERNAL_INT_2</name></cpp:macro> <cpp:value PREFIX:line="48" PREFIX:column="24">2</cpp:value></cpp:define>
<cpp:define PREFIX:line="49" PREFIX:column="1">#<cpp:directive PREFIX:line="49" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="49" PREFIX:column="9">EXTERNAL_INT_3</name></cpp:macro> <cpp:value PREFIX:line="49" PREFIX:column="24">3</cpp:value></cpp:define>
<cpp:define PREFIX:line="50" PREFIX:column="1">#<cpp:directive PREFIX:line="50" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="50" PREFIX:column="9">EXTERNAL_INT_4</name></cpp:macro> <cpp:value PREFIX:line="50" PREFIX:column="24">4</cpp:value></cpp:define>
<cpp:define PREFIX:line="51" PREFIX:column="1">#<cpp:directive PREFIX:line="51" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="51" PREFIX:column="9">EXTERNAL_INT_5</name></cpp:macro> <cpp:value PREFIX:line="51" PREFIX:column="24">5</cpp:value></cpp:define>
<cpp:define PREFIX:line="52" PREFIX:column="1">#<cpp:directive PREFIX:line="52" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="52" PREFIX:column="9">EXTERNAL_INT_6</name></cpp:macro> <cpp:value PREFIX:line="52" PREFIX:column="24">6</cpp:value></cpp:define>
<cpp:define PREFIX:line="53" PREFIX:column="1">#<cpp:directive PREFIX:line="53" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="53" PREFIX:column="9">EXTERNAL_INT_7</name></cpp:macro> <cpp:value PREFIX:line="53" PREFIX:column="24">7</cpp:value></cpp:define>

<cpp:if PREFIX:line="55" PREFIX:column="1">#<cpp:directive PREFIX:line="55" PREFIX:column="2">if</cpp:directive> <expr><call><name PREFIX:line="55" PREFIX:column="5">defined</name><argument_list PREFIX:line="55" PREFIX:column="12">(<argument><expr><name PREFIX:line="55" PREFIX:column="13">__AVR_ATmega1280__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="55" PREFIX:column="36">defined</name><argument_list PREFIX:line="55" PREFIX:column="43">(<argument><expr><name PREFIX:line="55" PREFIX:column="44">__AVR_ATmega2560__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define PREFIX:line="56" PREFIX:column="1">#<cpp:directive PREFIX:line="56" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="56" PREFIX:column="9">EXTERNAL_NUM_INTERRUPTS</name></cpp:macro> <cpp:value PREFIX:line="56" PREFIX:column="33">8</cpp:value></cpp:define>
<cpp:elif PREFIX:line="57" PREFIX:column="1">#<cpp:directive PREFIX:line="57" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="57" PREFIX:column="7">defined</name><argument_list PREFIX:line="57" PREFIX:column="14">(<argument><expr><name PREFIX:line="57" PREFIX:column="15">__AVR_ATmega1284P__</name></expr></argument>)</argument_list></call> || <call><name PREFIX:line="57" PREFIX:column="39">defined</name><argument_list PREFIX:line="57" PREFIX:column="46">(<argument><expr><name PREFIX:line="57" PREFIX:column="47">__AVR_ATmega644P__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="58" PREFIX:column="1">#<cpp:directive PREFIX:line="58" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="58" PREFIX:column="9">EXTERNAL_NUM_INTERRUPTS</name></cpp:macro> <cpp:value PREFIX:line="58" PREFIX:column="33">3</cpp:value></cpp:define>
<cpp:elif PREFIX:line="59" PREFIX:column="1">#<cpp:directive PREFIX:line="59" PREFIX:column="2">elif</cpp:directive> <expr><call><name PREFIX:line="59" PREFIX:column="7">defined</name><argument_list PREFIX:line="59" PREFIX:column="14">(<argument><expr><name PREFIX:line="59" PREFIX:column="15">__AVR_ATmega32U4__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define PREFIX:line="60" PREFIX:column="1">#<cpp:directive PREFIX:line="60" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="60" PREFIX:column="9">EXTERNAL_NUM_INTERRUPTS</name></cpp:macro> <cpp:value PREFIX:line="60" PREFIX:column="33">4</cpp:value></cpp:define>
<cpp:else PREFIX:line="61" PREFIX:column="1">#<cpp:directive PREFIX:line="61" PREFIX:column="2">else</cpp:directive></cpp:else>
<cpp:define PREFIX:line="62" PREFIX:column="1">#<cpp:directive PREFIX:line="62" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="62" PREFIX:column="9">EXTERNAL_NUM_INTERRUPTS</name></cpp:macro> <cpp:value PREFIX:line="62" PREFIX:column="33">2</cpp:value></cpp:define>
<cpp:endif PREFIX:line="63" PREFIX:column="1">#<cpp:directive PREFIX:line="63" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<typedef PREFIX:line="65" PREFIX:column="1">typedef <function_decl><type><name PREFIX:line="65" PREFIX:column="9">void</name></type> (*<name PREFIX:line="65" PREFIX:column="16">voidFuncPtr</name>)<parameter_list PREFIX:line="65" PREFIX:column="28">(<param><decl><type><name PREFIX:line="65" PREFIX:column="29">void</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<cpp:ifdef PREFIX:line="67" PREFIX:column="1">#<cpp:directive PREFIX:line="67" PREFIX:column="2">ifdef</cpp:directive> <name PREFIX:line="67" PREFIX:column="8">__cplusplus</name></cpp:ifdef>

<cpp:endif PREFIX:line="69" PREFIX:column="1">#<cpp:directive PREFIX:line="69" PREFIX:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif PREFIX:line="71" PREFIX:column="1">#<cpp:directive PREFIX:line="71" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
