<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:PREFIX="http://www.sdml.info/srcML/position" language="C++" filename=" /Users/shuruiz/Work/tmpXMLFile//Users/shuruiz/Work/MarlinRepo/IfdefGroundTruth/Marlin/ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/cores/brainwave/Print.h.cpp" PREFIX:tabs="8"><comment type="block" PREFIX:line="1" PREFIX:column="1">/*
  Print.h - Base class that provides print() and println()
  Copyright (c) 2008 David A. Mellis.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/</comment>

<cpp:ifndef PREFIX:line="20" PREFIX:column="1">#<cpp:directive PREFIX:line="20" PREFIX:column="2">ifndef</cpp:directive> <name PREFIX:line="20" PREFIX:column="9">Print_h</name></cpp:ifndef>
<cpp:define PREFIX:line="21" PREFIX:column="1">#<cpp:directive PREFIX:line="21" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="21" PREFIX:column="9">Print_h</name></cpp:macro></cpp:define>

<cpp:include PREFIX:line="23" PREFIX:column="1">#<cpp:directive PREFIX:line="23" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="23" PREFIX:column="10">&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include PREFIX:line="24" PREFIX:column="1">#<cpp:directive PREFIX:line="24" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="24" PREFIX:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include> <comment type="line" PREFIX:line="24" PREFIX:column="20">// for size_t</comment>

<cpp:include PREFIX:line="26" PREFIX:column="1">#<cpp:directive PREFIX:line="26" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="26" PREFIX:column="10">"WString.h"</cpp:file></cpp:include>
<cpp:include PREFIX:line="27" PREFIX:column="1">#<cpp:directive PREFIX:line="27" PREFIX:column="2">include</cpp:directive> <cpp:file PREFIX:line="27" PREFIX:column="10">"Printable.h"</cpp:file></cpp:include>

<cpp:define PREFIX:line="29" PREFIX:column="1">#<cpp:directive PREFIX:line="29" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="29" PREFIX:column="9">DEC</name></cpp:macro> <cpp:value PREFIX:line="29" PREFIX:column="13">10</cpp:value></cpp:define>
<cpp:define PREFIX:line="30" PREFIX:column="1">#<cpp:directive PREFIX:line="30" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="30" PREFIX:column="9">HEX</name></cpp:macro> <cpp:value PREFIX:line="30" PREFIX:column="13">16</cpp:value></cpp:define>
<cpp:define PREFIX:line="31" PREFIX:column="1">#<cpp:directive PREFIX:line="31" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="31" PREFIX:column="9">OCT</name></cpp:macro> <cpp:value PREFIX:line="31" PREFIX:column="13">8</cpp:value></cpp:define>
<cpp:define PREFIX:line="32" PREFIX:column="1">#<cpp:directive PREFIX:line="32" PREFIX:column="2">define</cpp:directive> <cpp:macro><name PREFIX:line="32" PREFIX:column="9">BIN</name></cpp:macro> <cpp:value PREFIX:line="32" PREFIX:column="13">2</cpp:value></cpp:define>

<class PREFIX:line="34" PREFIX:column="1">class <name PREFIX:line="34" PREFIX:column="7">Print</name>
<block PREFIX:line="35" PREFIX:column="1">{<private type="default" PREFIX:line="35" PREFIX:column="2">
  </private><private PREFIX:line="36" PREFIX:column="3">private:
    <decl_stmt><decl><type><name PREFIX:line="37" PREFIX:column="5">int</name></type> <name PREFIX:line="37" PREFIX:column="9">write_error</name></decl>;</decl_stmt>
    <function_decl><type><name PREFIX:line="38" PREFIX:column="5">size_t</name></type> <name PREFIX:line="38" PREFIX:column="12">printNumber</name><parameter_list PREFIX:line="38" PREFIX:column="23">(<param><decl><type><name PREFIX:line="38" PREFIX:column="24">unknowntype</name></type> <name PREFIX:line="38" PREFIX:column="36">long</name></decl></param>, <param><decl><type><name PREFIX:line="38" PREFIX:column="42">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="39" PREFIX:column="5">size_t</name></type> <name PREFIX:line="39" PREFIX:column="12">printFloat</name><parameter_list PREFIX:line="39" PREFIX:column="22">(<param><decl><type><name PREFIX:line="39" PREFIX:column="23">double</name></type></decl></param>, <param><decl><type><name PREFIX:line="39" PREFIX:column="31">uint8_t</name></type></decl></param>)</parameter_list>;</function_decl>
  </private><protected PREFIX:line="40" PREFIX:column="3">protected:
    <function><type><name PREFIX:line="41" PREFIX:column="5">void</name></type> <name PREFIX:line="41" PREFIX:column="10">setWriteError</name><parameter_list PREFIX:line="41" PREFIX:column="23">(<param><decl><type><name PREFIX:line="41" PREFIX:column="24">int</name></type> <name PREFIX:line="41" PREFIX:column="28">err</name> <init PREFIX:line="41" PREFIX:column="32">= <expr PREFIX:line="41" PREFIX:column="34">1</expr></init></decl></param>)</parameter_list> <block PREFIX:line="41" PREFIX:column="37">{ <expr_stmt><expr><name PREFIX:line="41" PREFIX:column="39">write_error</name> = <name PREFIX:line="41" PREFIX:column="53">err</name></expr>;</expr_stmt> }</block></function>
  </protected><public PREFIX:line="42" PREFIX:column="3">public:
    <constructor><name PREFIX:line="43" PREFIX:column="5">Print</name><parameter_list PREFIX:line="43" PREFIX:column="10">()</parameter_list> <member_list PREFIX:line="43" PREFIX:column="13">: <call><name PREFIX:line="43" PREFIX:column="15">write_error</name><argument_list PREFIX:line="43" PREFIX:column="26">(<argument><expr PREFIX:line="43" PREFIX:column="27">0</expr></argument>)</argument_list></call> </member_list><block PREFIX:line="43" PREFIX:column="30">{}</block></constructor>
  
    <function><type><name PREFIX:line="45" PREFIX:column="5">int</name></type> <name PREFIX:line="45" PREFIX:column="9">getWriteError</name><parameter_list PREFIX:line="45" PREFIX:column="22">()</parameter_list> <block PREFIX:line="45" PREFIX:column="25">{ <return PREFIX:line="45" PREFIX:column="27">return <expr><name PREFIX:line="45" PREFIX:column="34">write_error</name></expr>;</return> }</block></function>
    <function><type><name PREFIX:line="46" PREFIX:column="5">void</name></type> <name PREFIX:line="46" PREFIX:column="10">clearWriteError</name><parameter_list PREFIX:line="46" PREFIX:column="25">()</parameter_list> <block PREFIX:line="46" PREFIX:column="28">{ <expr_stmt><expr><call><name PREFIX:line="46" PREFIX:column="30">setWriteError</name><argument_list PREFIX:line="46" PREFIX:column="43">(<argument><expr PREFIX:line="46" PREFIX:column="44">0</expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  
    <function_decl><type><specifier PREFIX:line="48" PREFIX:column="5">virtual</specifier> <name PREFIX:line="48" PREFIX:column="13">size_t</name></type> <name PREFIX:line="48" PREFIX:column="20">write</name><parameter_list PREFIX:line="48" PREFIX:column="25">(<param><decl><type><name PREFIX:line="48" PREFIX:column="26">uint8_t</name></type></decl></param>)</parameter_list> = 0;</function_decl>
    <function><type><name PREFIX:line="49" PREFIX:column="5">size_t</name></type> <name PREFIX:line="49" PREFIX:column="12">write</name><parameter_list PREFIX:line="49" PREFIX:column="17">( <param><decl><type><name PREFIX:line="49" PREFIX:column="19">char</name> *</type><name PREFIX:line="49" PREFIX:column="25">str</name></decl></param>)</parameter_list> <block PREFIX:line="49" PREFIX:column="30">{ <return PREFIX:line="49" PREFIX:column="32">return <expr><call><name PREFIX:line="49" PREFIX:column="39">write</name><argument_list PREFIX:line="49" PREFIX:column="44">(<argument><expr PREFIX:line="49" PREFIX:column="45">( <name PREFIX:line="49" PREFIX:column="47">uint8_t</name> *)<name PREFIX:line="49" PREFIX:column="57">str</name></expr></argument>, <argument><expr><call><name PREFIX:line="49" PREFIX:column="62">strlen</name><argument_list PREFIX:line="49" PREFIX:column="68">(<argument><expr><name PREFIX:line="49" PREFIX:column="69">str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function_decl><type><specifier PREFIX:line="50" PREFIX:column="5">virtual</specifier> <name PREFIX:line="50" PREFIX:column="13">size_t</name></type> <name PREFIX:line="50" PREFIX:column="20">write</name><parameter_list PREFIX:line="50" PREFIX:column="25">( <param><decl><type><name PREFIX:line="50" PREFIX:column="27">uint8_t</name> *</type><name PREFIX:line="50" PREFIX:column="36">buffer</name></decl></param>, <param><decl><type><name PREFIX:line="50" PREFIX:column="44">size_t</name></type> <name PREFIX:line="50" PREFIX:column="51">size</name></decl></param>)</parameter_list>;</function_decl>
    
    <function_decl><type><name PREFIX:line="52" PREFIX:column="5">size_t</name></type> <name PREFIX:line="52" PREFIX:column="12">print</name><parameter_list PREFIX:line="52" PREFIX:column="17">( <param><decl><type><name PREFIX:line="52" PREFIX:column="19">__FlashStringHelper</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="53" PREFIX:column="5">size_t</name></type> <name PREFIX:line="53" PREFIX:column="12">print</name><parameter_list PREFIX:line="53" PREFIX:column="17">( <param><decl><type><name PREFIX:line="53" PREFIX:column="19">String</name> &amp;</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="54" PREFIX:column="5">size_t</name></type> <name PREFIX:line="54" PREFIX:column="12">print</name><parameter_list PREFIX:line="54" PREFIX:column="17">( <param><decl><type><name><name PREFIX:line="54" PREFIX:column="19">char</name><index PREFIX:line="54" PREFIX:column="23">[]</index></name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="55" PREFIX:column="5">size_t</name></type> <name PREFIX:line="55" PREFIX:column="12">print</name><parameter_list PREFIX:line="55" PREFIX:column="17">(<param><decl><type><name PREFIX:line="55" PREFIX:column="18">char</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="56" PREFIX:column="5">size_t</name></type> <name PREFIX:line="56" PREFIX:column="12">print</name><parameter_list PREFIX:line="56" PREFIX:column="17">(<param><decl><type><name PREFIX:line="56" PREFIX:column="18">unknowntype</name></type> <name PREFIX:line="56" PREFIX:column="30">char</name></decl></param>, <param><decl><type><name PREFIX:line="56" PREFIX:column="36">int</name></type> <init PREFIX:line="56" PREFIX:column="40">= <expr><name PREFIX:line="56" PREFIX:column="42">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="57" PREFIX:column="5">size_t</name></type> <name PREFIX:line="57" PREFIX:column="12">print</name><parameter_list PREFIX:line="57" PREFIX:column="17">(<param><decl><type><name PREFIX:line="57" PREFIX:column="18">int</name></type></decl></param>, <param><decl><type><name PREFIX:line="57" PREFIX:column="23">int</name></type> <init PREFIX:line="57" PREFIX:column="27">= <expr><name PREFIX:line="57" PREFIX:column="29">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="58" PREFIX:column="5">size_t</name></type> <name PREFIX:line="58" PREFIX:column="12">print</name><parameter_list PREFIX:line="58" PREFIX:column="17">(<param><decl><type><name PREFIX:line="58" PREFIX:column="18">unknowntype</name></type> <name PREFIX:line="58" PREFIX:column="30">int</name></decl></param>, <param><decl><type><name PREFIX:line="58" PREFIX:column="35">int</name></type> <init PREFIX:line="58" PREFIX:column="39">= <expr><name PREFIX:line="58" PREFIX:column="41">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="59" PREFIX:column="5">size_t</name></type> <name PREFIX:line="59" PREFIX:column="12">print</name><parameter_list PREFIX:line="59" PREFIX:column="17">(<param><decl><type><name PREFIX:line="59" PREFIX:column="18">long</name></type></decl></param>, <param><decl><type><name PREFIX:line="59" PREFIX:column="24">int</name></type> <init PREFIX:line="59" PREFIX:column="28">= <expr><name PREFIX:line="59" PREFIX:column="30">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="60" PREFIX:column="5">size_t</name></type> <name PREFIX:line="60" PREFIX:column="12">print</name><parameter_list PREFIX:line="60" PREFIX:column="17">(<param><decl><type><name PREFIX:line="60" PREFIX:column="18">unknowntype</name></type> <name PREFIX:line="60" PREFIX:column="30">long</name></decl></param>, <param><decl><type><name PREFIX:line="60" PREFIX:column="36">int</name></type> <init PREFIX:line="60" PREFIX:column="40">= <expr><name PREFIX:line="60" PREFIX:column="42">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="61" PREFIX:column="5">size_t</name></type> <name PREFIX:line="61" PREFIX:column="12">print</name><parameter_list PREFIX:line="61" PREFIX:column="17">(<param><decl><type><name PREFIX:line="61" PREFIX:column="18">double</name></type></decl></param>, <param><decl><type><name PREFIX:line="61" PREFIX:column="26">int</name></type> <init PREFIX:line="61" PREFIX:column="30">= <expr PREFIX:line="61" PREFIX:column="32">2</expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="62" PREFIX:column="5">size_t</name></type> <name PREFIX:line="62" PREFIX:column="12">print</name><parameter_list PREFIX:line="62" PREFIX:column="17">( <param><decl><type><name PREFIX:line="62" PREFIX:column="19">Printable</name>&amp;</type></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name PREFIX:line="64" PREFIX:column="5">size_t</name></type> <name PREFIX:line="64" PREFIX:column="12">println</name><parameter_list PREFIX:line="64" PREFIX:column="19">( <param><decl><type><name PREFIX:line="64" PREFIX:column="21">__FlashStringHelper</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="65" PREFIX:column="5">size_t</name></type> <name PREFIX:line="65" PREFIX:column="12">println</name><parameter_list PREFIX:line="65" PREFIX:column="19">( <param><decl><type><name PREFIX:line="65" PREFIX:column="21">String</name> &amp;</type><name PREFIX:line="65" PREFIX:column="29">s</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="66" PREFIX:column="5">size_t</name></type> <name PREFIX:line="66" PREFIX:column="12">println</name><parameter_list PREFIX:line="66" PREFIX:column="19">( <param><decl><type><name><name PREFIX:line="66" PREFIX:column="21">char</name><index PREFIX:line="66" PREFIX:column="25">[]</index></name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="67" PREFIX:column="5">size_t</name></type> <name PREFIX:line="67" PREFIX:column="12">println</name><parameter_list PREFIX:line="67" PREFIX:column="19">(<param><decl><type><name PREFIX:line="67" PREFIX:column="20">char</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="68" PREFIX:column="5">size_t</name></type> <name PREFIX:line="68" PREFIX:column="12">println</name><parameter_list PREFIX:line="68" PREFIX:column="19">(<param><decl><type><name PREFIX:line="68" PREFIX:column="20">unknowntype</name></type> <name PREFIX:line="68" PREFIX:column="32">char</name></decl></param>, <param><decl><type><name PREFIX:line="68" PREFIX:column="38">int</name></type> <init PREFIX:line="68" PREFIX:column="42">= <expr><name PREFIX:line="68" PREFIX:column="44">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="69" PREFIX:column="5">size_t</name></type> <name PREFIX:line="69" PREFIX:column="12">println</name><parameter_list PREFIX:line="69" PREFIX:column="19">(<param><decl><type><name PREFIX:line="69" PREFIX:column="20">int</name></type></decl></param>, <param><decl><type><name PREFIX:line="69" PREFIX:column="25">int</name></type> <init PREFIX:line="69" PREFIX:column="29">= <expr><name PREFIX:line="69" PREFIX:column="31">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="70" PREFIX:column="5">size_t</name></type> <name PREFIX:line="70" PREFIX:column="12">println</name><parameter_list PREFIX:line="70" PREFIX:column="19">(<param><decl><type><name PREFIX:line="70" PREFIX:column="20">unknowntype</name></type> <name PREFIX:line="70" PREFIX:column="32">int</name></decl></param>, <param><decl><type><name PREFIX:line="70" PREFIX:column="37">int</name></type> <init PREFIX:line="70" PREFIX:column="41">= <expr><name PREFIX:line="70" PREFIX:column="43">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="71" PREFIX:column="5">size_t</name></type> <name PREFIX:line="71" PREFIX:column="12">println</name><parameter_list PREFIX:line="71" PREFIX:column="19">(<param><decl><type><name PREFIX:line="71" PREFIX:column="20">long</name></type></decl></param>, <param><decl><type><name PREFIX:line="71" PREFIX:column="26">int</name></type> <init PREFIX:line="71" PREFIX:column="30">= <expr><name PREFIX:line="71" PREFIX:column="32">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="72" PREFIX:column="5">size_t</name></type> <name PREFIX:line="72" PREFIX:column="12">println</name><parameter_list PREFIX:line="72" PREFIX:column="19">(<param><decl><type><name PREFIX:line="72" PREFIX:column="20">unknowntype</name></type> <name PREFIX:line="72" PREFIX:column="32">long</name></decl></param>, <param><decl><type><name PREFIX:line="72" PREFIX:column="38">int</name></type> <init PREFIX:line="72" PREFIX:column="42">= <expr><name PREFIX:line="72" PREFIX:column="44">DEC</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="73" PREFIX:column="5">size_t</name></type> <name PREFIX:line="73" PREFIX:column="12">println</name><parameter_list PREFIX:line="73" PREFIX:column="19">(<param><decl><type><name PREFIX:line="73" PREFIX:column="20">double</name></type></decl></param>, <param><decl><type><name PREFIX:line="73" PREFIX:column="28">int</name></type> <init PREFIX:line="73" PREFIX:column="32">= <expr PREFIX:line="73" PREFIX:column="34">2</expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="74" PREFIX:column="5">size_t</name></type> <name PREFIX:line="74" PREFIX:column="12">println</name><parameter_list PREFIX:line="74" PREFIX:column="19">( <param><decl><type><name PREFIX:line="74" PREFIX:column="21">Printable</name>&amp;</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name PREFIX:line="75" PREFIX:column="5">size_t</name></type> <name PREFIX:line="75" PREFIX:column="12">println</name><parameter_list PREFIX:line="75" PREFIX:column="19">(<param><decl><type><name PREFIX:line="75" PREFIX:column="20">void</name></type></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<cpp:endif PREFIX:line="78" PREFIX:column="1">#<cpp:directive PREFIX:line="78" PREFIX:column="2">endif</cpp:directive></cpp:endif>
</unit>
